{
  "AdministratorAccess": {
    "policy": {
      "PolicyName": "AdministratorAccess",
      "PolicyId": "ANPAIWMBCKSKIEE64ZLYK",
      "Arn": "arn:aws:iam::aws:policy/AdministratorAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 17,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS services and resources.",
      "CreateDate": "2015-02-06T18:39:46.000Z",
      "UpdateDate": "2015-02-06T18:39:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "PowerUserAccess": {
    "policy": {
      "PolicyName": "PowerUserAccess",
      "PolicyId": "ANPAJYRXTHIB4FOVS3ZXS",
      "Arn": "arn:aws:iam::aws:policy/PowerUserAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 2,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS services and resources, but does not allow management of Users and groups.",
      "CreateDate": "2015-02-06T18:39:47.000Z",
      "UpdateDate": "2023-07-06T22:04:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "NotAction": [
          "iam:*",
          "organizations:*",
          "account:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole",
          "iam:DeleteServiceLinkedRole",
          "iam:ListRoles",
          "organizations:DescribeOrganization",
          "account:ListRegions",
          "account:GetAccountInformation"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloudFormationReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCloudFormationReadOnlyAccess",
      "PolicyId": "ANPAJWVBEE4I2POWLODLW",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS CloudFormation via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:39:49.000Z",
      "UpdateDate": "2019-11-13T17:40:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:Describe*",
          "cloudformation:EstimateTemplateCost",
          "cloudformation:Get*",
          "cloudformation:List*",
          "cloudformation:ValidateTemplate",
          "cloudformation:Detect*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudFrontFullAccess": {
    "policy": {
      "PolicyName": "CloudFrontFullAccess",
      "PolicyId": "ANPAIPRV52SH6HDCCFY6U",
      "Arn": "arn:aws:iam::aws:policy/CloudFrontFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the CloudFront console plus the ability to list Amazon S3 buckets via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:39:50.000Z",
      "UpdateDate": "2024-01-04T16:56:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "cfflistbuckets",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "cffullaccess",
        "Action": [
          "acm:ListCertificates",
          "cloudfront:*",
          "cloudfront-keyvaluestore:*",
          "iam:ListServerCertificates",
          "waf:ListWebACLs",
          "waf:GetWebACL",
          "wafv2:ListWebACLs",
          "wafv2:GetWebACL",
          "kinesis:ListStreams"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "cffdescribestream",
        "Action": [
          "kinesis:DescribeStream"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:kinesis:*:*:*"
        ]
      },
      {
        "Sid": "cfflistroles",
        "Action": [
          "iam:ListRoles"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:*"
        ]
      }
    ]
  },
  "AWSCloudHSMFullAccess": {
    "policy": {
      "PolicyName": "AWSCloudHSMFullAccess",
      "PolicyId": "ANPAIMBQYQZM7F63DA2UU",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudHSMFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all CloudHSM resources.",
      "CreateDate": "2015-02-06T18:39:51.000Z",
      "UpdateDate": "2015-02-06T18:39:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudhsm:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ReadOnlyAccess": {
    "policy": {
      "PolicyName": "ReadOnlyAccess",
      "PolicyId": "ANPAILL3HVNFSB6DCOWYQ",
      "Arn": "arn:aws:iam::aws:policy/ReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v111",
      "AttachmentCount": 4,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to AWS services and resources.",
      "CreateDate": "2015-02-06T18:39:48.000Z",
      "UpdateDate": "2024-02-05T15:00:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ReadOnlyActions",
        "Effect": "Allow",
        "Action": [
          "a4b:Get*",
          "a4b:List*",
          "a4b:Search*",
          "access-analyzer:GetAccessPreview",
          "access-analyzer:GetAnalyzedResource",
          "access-analyzer:GetAnalyzer",
          "access-analyzer:GetArchiveRule",
          "access-analyzer:GetFinding",
          "access-analyzer:GetGeneratedPolicy",
          "access-analyzer:ListAccessPreviewFindings",
          "access-analyzer:ListAccessPreviews",
          "access-analyzer:ListAnalyzedResources",
          "access-analyzer:ListAnalyzers",
          "access-analyzer:ListArchiveRules",
          "access-analyzer:ListFindings",
          "access-analyzer:ListPolicyGenerations",
          "access-analyzer:ListTagsForResource",
          "access-analyzer:ValidatePolicy",
          "account:GetAccountInformation",
          "account:GetAlternateContact",
          "account:GetChallengeQuestions",
          "account:GetContactInformation",
          "account:GetRegionOptStatus",
          "account:ListRegions",
          "acm-pca:Describe*",
          "acm-pca:Get*",
          "acm-pca:List*",
          "acm:Describe*",
          "acm:Get*",
          "acm:List*",
          "airflow:ListEnvironments",
          "airflow:ListTagsForResource",
          "amplify:GetApp",
          "amplify:GetBranch",
          "amplify:GetDomainAssociation",
          "amplify:GetJob",
          "amplify:ListApps",
          "amplify:ListBranches",
          "amplify:ListDomainAssociations",
          "amplify:ListJobs",
          "aoss:BatchGetCollection",
          "aoss:BatchGetVpcEndpoint",
          "aoss:GetAccessPolicy",
          "aoss:GetAccountSettings",
          "aoss:GetPoliciesStats",
          "aoss:GetSecurityConfig",
          "aoss:GetSecurityPolicy",
          "aoss:ListAccessPolicies",
          "aoss:ListCollections",
          "aoss:ListSecurityConfigs",
          "aoss:ListSecurityPolicies",
          "aoss:ListTagsForResource",
          "aoss:ListVpcEndpoints",
          "apigateway:GET",
          "appconfig:GetApplication",
          "appconfig:GetConfiguration",
          "appconfig:GetConfigurationProfile",
          "appconfig:GetDeployment",
          "appconfig:GetDeploymentStrategy",
          "appconfig:GetEnvironment",
          "appconfig:GetHostedConfigurationVersion",
          "appconfig:ListApplications",
          "appconfig:ListConfigurationProfiles",
          "appconfig:ListDeployments",
          "appconfig:ListDeploymentStrategies",
          "appconfig:ListEnvironments",
          "appconfig:ListHostedConfigurationVersions",
          "appconfig:ListTagsForResource",
          "appfabric:GetAppAuthorization",
          "appfabric:GetAppBundle",
          "appfabric:GetIngestion",
          "appfabric:GetIngestionDestination",
          "appfabric:ListAppAuthorizations",
          "appfabric:ListAppBundles",
          "appfabric:ListIngestionDestinations",
          "appfabric:ListIngestions",
          "appfabric:ListTagsForResource",
          "appflow:DescribeConnector",
          "appflow:DescribeConnectorEntity",
          "appflow:DescribeConnectorFields",
          "appflow:DescribeConnectorProfiles",
          "appflow:DescribeConnectors",
          "appflow:DescribeFlow",
          "appflow:DescribeFlowExecution",
          "appflow:DescribeFlowExecutionRecords",
          "appflow:DescribeFlows",
          "appflow:ListConnectorEntities",
          "appflow:ListConnectorFields",
          "appflow:ListConnectors",
          "appflow:ListFlows",
          "appflow:ListTagsForResource",
          "application-autoscaling:Describe*",
          "application-autoscaling:ListTagsForResource",
          "applicationinsights:Describe*",
          "applicationinsights:List*",
          "appmesh:Describe*",
          "appmesh:List*",
          "apprunner:DescribeAutoScalingConfiguration",
          "apprunner:DescribeCustomDomains",
          "apprunner:DescribeObservabilityConfiguration",
          "apprunner:DescribeService",
          "apprunner:DescribeVpcConnector",
          "apprunner:DescribeVpcIngressConnection",
          "apprunner:ListAutoScalingConfigurations",
          "apprunner:ListConnections",
          "apprunner:ListObservabilityConfigurations",
          "apprunner:ListOperations",
          "apprunner:ListServices",
          "apprunner:ListTagsForResource",
          "apprunner:ListVpcConnectors",
          "apprunner:ListVpcIngressConnections",
          "appstream:Describe*",
          "appstream:List*",
          "appsync:Get*",
          "appsync:List*",
          "aps:DescribeAlertManagerDefinition",
          "aps:DescribeLoggingConfiguration",
          "aps:DescribeRuleGroupsNamespace",
          "aps:DescribeWorkspace",
          "aps:GetAlertManagerSilence",
          "aps:GetAlertManagerStatus",
          "aps:GetLabels",
          "aps:GetMetricMetadata",
          "aps:GetSeries",
          "aps:ListAlertManagerAlertGroups",
          "aps:ListAlertManagerAlerts",
          "aps:ListAlertManagerReceivers",
          "aps:ListAlertManagerSilences",
          "aps:ListAlerts",
          "aps:ListRuleGroupsNamespaces",
          "aps:ListRules",
          "aps:ListTagsForResource",
          "aps:ListWorkspaces",
          "aps:QueryMetrics",
          "arc-zonal-shift:GetManagedResource",
          "arc-zonal-shift:ListAutoshifts",
          "arc-zonal-shift:ListManagedResources",
          "arc-zonal-shift:ListZonalShifts",
          "artifact:GetReport",
          "artifact:GetReportMetadata",
          "artifact:GetTermForReport",
          "artifact:ListReports",
          "athena:Batch*",
          "athena:Get*",
          "athena:List*",
          "auditmanager:GetAccountStatus",
          "auditmanager:GetAssessment",
          "auditmanager:GetAssessmentFramework",
          "auditmanager:GetAssessmentReportUrl",
          "auditmanager:GetChangeLogs",
          "auditmanager:GetControl",
          "auditmanager:GetDelegations",
          "auditmanager:GetEvidence",
          "auditmanager:GetEvidenceByEvidenceFolder",
          "auditmanager:GetEvidenceFolder",
          "auditmanager:GetEvidenceFoldersByAssessment",
          "auditmanager:GetEvidenceFoldersByAssessmentControl",
          "auditmanager:GetOrganizationAdminAccount",
          "auditmanager:GetServicesInScope",
          "auditmanager:GetSettings",
          "auditmanager:ListAssessmentFrameworks",
          "auditmanager:ListAssessmentReports",
          "auditmanager:ListAssessments",
          "auditmanager:ListControls",
          "auditmanager:ListKeywordsForDataSource",
          "auditmanager:ListNotifications",
          "auditmanager:ListTagsForResource",
          "auditmanager:ValidateAssessmentReportIntegrity",
          "autoscaling-plans:Describe*",
          "autoscaling-plans:GetScalingPlanResourceForecastData",
          "autoscaling:Describe*",
          "autoscaling:GetPredictiveScalingForecast",
          "aws-portal:View*",
          "backup-gateway:GetBandwidthRateLimitSchedule",
          "backup-gateway:GetGateway",
          "backup-gateway:GetHypervisor",
          "backup-gateway:GetHypervisorPropertyMappings",
          "backup-gateway:GetVirtualMachine",
          "backup-gateway:ListGateways",
          "backup-gateway:ListHypervisors",
          "backup-gateway:ListTagsForResource",
          "backup-gateway:ListVirtualMachines",
          "backup:Describe*",
          "backup:Get*",
          "backup:List*",
          "batch:Describe*",
          "batch:List*",
          "bedrock:GetAgent",
          "bedrock:GetAgentActionGroup",
          "bedrock:GetAgentAlias",
          "bedrock:GetAgentKnowledgeBase",
          "bedrock:GetAgentVersion",
          "bedrock:GetCustomModel",
          "bedrock:GetDataSource",
          "bedrock:GetFoundationModel",
          "bedrock:GetFoundationModelAvailability",
          "bedrock:GetIngestionJob",
          "bedrock:GetKnowledgeBase",
          "bedrock:GetModelCustomizationJob",
          "bedrock:GetModelInvocationLoggingConfiguration",
          "bedrock:GetProvisionedModelThroughput",
          "bedrock:GetUseCaseForModelAccess",
          "bedrock:ListAgentActionGroups",
          "bedrock:ListAgentAliases",
          "bedrock:ListAgentKnowledgeBases",
          "bedrock:ListAgents",
          "bedrock:ListAgentVersions",
          "bedrock:ListCustomModels",
          "bedrock:ListDataSources",
          "bedrock:ListFoundationModelAgreementOffers",
          "bedrock:ListFoundationModels",
          "bedrock:ListIngestionJobs",
          "bedrock:ListKnowledgeBases",
          "bedrock:ListModelCustomizationJobs",
          "bedrock:ListProvisionedModelThroughputs",
          "billing:GetBillingData",
          "billing:GetBillingDetails",
          "billing:GetBillingNotifications",
          "billing:GetBillingPreferences",
          "billing:GetContractInformation",
          "billing:GetCredits",
          "billing:GetIAMAccessPreference",
          "billing:GetSellerOfRecord",
          "billing:ListBillingViews",
          "billingconductor:GetBillingGroupCostReport",
          "billingconductor:ListAccountAssociations",
          "billingconductor:ListBillingGroupCostReports",
          "billingconductor:ListBillingGroups",
          "billingconductor:ListCustomLineItems",
          "billingconductor:ListCustomLineItemVersions",
          "billingconductor:ListPricingPlans",
          "billingconductor:ListPricingPlansAssociatedWithPricingRule",
          "billingconductor:ListPricingRules",
          "billingconductor:ListPricingRulesAssociatedToPricingPlan",
          "billingconductor:ListResourcesAssociatedToCustomLineItem",
          "billingconductor:ListTagsForResource",
          "braket:GetDevice",
          "braket:GetJob",
          "braket:GetQuantumTask",
          "braket:SearchDevices",
          "braket:SearchJobs",
          "braket:SearchQuantumTasks",
          "budgets:Describe*",
          "budgets:View*",
          "cassandra:Select",
          "ce:DescribeCostCategoryDefinition",
          "ce:DescribeNotificationSubscription",
          "ce:DescribeReport",
          "ce:GetAnomalies",
          "ce:GetAnomalyMonitors",
          "ce:GetAnomalySubscriptions",
          "ce:GetApproximateUsageRecords",
          "ce:GetCostAndUsage",
          "ce:GetCostAndUsageWithResources",
          "ce:GetCostCategories",
          "ce:GetCostForecast",
          "ce:GetDimensionValues",
          "ce:GetPreferences",
          "ce:GetReservationCoverage",
          "ce:GetReservationPurchaseRecommendation",
          "ce:GetReservationUtilization",
          "ce:GetRightsizingRecommendation",
          "ce:GetSavingsPlanPurchaseRecommendationDetails",
          "ce:GetSavingsPlansCoverage",
          "ce:GetSavingsPlansPurchaseRecommendation",
          "ce:GetSavingsPlansUtilization",
          "ce:GetSavingsPlansUtilizationDetails",
          "ce:GetTags",
          "ce:GetUsageForecast",
          "ce:ListCostAllocationTags",
          "ce:ListCostCategoryDefinitions",
          "ce:ListSavingsPlansPurchaseRecommendationGeneration",
          "ce:ListTagsForResource",
          "chatbot:Describe*",
          "chatbot:Get*",
          "chatbot:ListMicrosoftTeamsChannelConfigurations",
          "chatbot:ListMicrosoftTeamsConfiguredTeams",
          "chatbot:ListMicrosoftTeamsUserIdentities",
          "chime:Get*",
          "chime:List*",
          "chime:Retrieve*",
          "chime:Search*",
          "chime:Validate*",
          "cleanrooms:BatchGetCollaborationAnalysisTemplate",
          "cleanrooms:BatchGetSchema",
          "cleanrooms:GetAnalysisTemplate",
          "cleanrooms:GetCollaboration",
          "cleanrooms:GetCollaborationAnalysisTemplate",
          "cleanrooms:GetConfiguredTable",
          "cleanrooms:GetConfiguredTableAnalysisRule",
          "cleanrooms:GetConfiguredTableAssociation",
          "cleanrooms:GetMembership",
          "cleanrooms:GetProtectedQuery",
          "cleanrooms:GetSchema",
          "cleanrooms:GetSchemaAnalysisRule",
          "cleanrooms:ListAnalysisTemplates",
          "cleanrooms:ListCollaborationAnalysisTemplates",
          "cleanrooms:ListCollaborations",
          "cleanrooms:ListConfiguredTableAssociations",
          "cleanrooms:ListConfiguredTables",
          "cleanrooms:ListMembers",
          "cleanrooms:ListMemberships",
          "cleanrooms:ListProtectedQueries",
          "cleanrooms:ListSchemas",
          "cleanrooms:ListTagsForResource",
          "cloud9:Describe*",
          "cloud9:List*",
          "clouddirectory:BatchRead",
          "clouddirectory:Get*",
          "clouddirectory:List*",
          "clouddirectory:LookupPolicy",
          "cloudformation:Describe*",
          "cloudformation:Detect*",
          "cloudformation:Estimate*",
          "cloudformation:Get*",
          "cloudformation:List*",
          "cloudformation:ValidateTemplate",
          "cloudfront-keyvaluestore:Describe*",
          "cloudfront-keyvaluestore:Get*",
          "cloudfront-keyvaluestore:List*",
          "cloudfront:Describe*",
          "cloudfront:Get*",
          "cloudfront:List*",
          "cloudhsm:Describe*",
          "cloudhsm:List*",
          "cloudsearch:Describe*",
          "cloudsearch:List*",
          "cloudtrail:Describe*",
          "cloudtrail:Get*",
          "cloudtrail:List*",
          "cloudtrail:LookupEvents",
          "cloudwatch:Describe*",
          "cloudwatch:GenerateQuery",
          "cloudwatch:Get*",
          "cloudwatch:List*",
          "codeartifact:DescribeDomain",
          "codeartifact:DescribePackage",
          "codeartifact:DescribePackageVersion",
          "codeartifact:DescribeRepository",
          "codeartifact:GetAuthorizationToken",
          "codeartifact:GetDomainPermissionsPolicy",
          "codeartifact:GetPackageVersionAsset",
          "codeartifact:GetPackageVersionReadme",
          "codeartifact:GetRepositoryEndpoint",
          "codeartifact:GetRepositoryPermissionsPolicy",
          "codeartifact:ListDomains",
          "codeartifact:ListPackages",
          "codeartifact:ListPackageVersionAssets",
          "codeartifact:ListPackageVersionDependencies",
          "codeartifact:ListPackageVersions",
          "codeartifact:ListRepositories",
          "codeartifact:ListRepositoriesInDomain",
          "codeartifact:ListTagsForResource",
          "codeartifact:ReadFromRepository",
          "codebuild:BatchGet*",
          "codebuild:DescribeCodeCoverages",
          "codebuild:DescribeTestCases",
          "codebuild:List*",
          "codecatalyst:GetBillingAuthorization",
          "codecatalyst:GetConnection",
          "codecatalyst:GetPendingConnection",
          "codecatalyst:ListConnections",
          "codecatalyst:ListIamRolesForConnection",
          "codecatalyst:ListTagsForResource",
          "codecommit:BatchGet*",
          "codecommit:Describe*",
          "codecommit:Get*",
          "codecommit:GitPull",
          "codecommit:List*",
          "codedeploy:BatchGet*",
          "codedeploy:Get*",
          "codedeploy:List*",
          "codeguru-profiler:Describe*",
          "codeguru-profiler:Get*",
          "codeguru-profiler:List*",
          "codeguru-reviewer:Describe*",
          "codeguru-reviewer:Get*",
          "codeguru-reviewer:List*",
          "codepipeline:Get*",
          "codepipeline:List*",
          "codestar-connections:GetConnection",
          "codestar-connections:GetHost",
          "codestar-connections:GetRepositoryLink",
          "codestar-connections:GetRepositorySyncStatus",
          "codestar-connections:GetResourceSyncStatus",
          "codestar-connections:GetSyncConfiguration",
          "codestar-connections:ListConnections",
          "codestar-connections:ListHosts",
          "codestar-connections:ListRepositoryLinks",
          "codestar-connections:ListRepositorySyncDefinitions",
          "codestar-connections:ListSyncConfigurations",
          "codestar-connections:ListTagsForResource",
          "codestar-notifications:describeNotificationRule",
          "codestar-notifications:listEventTypes",
          "codestar-notifications:listNotificationRules",
          "codestar-notifications:listTagsForResource",
          "codestar-notifications:ListTargets",
          "codestar:Describe*",
          "codestar:Get*",
          "codestar:List*",
          "codestar:Verify*",
          "cognito-identity:Describe*",
          "cognito-identity:GetCredentialsForIdentity",
          "cognito-identity:GetIdentityPoolAnalytics",
          "cognito-identity:GetIdentityPoolDailyAnalytics",
          "cognito-identity:GetIdentityPoolRoles",
          "cognito-identity:GetIdentityProviderDailyAnalytics",
          "cognito-identity:GetOpenIdToken",
          "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
          "cognito-identity:List*",
          "cognito-identity:Lookup*",
          "cognito-idp:AdminGet*",
          "cognito-idp:AdminList*",
          "cognito-idp:Describe*",
          "cognito-idp:Get*",
          "cognito-idp:List*",
          "cognito-sync:Describe*",
          "cognito-sync:Get*",
          "cognito-sync:List*",
          "cognito-sync:QueryRecords",
          "comprehend:BatchDetect*",
          "comprehend:Classify*",
          "comprehend:Contains*",
          "comprehend:Describe*",
          "comprehend:Detect*",
          "comprehend:List*",
          "compute-optimizer:DescribeRecommendationExportJobs",
          "compute-optimizer:GetAutoScalingGroupRecommendations",
          "compute-optimizer:GetEBSVolumeRecommendations",
          "compute-optimizer:GetEC2InstanceRecommendations",
          "compute-optimizer:GetEC2RecommendationProjectedMetrics",
          "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
          "compute-optimizer:GetECSServiceRecommendations",
          "compute-optimizer:GetEffectiveRecommendationPreferences",
          "compute-optimizer:GetEnrollmentStatus",
          "compute-optimizer:GetEnrollmentStatusesForOrganization",
          "compute-optimizer:GetLambdaFunctionRecommendations",
          "compute-optimizer:GetLicenseRecommendations",
          "compute-optimizer:GetRecommendationPreferences",
          "compute-optimizer:GetRecommendationSummaries",
          "config:BatchGetAggregateResourceConfig",
          "config:BatchGetResourceConfig",
          "config:Deliver*",
          "config:Describe*",
          "config:Get*",
          "config:List*",
          "config:SelectAggregateResourceConfig",
          "config:SelectResourceConfig",
          "connect:Describe*",
          "connect:GetContactAttributes",
          "connect:GetCurrentMetricData",
          "connect:GetCurrentUserData",
          "connect:GetFederationToken",
          "connect:GetMetricData",
          "connect:GetMetricDataV2",
          "connect:GetTaskTemplate",
          "connect:GetTrafficDistribution",
          "connect:List*",
          "consoleapp:GetDeviceIdentity",
          "consoleapp:ListDeviceIdentities",
          "consolidatedbilling:GetAccountBillingRole",
          "consolidatedbilling:ListLinkedAccounts",
          "cost-optimization-hub:GetPreferences",
          "cost-optimization-hub:GetRecommendation",
          "cost-optimization-hub:ListEnrollmentStatuses",
          "cost-optimization-hub:ListRecommendations",
          "cost-optimization-hub:ListRecommendationSummaries",
          "cur:GetClassicReport",
          "cur:GetClassicReportPreferences",
          "cur:GetUsageReport",
          "customer-verification:GetCustomerVerificationDetails",
          "customer-verification:GetCustomerVerificationEligibility",
          "databrew:DescribeDataset",
          "databrew:DescribeJob",
          "databrew:DescribeJobRun",
          "databrew:DescribeProject",
          "databrew:DescribeRecipe",
          "databrew:DescribeRuleset",
          "databrew:DescribeSchedule",
          "databrew:ListDatasets",
          "databrew:ListJobRuns",
          "databrew:ListJobs",
          "databrew:ListProjects",
          "databrew:ListRecipes",
          "databrew:ListRecipeVersions",
          "databrew:ListRulesets",
          "databrew:ListSchedules",
          "databrew:ListTagsForResource",
          "dataexchange:Get*",
          "dataexchange:List*",
          "datapipeline:Describe*",
          "datapipeline:EvaluateExpression",
          "datapipeline:Get*",
          "datapipeline:List*",
          "datapipeline:QueryObjects",
          "datapipeline:Validate*",
          "datasync:Describe*",
          "datasync:List*",
          "dax:BatchGetItem",
          "dax:Describe*",
          "dax:GetItem",
          "dax:ListTags",
          "dax:Query",
          "dax:Scan",
          "deepcomposer:GetComposition",
          "deepcomposer:GetModel",
          "deepcomposer:GetSampleModel",
          "deepcomposer:ListCompositions",
          "deepcomposer:ListModels",
          "deepcomposer:ListSampleModels",
          "deepcomposer:ListTrainingTopics",
          "detective:BatchGetGraphMemberDatasources",
          "detective:BatchGetMembershipDatasources",
          "detective:Get*",
          "detective:List*",
          "detective:SearchGraph",
          "devicefarm:Get*",
          "devicefarm:List*",
          "devops-guru:DescribeAccountHealth",
          "devops-guru:DescribeAccountOverview",
          "devops-guru:DescribeAnomaly",
          "devops-guru:DescribeEventSourcesConfig",
          "devops-guru:DescribeFeedback",
          "devops-guru:DescribeInsight",
          "devops-guru:DescribeOrganizationHealth",
          "devops-guru:DescribeOrganizationOverview",
          "devops-guru:DescribeOrganizationResourceCollectionHealth",
          "devops-guru:DescribeResourceCollectionHealth",
          "devops-guru:DescribeServiceIntegration",
          "devops-guru:GetCostEstimation",
          "devops-guru:GetResourceCollection",
          "devops-guru:ListAnomaliesForInsight",
          "devops-guru:ListAnomalousLogGroups",
          "devops-guru:ListEvents",
          "devops-guru:ListInsights",
          "devops-guru:ListMonitoredResources",
          "devops-guru:ListNotificationChannels",
          "devops-guru:ListOrganizationInsights",
          "devops-guru:ListRecommendations",
          "devops-guru:SearchInsights",
          "devops-guru:StartCostEstimation",
          "directconnect:Describe*",
          "discovery:Describe*",
          "discovery:Get*",
          "discovery:List*",
          "dlm:Get*",
          "dms:Describe*",
          "dms:List*",
          "dms:Test*",
          "drs:DescribeJobLogItems",
          "drs:DescribeJobs",
          "drs:DescribeLaunchConfigurationTemplates",
          "drs:DescribeRecoveryInstances",
          "drs:DescribeRecoverySnapshots",
          "drs:DescribeReplicationConfigurationTemplates",
          "drs:DescribeSourceNetworks",
          "drs:DescribeSourceServers",
          "drs:GetFailbackReplicationConfiguration",
          "drs:GetLaunchConfiguration",
          "drs:GetReplicationConfiguration",
          "drs:ListExtensibleSourceServers",
          "drs:ListLaunchActions",
          "drs:ListStagingAccounts",
          "drs:ListTagsForResource",
          "ds:Check*",
          "ds:Describe*",
          "ds:Get*",
          "ds:List*",
          "ds:Verify*",
          "dynamodb:BatchGet*",
          "dynamodb:Describe*",
          "dynamodb:Get*",
          "dynamodb:List*",
          "dynamodb:PartiQLSelect",
          "dynamodb:Query",
          "dynamodb:Scan",
          "ec2:Describe*",
          "ec2:Get*",
          "ec2:ListImagesInRecycleBin",
          "ec2:ListSnapshotsInRecycleBin",
          "ec2:SearchLocalGatewayRoutes",
          "ec2:SearchTransitGatewayRoutes",
          "ec2messages:Get*",
          "ecr-public:BatchCheckLayerAvailability",
          "ecr-public:DescribeImages",
          "ecr-public:DescribeImageTags",
          "ecr-public:DescribeRegistries",
          "ecr-public:DescribeRepositories",
          "ecr-public:GetAuthorizationToken",
          "ecr-public:GetRegistryCatalogData",
          "ecr-public:GetRepositoryCatalogData",
          "ecr-public:GetRepositoryPolicy",
          "ecr-public:ListTagsForResource",
          "ecr:BatchCheck*",
          "ecr:BatchGet*",
          "ecr:Describe*",
          "ecr:Get*",
          "ecr:List*",
          "ecs:Describe*",
          "ecs:List*",
          "eks:Describe*",
          "eks:List*",
          "elastic-inference:DescribeAcceleratorOfferings",
          "elastic-inference:DescribeAccelerators",
          "elastic-inference:DescribeAcceleratorTypes",
          "elastic-inference:ListTagsForResource",
          "elasticache:Describe*",
          "elasticache:List*",
          "elasticbeanstalk:Check*",
          "elasticbeanstalk:Describe*",
          "elasticbeanstalk:List*",
          "elasticbeanstalk:Request*",
          "elasticbeanstalk:Retrieve*",
          "elasticbeanstalk:Validate*",
          "elasticfilesystem:Describe*",
          "elasticfilesystem:ListTagsForResource",
          "elasticloadbalancing:Describe*",
          "elasticmapreduce:Describe*",
          "elasticmapreduce:GetBlockPublicAccessConfiguration",
          "elasticmapreduce:List*",
          "elasticmapreduce:View*",
          "elastictranscoder:List*",
          "elastictranscoder:Read*",
          "elemental-appliances-software:Get*",
          "elemental-appliances-software:List*",
          "emr-containers:DescribeJobRun",
          "emr-containers:DescribeManagedEndpoint",
          "emr-containers:DescribeVirtualCluster",
          "emr-containers:ListJobRuns",
          "emr-containers:ListManagedEndpoints",
          "emr-containers:ListTagsForResource",
          "emr-containers:ListVirtualClusters",
          "emr-serverless:GetApplication",
          "emr-serverless:GetDashboardForJobRun",
          "emr-serverless:GetJobRun",
          "emr-serverless:ListApplications",
          "emr-serverless:ListJobRuns",
          "emr-serverless:ListTagsForResource",
          "es:Describe*",
          "es:ESHttpGet",
          "es:ESHttpHead",
          "es:Get*",
          "es:List*",
          "events:Describe*",
          "events:List*",
          "events:Test*",
          "evidently:GetExperiment",
          "evidently:GetExperimentResults",
          "evidently:GetFeature",
          "evidently:GetLaunch",
          "evidently:GetProject",
          "evidently:GetSegment",
          "evidently:ListExperiments",
          "evidently:ListFeatures",
          "evidently:ListLaunches",
          "evidently:ListProjects",
          "evidently:ListSegmentReferences",
          "evidently:ListSegments",
          "evidently:ListTagsForResource",
          "evidently:TestSegmentPattern",
          "firehose:Describe*",
          "firehose:List*",
          "fis:GetAction",
          "fis:GetExperiment",
          "fis:GetExperimentTargetAccountConfiguration",
          "fis:GetExperimentTemplate",
          "fis:GetTargetAccountConfiguration",
          "fis:GetTargetResourceType",
          "fis:ListActions",
          "fis:ListExperimentResolvedTargets",
          "fis:ListExperiments",
          "fis:ListExperimentTargetAccountConfigurations",
          "fis:ListExperimentTemplates",
          "fis:ListTagsForResource",
          "fis:ListTargetAccountConfigurations",
          "fis:ListTargetResourceTypes",
          "fms:GetAdminAccount",
          "fms:GetAppsList",
          "fms:GetComplianceDetail",
          "fms:GetNotificationChannel",
          "fms:GetPolicy",
          "fms:GetProtectionStatus",
          "fms:GetProtocolsList",
          "fms:GetViolationDetails",
          "fms:ListAppsLists",
          "fms:ListComplianceStatus",
          "fms:ListMemberAccounts",
          "fms:ListPolicies",
          "fms:ListProtocolsLists",
          "fms:ListTagsForResource",
          "forecast:DescribeAutoPredictor",
          "forecast:DescribeDataset",
          "forecast:DescribeDatasetGroup",
          "forecast:DescribeDatasetImportJob",
          "forecast:DescribeExplainability",
          "forecast:DescribeExplainabilityExport",
          "forecast:DescribeForecast",
          "forecast:DescribeForecastExportJob",
          "forecast:DescribeMonitor",
          "forecast:DescribePredictor",
          "forecast:DescribePredictorBacktestExportJob",
          "forecast:DescribeWhatIfAnalysis",
          "forecast:DescribeWhatIfForecast",
          "forecast:DescribeWhatIfForecastExport",
          "forecast:GetAccuracyMetrics",
          "forecast:ListDatasetGroups",
          "forecast:ListDatasetImportJobs",
          "forecast:ListDatasets",
          "forecast:ListExplainabilities",
          "forecast:ListExplainabilityExports",
          "forecast:ListForecastExportJobs",
          "forecast:ListForecasts",
          "forecast:ListMonitorEvaluations",
          "forecast:ListMonitors",
          "forecast:ListPredictorBacktestExportJobs",
          "forecast:ListPredictors",
          "forecast:ListWhatIfAnalyses",
          "forecast:ListWhatIfForecastExports",
          "forecast:ListWhatIfForecasts",
          "forecast:QueryForecast",
          "forecast:QueryWhatIfForecast",
          "frauddetector:BatchGetVariable",
          "frauddetector:DescribeDetector",
          "frauddetector:DescribeModelVersions",
          "frauddetector:GetBatchImportJobs",
          "frauddetector:GetBatchPredictionJobs",
          "frauddetector:GetDeleteEventsByEventTypeStatus",
          "frauddetector:GetDetectors",
          "frauddetector:GetDetectorVersion",
          "frauddetector:GetEntityTypes",
          "frauddetector:GetEvent",
          "frauddetector:GetEventPredictionMetadata",
          "frauddetector:GetEventTypes",
          "frauddetector:GetExternalModels",
          "frauddetector:GetKMSEncryptionKey",
          "frauddetector:GetLabels",
          "frauddetector:GetListElements",
          "frauddetector:GetListsMetadata",
          "frauddetector:GetModels",
          "frauddetector:GetModelVersion",
          "frauddetector:GetOutcomes",
          "frauddetector:GetRules",
          "frauddetector:GetVariables",
          "frauddetector:ListEventPredictions",
          "frauddetector:ListTagsForResource",
          "freertos:Describe*",
          "freertos:List*",
          "freetier:GetFreeTierAlertPreference",
          "freetier:GetFreeTierUsage",
          "fsx:Describe*",
          "fsx:List*",
          "gamelift:Describe*",
          "gamelift:Get*",
          "gamelift:List*",
          "gamelift:ResolveAlias",
          "gamelift:Search*",
          "glacier:Describe*",
          "glacier:Get*",
          "glacier:List*",
          "globalaccelerator:Describe*",
          "globalaccelerator:List*",
          "glue:BatchGetCrawlers",
          "glue:BatchGetDevEndpoints",
          "glue:BatchGetJobs",
          "glue:BatchGetPartition",
          "glue:BatchGetTriggers",
          "glue:BatchGetWorkflows",
          "glue:CheckSchemaVersionValidity",
          "glue:GetCatalogImportStatus",
          "glue:GetClassifier",
          "glue:GetClassifiers",
          "glue:GetCrawler",
          "glue:GetCrawlerMetrics",
          "glue:GetCrawlers",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetDataCatalogEncryptionSettings",
          "glue:GetDataflowGraph",
          "glue:GetDevEndpoint",
          "glue:GetDevEndpoints",
          "glue:GetJob",
          "glue:GetJobBookmark",
          "glue:GetJobRun",
          "glue:GetJobRuns",
          "glue:GetJobs",
          "glue:GetMapping",
          "glue:GetMLTaskRun",
          "glue:GetMLTaskRuns",
          "glue:GetMLTransform",
          "glue:GetMLTransforms",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:GetPlan",
          "glue:GetRegistry",
          "glue:GetResourcePolicy",
          "glue:GetSchema",
          "glue:GetSchemaByDefinition",
          "glue:GetSchemaVersion",
          "glue:GetSchemaVersionsDiff",
          "glue:GetSecurityConfiguration",
          "glue:GetSecurityConfigurations",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetTableVersion",
          "glue:GetTableVersions",
          "glue:GetTags",
          "glue:GetTrigger",
          "glue:GetTriggers",
          "glue:GetUserDefinedFunction",
          "glue:GetUserDefinedFunctions",
          "glue:GetWorkflow",
          "glue:GetWorkflowRun",
          "glue:GetWorkflowRunProperties",
          "glue:GetWorkflowRuns",
          "glue:ListCrawlers",
          "glue:ListCrawls",
          "glue:ListDevEndpoints",
          "glue:ListJobs",
          "glue:ListMLTransforms",
          "glue:ListRegistries",
          "glue:ListSchemas",
          "glue:ListSchemaVersions",
          "glue:ListTriggers",
          "glue:ListWorkflows",
          "glue:QuerySchemaVersionMetadata",
          "glue:SearchTables",
          "grafana:DescribeWorkspace",
          "grafana:DescribeWorkspaceAuthentication",
          "grafana:DescribeWorkspaceConfiguration",
          "grafana:ListPermissions",
          "grafana:ListTagsForResource",
          "grafana:ListVersions",
          "grafana:ListWorkspaces",
          "greengrass:DescribeComponent",
          "greengrass:Get*",
          "greengrass:List*",
          "groundstation:DescribeContact",
          "groundstation:GetConfig",
          "groundstation:GetDataflowEndpointGroup",
          "groundstation:GetMinuteUsage",
          "groundstation:GetMissionProfile",
          "groundstation:GetSatellite",
          "groundstation:ListConfigs",
          "groundstation:ListContacts",
          "groundstation:ListDataflowEndpointGroups",
          "groundstation:ListGroundStations",
          "groundstation:ListMissionProfiles",
          "groundstation:ListSatellites",
          "groundstation:ListTagsForResource",
          "guardduty:Describe*",
          "guardduty:Get*",
          "guardduty:List*",
          "health:Describe*",
          "healthlake:DescribeFHIRDatastore",
          "healthlake:DescribeFHIRExportJob",
          "healthlake:DescribeFHIRImportJob",
          "healthlake:GetCapabilities",
          "healthlake:ListFHIRDatastores",
          "healthlake:ListFHIRExportJobs",
          "healthlake:ListFHIRImportJobs",
          "healthlake:ListTagsForResource",
          "healthlake:ReadResource",
          "healthlake:SearchWithGet",
          "healthlake:SearchWithPost",
          "iam:Generate*",
          "iam:Get*",
          "iam:List*",
          "iam:Simulate*",
          "identity-sync:GetSyncProfile",
          "identity-sync:GetSyncTarget",
          "identity-sync:ListSyncFilters",
          "identitystore-auth:BatchGetSession",
          "identitystore-auth:ListSessions",
          "identitystore:DescribeGroup",
          "identitystore:DescribeGroupMembership",
          "identitystore:DescribeUser",
          "identitystore:GetGroupId",
          "identitystore:GetGroupMembershipId",
          "identitystore:GetUserId",
          "identitystore:IsMemberInGroups",
          "identitystore:ListGroupMemberships",
          "identitystore:ListGroupMembershipsForMember",
          "identitystore:ListGroups",
          "identitystore:ListUsers",
          "imagebuilder:Get*",
          "imagebuilder:List*",
          "importexport:Get*",
          "importexport:List*",
          "inspector:Describe*",
          "inspector:Get*",
          "inspector:List*",
          "inspector:Preview*",
          "inspector2:BatchGetAccountStatus",
          "inspector2:BatchGetFreeTrialInfo",
          "inspector2:DescribeOrganizationConfiguration",
          "inspector2:GetDelegatedAdminAccount",
          "inspector2:GetFindingsReportStatus",
          "inspector2:GetMember",
          "inspector2:ListAccountPermissions",
          "inspector2:ListCoverage",
          "inspector2:ListCoverageStatistics",
          "inspector2:ListDelegatedAdminAccounts",
          "inspector2:ListFilters",
          "inspector2:ListFindingAggregations",
          "inspector2:ListFindings",
          "inspector2:ListMembers",
          "inspector2:ListTagsForResource",
          "inspector2:ListUsageTotals",
          "internetmonitor:GetHealthEvent",
          "internetmonitor:GetMonitor",
          "internetmonitor:ListHealthEvents",
          "internetmonitor:ListMonitors",
          "internetmonitor:ListTagsForResource",
          "invoicing:GetInvoiceEmailDeliveryPreferences",
          "invoicing:GetInvoicePDF",
          "invoicing:ListInvoiceSummaries",
          "iot:Describe*",
          "iot:Get*",
          "iot:List*",
          "iot1click:DescribeDevice",
          "iot1click:DescribePlacement",
          "iot1click:DescribeProject",
          "iot1click:GetDeviceMethods",
          "iot1click:GetDevicesInPlacement",
          "iot1click:ListDeviceEvents",
          "iot1click:ListDevices",
          "iot1click:ListPlacements",
          "iot1click:ListProjects",
          "iot1click:ListTagsForResource",
          "iotanalytics:Describe*",
          "iotanalytics:Get*",
          "iotanalytics:List*",
          "iotanalytics:SampleChannelData",
          "iotevents:DescribeAlarm",
          "iotevents:DescribeAlarmModel",
          "iotevents:DescribeDetector",
          "iotevents:DescribeDetectorModel",
          "iotevents:DescribeInput",
          "iotevents:DescribeLoggingOptions",
          "iotevents:ListAlarmModels",
          "iotevents:ListAlarmModelVersions",
          "iotevents:ListAlarms",
          "iotevents:ListDetectorModels",
          "iotevents:ListDetectorModelVersions",
          "iotevents:ListDetectors",
          "iotevents:ListInputs",
          "iotevents:ListTagsForResource",
          "iotfleethub:DescribeApplication",
          "iotfleethub:ListApplications",
          "iotfleetwise:GetCampaign",
          "iotfleetwise:GetDecoderManifest",
          "iotfleetwise:GetFleet",
          "iotfleetwise:GetLoggingOptions",
          "iotfleetwise:GetModelManifest",
          "iotfleetwise:GetRegisterAccountStatus",
          "iotfleetwise:GetSignalCatalog",
          "iotfleetwise:GetVehicle",
          "iotfleetwise:GetVehicleStatus",
          "iotfleetwise:ListCampaigns",
          "iotfleetwise:ListDecoderManifestNetworkInterfaces",
          "iotfleetwise:ListDecoderManifests",
          "iotfleetwise:ListDecoderManifestSignals",
          "iotfleetwise:ListFleets",
          "iotfleetwise:ListFleetsForVehicle",
          "iotfleetwise:ListModelManifestNodes",
          "iotfleetwise:ListModelManifests",
          "iotfleetwise:ListSignalCatalogNodes",
          "iotfleetwise:ListSignalCatalogs",
          "iotfleetwise:ListTagsForResource",
          "iotfleetwise:ListVehicles",
          "iotfleetwise:ListVehiclesInFleet",
          "iotroborunner:GetDestination",
          "iotroborunner:GetSite",
          "iotroborunner:GetWorker",
          "iotroborunner:GetWorkerFleet",
          "iotroborunner:ListDestinations",
          "iotroborunner:ListSites",
          "iotroborunner:ListWorkerFleets",
          "iotroborunner:ListWorkers",
          "iotsitewise:Describe*",
          "iotsitewise:Get*",
          "iotsitewise:List*",
          "iotwireless:GetDestination",
          "iotwireless:GetDeviceProfile",
          "iotwireless:GetEventConfigurationByResourceTypes",
          "iotwireless:GetFuotaTask",
          "iotwireless:GetLogLevelsByResourceTypes",
          "iotwireless:GetMulticastGroup",
          "iotwireless:GetMulticastGroupSession",
          "iotwireless:GetNetworkAnalyzerConfiguration",
          "iotwireless:GetPartnerAccount",
          "iotwireless:GetPosition",
          "iotwireless:GetPositionConfiguration",
          "iotwireless:GetPositionEstimate",
          "iotwireless:GetResourceEventConfiguration",
          "iotwireless:GetResourceLogLevel",
          "iotwireless:GetResourcePosition",
          "iotwireless:GetServiceEndpoint",
          "iotwireless:GetServiceProfile",
          "iotwireless:GetWirelessDevice",
          "iotwireless:GetWirelessDeviceImportTask",
          "iotwireless:GetWirelessDeviceStatistics",
          "iotwireless:GetWirelessGateway",
          "iotwireless:GetWirelessGatewayCertificate",
          "iotwireless:GetWirelessGatewayFirmwareInformation",
          "iotwireless:GetWirelessGatewayStatistics",
          "iotwireless:GetWirelessGatewayTask",
          "iotwireless:GetWirelessGatewayTaskDefinition",
          "iotwireless:ListDestinations",
          "iotwireless:ListDeviceProfiles",
          "iotwireless:ListDevicesForWirelessDeviceImportTask",
          "iotwireless:ListEventConfigurations",
          "iotwireless:ListFuotaTasks",
          "iotwireless:ListMulticastGroups",
          "iotwireless:ListMulticastGroupsByFuotaTask",
          "iotwireless:ListNetworkAnalyzerConfigurations",
          "iotwireless:ListPartnerAccounts",
          "iotwireless:ListPositionConfigurations",
          "iotwireless:ListQueuedMessages",
          "iotwireless:ListServiceProfiles",
          "iotwireless:ListTagsForResource",
          "iotwireless:ListWirelessDeviceImportTasks",
          "iotwireless:ListWirelessDevices",
          "iotwireless:ListWirelessGateways",
          "iotwireless:ListWirelessGatewayTaskDefinitions",
          "ivs:BatchGetChannel",
          "ivs:GetChannel",
          "ivs:GetPlaybackKeyPair",
          "ivs:GetRecordingConfiguration",
          "ivs:GetStreamSession",
          "ivs:ListChannels",
          "ivs:ListPlaybackKeyPairs",
          "ivs:ListRecordingConfigurations",
          "ivs:ListStreams",
          "ivs:ListStreamSessions",
          "ivs:ListTagsForResource",
          "ivschat:GetLoggingConfiguration",
          "ivschat:GetRoom",
          "ivschat:ListLoggingConfigurations",
          "ivschat:ListRooms",
          "ivschat:ListTagsForResource",
          "kafka:Describe*",
          "kafka:DescribeCluster",
          "kafka:DescribeClusterOperation",
          "kafka:DescribeClusterV2",
          "kafka:DescribeConfiguration",
          "kafka:DescribeConfigurationRevision",
          "kafka:Get*",
          "kafka:GetBootstrapBrokers",
          "kafka:GetCompatibleKafkaVersions",
          "kafka:List*",
          "kafka:ListClusterOperations",
          "kafka:ListClusters",
          "kafka:ListClustersV2",
          "kafka:ListConfigurationRevisions",
          "kafka:ListConfigurations",
          "kafka:ListKafkaVersions",
          "kafka:ListNodes",
          "kafka:ListTagsForResource",
          "kafkaconnect:DescribeConnector",
          "kafkaconnect:DescribeCustomPlugin",
          "kafkaconnect:DescribeWorkerConfiguration",
          "kafkaconnect:ListConnectors",
          "kafkaconnect:ListCustomPlugins",
          "kafkaconnect:ListWorkerConfigurations",
          "kendra:BatchGetDocumentStatus",
          "kendra:DescribeDataSource",
          "kendra:DescribeExperience",
          "kendra:DescribeFaq",
          "kendra:DescribeIndex",
          "kendra:DescribePrincipalMapping",
          "kendra:DescribeQuerySuggestionsBlockList",
          "kendra:DescribeQuerySuggestionsConfig",
          "kendra:DescribeThesaurus",
          "kendra:GetQuerySuggestions",
          "kendra:GetSnapshots",
          "kendra:ListDataSources",
          "kendra:ListDataSourceSyncJobs",
          "kendra:ListEntityPersonas",
          "kendra:ListExperienceEntities",
          "kendra:ListExperiences",
          "kendra:ListFaqs",
          "kendra:ListGroupsOlderThanOrderingId",
          "kendra:ListIndices",
          "kendra:ListQuerySuggestionsBlockLists",
          "kendra:ListTagsForResource",
          "kendra:ListThesauri",
          "kendra:Query",
          "kinesis:Describe*",
          "kinesis:Get*",
          "kinesis:List*",
          "kinesisanalytics:Describe*",
          "kinesisanalytics:Discover*",
          "kinesisanalytics:Get*",
          "kinesisanalytics:List*",
          "kinesisvideo:Describe*",
          "kinesisvideo:Get*",
          "kinesisvideo:List*",
          "kms:Describe*",
          "kms:Get*",
          "kms:List*",
          "lakeformation:DescribeResource",
          "lakeformation:GetDataCellsFilter",
          "lakeformation:GetDataLakeSettings",
          "lakeformation:GetEffectivePermissionsForPath",
          "lakeformation:GetLfTag",
          "lakeformation:GetResourceLfTags",
          "lakeformation:ListDataCellsFilter",
          "lakeformation:ListLfTags",
          "lakeformation:ListPermissions",
          "lakeformation:ListResources",
          "lakeformation:ListTableStorageOptimizers",
          "lakeformation:SearchDatabasesByLfTags",
          "lakeformation:SearchTablesByLfTags",
          "lambda:Get*",
          "lambda:List*",
          "launchwizard:DescribeAdditionalNode",
          "launchwizard:DescribeProvisionedApp",
          "launchwizard:DescribeProvisioningEvents",
          "launchwizard:DescribeSettingsSet",
          "launchwizard:GetDeployment",
          "launchwizard:GetInfrastructureSuggestion",
          "launchwizard:GetIpAddress",
          "launchwizard:GetResourceCostEstimate",
          "launchwizard:GetResourceRecommendation",
          "launchwizard:GetSettingsSet",
          "launchwizard:GetWorkload",
          "launchwizard:GetWorkloadAsset",
          "launchwizard:GetWorkloadAssets",
          "launchwizard:ListAdditionalNodes",
          "launchwizard:ListAllowedResources",
          "launchwizard:ListDeploymentEvents",
          "launchwizard:ListDeployments",
          "launchwizard:ListProvisionedApps",
          "launchwizard:ListResourceCostEstimates",
          "launchwizard:ListSettingsSets",
          "launchwizard:ListWorkloadDeploymentOptions",
          "launchwizard:ListWorkloadDeploymentPatterns",
          "launchwizard:ListWorkloads",
          "lex:DescribeBot",
          "lex:DescribeBotAlias",
          "lex:DescribeBotChannel",
          "lex:DescribeBotLocale",
          "lex:DescribeBotVersion",
          "lex:DescribeExport",
          "lex:DescribeImport",
          "lex:DescribeIntent",
          "lex:DescribeResourcePolicy",
          "lex:DescribeSlot",
          "lex:DescribeSlotType",
          "lex:Get*",
          "lex:ListBotAliases",
          "lex:ListBotChannels",
          "lex:ListBotLocales",
          "lex:ListBots",
          "lex:ListBotVersions",
          "lex:ListBuiltInIntents",
          "lex:ListBuiltInSlotTypes",
          "lex:ListExports",
          "lex:ListImports",
          "lex:ListIntents",
          "lex:ListSlots",
          "lex:ListSlotTypes",
          "lex:ListTagsForResource",
          "license-manager:Get*",
          "license-manager:List*",
          "lightsail:GetActiveNames",
          "lightsail:GetAlarms",
          "lightsail:GetAutoSnapshots",
          "lightsail:GetBlueprints",
          "lightsail:GetBucketAccessKeys",
          "lightsail:GetBucketBundles",
          "lightsail:GetBucketMetricData",
          "lightsail:GetBuckets",
          "lightsail:GetBundles",
          "lightsail:GetCertificates",
          "lightsail:GetCloudFormationStackRecords",
          "lightsail:GetContainerAPIMetadata",
          "lightsail:GetContainerImages",
          "lightsail:GetContainerServiceDeployments",
          "lightsail:GetContainerServiceMetricData",
          "lightsail:GetContainerServicePowers",
          "lightsail:GetContainerServices",
          "lightsail:GetDisk",
          "lightsail:GetDisks",
          "lightsail:GetDiskSnapshot",
          "lightsail:GetDiskSnapshots",
          "lightsail:GetDistributionBundles",
          "lightsail:GetDistributionLatestCacheReset",
          "lightsail:GetDistributionMetricData",
          "lightsail:GetDistributions",
          "lightsail:GetDomain",
          "lightsail:GetDomains",
          "lightsail:GetExportSnapshotRecords",
          "lightsail:GetInstance",
          "lightsail:GetInstanceMetricData",
          "lightsail:GetInstancePortStates",
          "lightsail:GetInstances",
          "lightsail:GetInstanceSnapshot",
          "lightsail:GetInstanceSnapshots",
          "lightsail:GetInstanceState",
          "lightsail:GetKeyPair",
          "lightsail:GetKeyPairs",
          "lightsail:GetLoadBalancer",
          "lightsail:GetLoadBalancerMetricData",
          "lightsail:GetLoadBalancers",
          "lightsail:GetLoadBalancerTlsCertificates",
          "lightsail:GetOperation",
          "lightsail:GetOperations",
          "lightsail:GetOperationsForResource",
          "lightsail:GetRegions",
          "lightsail:GetRelationalDatabase",
          "lightsail:GetRelationalDatabaseBlueprints",
          "lightsail:GetRelationalDatabaseBundles",
          "lightsail:GetRelationalDatabaseEvents",
          "lightsail:GetRelationalDatabaseLogEvents",
          "lightsail:GetRelationalDatabaseLogStreams",
          "lightsail:GetRelationalDatabaseMetricData",
          "lightsail:GetRelationalDatabaseParameters",
          "lightsail:GetRelationalDatabases",
          "lightsail:GetRelationalDatabaseSnapshot",
          "lightsail:GetRelationalDatabaseSnapshots",
          "lightsail:GetStaticIp",
          "lightsail:GetStaticIps",
          "lightsail:Is*",
          "logs:Describe*",
          "logs:FilterLogEvents",
          "logs:Get*",
          "logs:ListAnomalies",
          "logs:ListLogAnomalyDetectors",
          "logs:ListLogDeliveries",
          "logs:ListTagsForResource",
          "logs:ListTagsLogGroup",
          "logs:StartLiveTail",
          "logs:StartQuery",
          "logs:StopLiveTail",
          "logs:StopQuery",
          "logs:TestMetricFilter",
          "lookoutequipment:DescribeDataIngestionJob",
          "lookoutequipment:DescribeDataset",
          "lookoutequipment:DescribeInferenceScheduler",
          "lookoutequipment:DescribeLabel",
          "lookoutequipment:DescribeLabelGroup",
          "lookoutequipment:DescribeModel",
          "lookoutequipment:DescribeModelVersion",
          "lookoutequipment:DescribeResourcePolicy",
          "lookoutequipment:DescribeRetrainingScheduler",
          "lookoutequipment:ListDataIngestionJobs",
          "lookoutequipment:ListDatasets",
          "lookoutequipment:ListInferenceEvents",
          "lookoutequipment:ListInferenceExecutions",
          "lookoutequipment:ListInferenceSchedulers",
          "lookoutequipment:ListLabelGroups",
          "lookoutequipment:ListLabels",
          "lookoutequipment:ListModels",
          "lookoutequipment:ListModelVersions",
          "lookoutequipment:ListRetrainingSchedulers",
          "lookoutequipment:ListSensorStatistics",
          "lookoutequipment:ListTagsForResource",
          "lookoutmetrics:Describe*",
          "lookoutmetrics:Get*",
          "lookoutmetrics:List*",
          "lookoutvision:DescribeDataset",
          "lookoutvision:DescribeModel",
          "lookoutvision:DescribeModelPackagingJob",
          "lookoutvision:DescribeProject",
          "lookoutvision:ListDatasetEntries",
          "lookoutvision:ListModelPackagingJobs",
          "lookoutvision:ListModels",
          "lookoutvision:ListProjects",
          "lookoutvision:ListTagsForResource",
          "m2:GetApplication",
          "m2:GetApplicationVersion",
          "m2:GetBatchJobExecution",
          "m2:GetDataSetDetails",
          "m2:GetDataSetImportTask",
          "m2:GetDeployment",
          "m2:GetEnvironment",
          "m2:ListApplications",
          "m2:ListApplicationVersions",
          "m2:ListBatchJobDefinitions",
          "m2:ListBatchJobExecutions",
          "m2:ListDataSetImportHistory",
          "m2:ListDataSets",
          "m2:ListDeployments",
          "m2:ListEngineVersions",
          "m2:ListEnvironments",
          "m2:ListTagsForResource",
          "machinelearning:Describe*",
          "machinelearning:Get*",
          "macie2:BatchGetCustomDataIdentifiers",
          "macie2:DescribeBuckets",
          "macie2:DescribeClassificationJob",
          "macie2:DescribeOrganizationConfiguration",
          "macie2:GetAdministratorAccount",
          "macie2:GetAllowList",
          "macie2:GetAutomatedDiscoveryConfiguration",
          "macie2:GetBucketStatistics",
          "macie2:GetClassificationExportConfiguration",
          "macie2:GetClassificationScope",
          "macie2:GetCustomDataIdentifier",
          "macie2:GetFindings",
          "macie2:GetFindingsFilter",
          "macie2:GetFindingsPublicationConfiguration",
          "macie2:GetFindingStatistics",
          "macie2:GetInvitationsCount",
          "macie2:GetMacieSession",
          "macie2:GetMember",
          "macie2:GetResourceProfile",
          "macie2:GetRevealConfiguration",
          "macie2:GetSensitiveDataOccurrencesAvailability",
          "macie2:GetSensitivityInspectionTemplate",
          "macie2:GetUsageStatistics",
          "macie2:GetUsageTotals",
          "macie2:ListAllowLists",
          "macie2:ListClassificationJobs",
          "macie2:ListClassificationScopes",
          "macie2:ListCustomDataIdentifiers",
          "macie2:ListFindings",
          "macie2:ListFindingsFilters",
          "macie2:ListInvitations",
          "macie2:ListMembers",
          "macie2:ListOrganizationAdminAccounts",
          "macie2:ListResourceProfileArtifacts",
          "macie2:ListResourceProfileDetections",
          "macie2:ListSensitivityInspectionTemplates",
          "macie2:ListTagsForResource",
          "macie2:SearchResources",
          "managedblockchain:GetMember",
          "managedblockchain:GetNetwork",
          "managedblockchain:GetNode",
          "managedblockchain:GetProposal",
          "managedblockchain:ListInvitations",
          "managedblockchain:ListMembers",
          "managedblockchain:ListNetworks",
          "managedblockchain:ListNodes",
          "managedblockchain:ListProposals",
          "managedblockchain:ListProposalVotes",
          "managedblockchain:ListTagsForResource",
          "mediaconnect:DescribeFlow",
          "mediaconnect:DescribeOffering",
          "mediaconnect:DescribeReservation",
          "mediaconnect:ListEntitlements",
          "mediaconnect:ListFlows",
          "mediaconnect:ListOfferings",
          "mediaconnect:ListReservations",
          "mediaconnect:ListTagsForResource",
          "mediaconvert:DescribeEndpoints",
          "mediaconvert:Get*",
          "mediaconvert:List*",
          "medialive:DescribeChannel",
          "medialive:DescribeInput",
          "medialive:DescribeInputDevice",
          "medialive:DescribeInputDeviceThumbnail",
          "medialive:DescribeInputSecurityGroup",
          "medialive:DescribeMultiplex",
          "medialive:DescribeMultiplexProgram",
          "medialive:DescribeOffering",
          "medialive:DescribeReservation",
          "medialive:DescribeSchedule",
          "medialive:ListChannels",
          "medialive:ListInputDevices",
          "medialive:ListInputDeviceTransfers",
          "medialive:ListInputs",
          "medialive:ListInputSecurityGroups",
          "medialive:ListMultiplexes",
          "medialive:ListMultiplexPrograms",
          "medialive:ListOfferings",
          "medialive:ListReservations",
          "medialive:ListTagsForResource",
          "mediapackage-vod:Describe*",
          "mediapackage-vod:List*",
          "mediapackage:Describe*",
          "mediapackage:List*",
          "mediapackagev2:GetChannel",
          "mediapackagev2:GetChannelGroup",
          "mediapackagev2:GetChannelPolicy",
          "mediapackagev2:GetHeadObject",
          "mediapackagev2:GetObject",
          "mediapackagev2:GetOriginEndpoint",
          "mediapackagev2:GetOriginEndpointPolicy",
          "mediapackagev2:ListChannelGroups",
          "mediapackagev2:ListChannels",
          "mediapackagev2:ListOriginEndpoints",
          "mediapackagev2:ListTagsForResource",
          "mediastore:DescribeContainer",
          "mediastore:DescribeObject",
          "mediastore:GetContainerPolicy",
          "mediastore:GetCorsPolicy",
          "mediastore:GetLifecyclePolicy",
          "mediastore:GetMetricPolicy",
          "mediastore:GetObject",
          "mediastore:ListContainers",
          "mediastore:ListItems",
          "mediastore:ListTagsForResource",
          "memorydb:DescribeClusters",
          "memorydb:DescribeParameterGroups",
          "memorydb:DescribeParameters",
          "memorydb:ListTags",
          "mgh:Describe*",
          "mgh:GetHomeRegion",
          "mgh:List*",
          "mgn:DescribeJobLogItems",
          "mgn:DescribeJobs",
          "mgn:DescribeLaunchConfigurationTemplates",
          "mgn:DescribeReplicationConfigurationTemplates",
          "mgn:DescribeSourceServers",
          "mgn:DescribeVcenterClients",
          "mgn:GetLaunchConfiguration",
          "mgn:GetReplicationConfiguration",
          "mgn:ListApplications",
          "mgn:ListSourceServerActions",
          "mgn:ListTemplateActions",
          "mgn:ListWaves",
          "mobileanalytics:Get*",
          "mobiletargeting:Get*",
          "mobiletargeting:List*",
          "monitron:GetProject",
          "monitron:GetProjectAdminUser",
          "monitron:ListProjects",
          "monitron:ListTagsForResource",
          "mq:Describe*",
          "mq:List*",
          "network-firewall:DescribeFirewall",
          "network-firewall:DescribeFirewallPolicy",
          "network-firewall:DescribeLoggingConfiguration",
          "network-firewall:DescribeResourcePolicy",
          "network-firewall:DescribeRuleGroup",
          "network-firewall:DescribeRuleGroupMetadata",
          "network-firewall:DescribeTLSInspectionConfiguration",
          "network-firewall:ListFirewallPolicies",
          "network-firewall:ListFirewalls",
          "network-firewall:ListRuleGroups",
          "network-firewall:ListTagsForResource",
          "network-firewall:ListTLSInspectionConfigurations",
          "networkmanager:DescribeGlobalNetworks",
          "networkmanager:GetConnectAttachment",
          "networkmanager:GetConnections",
          "networkmanager:GetConnectPeer",
          "networkmanager:GetConnectPeerAssociations",
          "networkmanager:GetCoreNetwork",
          "networkmanager:GetCoreNetworkChangeEvents",
          "networkmanager:GetCoreNetworkChangeSet",
          "networkmanager:GetCoreNetworkPolicy",
          "networkmanager:GetCustomerGatewayAssociations",
          "networkmanager:GetDevices",
          "networkmanager:GetLinkAssociations",
          "networkmanager:GetLinks",
          "networkmanager:GetNetworkResourceCounts",
          "networkmanager:GetNetworkResourceRelationships",
          "networkmanager:GetNetworkResources",
          "networkmanager:GetNetworkRoutes",
          "networkmanager:GetNetworkTelemetry",
          "networkmanager:GetResourcePolicy",
          "networkmanager:GetRouteAnalysis",
          "networkmanager:GetSites",
          "networkmanager:GetSiteToSiteVpnAttachment",
          "networkmanager:GetTransitGatewayConnectPeerAssociations",
          "networkmanager:GetTransitGatewayPeering",
          "networkmanager:GetTransitGatewayRegistrations",
          "networkmanager:GetTransitGatewayRouteTableAttachment",
          "networkmanager:GetVpcAttachment",
          "networkmanager:ListAttachments",
          "networkmanager:ListConnectPeers",
          "networkmanager:ListCoreNetworkPolicyVersions",
          "networkmanager:ListCoreNetworks",
          "networkmanager:ListPeerings",
          "networkmanager:ListTagsForResource",
          "nimble:GetEula",
          "nimble:GetFeatureMap",
          "nimble:GetLaunchProfile",
          "nimble:GetLaunchProfileDetails",
          "nimble:GetLaunchProfileInitialization",
          "nimble:GetLaunchProfileMember",
          "nimble:GetStreamingImage",
          "nimble:GetStreamingSession",
          "nimble:GetStudio",
          "nimble:GetStudioComponent",
          "nimble:GetStudioMember",
          "nimble:ListEulaAcceptances",
          "nimble:ListEulas",
          "nimble:ListLaunchProfileMembers",
          "nimble:ListLaunchProfiles",
          "nimble:ListStreamingImages",
          "nimble:ListStreamingSessions",
          "nimble:ListStudioComponents",
          "nimble:ListStudioMembers",
          "nimble:ListStudios",
          "nimble:ListTagsForResource",
          "notifications-contacts:GetEmailContact",
          "notifications-contacts:ListEmailContacts",
          "notifications-contacts:ListTagsForResource",
          "notifications:GetEventRule",
          "notifications:GetNotificationConfiguration",
          "notifications:GetNotificationEvent",
          "notifications:ListChannels",
          "notifications:ListEventRules",
          "notifications:ListNotificationConfigurations",
          "notifications:ListNotificationEvents",
          "notifications:ListNotificationHubs",
          "notifications:ListTagsForResource",
          "oam:GetLink",
          "oam:GetSink",
          "oam:GetSinkPolicy",
          "oam:ListAttachedLinks",
          "oam:ListLinks",
          "oam:ListSinks",
          "omics:Get*",
          "omics:List*",
          "one:GetDeviceConfigurationTemplate",
          "one:GetDeviceInstance",
          "one:GetDeviceInstanceConfiguration",
          "one:GetSite",
          "one:GetSiteAddress",
          "one:ListDeviceConfigurationTemplates",
          "one:ListDeviceInstances",
          "one:ListSites",
          "one:ListUsers",
          "opsworks-cm:Describe*",
          "opsworks-cm:List*",
          "opsworks:Describe*",
          "opsworks:Get*",
          "organizations:Describe*",
          "organizations:List*",
          "osis:GetPipeline",
          "osis:GetPipelineBlueprint",
          "osis:GetPipelineChangeProgress",
          "osis:ListPipelineBlueprints",
          "osis:ListPipelines",
          "osis:ListTagsForResource",
          "outposts:Get*",
          "outposts:List*",
          "payment-cryptography:GetAlias",
          "payment-cryptography:GetKey",
          "payment-cryptography:GetPublicKeyCertificate",
          "payment-cryptography:ListAliases",
          "payment-cryptography:ListKeys",
          "payment-cryptography:ListTagsForResource",
          "payments:GetPaymentInstrument",
          "payments:GetPaymentStatus",
          "payments:ListPaymentPreferences",
          "pca-connector-ad:GetConnector",
          "pca-connector-ad:GetDirectoryRegistration",
          "pca-connector-ad:GetServicePrincipalName",
          "pca-connector-ad:GetTemplate",
          "pca-connector-ad:GetTemplateGroupAccessControlEntry",
          "pca-connector-ad:ListConnectors",
          "pca-connector-ad:ListDirectoryRegistrations",
          "pca-connector-ad:ListServicePrincipalNames",
          "pca-connector-ad:ListTagsForResource",
          "pca-connector-ad:ListTemplateGroupAccessControlEntries",
          "pca-connector-ad:ListTemplates",
          "personalize:Describe*",
          "personalize:Get*",
          "personalize:List*",
          "pi:DescribeDimensionKeys",
          "pi:GetDimensionKeyDetails",
          "pi:GetResourceMetadata",
          "pi:GetResourceMetrics",
          "pi:ListAvailableResourceDimensions",
          "pi:ListAvailableResourceMetrics",
          "pipes:DescribePipe",
          "pipes:ListPipes",
          "pipes:ListTagsForResource",
          "polly:Describe*",
          "polly:Get*",
          "polly:List*",
          "polly:SynthesizeSpeech",
          "pricing:DescribeServices",
          "pricing:GetAttributeValues",
          "pricing:GetPriceListFileUrl",
          "pricing:GetProducts",
          "pricing:ListPriceLists",
          "proton:GetDeployment",
          "proton:GetEnvironment",
          "proton:GetEnvironmentTemplate",
          "proton:GetEnvironmentTemplateVersion",
          "proton:GetService",
          "proton:GetServiceInstance",
          "proton:GetServiceTemplate",
          "proton:GetServiceTemplateVersion",
          "proton:ListDeployments",
          "proton:ListEnvironmentAccountConnections",
          "proton:ListEnvironments",
          "proton:ListEnvironmentTemplates",
          "proton:ListServiceInstances",
          "proton:ListServices",
          "proton:ListServiceTemplates",
          "proton:ListTagsForResource",
          "purchase-orders:GetPurchaseOrder",
          "purchase-orders:ListPurchaseOrderInvoices",
          "purchase-orders:ListPurchaseOrders",
          "purchase-orders:ViewPurchaseOrders",
          "qldb:DescribeJournalKinesisStream",
          "qldb:DescribeJournalS3Export",
          "qldb:DescribeLedger",
          "qldb:GetBlock",
          "qldb:GetDigest",
          "qldb:GetRevision",
          "qldb:ListJournalKinesisStreamsForLedger",
          "qldb:ListJournalS3Exports",
          "qldb:ListJournalS3ExportsForLedger",
          "qldb:ListLedgers",
          "qldb:ListTagsForResource",
          "ram:Get*",
          "ram:List*",
          "rbin:GetRule",
          "rbin:ListRules",
          "rbin:ListTagsForResource",
          "rds:Describe*",
          "rds:Download*",
          "rds:List*",
          "redshift:Describe*",
          "redshift:GetReservedNodeExchangeOfferings",
          "redshift:View*",
          "refactor-spaces:GetApplication",
          "refactor-spaces:GetEnvironment",
          "refactor-spaces:GetResourcePolicy",
          "refactor-spaces:GetRoute",
          "refactor-spaces:GetService",
          "refactor-spaces:ListApplications",
          "refactor-spaces:ListEnvironments",
          "refactor-spaces:ListEnvironmentVpcs",
          "refactor-spaces:ListRoutes",
          "refactor-spaces:ListServices",
          "refactor-spaces:ListTagsForResource",
          "rekognition:CompareFaces",
          "rekognition:DescribeDataset",
          "rekognition:DescribeProjects",
          "rekognition:DescribeProjectVersions",
          "rekognition:DescribeStreamProcessor",
          "rekognition:Detect*",
          "rekognition:GetCelebrityInfo",
          "rekognition:GetCelebrityRecognition",
          "rekognition:GetContentModeration",
          "rekognition:GetFaceDetection",
          "rekognition:GetFaceSearch",
          "rekognition:GetLabelDetection",
          "rekognition:GetPersonTracking",
          "rekognition:GetSegmentDetection",
          "rekognition:GetTextDetection",
          "rekognition:List*",
          "rekognition:RecognizeCelebrities",
          "rekognition:Search*",
          "resiliencehub:DescribeApp",
          "resiliencehub:DescribeAppAssessment",
          "resiliencehub:DescribeAppVersion",
          "resiliencehub:DescribeAppVersionAppComponent",
          "resiliencehub:DescribeAppVersionResource",
          "resiliencehub:DescribeAppVersionResourcesResolutionStatus",
          "resiliencehub:DescribeAppVersionTemplate",
          "resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
          "resiliencehub:DescribeResiliencyPolicy",
          "resiliencehub:ListAlarmRecommendations",
          "resiliencehub:ListAppAssessmentComplianceDrifts",
          "resiliencehub:ListAppAssessments",
          "resiliencehub:ListAppComponentCompliances",
          "resiliencehub:ListAppComponentRecommendations",
          "resiliencehub:ListAppInputSources",
          "resiliencehub:ListApps",
          "resiliencehub:ListAppVersionAppComponents",
          "resiliencehub:ListAppVersionResourceMappings",
          "resiliencehub:ListAppVersionResources",
          "resiliencehub:ListAppVersions",
          "resiliencehub:ListRecommendationTemplates",
          "resiliencehub:ListResiliencyPolicies",
          "resiliencehub:ListSopRecommendations",
          "resiliencehub:ListSuggestedResiliencyPolicies",
          "resiliencehub:ListTagsForResource",
          "resiliencehub:ListTestRecommendations",
          "resiliencehub:ListUnsupportedAppVersionResources",
          "resource-explorer-2:BatchGetView",
          "resource-explorer-2:GetDefaultView",
          "resource-explorer-2:GetIndex",
          "resource-explorer-2:GetView",
          "resource-explorer-2:ListIndexes",
          "resource-explorer-2:ListSupportedResourceTypes",
          "resource-explorer-2:ListTagsForResource",
          "resource-explorer-2:ListViews",
          "resource-explorer-2:Search",
          "resource-groups:Get*",
          "resource-groups:List*",
          "resource-groups:Search*",
          "robomaker:BatchDescribe*",
          "robomaker:Describe*",
          "robomaker:Get*",
          "robomaker:List*",
          "route53-recovery-cluster:Get*",
          "route53-recovery-cluster:ListRoutingControls",
          "route53-recovery-control-config:Describe*",
          "route53-recovery-control-config:GetResourcePolicy",
          "route53-recovery-control-config:List*",
          "route53-recovery-readiness:Get*",
          "route53-recovery-readiness:List*",
          "route53:Get*",
          "route53:List*",
          "route53:Test*",
          "route53domains:Check*",
          "route53domains:Get*",
          "route53domains:List*",
          "route53domains:View*",
          "route53resolver:Get*",
          "route53resolver:List*",
          "rum:GetAppMonitor",
          "rum:GetAppMonitorData",
          "rum:ListAppMonitors",
          "s3-object-lambda:GetObject",
          "s3-object-lambda:GetObjectAcl",
          "s3-object-lambda:GetObjectLegalHold",
          "s3-object-lambda:GetObjectRetention",
          "s3-object-lambda:GetObjectTagging",
          "s3-object-lambda:GetObjectVersion",
          "s3-object-lambda:GetObjectVersionAcl",
          "s3-object-lambda:GetObjectVersionTagging",
          "s3-object-lambda:ListBucket",
          "s3-object-lambda:ListBucketMultipartUploads",
          "s3-object-lambda:ListBucketVersions",
          "s3-object-lambda:ListMultipartUploadParts",
          "s3:DescribeJob",
          "s3:Get*",
          "s3:List*",
          "sagemaker-groundtruth-synthetic:GetAccountDetails",
          "sagemaker-groundtruth-synthetic:GetBatch",
          "sagemaker-groundtruth-synthetic:GetProject",
          "sagemaker-groundtruth-synthetic:ListBatchDataTransfers",
          "sagemaker-groundtruth-synthetic:ListBatchSummaries",
          "sagemaker-groundtruth-synthetic:ListProjectDataTransfers",
          "sagemaker-groundtruth-synthetic:ListProjectSummaries",
          "sagemaker:Describe*",
          "sagemaker:GetSearchSuggestions",
          "sagemaker:List*",
          "sagemaker:Search",
          "savingsplans:DescribeSavingsPlanRates",
          "savingsplans:DescribeSavingsPlans",
          "savingsplans:DescribeSavingsPlansOfferingRates",
          "savingsplans:DescribeSavingsPlansOfferings",
          "savingsplans:ListTagsForResource",
          "scheduler:GetSchedule",
          "scheduler:GetScheduleGroup",
          "scheduler:ListScheduleGroups",
          "scheduler:ListSchedules",
          "scheduler:ListTagsForResource",
          "schemas:Describe*",
          "schemas:Get*",
          "schemas:List*",
          "schemas:Search*",
          "sdb:Get*",
          "sdb:List*",
          "sdb:Select*",
          "secretsmanager:Describe*",
          "secretsmanager:GetResourcePolicy",
          "secretsmanager:List*",
          "securityhub:BatchGetControlEvaluations",
          "securityhub:BatchGetSecurityControls",
          "securityhub:BatchGetStandardsControlAssociations",
          "securityhub:Describe*",
          "securityhub:Get*",
          "securityhub:List*",
          "serverlessrepo:Get*",
          "serverlessrepo:List*",
          "serverlessrepo:SearchApplications",
          "servicecatalog:Describe*",
          "servicecatalog:GetApplication",
          "servicecatalog:GetAttributeGroup",
          "servicecatalog:List*",
          "servicecatalog:Scan*",
          "servicecatalog:Search*",
          "servicediscovery:DiscoverInstances",
          "servicediscovery:DiscoverInstancesRevision",
          "servicediscovery:Get*",
          "servicediscovery:List*",
          "servicequotas:GetAssociationForServiceQuotaTemplate",
          "servicequotas:GetAWSDefaultServiceQuota",
          "servicequotas:GetRequestedServiceQuotaChange",
          "servicequotas:GetServiceQuota",
          "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
          "servicequotas:ListAWSDefaultServiceQuotas",
          "servicequotas:ListRequestedServiceQuotaChangeHistory",
          "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
          "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
          "servicequotas:ListServiceQuotas",
          "servicequotas:ListServices",
          "ses:BatchGetMetricData",
          "ses:Describe*",
          "ses:Get*",
          "ses:List*",
          "shield:Describe*",
          "shield:Get*",
          "shield:List*",
          "signer:DescribeSigningJob",
          "signer:GetSigningPlatform",
          "signer:GetSigningProfile",
          "signer:ListProfilePermissions",
          "signer:ListSigningJobs",
          "signer:ListSigningPlatforms",
          "signer:ListSigningProfiles",
          "signer:ListTagsForResource",
          "sms-voice:DescribeAccountAttributes",
          "sms-voice:DescribeAccountLimits",
          "sms-voice:DescribeConfigurationSets",
          "sms-voice:DescribeKeywords",
          "sms-voice:DescribeOptedOutNumbers",
          "sms-voice:DescribeOptOutLists",
          "sms-voice:DescribePhoneNumbers",
          "sms-voice:DescribePools",
          "sms-voice:DescribeSenderIds",
          "sms-voice:DescribeSpendLimits",
          "sms-voice:ListPoolOriginationIdentities",
          "sms-voice:ListTagsForResource",
          "snowball:Describe*",
          "snowball:Get*",
          "snowball:List*",
          "sns:Check*",
          "sns:Get*",
          "sns:List*",
          "sqs:Get*",
          "sqs:List*",
          "sqs:Receive*",
          "ssm-contacts:DescribeEngagement",
          "ssm-contacts:DescribePage",
          "ssm-contacts:GetContact",
          "ssm-contacts:GetContactChannel",
          "ssm-contacts:ListContactChannels",
          "ssm-contacts:ListContacts",
          "ssm-contacts:ListEngagements",
          "ssm-contacts:ListPageReceipts",
          "ssm-contacts:ListPagesByContact",
          "ssm-contacts:ListPagesByEngagement",
          "ssm-incidents:GetIncidentRecord",
          "ssm-incidents:GetReplicationSet",
          "ssm-incidents:GetResourcePolicies",
          "ssm-incidents:GetResponsePlan",
          "ssm-incidents:GetTimelineEvent",
          "ssm-incidents:ListIncidentRecords",
          "ssm-incidents:ListRelatedItems",
          "ssm-incidents:ListReplicationSets",
          "ssm-incidents:ListResponsePlans",
          "ssm-incidents:ListTagsForResource",
          "ssm-incidents:ListTimelineEvents",
          "ssm:Describe*",
          "ssm:Get*",
          "ssm:List*",
          "sso-directory:Describe*",
          "sso-directory:List*",
          "sso-directory:Search*",
          "sso:Describe*",
          "sso:Get*",
          "sso:List*",
          "sso:Search*",
          "states:Describe*",
          "states:GetExecutionHistory",
          "states:List*",
          "storagegateway:Describe*",
          "storagegateway:List*",
          "sts:GetAccessKeyInfo",
          "sts:GetCallerIdentity",
          "sts:GetSessionToken",
          "support:DescribeAttachment",
          "support:DescribeCases",
          "support:DescribeCommunications",
          "support:DescribeServices",
          "support:DescribeSeverityLevels",
          "support:DescribeTrustedAdvisorCheckRefreshStatuses",
          "support:DescribeTrustedAdvisorCheckResult",
          "support:DescribeTrustedAdvisorChecks",
          "support:DescribeTrustedAdvisorCheckSummaries",
          "supportplans:GetSupportPlan",
          "supportplans:GetSupportPlanUpdateStatus",
          "sustainability:GetCarbonFootprintSummary",
          "swf:Count*",
          "swf:Describe*",
          "swf:Get*",
          "swf:List*",
          "synthetics:Describe*",
          "synthetics:Get*",
          "synthetics:List*",
          "tag:DescribeReportCreation",
          "tag:Get*",
          "tax:GetExemptions",
          "tax:GetTaxInheritance",
          "tax:GetTaxInterview",
          "tax:GetTaxRegistration",
          "tax:GetTaxRegistrationDocument",
          "tax:ListTaxRegistrations",
          "timestream:DescribeBatchLoadTask",
          "timestream:DescribeDatabase",
          "timestream:DescribeEndpoints",
          "timestream:DescribeTable",
          "timestream:ListBatchLoadTasks",
          "timestream:ListDatabases",
          "timestream:ListMeasures",
          "timestream:ListTables",
          "timestream:ListTagsForResource",
          "tnb:GetSolFunctionInstance",
          "tnb:GetSolFunctionPackage",
          "tnb:GetSolFunctionPackageContent",
          "tnb:GetSolFunctionPackageDescriptor",
          "tnb:GetSolNetworkInstance",
          "tnb:GetSolNetworkOperation",
          "tnb:GetSolNetworkPackage",
          "tnb:GetSolNetworkPackageContent",
          "tnb:GetSolNetworkPackageDescriptor",
          "tnb:ListSolFunctionInstances",
          "tnb:ListSolFunctionPackages",
          "tnb:ListSolNetworkInstances",
          "tnb:ListSolNetworkOperations",
          "tnb:ListSolNetworkPackages",
          "tnb:ListTagsForResource",
          "transcribe:Get*",
          "transcribe:List*",
          "transfer:Describe*",
          "transfer:List*",
          "transfer:TestIdentityProvider",
          "translate:DescribeTextTranslationJob",
          "translate:GetParallelData",
          "translate:GetTerminology",
          "translate:ListParallelData",
          "translate:ListTerminologies",
          "translate:ListTextTranslationJobs",
          "trustedadvisor:Describe*",
          "verifiedpermissions:GetIdentitySource",
          "verifiedpermissions:GetPolicy",
          "verifiedpermissions:GetPolicyStore",
          "verifiedpermissions:GetPolicyTemplate",
          "verifiedpermissions:GetSchema",
          "verifiedpermissions:IsAuthorized",
          "verifiedpermissions:IsAuthorizedWithToken",
          "verifiedpermissions:ListIdentitySources",
          "verifiedpermissions:ListPolicies",
          "verifiedpermissions:ListPolicyStores",
          "verifiedpermissions:ListPolicyTemplates",
          "vpc-lattice:GetAccessLogSubscription",
          "vpc-lattice:GetAuthPolicy",
          "vpc-lattice:GetListener",
          "vpc-lattice:GetResourcePolicy",
          "vpc-lattice:GetRule",
          "vpc-lattice:GetService",
          "vpc-lattice:GetServiceNetwork",
          "vpc-lattice:GetServiceNetworkServiceAssociation",
          "vpc-lattice:GetServiceNetworkVpcAssociation",
          "vpc-lattice:GetTargetGroup",
          "vpc-lattice:ListAccessLogSubscriptions",
          "vpc-lattice:ListListeners",
          "vpc-lattice:ListRules",
          "vpc-lattice:ListServiceNetworks",
          "vpc-lattice:ListServiceNetworkServiceAssociations",
          "vpc-lattice:ListServiceNetworkVpcAssociations",
          "vpc-lattice:ListServices",
          "vpc-lattice:ListTagsForResource",
          "vpc-lattice:ListTargetGroups",
          "vpc-lattice:ListTargets",
          "waf-regional:Get*",
          "waf-regional:List*",
          "waf:Get*",
          "waf:List*",
          "wafv2:CheckCapacity",
          "wafv2:Describe*",
          "wafv2:Get*",
          "wafv2:List*",
          "wellarchitected:ExportLens",
          "wellarchitected:GetAnswer",
          "wellarchitected:GetConsolidatedReport",
          "wellarchitected:GetLens",
          "wellarchitected:GetLensReview",
          "wellarchitected:GetLensReviewReport",
          "wellarchitected:GetLensVersionDifference",
          "wellarchitected:GetMilestone",
          "wellarchitected:GetProfile",
          "wellarchitected:GetProfileTemplate",
          "wellarchitected:GetReviewTemplate",
          "wellarchitected:GetReviewTemplateAnswer",
          "wellarchitected:GetReviewTemplateLensReview",
          "wellarchitected:GetWorkload",
          "wellarchitected:ListAnswers",
          "wellarchitected:ListCheckDetails",
          "wellarchitected:ListCheckSummaries",
          "wellarchitected:ListLenses",
          "wellarchitected:ListLensReviewImprovements",
          "wellarchitected:ListLensReviews",
          "wellarchitected:ListLensShares",
          "wellarchitected:ListMilestones",
          "wellarchitected:ListNotifications",
          "wellarchitected:ListProfileNotifications",
          "wellarchitected:ListProfiles",
          "wellarchitected:ListProfileShares",
          "wellarchitected:ListReviewTemplateAnswers",
          "wellarchitected:ListReviewTemplates",
          "wellarchitected:ListShareInvitations",
          "wellarchitected:ListTagsForResource",
          "wellarchitected:ListTemplateShares",
          "wellarchitected:ListWorkloads",
          "wellarchitected:ListWorkloadShares",
          "workdocs:CheckAlias",
          "workdocs:Describe*",
          "workdocs:Get*",
          "workmail:Describe*",
          "workmail:Get*",
          "workmail:List*",
          "workmail:Search*",
          "workspaces-web:GetBrowserSettings",
          "workspaces-web:GetIdentityProvider",
          "workspaces-web:GetNetworkSettings",
          "workspaces-web:GetPortal",
          "workspaces-web:GetPortalServiceProviderMetadata",
          "workspaces-web:GetTrustStore",
          "workspaces-web:GetUserAccessLoggingSettings",
          "workspaces-web:GetUserSettings",
          "workspaces-web:ListBrowserSettings",
          "workspaces-web:ListIdentityProviders",
          "workspaces-web:ListNetworkSettings",
          "workspaces-web:ListPortals",
          "workspaces-web:ListTagsForResource",
          "workspaces-web:ListTrustStores",
          "workspaces-web:ListUserAccessLoggingSettings",
          "workspaces-web:ListUserSettings",
          "workspaces:Describe*",
          "xray:BatchGet*",
          "xray:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloudHSMReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCloudHSMReadOnlyAccess",
      "PolicyId": "ANPAISVCBSY7YDBOT67KE",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudHSMReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to all CloudHSM resources.",
      "CreateDate": "2015-02-06T18:39:52.000Z",
      "UpdateDate": "2015-02-06T18:39:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudhsm:Get*",
          "cloudhsm:List*",
          "cloudhsm:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ResourceGroupsandTagEditorFullAccess": {
    "policy": {
      "PolicyName": "ResourceGroupsandTagEditorFullAccess",
      "PolicyId": "ANPAJNOS54ZFXN4T2Y34A",
      "Arn": "arn:aws:iam::aws:policy/ResourceGroupsandTagEditorFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Resource Groups and Tag Editor.",
      "CreateDate": "2015-02-06T18:39:53.000Z",
      "UpdateDate": "2023-08-10T13:29:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "tag:getResources",
          "tag:getTagKeys",
          "tag:getTagValues",
          "tag:TagResources",
          "tag:UntagResources",
          "resource-groups:*",
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources",
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ResourceGroupsandTagEditorReadOnlyAccess": {
    "policy": {
      "PolicyName": "ResourceGroupsandTagEditorReadOnlyAccess",
      "PolicyId": "ANPAJHXQTPI5I5JKAIU74",
      "Arn": "arn:aws:iam::aws:policy/ResourceGroupsandTagEditorReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to use Resource Groups and Tag Editor, but does not allow editing of tags via the Tag Editor.",
      "CreateDate": "2015-02-06T18:39:54.000Z",
      "UpdateDate": "2023-08-10T13:42:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "tag:getResources",
          "tag:getTagKeys",
          "tag:getTagValues",
          "resource-groups:Get*",
          "resource-groups:List*",
          "resource-groups:Search*",
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources",
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudFrontReadOnlyAccess": {
    "policy": {
      "PolicyName": "CloudFrontReadOnlyAccess",
      "PolicyId": "ANPAJJZMNYOTZCNQP36LG",
      "Arn": "arn:aws:iam::aws:policy/CloudFrontReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to CloudFront distribution configuration information and list distributions via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:39:55.000Z",
      "UpdateDate": "2024-01-04T16:55:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "cfReadOnly",
        "Effect": "Allow",
        "Action": [
          "acm:ListCertificates",
          "cloudfront:Describe*",
          "cloudfront:Get*",
          "cloudfront:List*",
          "cloudfront-keyvaluestore:Describe*",
          "cloudfront-keyvaluestore:Get*",
          "cloudfront-keyvaluestore:List*",
          "iam:ListServerCertificates",
          "route53:List*",
          "waf:ListWebACLs",
          "waf:GetWebACL",
          "wafv2:ListWebACLs",
          "wafv2:GetWebACL"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudSearchFullAccess": {
    "policy": {
      "PolicyName": "CloudSearchFullAccess",
      "PolicyId": "ANPAIM6OOWKQ7L7VBOZOC",
      "Arn": "arn:aws:iam::aws:policy/CloudSearchFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the Amazon CloudSearch configuration service.",
      "CreateDate": "2015-02-06T18:39:56.000Z",
      "UpdateDate": "2015-02-06T18:39:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudsearch:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudSearchReadOnlyAccess": {
    "policy": {
      "PolicyName": "CloudSearchReadOnlyAccess",
      "PolicyId": "ANPAJWPLX7N7BCC3RZLHW",
      "Arn": "arn:aws:iam::aws:policy/CloudSearchReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to the Amazon CloudSearch configuration service.",
      "CreateDate": "2015-02-06T18:39:57.000Z",
      "UpdateDate": "2015-02-06T18:39:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudsearch:Describe*",
          "cloudsearch:List*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchFullAccess": {
    "policy": {
      "PolicyName": "CloudWatchFullAccess",
      "PolicyId": "ANPAIKEABORKUXN6DEAZU",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to CloudWatch.",
      "CreateDate": "2015-02-06T18:40:00.000Z",
      "UpdateDate": "2022-11-27T13:23:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:Describe*",
          "cloudwatch:*",
          "logs:*",
          "sns:*",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRole",
          "oam:ListSinks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "oam:ListAttachedLinks"
        ],
        "Resource": [
          "arn:aws:oam:*:*:sink/*"
        ]
      }
    ]
  },
  "CloudWatchReadOnlyAccess": {
    "policy": {
      "PolicyName": "CloudWatchReadOnlyAccess",
      "PolicyId": "ANPAJN23PDQP7SZQAE3QE",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to CloudWatch.",
      "CreateDate": "2015-02-06T18:40:01.000Z",
      "UpdateDate": "2023-12-05T19:24:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudWatchReadOnlyAccessPermissions",
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DescribeScalingPolicies",
          "autoscaling:Describe*",
          "cloudwatch:BatchGet*",
          "cloudwatch:Describe*",
          "cloudwatch:GenerateQuery",
          "cloudwatch:Get*",
          "cloudwatch:List*",
          "logs:Get*",
          "logs:List*",
          "logs:StartQuery",
          "logs:StopQuery",
          "logs:Describe*",
          "logs:TestMetricFilter",
          "logs:FilterLogEvents",
          "logs:StartLiveTail",
          "logs:StopLiveTail",
          "oam:ListSinks",
          "sns:Get*",
          "sns:List*",
          "rum:BatchGet*",
          "rum:Get*",
          "rum:List*",
          "synthetics:Describe*",
          "synthetics:Get*",
          "synthetics:List*",
          "xray:BatchGet*",
          "xray:Get*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OAMReadPermissions",
        "Effect": "Allow",
        "Action": [
          "oam:ListAttachedLinks"
        ],
        "Resource": [
          "arn:aws:oam:*:*:sink/*"
        ]
      }
    ]
  },
  "CloudWatchLogsFullAccess": {
    "policy": {
      "PolicyName": "CloudWatchLogsFullAccess",
      "PolicyId": "ANPAJ3ZGNWK2R5HW5BQFO",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to CloudWatch Logs",
      "CreateDate": "2015-02-06T18:40:02.000Z",
      "UpdateDate": "2023-11-26T18:12:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudWatchLogsFullAccess",
        "Effect": "Allow",
        "Action": [
          "logs:*",
          "cloudwatch:GenerateQuery"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchLogsReadOnlyAccess": {
    "policy": {
      "PolicyName": "CloudWatchLogsReadOnlyAccess",
      "PolicyId": "ANPAJ2YIYDYSNNEHK3VKW",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to CloudWatch Logs",
      "CreateDate": "2015-02-06T18:40:03.000Z",
      "UpdateDate": "2023-11-26T18:11:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudWatchLogsReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "logs:Describe*",
          "logs:Get*",
          "logs:List*",
          "logs:StartQuery",
          "logs:StopQuery",
          "logs:TestMetricFilter",
          "logs:FilterLogEvents",
          "logs:StartLiveTail",
          "logs:StopLiveTail",
          "cloudwatch:GenerateQuery"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDirectConnectFullAccess": {
    "policy": {
      "PolicyName": "AWSDirectConnectFullAccess",
      "PolicyId": "ANPAJQF2QKZSK74KTIHOW",
      "Arn": "arn:aws:iam::aws:policy/AWSDirectConnectFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Direct Connect via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:07.000Z",
      "UpdateDate": "2019-04-30T15:29:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "directconnect:*",
          "ec2:DescribeVpnGateways",
          "ec2:DescribeTransitGateways"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDirectConnectReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSDirectConnectReadOnlyAccess",
      "PolicyId": "ANPAI23HZ27SI6FQMGNQ2",
      "Arn": "arn:aws:iam::aws:policy/AWSDirectConnectReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Direct Connect via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:08.000Z",
      "UpdateDate": "2020-05-18T18:48:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "directconnect:Describe*",
          "directconnect:List*",
          "ec2:DescribeVpnGateways",
          "ec2:DescribeTransitGateways"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonAppStreamFullAccess": {
    "policy": {
      "PolicyName": "AmazonAppStreamFullAccess",
      "PolicyId": "ANPAJLZZXU2YQVGL4QDNC",
      "Arn": "arn:aws:iam::aws:policy/AmazonAppStreamFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon AppStream via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:09.000Z",
      "UpdateDate": "2020-08-28T17:24:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "appstream:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:RegisterScalableTarget",
          "application-autoscaling:DescribeScheduledActions",
          "application-autoscaling:PutScheduledAction",
          "application-autoscaling:DeleteScheduledAction"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:PutMetricAlarm"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcEndpoints"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:ListRoles"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/appstream.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_AppStreamFleet"
        ]
      }
    ]
  },
  "AmazonAppStreamReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonAppStreamReadOnlyAccess",
      "PolicyId": "ANPAJXIFDGB4VBX23DX7K",
      "Arn": "arn:aws:iam::aws:policy/AmazonAppStreamReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon AppStream via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:10.000Z",
      "UpdateDate": "2016-12-07T21:00:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "appstream:Get*",
          "appstream:List*",
          "appstream:Describe*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDynamoDBFullAccess": {
    "policy": {
      "PolicyName": "AmazonDynamoDBFullAccess",
      "PolicyId": "ANPAINUGF2JSOSUY76KYA",
      "Arn": "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
      "Path": "/",
      "DefaultVersionId": "v15",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon DynamoDB via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:11.000Z",
      "UpdateDate": "2021-01-29T17:38:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "dynamodb:*",
          "dax:*",
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:RegisterScalableTarget",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarmHistory",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:GetMetricData",
          "datapipeline:ActivatePipeline",
          "datapipeline:CreatePipeline",
          "datapipeline:DeletePipeline",
          "datapipeline:DescribeObjects",
          "datapipeline:DescribePipelines",
          "datapipeline:GetPipelineDefinition",
          "datapipeline:ListPipelines",
          "datapipeline:PutPipelineDefinition",
          "datapipeline:QueryObjects",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "iam:GetRole",
          "iam:ListRoles",
          "kms:DescribeKey",
          "kms:ListAliases",
          "sns:CreateTopic",
          "sns:DeleteTopic",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics",
          "sns:Subscribe",
          "sns:Unsubscribe",
          "sns:SetTopicAttributes",
          "lambda:CreateFunction",
          "lambda:ListFunctions",
          "lambda:ListEventSourceMappings",
          "lambda:CreateEventSourceMapping",
          "lambda:DeleteEventSourceMapping",
          "lambda:GetFunctionConfiguration",
          "lambda:DeleteFunction",
          "resource-groups:ListGroups",
          "resource-groups:ListGroupResources",
          "resource-groups:GetGroup",
          "resource-groups:GetGroupQuery",
          "resource-groups:DeleteGroup",
          "resource-groups:CreateGroup",
          "tag:GetResources",
          "kinesis:ListStreams",
          "kinesis:DescribeStream",
          "kinesis:DescribeStreamSummary"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "cloudwatch:GetInsightRuleReport"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDynamoDBReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonDynamoDBReadOnlyAccess",
      "PolicyId": "ANPAIY2XFNA232XJ6J7X2",
      "Arn": "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v14",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon DynamoDB via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:12.000Z",
      "UpdateDate": "2024-03-20T15:45:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "GeneralReadOnlyAccess",
        "Action": [
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "cloudwatch:DescribeAlarmHistory",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricData",
          "datapipeline:DescribeObjects",
          "datapipeline:DescribePipelines",
          "datapipeline:GetPipelineDefinition",
          "datapipeline:ListPipelines",
          "datapipeline:QueryObjects",
          "dynamodb:BatchGetItem",
          "dynamodb:Describe*",
          "dynamodb:List*",
          "dynamodb:GetItem",
          "dynamodb:GetResourcePolicy",
          "dynamodb:Query",
          "dynamodb:Scan",
          "dynamodb:PartiQLSelect",
          "dax:Describe*",
          "dax:List*",
          "dax:GetItem",
          "dax:BatchGetItem",
          "dax:Query",
          "dax:Scan",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "iam:GetRole",
          "iam:ListRoles",
          "kms:DescribeKey",
          "kms:ListAliases",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics",
          "lambda:ListFunctions",
          "lambda:ListEventSourceMappings",
          "lambda:GetFunctionConfiguration",
          "resource-groups:ListGroups",
          "resource-groups:ListGroupResources",
          "resource-groups:GetGroup",
          "resource-groups:GetGroupQuery",
          "tag:GetResources",
          "kinesis:ListStreams",
          "kinesis:DescribeStream",
          "kinesis:DescribeStreamSummary"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CCIAccess",
        "Action": [
          "cloudwatch:GetInsightRuleReport"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
        ]
      }
    ]
  },
  "AmazonDynamoDBFullAccesswithDataPipeline": {
    "policy": {
      "PolicyName": "AmazonDynamoDBFullAccesswithDataPipeline",
      "PolicyId": "ANPAJ3ORT7KDISSXGHJXA",
      "Arn": "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccesswithDataPipeline",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is on a deprecation path. See documentation for guidance: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBPipeline.html. Provides full access to Amazon DynamoDB including Export/Import using AWS Data Pipeline via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:14.000Z",
      "UpdateDate": "2015-11-12T02:17:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarmHistory",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "cloudwatch:PutMetricAlarm",
          "dynamodb:*",
          "sns:CreateTopic",
          "sns:DeleteTopic",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics",
          "sns:Subscribe",
          "sns:Unsubscribe",
          "sns:SetTopicAttributes"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Sid": "DDBConsole"
      },
      {
        "Action": [
          "lambda:*",
          "iam:ListRoles"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Sid": "DDBConsoleTriggers"
      },
      {
        "Action": [
          "datapipeline:*",
          "iam:ListRoles"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Sid": "DDBConsoleImportExport"
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRolePolicy",
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ],
        "Sid": "IAMEDPRoles"
      },
      {
        "Action": [
          "ec2:CreateTags",
          "ec2:DescribeInstances",
          "ec2:RunInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "elasticmapreduce:*",
          "datapipeline:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Sid": "EMR"
      },
      {
        "Action": [
          "s3:DeleteObject",
          "s3:Get*",
          "s3:List*",
          "s3:Put*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Sid": "S3"
      }
    ]
  },
  "AmazonEC2FullAccess": {
    "policy": {
      "PolicyName": "AmazonEC2FullAccess",
      "PolicyId": "ANPAI3VAJF5ZCRZ7MCQE6",
      "Arn": "arn:aws:iam::aws:policy/AmazonEC2FullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon EC2 via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:15.000Z",
      "UpdateDate": "2018-11-27T02:16:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ec2:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2ReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonEC2ReadOnlyAccess",
      "PolicyId": "ANPAIGDT4SV4GSETWTBZK",
      "Arn": "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon EC2 via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:17.000Z",
      "UpdateDate": "2024-02-14T18:43:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElastiCacheFullAccess": {
    "policy": {
      "PolicyName": "AmazonElastiCacheFullAccess",
      "PolicyId": "ANPAIA2V44CPHAUAAECKG",
      "Arn": "arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon ElastiCache via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:20.000Z",
      "UpdateDate": "2023-11-28T03:49:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ElastiCacheManagementActions",
        "Effect": "Allow",
        "Action": [
          "elasticache:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache"
        ]
      },
      {
        "Sid": "CreateVPCEndpoints",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "AllowAccessToElastiCacheTaggedVpcEndpoints",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "NotResource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "TagVPCEndpointsOnCreation",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "AllowAccessToEc2",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowAccessToKMS",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListAliases",
          "kms:ListKeys"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowAccessToCloudWatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowAccessToAutoScaling",
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScheduledActions",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:DescribeScalingActivities"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeLogGroups",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListLogDeliveryStreams",
        "Effect": "Allow",
        "Action": [
          "firehose:ListDeliveryStreams"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeS3Buckets",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowAccessToOutposts",
        "Effect": "Allow",
        "Action": [
          "outposts:ListOutposts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowAccessToSNS",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElastiCacheReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonElastiCacheReadOnlyAccess",
      "PolicyId": "ANPAIPDACSNQHSENWAKM2",
      "Arn": "arn:aws:iam::aws:policy/AmazonElastiCacheReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon ElastiCache via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:21.000Z",
      "UpdateDate": "2015-02-06T18:40:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "elasticache:Describe*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticMapReduceFullAccess": {
    "policy": {
      "PolicyName": "AmazonElasticMapReduceFullAccess",
      "PolicyId": "ANPAIZP5JFP3AMSGINBB2",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is on a deprecation path. See documentation for guidance: https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-iam-policies.html. Provides full access to Amazon Elastic MapReduce and underlying services that it requires such as EC2 and S3",
      "CreateDate": "2015-02-06T18:40:22.000Z",
      "UpdateDate": "2019-10-11T15:19:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudwatch:*",
          "cloudformation:CreateStack",
          "cloudformation:DescribeStackEvents",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:CancelSpotInstanceRequests",
          "ec2:CreateRoute",
          "ec2:CreateSecurityGroup",
          "ec2:CreateTags",
          "ec2:DeleteRoute",
          "ec2:DeleteTags",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeInstances",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeSpotPriceHistory",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "ec2:DescribeRouteTables",
          "ec2:DescribeNetworkAcls",
          "ec2:CreateVpcEndpoint",
          "ec2:ModifyImageAttribute",
          "ec2:ModifyInstanceAttribute",
          "ec2:RequestSpotInstances",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RunInstances",
          "ec2:TerminateInstances",
          "elasticmapreduce:*",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:ListRoles",
          "iam:PassRole",
          "kms:List*",
          "s3:*",
          "sdb:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticMapReduceReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonElasticMapReduceReadOnlyAccess",
      "PolicyId": "ANPAIHP6NH2S6GYFCOINC",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticMapReduceReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Elastic MapReduce via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:23.000Z",
      "UpdateDate": "2020-07-29T23:14:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "elasticmapreduce:Describe*",
          "elasticmapreduce:List*",
          "elasticmapreduce:GetBlockPublicAccessConfiguration",
          "elasticmapreduce:ViewEventsFromAllClustersInConsole",
          "s3:GetObject",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "sdb:Select",
          "cloudwatch:GetMetricStatistics"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonGlacierReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonGlacierReadOnlyAccess",
      "PolicyId": "ANPAI2D5NJKMU274MET4E",
      "Arn": "arn:aws:iam::aws:policy/AmazonGlacierReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Glacier via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:27.000Z",
      "UpdateDate": "2016-05-05T18:46:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "glacier:DescribeJob",
          "glacier:DescribeVault",
          "glacier:GetDataRetrievalPolicy",
          "glacier:GetJobOutput",
          "glacier:GetVaultAccessPolicy",
          "glacier:GetVaultLock",
          "glacier:GetVaultNotifications",
          "glacier:ListJobs",
          "glacier:ListMultipartUploads",
          "glacier:ListParts",
          "glacier:ListTagsForVault",
          "glacier:ListVaults"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonGlacierFullAccess": {
    "policy": {
      "PolicyName": "AmazonGlacierFullAccess",
      "PolicyId": "ANPAJQSTZJWB2AXXAKHVQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonGlacierFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Glacier via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:28.000Z",
      "UpdateDate": "2015-02-06T18:40:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "glacier:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKinesisFullAccess": {
    "policy": {
      "PolicyName": "AmazonKinesisFullAccess",
      "PolicyId": "ANPAIVF32HAMOXCUYRAYE",
      "Arn": "arn:aws:iam::aws:policy/AmazonKinesisFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all streams via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:29.000Z",
      "UpdateDate": "2015-02-06T18:40:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKinesisReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonKinesisReadOnlyAccess",
      "PolicyId": "ANPAIOCMTDT5RLKZ2CAJO",
      "Arn": "arn:aws:iam::aws:policy/AmazonKinesisReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to all streams via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:30.000Z",
      "UpdateDate": "2015-02-06T18:40:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:Get*",
          "kinesis:List*",
          "kinesis:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceRead-only": {
    "policy": {
      "PolicyName": "AWSMarketplaceRead-only",
      "PolicyId": "ANPAJOOM6LETKURTJ3XZ2",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceRead-only",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the ability to review AWS Marketplace subscriptions",
      "CreateDate": "2015-02-06T18:40:31.000Z",
      "UpdateDate": "2023-01-19T23:30:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Resource": [
          "*"
        ],
        "Action": [
          "aws-marketplace:ViewSubscriptions",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs"
        ],
        "Effect": "Allow"
      },
      {
        "Resource": [
          "*"
        ],
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListBuilds",
          "aws-marketplace:DescribeBuilds",
          "iam:ListRoles",
          "iam:ListInstanceProfiles",
          "sns:GetTopicAttributes",
          "sns:ListTopics"
        ]
      },
      {
        "Resource": [
          "*"
        ],
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListPrivateMarketplaceRequests",
          "aws-marketplace:DescribePrivateMarketplaceRequests"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListPrivateListings"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceManageSubscriptions": {
    "policy": {
      "PolicyName": "AWSMarketplaceManageSubscriptions",
      "PolicyId": "ANPAJRDW2WIFN7QLUAKBQ",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceManageSubscriptions",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the ability to subscribe and unsubscribe to AWS Marketplace software",
      "CreateDate": "2015-02-06T18:40:32.000Z",
      "UpdateDate": "2023-01-19T23:45:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "aws-marketplace:ViewSubscriptions",
          "aws-marketplace:Subscribe",
          "aws-marketplace:Unsubscribe"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "aws-marketplace:CreatePrivateMarketplaceRequests",
          "aws-marketplace:ListPrivateMarketplaceRequests",
          "aws-marketplace:DescribePrivateMarketplaceRequests"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListPrivateListings"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMobileAnalyticsFullAccess": {
    "policy": {
      "PolicyName": "AmazonMobileAnalyticsFullAccess",
      "PolicyId": "ANPAIJIKLU2IJ7WJ6DZFG",
      "Arn": "arn:aws:iam::aws:policy/AmazonMobileAnalyticsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all application resources.",
      "CreateDate": "2015-02-06T18:40:34.000Z",
      "UpdateDate": "2015-02-06T18:40:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mobileanalytics:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMobileAnalyticsFinancialReportAccess": {
    "policy": {
      "PolicyName": "AmazonMobileAnalyticsFinancialReportAccess",
      "PolicyId": "ANPAJKJHO2R27TXKCWBU4",
      "Arn": "arn:aws:iam::aws:policy/AmazonMobileAnalyticsFinancialReportAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to all reports including financial data for all application resources.",
      "CreateDate": "2015-02-06T18:40:35.000Z",
      "UpdateDate": "2015-02-06T18:40:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mobileanalytics:GetReports",
          "mobileanalytics:GetFinancialReports"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMobileAnalyticsNon-financialReportAccess": {
    "policy": {
      "PolicyName": "AmazonMobileAnalyticsNon-financialReportAccess",
      "PolicyId": "ANPAIQLKQ4RXPUBBVVRDE",
      "Arn": "arn:aws:iam::aws:policy/AmazonMobileAnalyticsNon-financialReportAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to non financial reports for all application resources.",
      "CreateDate": "2015-02-06T18:40:36.000Z",
      "UpdateDate": "2015-02-06T18:40:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mobileanalytics:GetReports"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMobileAnalyticsWriteOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMobileAnalyticsWriteOnlyAccess",
      "PolicyId": "ANPAJ5TAWBBQC2FAL3G6G",
      "Arn": "arn:aws:iam::aws:policy/AmazonMobileAnalyticsWriteOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides write only access to put event data for all application resources. (Recommended for SDK integration)",
      "CreateDate": "2015-02-06T18:40:37.000Z",
      "UpdateDate": "2015-02-06T18:40:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mobileanalytics:PutEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "IAMFullAccess": {
    "policy": {
      "PolicyName": "IAMFullAccess",
      "PolicyId": "ANPAI7XKCFMBPM3QQRRVQ",
      "Arn": "arn:aws:iam::aws:policy/IAMFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to IAM via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:38.000Z",
      "UpdateDate": "2019-06-21T19:40:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:*",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribePolicy",
          "organizations:ListChildren",
          "organizations:ListParents",
          "organizations:ListPoliciesForTarget",
          "organizations:ListRoots",
          "organizations:ListPolicies",
          "organizations:ListTargetsForPolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "IAMReadOnlyAccess": {
    "policy": {
      "PolicyName": "IAMReadOnlyAccess",
      "PolicyId": "ANPAJKSO7NDY4T57MWDSQ",
      "Arn": "arn:aws:iam::aws:policy/IAMReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to IAM via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:39.000Z",
      "UpdateDate": "2018-01-25T19:11:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:GenerateCredentialReport",
          "iam:GenerateServiceLastAccessedDetails",
          "iam:Get*",
          "iam:List*",
          "iam:SimulateCustomPolicy",
          "iam:SimulatePrincipalPolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSKeyManagementServicePowerUser": {
    "policy": {
      "PolicyName": "AWSKeyManagementServicePowerUser",
      "PolicyId": "ANPAJNPP7PPPPMJRV2SA4",
      "Arn": "arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS Key Management Service (KMS).",
      "CreateDate": "2015-02-06T18:40:40.000Z",
      "UpdateDate": "2017-03-07T00:55:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kms:CreateAlias",
          "kms:CreateKey",
          "kms:DeleteAlias",
          "kms:Describe*",
          "kms:GenerateRandom",
          "kms:Get*",
          "kms:List*",
          "kms:TagResource",
          "kms:UntagResource",
          "iam:ListGroups",
          "iam:ListRoles",
          "iam:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkMailFullAccess": {
    "policy": {
      "PolicyName": "AmazonWorkMailFullAccess",
      "PolicyId": "ANPAJQVKNMT7SVATQ4AUY",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkMailFullAccess",
      "Path": "/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to WorkMail, Directory Service, SES, EC2 and read access to KMS metadata.",
      "CreateDate": "2015-02-06T18:40:41.000Z",
      "UpdateDate": "2020-12-21T14:13:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ds:AuthorizeApplication",
          "ds:CheckAlias",
          "ds:CreateAlias",
          "ds:CreateDirectory",
          "ds:CreateIdentityPoolDirectory",
          "ds:DeleteDirectory",
          "ds:DescribeDirectories",
          "ds:GetDirectoryLimits",
          "ds:ListAuthorizedApplications",
          "ds:UnauthorizeApplication",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSubnet",
          "ec2:CreateTags",
          "ec2:CreateVpc",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteSubnet",
          "ec2:DeleteVpc",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "kms:DescribeKey",
          "kms:ListAliases",
          "lambda:ListFunctions",
          "route53:ChangeResourceRecordSets",
          "route53:ListHostedZones",
          "route53:ListResourceRecordSets",
          "route53:GetHostedZone",
          "route53domains:CheckDomainAvailability",
          "route53domains:ListDomains",
          "ses:*",
          "workmail:*",
          "iam:ListRoles",
          "logs:DescribeLogGroups",
          "logs:CreateLogGroup",
          "logs:PutRetentionPolicy",
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/events.workmail.amazonaws.com/AWSServiceRoleForAmazonWorkMailEvents*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*workmail*"
        ]
      }
    ]
  },
  "AmazonWorkMailReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonWorkMailReadOnlyAccess",
      "PolicyId": "ANPAJHF7J65E2QFKCWAJM",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkMailReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to WorkMail and SES.",
      "CreateDate": "2015-02-06T18:40:42.000Z",
      "UpdateDate": "2019-07-25T08:24:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ses:Describe*",
          "ses:Get*",
          "workmail:Describe*",
          "workmail:Get*",
          "workmail:List*",
          "workmail:Search*",
          "lambda:ListFunctions",
          "iam:ListRoles",
          "logs:DescribeLogGroups",
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSImportExportReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSImportExportReadOnlyAccess",
      "PolicyId": "ANPAJNTV4OG52ESYZHCNK",
      "Arn": "arn:aws:iam::aws:policy/AWSImportExportReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to the jobs created under the AWS account.",
      "CreateDate": "2015-02-06T18:40:42.000Z",
      "UpdateDate": "2015-02-06T18:40:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "importexport:ListJobs",
          "importexport:GetStatus"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSImportExportFullAccess": {
    "policy": {
      "PolicyName": "AWSImportExportFullAccess",
      "PolicyId": "ANPAJCQCT4JGTLC6722MQ",
      "Arn": "arn:aws:iam::aws:policy/AWSImportExportFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read and write access to the jobs created under the AWS account.",
      "CreateDate": "2015-02-06T18:40:43.000Z",
      "UpdateDate": "2015-02-06T18:40:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "importexport:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambdaExecute": {
    "policy": {
      "PolicyName": "AWSLambdaExecute",
      "PolicyId": "ANPAJE5FX7FQZSU5XAKGO",
      "Arn": "arn:aws:iam::aws:policy/AWSLambdaExecute",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides Put, Get access to S3 and full access to CloudWatch Logs.",
      "CreateDate": "2015-02-06T18:40:46.000Z",
      "UpdateDate": "2015-02-06T18:40:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:*"
        ],
        "Resource": [
          "arn:aws:logs:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      }
    ]
  },
  "AWSLambdaInvocation-DynamoDB": {
    "policy": {
      "PolicyName": "AWSLambdaInvocation-DynamoDB",
      "PolicyId": "ANPAJTHQ3EKCQALQDYG5G",
      "Arn": "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read access to DynamoDB Streams.",
      "CreateDate": "2015-02-06T18:40:47.000Z",
      "UpdateDate": "2015-02-06T18:40:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:DescribeStream",
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:ListStreams"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRedshiftFullAccess": {
    "policy": {
      "PolicyName": "AmazonRedshiftFullAccess",
      "PolicyId": "ANPAISEKCHH4YDB46B5ZO",
      "Arn": "arn:aws:iam::aws:policy/AmazonRedshiftFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Redshift via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:50.000Z",
      "UpdateDate": "2022-07-07T23:31:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "redshift:*",
          "redshift-serverless:*",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeInternetGateways",
          "sns:CreateTopic",
          "sns:Get*",
          "sns:List*",
          "cloudwatch:Describe*",
          "cloudwatch:Get*",
          "cloudwatch:List*",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:EnableAlarmActions",
          "cloudwatch:DisableAlarmActions",
          "tag:GetResources",
          "tag:UntagResources",
          "tag:GetTagValues",
          "tag:GetTagKeys",
          "tag:TagResources"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift"
        ]
      },
      {
        "Sid": "DataAPIPermissions",
        "Action": [
          "redshift-data:ExecuteStatement",
          "redshift-data:CancelStatement",
          "redshift-data:ListStatements",
          "redshift-data:GetStatementResult",
          "redshift-data:DescribeStatement",
          "redshift-data:ListDatabases",
          "redshift-data:ListSchemas",
          "redshift-data:ListTables",
          "redshift-data:DescribeTable"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerListPermissions",
        "Action": [
          "secretsmanager:ListSecrets"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerCreateGetPermissions",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:TagResource"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRedshiftReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRedshiftReadOnlyAccess",
      "PolicyId": "ANPAIGD46KSON64QBSEZM",
      "Arn": "arn:aws:iam::aws:policy/AmazonRedshiftReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Redshift via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:51.000Z",
      "UpdateDate": "2024-02-08T00:24:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonRedshiftReadOnlyAccess",
        "Action": [
          "redshift:Describe*",
          "redshift:ListRecommendations",
          "redshift:ViewQueriesInConsole",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeInternetGateways",
          "sns:Get*",
          "sns:List*",
          "cloudwatch:Describe*",
          "cloudwatch:List*",
          "cloudwatch:Get*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSFullAccess": {
    "policy": {
      "PolicyName": "AmazonRDSFullAccess",
      "PolicyId": "ANPAI3R4QMOG6Q5A4VWVG",
      "Arn": "arn:aws:iam::aws:policy/AmazonRDSFullAccess",
      "Path": "/",
      "DefaultVersionId": "v14",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon RDS via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:52.000Z",
      "UpdateDate": "2023-08-17T23:00:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rds:*",
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:RegisterScalableTarget",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricData",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCoipPools",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeLocalGatewayRouteTablePermissions",
          "ec2:DescribeLocalGatewayRouteTables",
          "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
          "ec2:DescribeLocalGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "ec2:GetCoipPoolUsage",
          "sns:ListSubscriptions",
          "sns:ListTopics",
          "sns:Publish",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "outposts:GetOutpostInstanceTypes",
          "devops-guru:GetResourceCollection"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "pi:*"
        ],
        "Resource": [
          "arn:aws:pi:*:*:metrics/rds/*",
          "arn:aws:pi:*:*:perf-reports/rds/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "devops-guru:SearchInsights",
          "devops-guru:ListAnomaliesForInsight"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRDSReadOnlyAccess",
      "PolicyId": "ANPAJKTTTYV2IIHKLZ346",
      "Arn": "arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon RDS via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:53.000Z",
      "UpdateDate": "2023-04-14T12:32:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rds:Describe*",
          "rds:ListTagsForResource",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricData",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "devops-guru:GetResourceCollection"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "devops-guru:SearchInsights",
          "devops-guru:ListAnomaliesForInsight"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53FullAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53FullAccess",
      "PolicyId": "ANPAJWVDLG5RPST6PHQ3A",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53FullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all Amazon Route 53 via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:54.000Z",
      "UpdateDate": "2018-12-20T21:42:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53:*",
          "route53domains:*",
          "cloudfront:ListDistributions",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticbeanstalk:DescribeEnvironments",
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "s3:GetBucketWebsite",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeRegions",
          "sns:ListTopics",
          "sns:ListSubscriptionsByTopic",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricStatistics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/domainnames"
        ]
      }
    ]
  },
  "AmazonRoute53ReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53ReadOnlyAccess",
      "PolicyId": "ANPAITOYK2ZAOQFXV2JNC",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53ReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to all Amazon Route 53 via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:55.000Z",
      "UpdateDate": "2016-11-15T21:15:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53:Get*",
          "route53:List*",
          "route53:TestDNSAnswer"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53DomainsFullAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53DomainsFullAccess",
      "PolicyId": "ANPAIPAFBMIYUILMOKL6G",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53DomainsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all Route53 Domains actions and Create Hosted Zone to allow Hosted Zone creation as part of domain registrations.",
      "CreateDate": "2015-02-06T18:40:56.000Z",
      "UpdateDate": "2015-02-06T18:40:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53:CreateHostedZone",
          "route53domains:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonS3FullAccess": {
    "policy": {
      "PolicyName": "AmazonS3FullAccess",
      "PolicyId": "ANPAIFIR6V6BVTRAHWINE",
      "Arn": "arn:aws:iam::aws:policy/AmazonS3FullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 5,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all buckets via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:58.000Z",
      "UpdateDate": "2021-09-27T20:16:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:*",
          "s3-object-lambda:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53DomainsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53DomainsReadOnlyAccess",
      "PolicyId": "ANPAIDRINP6PPTRXYVQCI",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53DomainsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Route53 Domains list and actions.",
      "CreateDate": "2015-02-06T18:40:57.000Z",
      "UpdateDate": "2015-02-06T18:40:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53domains:Get*",
          "route53domains:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonS3ReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonS3ReadOnlyAccess",
      "PolicyId": "ANPAIZTJ4DXE7G6AGAE6M",
      "Arn": "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to all buckets via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:40:59.000Z",
      "UpdateDate": "2023-08-10T21:31:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:Get*",
          "s3:List*",
          "s3:Describe*",
          "s3-object-lambda:Get*",
          "s3-object-lambda:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSESFullAccess": {
    "policy": {
      "PolicyName": "AmazonSESFullAccess",
      "PolicyId": "ANPAJ2P4NXCHAT7NDPNR4",
      "Arn": "arn:aws:iam::aws:policy/AmazonSESFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon SES via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:02.000Z",
      "UpdateDate": "2015-02-06T18:41:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ses:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "SecurityAudit": {
    "policy": {
      "PolicyName": "SecurityAudit",
      "PolicyId": "ANPAIX2T3QCXHR2OGGCTO",
      "Arn": "arn:aws:iam::aws:policy/SecurityAudit",
      "Path": "/",
      "DefaultVersionId": "v42",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The security audit template grants access to read security configuration metadata. It is useful for software that audits the configuration of an AWS account.",
      "CreateDate": "2015-02-06T18:41:01.000Z",
      "UpdateDate": "2024-04-05T17:32:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "BaseSecurityAuditStatement",
        "Effect": "Allow",
        "Action": [
          "a4b:ListSkills",
          "access-analyzer:GetAnalyzedResource",
          "access-analyzer:GetAnalyzer",
          "access-analyzer:GetArchiveRule",
          "access-analyzer:GetFinding",
          "access-analyzer:ListAnalyzedResources",
          "access-analyzer:ListAnalyzers",
          "access-analyzer:ListArchiveRules",
          "access-analyzer:ListFindings",
          "access-analyzer:ListTagsForResource",
          "account:GetAlternateContact",
          "account:GetRegionOptStatus",
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:DescribeCertificateAuthorityAuditReport",
          "acm-pca:GetPolicy",
          "acm-pca:ListCertificateAuthorities",
          "acm-pca:ListPermissions",
          "acm-pca:ListTags",
          "acm:Describe*",
          "acm:List*",
          "airflow:GetEnvironment",
          "airflow:ListEnvironments",
          "appflow:ListFlows",
          "appflow:ListTagsForResource",
          "application-autoscaling:Describe*",
          "appmesh:Describe*",
          "appmesh:List*",
          "apprunner:DescribeAutoScalingConfiguration",
          "apprunner:DescribeCustomDomains",
          "apprunner:DescribeObservabilityConfiguration",
          "apprunner:DescribeService",
          "apprunner:DescribeVpcConnector",
          "apprunner:DescribeVpcIngressConnection",
          "apprunner:ListAutoScalingConfigurations",
          "apprunner:ListConnections",
          "apprunner:ListObservabilityConfigurations",
          "apprunner:ListOperations",
          "apprunner:ListServices",
          "apprunner:ListTagsForResource",
          "apprunner:ListVpcConnectors",
          "apprunner:ListVpcIngressConnections",
          "appsync:GetApiCache",
          "appsync:List*",
          "athena:GetWorkGroup",
          "athena:List*",
          "auditmanager:GetAccountStatus",
          "auditmanager:ListAssessmentControlInsightsByControlDomain",
          "auditmanager:ListAssessmentFrameworkShareRequests",
          "auditmanager:ListAssessmentFrameworks",
          "auditmanager:ListAssessmentReports",
          "auditmanager:ListAssessments",
          "auditmanager:ListControlDomainInsights",
          "auditmanager:ListControlDomainInsightsByAssessment",
          "auditmanager:ListControlInsightsByControlDomain",
          "auditmanager:ListControls",
          "auditmanager:ListNotifications",
          "auditmanager:ListTagsForResource",
          "autoscaling-plans:DescribeScalingPlans",
          "autoscaling:Describe*",
          "backup:DescribeGlobalSettings",
          "backup:DescribeRegionSettings",
          "backup:GetBackupVaultAccessPolicy",
          "backup:GetBackupVaultNotifications",
          "backup:ListBackupVaults",
          "backup:ListTags",
          "batch:DescribeComputeEnvironments",
          "batch:DescribeJobDefinitions",
          "bedrock:GetCustomModel",
          "bedrock:GetModelInvocationLoggingConfiguration",
          "bedrock:ListCustomModels",
          "bedrock:ListTagsForResource",
          "braket:SearchJobs",
          "braket:SearchQuantumTasks",
          "chime:List*",
          "cloud9:Describe*",
          "cloud9:ListEnvironments",
          "clouddirectory:ListDirectories",
          "cloudformation:DescribeStack*",
          "cloudformation:GetStackPolicy",
          "cloudformation:GetTemplate",
          "cloudformation:ListStack*",
          "cloudfront:Get*",
          "cloudfront:List*",
          "cloudsearch:DescribeDomainEndpointOptions",
          "cloudsearch:DescribeDomains",
          "cloudsearch:DescribeServiceAccessPolicies",
          "cloudtrail:DescribeTrails",
          "cloudtrail:GetEventSelectors",
          "cloudtrail:GetInsightSelectors",
          "cloudtrail:GetTrail",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:ListTags",
          "cloudtrail:ListTrails",
          "cloudtrail:LookupEvents",
          "cloudwatch:Describe*",
          "cloudwatch:GetDashboard",
          "cloudwatch:ListDashboards",
          "cloudwatch:ListTagsForResource",
          "codeartifact:GetDomainPermissionsPolicy",
          "codeartifact:GetRepositoryPermissionsPolicy",
          "codeartifact:ListRepositories",
          "codebuild:BatchGetProjects",
          "codebuild:GetResourcePolicy",
          "codebuild:ListProjects",
          "codecommit:BatchGetRepositories",
          "codecommit:GetBranch",
          "codecommit:GetObjectIdentifier",
          "codecommit:GetRepository",
          "codecommit:GetRepositoryTriggers",
          "codecommit:List*",
          "codedeploy:Batch*",
          "codedeploy:Get*",
          "codedeploy:List*",
          "codepipeline:GetJobDetails",
          "codepipeline:GetPipeline",
          "codepipeline:GetPipelineExecution",
          "codepipeline:GetPipelineState",
          "codepipeline:ListPipelines",
          "codestar:Describe*",
          "codestar:List*",
          "cognito-identity:Describe*",
          "cognito-identity:GetIdentityPoolRoles",
          "cognito-identity:ListIdentityPools",
          "cognito-identity:ListTagsForResource",
          "cognito-idp:Describe*",
          "cognito-idp:ListDevices",
          "cognito-idp:ListGroups",
          "cognito-idp:ListIdentityProviders",
          "cognito-idp:ListResourceServers",
          "cognito-idp:ListTagsForResource",
          "cognito-idp:ListUserImportJobs",
          "cognito-idp:ListUserPoolClients",
          "cognito-idp:ListUserPools",
          "cognito-idp:ListUsers",
          "cognito-idp:ListUsersInGroup",
          "cognito-sync:Describe*",
          "cognito-sync:List*",
          "comprehend:Describe*",
          "comprehend:List*",
          "comprehendmedical:ListICD10CMInferenceJobs",
          "comprehendmedical:ListPHIDetectionJobs",
          "comprehendmedical:ListRxNormInferenceJobs",
          "comprehendmedical:ListSNOMEDCTInferenceJobs",
          "config:BatchGetAggregateResourceConfig",
          "config:BatchGetResourceConfig",
          "config:Deliver*",
          "config:Describe*",
          "config:Get*",
          "config:List*",
          "config:SelectAggregateResourceConfig",
          "config:SelectResourceConfig",
          "connect:ListApprovedOrigins",
          "connect:ListInstanceAttributes",
          "connect:ListInstanceStorageConfigs",
          "connect:ListInstances",
          "connect:ListIntegrationAssociations",
          "connect:ListLambdaFunctions",
          "connect:ListLexBots",
          "connect:ListSecurityKeys",
          "databrew:DescribeDataset",
          "databrew:DescribeProject",
          "databrew:ListJobs",
          "databrew:ListProjects",
          "dataexchange:ListDataSets",
          "datapipeline:DescribeObjects",
          "datapipeline:DescribePipelines",
          "datapipeline:EvaluateExpression",
          "datapipeline:GetPipelineDefinition",
          "datapipeline:ListPipelines",
          "datapipeline:QueryObjects",
          "datapipeline:ValidatePipelineDefinition",
          "datasync:Describe*",
          "datasync:List*",
          "dax:Describe*",
          "dax:ListTags",
          "deepracer:ListModels",
          "detective:GetGraphIngestState",
          "detective:ListGraphs",
          "detective:ListMembers",
          "devicefarm:ListProjects",
          "directconnect:Describe*",
          "discovery:DescribeAgents",
          "discovery:DescribeConfigurations",
          "discovery:DescribeContinuousExports",
          "discovery:DescribeExportConfigurations",
          "discovery:DescribeExportTasks",
          "discovery:DescribeImportTasks",
          "dms:Describe*",
          "dms:ListTagsForResource",
          "docdb-elastic:ListClusters",
          "ds:DescribeDirectories",
          "dynamodb:DescribeContinuousBackups",
          "dynamodb:DescribeExport",
          "dynamodb:DescribeGlobalTable",
          "dynamodb:DescribeKinesisStreamingDestination",
          "dynamodb:DescribeTable",
          "dynamodb:DescribeTimeToLive",
          "dynamodb:ListBackups",
          "dynamodb:ListExports",
          "dynamodb:ListGlobalTables",
          "dynamodb:ListStreams",
          "dynamodb:ListTables",
          "dynamodb:ListTagsOfResource",
          "ec2:Describe*",
          "ec2:GetEbsEncryptionByDefault",
          "ec2:GetImageBlockPublicAccessState",
          "ec2:GetManagedPrefixListAssociations",
          "ec2:GetManagedPrefixListEntries",
          "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
          "ec2:GetNetworkInsightsAccessScopeContent",
          "ec2:GetTransitGatewayAttachmentPropagations",
          "ec2:GetTransitGatewayMulticastDomainAssociations",
          "ec2:GetTransitGatewayPrefixListReferences",
          "ec2:GetTransitGatewayRouteTableAssociations",
          "ec2:GetTransitGatewayRouteTablePropagations",
          "ec2:SearchTransitGatewayRoutes",
          "ecr-public:DescribeImageTags",
          "ecr-public:DescribeImages",
          "ecr-public:DescribeRegistries",
          "ecr-public:DescribeRepositories",
          "ecr-public:GetRegistryCatalogData",
          "ecr-public:GetRepositoryCatalogData",
          "ecr-public:GetRepositoryPolicy",
          "ecr-public:ListTagsForResource",
          "ecr:BatchGetRepositoryScanningConfiguration",
          "ecr:DescribeImageScanFindings",
          "ecr:DescribeImages",
          "ecr:DescribeRegistry",
          "ecr:DescribeRepositories",
          "ecr:GetLifecyclePolicy",
          "ecr:GetRegistryPolicy",
          "ecr:GetRegistryScanningConfiguration",
          "ecr:GetRepositoryPolicy",
          "ecr:ListImages",
          "ecr:ListTagsForResource",
          "ecs:Describe*",
          "ecs:List*",
          "eks:DescribeCluster",
          "eks:DescribeFargateProfile",
          "eks:DescribeNodeGroup",
          "eks:ListClusters",
          "eks:ListFargateProfiles",
          "eks:ListNodeGroups",
          "eks:ListTagsForResource",
          "eks:ListUpdates",
          "elastic-inference:DescribeAccelerators",
          "elasticache:Describe*",
          "elasticache:ListTagsForResource",
          "elasticbeanstalk:Describe*",
          "elasticbeanstalk:ListTagsForResource",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeAccountPreferences",
          "elasticfilesystem:DescribeBackupPolicy",
          "elasticfilesystem:DescribeFileSystemPolicy",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeLifecycleConfiguration",
          "elasticfilesystem:DescribeMountTargetSecurityGroups",
          "elasticfilesystem:DescribeMountTargets",
          "elasticfilesystem:DescribeReplicationConfigurations",
          "elasticfilesystem:DescribeTags",
          "elasticloadbalancing:Describe*",
          "elasticmapreduce:Describe*",
          "elasticmapreduce:GetAutoTerminationPolicy",
          "elasticmapreduce:GetBlockPublicAccessConfiguration",
          "elasticmapreduce:GetManagedScalingPolicy",
          "elasticmapreduce:ListClusters",
          "elasticmapreduce:ListInstances",
          "elasticmapreduce:ListSecurityConfigurations",
          "elastictranscoder:ListPipelines",
          "emr-serverless:GetApplication",
          "emr-serverless:ListApplications",
          "emr-serverless:ListJobRuns",
          "es:Describe*",
          "es:GetCompatibleVersions",
          "es:ListDomainNames",
          "es:ListElasticsearchInstanceTypeDetails",
          "es:ListElasticsearchVersions",
          "es:ListTags",
          "events:Describe*",
          "events:List*",
          "events:TestEventPattern",
          "finspace:ListEnvironments",
          "finspace:ListKxEnvironments",
          "firehose:Describe*",
          "firehose:List*",
          "fms:ListComplianceStatus",
          "fms:ListPolicies",
          "forecast:ListDatasets",
          "frauddetector:GetDetectors",
          "fsx:Describe*",
          "fsx:List*",
          "gamelift:ListBuilds",
          "gamelift:ListFleets",
          "geo:ListMaps",
          "glacier:DescribeVault",
          "glacier:GetDataRetrievalPolicy",
          "glacier:GetVaultAccessPolicy",
          "glacier:GetVaultLock",
          "glacier:ListVaults",
          "globalaccelerator:Describe*",
          "globalaccelerator:List*",
          "glue:GetCrawlers",
          "glue:GetDataCatalogEncryptionSettings",
          "glue:GetDatabases",
          "glue:GetDevEndpoints",
          "glue:GetJobs",
          "glue:GetResourcePolicy",
          "glue:GetSecurityConfiguration",
          "glue:GetSecurityConfigurations",
          "glue:GetTags",
          "grafana:ListWorkspaces",
          "greengrass:List*",
          "guardduty:DescribePublishingDestination",
          "guardduty:Get*",
          "guardduty:List*",
          "health:DescribeAffectedAccountsForOrganization",
          "health:DescribeAffectedEntities",
          "health:DescribeAffectedEntitiesForOrganization",
          "health:DescribeEntityAggregates",
          "health:DescribeEventAggregates",
          "health:DescribeEventDetails",
          "health:DescribeEventDetailsForOrganization",
          "health:DescribeEventTypes",
          "health:DescribeEvents",
          "health:DescribeEventsForOrganization",
          "health:DescribeHealthServiceStatusForOrganization",
          "healthlake:ListFHIRDatastores",
          "honeycode:ListTables",
          "iam:GenerateCredentialReport",
          "iam:GenerateServiceLastAccessedDetails",
          "iam:Get*",
          "iam:List*",
          "iam:SimulateCustomPolicy",
          "iam:SimulatePrincipalPolicy",
          "identitystore:ListGroupMemberships",
          "identitystore:ListGroupMembershipsForMember",
          "identitystore:ListGroups",
          "identitystore:ListUsers",
          "inspector2:BatchGetAccountStatus",
          "inspector2:BatchGetFreeTrialInfo",
          "inspector2:DescribeOrganizationConfiguration",
          "inspector2:GetConfiguration",
          "inspector2:GetDelegatedAdminAccount",
          "inspector2:GetFindingsReportStatus",
          "inspector2:GetMember",
          "inspector2:ListAccountPermissions",
          "inspector2:ListCoverage",
          "inspector2:ListCoverageStatistics",
          "inspector2:ListDelegatedAdminAccounts",
          "inspector2:ListFilters",
          "inspector2:ListFindingAggregations",
          "inspector2:ListFindings",
          "inspector2:ListTagsForResource",
          "inspector2:ListUsageTotals",
          "inspector:Describe*",
          "inspector:Get*",
          "inspector:List*",
          "inspector:Preview*",
          "iot:Describe*",
          "iot:GetPolicy",
          "iot:GetPolicyVersion",
          "iot:List*",
          "iotanalytics:ListChannels",
          "iotevents:ListInputs",
          "iotfleetwise:ListModelManifests",
          "iotsitewise:DescribeGatewayCapabilityConfiguration",
          "iotsitewise:ListAssetModels",
          "iotsitewise:ListGateways",
          "iottwinmaker:ListWorkspaces",
          "kafka-cluster:Describe*",
          "kafka:Describe*",
          "kafka:GetBootstrapBrokers",
          "kafka:GetCompatibleKafkaVersions",
          "kafka:List*",
          "kafkaconnect:Describe*",
          "kafkaconnect:List*",
          "kendra:DescribeIndex",
          "kendra:ListDataSources",
          "kendra:ListIndices",
          "kendra:ListTagsForResource",
          "kinesis:DescribeLimits",
          "kinesis:DescribeStream",
          "kinesis:DescribeStreamConsumer",
          "kinesis:DescribeStreamSummary",
          "kinesis:ListShards",
          "kinesis:ListStreamConsumers",
          "kinesis:ListStreams",
          "kinesis:ListTagsForStream",
          "kinesisanalytics:ListApplications",
          "kinesisanalytics:ListTagsForResource",
          "kinesisvideo:DescribeEdgeConfiguration",
          "kinesisvideo:DescribeMappedResourceConfiguration",
          "kinesisvideo:DescribeMediaStorageConfiguration",
          "kinesisvideo:DescribeNotificationConfiguration",
          "kinesisvideo:DescribeSignalingChannel",
          "kinesisvideo:DescribeStream",
          "kinesisvideo:ListSignalingChannels",
          "kinesisvideo:ListStreams",
          "kinesisvideo:ListTagsForResource",
          "kinesisvideo:ListTagsForStream",
          "kms:Describe*",
          "kms:Get*",
          "kms:List*",
          "lambda:GetAccountSettings",
          "lambda:GetFunctionConfiguration",
          "lambda:GetFunctionEventInvokeConfig",
          "lambda:GetLayerVersionPolicy",
          "lambda:GetPolicy",
          "lambda:List*",
          "lex:DescribeBot",
          "lex:DescribeResourcePolicy",
          "lex:ListBots",
          "license-manager:List*",
          "lightsail:GetBuckets",
          "lightsail:GetContainerServices",
          "lightsail:GetDiskSnapshots",
          "lightsail:GetDisks",
          "lightsail:GetInstances",
          "lightsail:GetLoadBalancers",
          "logs:Describe*",
          "logs:ListTagsForResource",
          "logs:ListTagsLogGroup",
          "lookoutequipment:ListDatasets",
          "lookoutmetrics:ListAnomalyDetectors",
          "lookoutvision:ListProjects",
          "machinelearning:DescribeMLModels",
          "macie2:ListFindings",
          "managedblockchain:ListNetworks",
          "mechanicalturk:ListHITs",
          "mediaconnect:Describe*",
          "mediaconnect:List*",
          "medialive:ListChannels",
          "mediapackage-vod:DescribePackagingGroup",
          "mediapackage-vod:ListPackagingGroups",
          "mediapackage:DescribeOriginEndpoint",
          "mediapackage:ListOriginEndpoints",
          "mediastore:GetContainerPolicy",
          "mediastore:GetCorsPolicy",
          "mediastore:ListContainers",
          "memorydb:DescribeClusters",
          "mq:DescribeBroker",
          "mq:DescribeBrokerEngineTypes",
          "mq:DescribeBrokerInstanceOptions",
          "mq:DescribeConfiguration",
          "mq:DescribeConfigurationRevision",
          "mq:DescribeUser",
          "mq:ListBrokers",
          "mq:ListConfigurationRevisions",
          "mq:ListConfigurations",
          "mq:ListTags",
          "mq:ListUsers",
          "network-firewall:DescribeFirewall",
          "network-firewall:DescribeFirewallPolicy",
          "network-firewall:DescribeLoggingConfiguration",
          "network-firewall:DescribeResourcePolicy",
          "network-firewall:DescribeRuleGroup",
          "network-firewall:ListFirewallPolicies",
          "network-firewall:ListFirewalls",
          "network-firewall:ListRuleGroups",
          "networkmanager:DescribeGlobalNetworks",
          "nimble:ListStudios",
          "opsworks-cm:DescribeServers",
          "opsworks:DescribeStacks",
          "organizations:Describe*",
          "organizations:List*",
          "personalize:DescribeDatasetGroup",
          "personalize:ListDatasetGroups",
          "private-networks:ListNetworks",
          "profile:GetDomain",
          "profile:ListDomains",
          "profile:ListIntegrations",
          "qldb:DescribeJournalS3Export",
          "qldb:DescribeLedger",
          "qldb:ListJournalS3Exports",
          "qldb:ListJournalS3ExportsForLedger",
          "qldb:ListLedgers",
          "quicksight:Describe*",
          "quicksight:List*",
          "ram:GetResourceShares",
          "ram:List*",
          "rds:Describe*",
          "rds:DownloadDBLogFilePortion",
          "rds:ListTagsForResource",
          "redshift-serverless:GetNamespace",
          "redshift-serverless:ListTagsForResource",
          "redshift-serverless:ListWorkgroups",
          "redshift:Describe*",
          "rekognition:Describe*",
          "rekognition:List*",
          "resource-groups:ListGroupResources",
          "robomaker:Describe*",
          "robomaker:List*",
          "route53:Get*",
          "route53:List*",
          "route53domains:GetDomainDetail",
          "route53domains:GetOperationDetail",
          "route53domains:ListDomains",
          "route53domains:ListOperations",
          "route53domains:ListTagsForDomain",
          "route53resolver:Get*",
          "route53resolver:List*",
          "s3-outposts:ListEndpoints",
          "s3-outposts:ListOutpostsWithS3",
          "s3-outposts:ListSharedEndpoints",
          "s3:GetAccelerateConfiguration",
          "s3:GetAccessPoint",
          "s3:GetAccessPointPolicy",
          "s3:GetAccessPointPolicyStatus",
          "s3:GetAccountPublicAccessBlock",
          "s3:GetAnalyticsConfiguration",
          "s3:GetBucket*",
          "s3:GetEncryptionConfiguration",
          "s3:GetInventoryConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:GetMetricsConfiguration",
          "s3:GetMultiRegionAccessPointPolicy",
          "s3:GetObjectAcl",
          "s3:GetObjectVersionAcl",
          "s3:GetReplicationConfiguration",
          "s3:ListAccessPoints",
          "s3:ListAllMyBuckets",
          "s3:ListMultiRegionAccessPoints",
          "sagemaker:Describe*",
          "sagemaker:List*",
          "schemas:DescribeCodeBinding",
          "schemas:DescribeDiscoverer",
          "schemas:DescribeRegistry",
          "schemas:DescribeSchema",
          "schemas:GetResourcePolicy",
          "schemas:ListDiscoverers",
          "schemas:ListRegistries",
          "schemas:ListSchemaVersions",
          "schemas:ListSchemas",
          "schemas:ListTagsForResource",
          "sdb:DomainMetadata",
          "sdb:ListDomains",
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetResourcePolicy",
          "secretsmanager:ListSecretVersionIds",
          "secretsmanager:ListSecrets",
          "securityhub:Describe*",
          "securityhub:Get*",
          "securityhub:List*",
          "serverlessrepo:GetApplicationPolicy",
          "serverlessrepo:List*",
          "servicequotas:GetAWSDefaultServiceQuota",
          "servicequotas:GetAssociationForServiceQuotaTemplate",
          "servicequotas:GetRequestedServiceQuotaChange",
          "servicequotas:GetServiceQuota",
          "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
          "servicequotas:ListAWSDefaultServiceQuotas",
          "servicequotas:ListRequestedServiceQuotaChangeHistory",
          "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
          "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
          "servicequotas:ListServiceQuotas",
          "servicequotas:ListServices",
          "servicequotas:ListTagsForResource",
          "ses:Describe*",
          "ses:GetAccount",
          "ses:GetAccountSendingEnabled",
          "ses:GetConfigurationSet",
          "ses:GetConfigurationSetEventDestinations",
          "ses:GetDedicatedIps",
          "ses:GetEmailIdentity",
          "ses:GetIdentityDkimAttributes",
          "ses:GetIdentityPolicies",
          "ses:GetIdentityVerificationAttributes",
          "ses:ListConfigurationSets",
          "ses:ListDedicatedIpPools",
          "ses:ListIdentities",
          "ses:ListIdentityPolicies",
          "ses:ListReceiptFilters",
          "ses:ListReceiptRuleSets",
          "ses:ListVerifiedEmailAddresses",
          "shield:Describe*",
          "shield:GetSubscriptionState",
          "shield:List*",
          "snowball:ListClusters",
          "snowball:ListJobs",
          "sns:GetPlatformApplicationAttributes",
          "sns:GetTopicAttributes",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTagsForResource",
          "sns:ListTopics",
          "sqs:GetQueueAttributes",
          "sqs:ListDeadLetterSourceQueues",
          "sqs:ListQueueTags",
          "sqs:ListQueues",
          "ssm:Describe*",
          "ssm:GetAutomationExecution",
          "ssm:GetServiceSetting",
          "ssm:ListAssociationVersions",
          "ssm:ListAssociations",
          "ssm:ListCommands",
          "ssm:ListComplianceItems",
          "ssm:ListComplianceSummaries",
          "ssm:ListDocumentMetadataHistory",
          "ssm:ListDocumentVersions",
          "ssm:ListDocuments",
          "ssm:ListInventoryEntries",
          "ssm:ListOpsMetadata",
          "ssm:ListResourceComplianceSummaries",
          "ssm:ListResourceDataSync",
          "ssm:ListTagsForResource",
          "sso:DescribeAccountAssignmentCreationStatus",
          "sso:DescribePermissionSet",
          "sso:DescribePermissionsPolicies",
          "sso:List*",
          "states:DescribeStateMachine",
          "states:ListStateMachines",
          "storagegateway:DescribeBandwidthRateLimit",
          "storagegateway:DescribeCache",
          "storagegateway:DescribeCachediSCSIVolumes",
          "storagegateway:DescribeGatewayInformation",
          "storagegateway:DescribeMaintenanceStartTime",
          "storagegateway:DescribeNFSFileShares",
          "storagegateway:DescribeSnapshotSchedule",
          "storagegateway:DescribeStorediSCSIVolumes",
          "storagegateway:DescribeTapeArchives",
          "storagegateway:DescribeTapeRecoveryPoints",
          "storagegateway:DescribeTapes",
          "storagegateway:DescribeUploadBuffer",
          "storagegateway:DescribeVTLDevices",
          "storagegateway:DescribeWorkingStorage",
          "storagegateway:List*",
          "sts:GetAccessKeyInfo",
          "support:DescribeTrustedAdvisorCheckRefreshStatuses",
          "support:DescribeTrustedAdvisorCheckResult",
          "support:DescribeTrustedAdvisorCheckSummaries",
          "support:DescribeTrustedAdvisorChecks",
          "synthetics:DescribeCanaries",
          "synthetics:DescribeCanariesLastRun",
          "synthetics:DescribeRuntimeVersions",
          "synthetics:GetCanary",
          "synthetics:GetCanaryRuns",
          "synthetics:GetGroup",
          "synthetics:ListAssociatedGroups",
          "synthetics:ListGroupResources",
          "synthetics:ListGroups",
          "synthetics:ListTagsForResource",
          "tag:GetResources",
          "tag:GetTagKeys",
          "transcribe:GetCallAnalyticsCategory",
          "transcribe:GetMedicalVocabulary",
          "transcribe:GetVocabulary",
          "transcribe:GetVocabularyFilter",
          "transcribe:ListCallAnalyticsCategories",
          "transcribe:ListCallAnalyticsJobs",
          "transcribe:ListLanguageModels",
          "transcribe:ListMedicalTranscriptionJobs",
          "transcribe:ListMedicalVocabularies",
          "transcribe:ListTagsForResource",
          "transcribe:ListTranscriptionJobs",
          "transcribe:ListVocabularies",
          "transcribe:ListVocabularyFilters",
          "transfer:Describe*",
          "transfer:List*",
          "translate:List*",
          "trustedadvisor:Describe*",
          "voiceid:DescribeDomain",
          "waf-regional:GetWebACL",
          "waf-regional:ListResourcesForWebACL",
          "waf-regional:ListTagsForResource",
          "waf-regional:ListWebACLs",
          "waf:GetWebACL",
          "waf:ListTagsForResource",
          "waf:ListWebACLs",
          "wafv2:GetLoggingConfiguration",
          "wafv2:GetWebACL",
          "wafv2:GetWebACLForResource",
          "wafv2:ListAvailableManagedRuleGroups",
          "wafv2:ListIPSets",
          "wafv2:ListLoggingConfigurations",
          "wafv2:ListRegexPatternSets",
          "wafv2:ListResourcesForWebACL",
          "wafv2:ListRuleGroups",
          "wafv2:ListTagsForResource",
          "wafv2:ListWebACLs",
          "wisdom:GetAssistant",
          "workdocs:DescribeResourcePermissions",
          "workspaces:Describe*",
          "xray:GetEncryptionConfig",
          "xray:GetGroup",
          "xray:GetGroups",
          "xray:GetSamplingRules",
          "xray:GetSamplingTargets",
          "xray:GetTraceSummaries",
          "xray:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "APIGatewayAccess",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/apis",
          "arn:aws:apigateway:*::/apis/*/authorizers/*",
          "arn:aws:apigateway:*::/apis/*/authorizers",
          "arn:aws:apigateway:*::/apis/*/cors",
          "arn:aws:apigateway:*::/apis/*/deployments/*",
          "arn:aws:apigateway:*::/apis/*/deployments",
          "arn:aws:apigateway:*::/apis/*/exports/*",
          "arn:aws:apigateway:*::/apis/*/integrations/*",
          "arn:aws:apigateway:*::/apis/*/integrations",
          "arn:aws:apigateway:*::/apis/*/models/*",
          "arn:aws:apigateway:*::/apis/*/models",
          "arn:aws:apigateway:*::/apis/*/routes/*",
          "arn:aws:apigateway:*::/apis/*/routes",
          "arn:aws:apigateway:*::/apis/*/stages",
          "arn:aws:apigateway:*::/apis/*/stages/*",
          "arn:aws:apigateway:*::/clientcertificates",
          "arn:aws:apigateway:*::/clientcertificates/*",
          "arn:aws:apigateway:*::/domainnames",
          "arn:aws:apigateway:*::/domainnames/*/apimappings",
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/restapis/*/authorizers/*",
          "arn:aws:apigateway:*::/restapis/*/authorizers",
          "arn:aws:apigateway:*::/restapis/*/deployments/*",
          "arn:aws:apigateway:*::/restapis/*/deployments",
          "arn:aws:apigateway:*::/restapis/*/documentation/parts/*",
          "arn:aws:apigateway:*::/restapis/*/documentation/parts",
          "arn:aws:apigateway:*::/restapis/*/documentation/versions/*",
          "arn:aws:apigateway:*::/restapis/*/documentation/versions",
          "arn:aws:apigateway:*::/restapis/*/gatewayresponses/*",
          "arn:aws:apigateway:*::/restapis/*/gatewayresponses",
          "arn:aws:apigateway:*::/restapis/*/models/*",
          "arn:aws:apigateway:*::/restapis/*/models",
          "arn:aws:apigateway:*::/restapis/*/requestvalidators",
          "arn:aws:apigateway:*::/restapis/*/requestvalidators/*",
          "arn:aws:apigateway:*::/restapis/*/resources/*",
          "arn:aws:apigateway:*::/restapis/*/resources",
          "arn:aws:apigateway:*::/restapis/*/stages",
          "arn:aws:apigateway:*::/restapis/*/stages/*",
          "arn:aws:apigateway:*::/tags/*",
          "arn:aws:apigateway:*::/vpclinks"
        ]
      }
    ]
  },
  "AmazonSESReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonSESReadOnlyAccess",
      "PolicyId": "ANPAINV2XPFRMWJJNSCGI",
      "Arn": "arn:aws:iam::aws:policy/AmazonSESReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon SES via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:03.000Z",
      "UpdateDate": "2015-02-06T18:41:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ses:Get*",
          "ses:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "SimpleWorkflowFullAccess": {
    "policy": {
      "PolicyName": "SimpleWorkflowFullAccess",
      "PolicyId": "ANPAIFE3AV6VE7EANYBVM",
      "Arn": "arn:aws:iam::aws:policy/SimpleWorkflowFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the Simple Workflow configuration service.",
      "CreateDate": "2015-02-06T18:41:04.000Z",
      "UpdateDate": "2015-02-06T18:41:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "swf:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSNSFullAccess": {
    "policy": {
      "PolicyName": "AmazonSNSFullAccess",
      "PolicyId": "ANPAJWEKLCXXUNT2SOLSG",
      "Arn": "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon SNS via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:05.000Z",
      "UpdateDate": "2015-02-06T18:41:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "sns:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSNSReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonSNSReadOnlyAccess",
      "PolicyId": "ANPAIZGQCQTFOFPMHSB6W",
      "Arn": "arn:aws:iam::aws:policy/AmazonSNSReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon SNS via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:06.000Z",
      "UpdateDate": "2015-02-06T18:41:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sns:GetTopicAttributes",
          "sns:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSQSFullAccess": {
    "policy": {
      "PolicyName": "AmazonSQSFullAccess",
      "PolicyId": "ANPAI65L554VRJ33ECQS6",
      "Arn": "arn:aws:iam::aws:policy/AmazonSQSFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon SQS via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:07.000Z",
      "UpdateDate": "2015-02-06T18:41:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "sqs:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSQSReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonSQSReadOnlyAccess",
      "PolicyId": "ANPAIUGSSQY362XGCM6KW",
      "Arn": "arn:aws:iam::aws:policy/AmazonSQSReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon SQS via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:08.000Z",
      "UpdateDate": "2023-06-15T15:37:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "sqs:ListDeadLetterSourceQueues",
          "sqs:ListQueues",
          "sqs:ListMessageMoveTasks"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSStorageGatewayFullAccess": {
    "policy": {
      "PolicyName": "AWSStorageGatewayFullAccess",
      "PolicyId": "ANPAJG5SSPAVOGK3SIDGU",
      "Arn": "arn:aws:iam::aws:policy/AWSStorageGatewayFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Storage Gateway via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:09.000Z",
      "UpdateDate": "2022-09-06T20:26:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "storagegateway:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSnapshots",
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "fetchStorageGatewayParams",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameters"
        ],
        "Resource": [
          "arn:aws:ssm:*::parameter/aws/service/storagegateway/*"
        ]
      }
    ]
  },
  "AWSStorageGatewayReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSStorageGatewayReadOnlyAccess",
      "PolicyId": "ANPAIFKCTUVOPD5NICXJK",
      "Arn": "arn:aws:iam::aws:policy/AWSStorageGatewayReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS Storage Gateway via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:10.000Z",
      "UpdateDate": "2022-09-06T20:24:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "storagegateway:List*",
          "storagegateway:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "fetchStorageGatewayParams",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameters"
        ],
        "Resource": [
          "arn:aws:ssm:*::parameter/aws/service/storagegateway/*"
        ]
      }
    ]
  },
  "AWSSupportAccess": {
    "policy": {
      "PolicyName": "AWSSupportAccess",
      "PolicyId": "ANPAJSNKQX2OW67GF4S7E",
      "Arn": "arn:aws:iam::aws:policy/AWSSupportAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows users to access the AWS Support Center.",
      "CreateDate": "2015-02-06T18:41:11.000Z",
      "UpdateDate": "2015-02-06T18:41:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "support:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDirectoryServiceFullAccess": {
    "policy": {
      "PolicyName": "AWSDirectoryServiceFullAccess",
      "PolicyId": "ANPAINAW5ANUWTH3R4ANI",
      "Arn": "arn:aws:iam::aws:policy/AWSDirectoryServiceFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Directory Service.",
      "CreateDate": "2015-02-06T18:41:11.000Z",
      "UpdateDate": "2024-04-02T20:38:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DirectoryServiceFullAccess",
        "Effect": "Allow",
        "Action": [
          "ds:*",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:DescribeSecurityGroups",
          "sns:GetTopicAttributes",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics",
          "iam:ListRoles",
          "organizations:ListAccountsForParent",
          "organizations:ListRoots",
          "organizations:ListAccounts",
          "organizations:DescribeOrganization",
          "organizations:DescribeAccount",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DirectoryServiceEventTopic",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:DeleteTopic",
          "sns:SetTopicAttributes",
          "sns:Subscribe",
          "sns:Unsubscribe"
        ],
        "Resource": [
          "arn:aws:sns:*:*:DirectoryMonitoring*"
        ]
      },
      {
        "Sid": "DirectoryServiceOrganizations",
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess",
          "organizations:DisableAWSServiceAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DirectoryServiceTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      }
    ]
  },
  "AWSDirectoryServiceReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSDirectoryServiceReadOnlyAccess",
      "PolicyId": "ANPAIHWYO6WSDNCG64M2W",
      "Arn": "arn:aws:iam::aws:policy/AWSDirectoryServiceReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Directory Service.",
      "CreateDate": "2015-02-06T18:41:12.000Z",
      "UpdateDate": "2018-09-25T21:54:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ds:Check*",
          "ds:Describe*",
          "ds:Get*",
          "ds:List*",
          "ds:Verify*",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "sns:ListTopics",
          "sns:GetTopicAttributes",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonZocaloFullAccess": {
    "policy": {
      "PolicyName": "AmazonZocaloFullAccess",
      "PolicyId": "ANPAJLCDXYRINDMUXEVL6",
      "Arn": "arn:aws:iam::aws:policy/AmazonZocaloFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Zocalo.",
      "CreateDate": "2015-02-06T18:41:13.000Z",
      "UpdateDate": "2015-02-06T18:41:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "zocalo:*",
          "ds:*",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSubnet",
          "ec2:CreateTags",
          "ec2:CreateVpc",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonZocaloReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonZocaloReadOnlyAccess",
      "PolicyId": "ANPAISRCSSJNS3QPKZJPM",
      "Arn": "arn:aws:iam::aws:policy/AmazonZocaloReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Zocalo",
      "CreateDate": "2015-02-06T18:41:14.000Z",
      "UpdateDate": "2015-02-06T18:41:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "zocalo:Describe*",
          "ds:DescribeDirectories",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonVPCFullAccess": {
    "policy": {
      "PolicyName": "AmazonVPCFullAccess",
      "PolicyId": "ANPAJBWPGNOVKZD3JI2P2",
      "Arn": "arn:aws:iam::aws:policy/AmazonVPCFullAccess",
      "Path": "/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon VPC via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:16.000Z",
      "UpdateDate": "2024-02-08T16:03:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonVPCFullAccess",
        "Effect": "Allow",
        "Action": [
          "ec2:AcceptVpcPeeringConnection",
          "ec2:AcceptVpcEndpointConnections",
          "ec2:AllocateAddress",
          "ec2:AssignIpv6Addresses",
          "ec2:AssignPrivateIpAddresses",
          "ec2:AssociateAddress",
          "ec2:AssociateDhcpOptions",
          "ec2:AssociateRouteTable",
          "ec2:AssociateSubnetCidrBlock",
          "ec2:AssociateVpcCidrBlock",
          "ec2:AttachClassicLinkVpc",
          "ec2:AttachInternetGateway",
          "ec2:AttachNetworkInterface",
          "ec2:AttachVpnGateway",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateCarrierGateway",
          "ec2:CreateCustomerGateway",
          "ec2:CreateDefaultSubnet",
          "ec2:CreateDefaultVpc",
          "ec2:CreateDhcpOptions",
          "ec2:CreateEgressOnlyInternetGateway",
          "ec2:CreateFlowLogs",
          "ec2:CreateInternetGateway",
          "ec2:CreateLocalGatewayRouteTableVpcAssociation",
          "ec2:CreateNatGateway",
          "ec2:CreateNetworkAcl",
          "ec2:CreateNetworkAclEntry",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSubnet",
          "ec2:CreateTags",
          "ec2:CreateVpc",
          "ec2:CreateVpcEndpoint",
          "ec2:CreateVpcEndpointConnectionNotification",
          "ec2:CreateVpcEndpointServiceConfiguration",
          "ec2:CreateVpcPeeringConnection",
          "ec2:CreateVpnConnection",
          "ec2:CreateVpnConnectionRoute",
          "ec2:CreateVpnGateway",
          "ec2:DeleteCarrierGateway",
          "ec2:DeleteCustomerGateway",
          "ec2:DeleteDhcpOptions",
          "ec2:DeleteEgressOnlyInternetGateway",
          "ec2:DeleteFlowLogs",
          "ec2:DeleteInternetGateway",
          "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
          "ec2:DeleteNatGateway",
          "ec2:DeleteNetworkAcl",
          "ec2:DeleteNetworkAclEntry",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DeleteRoute",
          "ec2:DeleteRouteTable",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteSubnet",
          "ec2:DeleteTags",
          "ec2:DeleteVpc",
          "ec2:DeleteVpcEndpoints",
          "ec2:DeleteVpcEndpointConnectionNotifications",
          "ec2:DeleteVpcEndpointServiceConfigurations",
          "ec2:DeleteVpcPeeringConnection",
          "ec2:DeleteVpnConnection",
          "ec2:DeleteVpnConnectionRoute",
          "ec2:DeleteVpnGateway",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCarrierGateways",
          "ec2:DescribeClassicLinkInstances",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeEgressOnlyInternetGateways",
          "ec2:DescribeFlowLogs",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeIpv6Pools",
          "ec2:DescribeLocalGatewayRouteTables",
          "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeMovingAddresses",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeNetworkInterfacePermissions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroupReferences",
          "ec2:DescribeSecurityGroupRules",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeStaleSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcClassicLink",
          "ec2:DescribeVpcClassicLinkDnsSupport",
          "ec2:DescribeVpcEndpointConnectionNotifications",
          "ec2:DescribeVpcEndpointConnections",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeVpcEndpointServicePermissions",
          "ec2:DescribeVpcEndpointServices",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:DetachClassicLinkVpc",
          "ec2:DetachInternetGateway",
          "ec2:DetachNetworkInterface",
          "ec2:DetachVpnGateway",
          "ec2:DisableVgwRoutePropagation",
          "ec2:DisableVpcClassicLink",
          "ec2:DisableVpcClassicLinkDnsSupport",
          "ec2:DisassociateAddress",
          "ec2:DisassociateRouteTable",
          "ec2:DisassociateSubnetCidrBlock",
          "ec2:DisassociateVpcCidrBlock",
          "ec2:EnableVgwRoutePropagation",
          "ec2:EnableVpcClassicLink",
          "ec2:EnableVpcClassicLinkDnsSupport",
          "ec2:GetSecurityGroupsForVpc",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:ModifySecurityGroupRules",
          "ec2:ModifySubnetAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:ModifyVpcEndpoint",
          "ec2:ModifyVpcEndpointConnectionNotification",
          "ec2:ModifyVpcEndpointServiceConfiguration",
          "ec2:ModifyVpcEndpointServicePermissions",
          "ec2:ModifyVpcPeeringConnectionOptions",
          "ec2:ModifyVpcTenancy",
          "ec2:MoveAddressToVpc",
          "ec2:RejectVpcEndpointConnections",
          "ec2:RejectVpcPeeringConnection",
          "ec2:ReleaseAddress",
          "ec2:ReplaceNetworkAclAssociation",
          "ec2:ReplaceNetworkAclEntry",
          "ec2:ReplaceRoute",
          "ec2:ReplaceRouteTableAssociation",
          "ec2:ResetNetworkInterfaceAttribute",
          "ec2:RestoreAddressToClassic",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:UnassignIpv6Addresses",
          "ec2:UnassignPrivateIpAddresses",
          "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
          "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonVPCReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonVPCReadOnlyAccess",
      "PolicyId": "ANPAIICZJNOJN36GTG6CM",
      "Arn": "arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon VPC via the AWS Management Console.",
      "CreateDate": "2015-02-06T18:41:17.000Z",
      "UpdateDate": "2024-02-08T17:08:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonVPCReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeCarrierGateways",
          "ec2:DescribeClassicLinkInstances",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeEgressOnlyInternetGateways",
          "ec2:DescribeFlowLogs",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeLocalGatewayRouteTables",
          "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
          "ec2:DescribeMovingAddresses",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeNetworkInterfacePermissions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroupReferences",
          "ec2:DescribeSecurityGroupRules",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeStaleSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcClassicLink",
          "ec2:DescribeVpcClassicLinkDnsSupport",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcEndpointConnectionNotifications",
          "ec2:DescribeVpcEndpointConnections",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeVpcEndpointServicePermissions",
          "ec2:DescribeVpcEndpointServices",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:GetSecurityGroupsForVpc"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAccountActivityAccess": {
    "policy": {
      "PolicyName": "AWSAccountActivityAccess",
      "PolicyId": "ANPAJQRYCWMFX5J3E333K",
      "Arn": "arn:aws:iam::aws:policy/AWSAccountActivityAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows users to access the Account Activity page.",
      "CreateDate": "2015-02-06T18:41:18.000Z",
      "UpdateDate": "2023-03-07T17:02:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "account:GetAccountInformation",
          "account:GetAlternateContact",
          "account:GetChallengeQuestions",
          "account:GetContactInformation",
          "account:GetRegionOptStatus",
          "account:ListRegions",
          "billing:GetIAMAccessPreference",
          "billing:GetSellerOfRecord",
          "payments:ListPaymentPreferences"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-portal:ViewBilling"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAccountUsageReportAccess": {
    "policy": {
      "PolicyName": "AWSAccountUsageReportAccess",
      "PolicyId": "ANPAJLIB4VSBVO47ZSBB6",
      "Arn": "arn:aws:iam::aws:policy/AWSAccountUsageReportAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows users to access the Account Usage Report page.",
      "CreateDate": "2015-02-06T18:41:19.000Z",
      "UpdateDate": "2015-02-06T18:41:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-portal:ViewUsage"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticMapReduceRole": {
    "policy": {
      "PolicyName": "AmazonElasticMapReduceRole",
      "PolicyId": "ANPAIDI2BQT2LKXZG36TW",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is on a deprecation path. See documentation for guidance: https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-iam-policies.html.  Default policy for the Amazon Elastic MapReduce service role.",
      "CreateDate": "2015-02-06T18:41:20.000Z",
      "UpdateDate": "2020-06-24T22:24:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CancelSpotInstanceRequests",
          "ec2:CreateFleet",
          "ec2:CreateLaunchTemplate",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:CreateTags",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteTags",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeImages",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstances",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeSpotPriceHistory",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcEndpointServices",
          "ec2:DescribeVpcs",
          "ec2:DetachNetworkInterface",
          "ec2:ModifyImageAttribute",
          "ec2:ModifyInstanceAttribute",
          "ec2:RequestSpotInstances",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RunInstances",
          "ec2:TerminateInstances",
          "ec2:DeleteVolume",
          "ec2:DescribeVolumeStatus",
          "ec2:DescribeVolumes",
          "ec2:DetachVolume",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:ListInstanceProfiles",
          "iam:ListRolePolicies",
          "iam:PassRole",
          "s3:CreateBucket",
          "s3:Get*",
          "s3:List*",
          "sdb:BatchPutAttributes",
          "sdb:Select",
          "sqs:CreateQueue",
          "sqs:Delete*",
          "sqs:GetQueue*",
          "sqs:PurgeQueue",
          "sqs:ReceiveMessage",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms",
          "application-autoscaling:RegisterScalableTarget",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:Describe*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*"
        ]
      }
    ]
  },
  "AmazonElasticMapReduceforEC2Role": {
    "policy": {
      "PolicyName": "AmazonElasticMapReduceforEC2Role",
      "PolicyId": "ANPAIGALS5RCDLZLB3PGS",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the Amazon Elastic MapReduce for EC2 service role.",
      "CreateDate": "2015-02-06T18:41:21.000Z",
      "UpdateDate": "2017-08-11T23:57:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "cloudwatch:*",
          "dynamodb:*",
          "ec2:Describe*",
          "elasticmapreduce:Describe*",
          "elasticmapreduce:ListBootstrapActions",
          "elasticmapreduce:ListClusters",
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ListInstances",
          "elasticmapreduce:ListSteps",
          "kinesis:CreateStream",
          "kinesis:DeleteStream",
          "kinesis:DescribeStream",
          "kinesis:GetRecords",
          "kinesis:GetShardIterator",
          "kinesis:MergeShards",
          "kinesis:PutRecord",
          "kinesis:SplitShard",
          "rds:Describe*",
          "s3:*",
          "sdb:*",
          "sns:*",
          "sqs:*",
          "glue:CreateDatabase",
          "glue:UpdateDatabase",
          "glue:DeleteDatabase",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:CreateTable",
          "glue:UpdateTable",
          "glue:DeleteTable",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetTableVersions",
          "glue:CreatePartition",
          "glue:BatchCreatePartition",
          "glue:UpdatePartition",
          "glue:DeletePartition",
          "glue:BatchDeletePartition",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:BatchGetPartition",
          "glue:CreateUserDefinedFunction",
          "glue:UpdateUserDefinedFunction",
          "glue:DeleteUserDefinedFunction",
          "glue:GetUserDefinedFunction",
          "glue:GetUserDefinedFunctions"
        ]
      }
    ]
  },
  "AutoScalingNotificationAccessRole": {
    "policy": {
      "PolicyName": "AutoScalingNotificationAccessRole",
      "PolicyId": "ANPAIO2VMUPGDC5PZVXVA",
      "Arn": "arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the AutoScaling Notification Access service role.",
      "CreateDate": "2015-02-06T18:41:22.000Z",
      "UpdateDate": "2015-02-06T18:41:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "sqs:SendMessage",
          "sqs:GetQueueUrl",
          "sns:Publish"
        ]
      }
    ]
  },
  "AWSCloudHSMRole": {
    "policy": {
      "PolicyName": "AWSCloudHSMRole",
      "PolicyId": "ANPAI7QIUU4GC66SF26WE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSCloudHSMRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the AWS CloudHSM service role.",
      "CreateDate": "2015-02-06T18:41:23.000Z",
      "UpdateDate": "2015-02-06T18:41:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:CreateTags",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DetachNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2RoleforDataPipelineRole": {
    "policy": {
      "PolicyName": "AmazonEC2RoleforDataPipelineRole",
      "PolicyId": "ANPAJ3Z5I2WAJE5DN2J36",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforDataPipelineRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the Amazon EC2 Role for Data Pipeline service role.",
      "CreateDate": "2015-02-06T18:41:25.000Z",
      "UpdateDate": "2016-02-22T17:24:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:*",
          "datapipeline:*",
          "dynamodb:*",
          "ec2:Describe*",
          "elasticmapreduce:AddJobFlowSteps",
          "elasticmapreduce:Describe*",
          "elasticmapreduce:ListInstance*",
          "elasticmapreduce:ModifyInstanceGroups",
          "rds:Describe*",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSecurityGroups",
          "s3:*",
          "sdb:*",
          "sns:*",
          "sqs:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticTranscoderRole": {
    "policy": {
      "PolicyName": "AmazonElasticTranscoderRole",
      "PolicyId": "ANPAJNW3WMKVXFJ2KPIQ2",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonElasticTranscoderRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the Amazon Elastic Transcoder service role.",
      "CreateDate": "2015-02-06T18:41:26.000Z",
      "UpdateDate": "2019-06-13T22:48:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:Get*",
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:*MultipartUpload*"
        ],
        "Sid": "1",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Sid": "2",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambdaRole": {
    "policy": {
      "PolicyName": "AWSLambdaRole",
      "PolicyId": "ANPAJX4DPCRGTC4NFDUXI",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for AWS Lambda service role.",
      "CreateDate": "2015-02-06T18:41:28.000Z",
      "UpdateDate": "2015-02-06T18:41:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "RDSCloudHsmAuthorizationRole": {
    "policy": {
      "PolicyName": "RDSCloudHsmAuthorizationRole",
      "PolicyId": "ANPAIWKFXRLQG2ROKKXLE",
      "Arn": "arn:aws:iam::aws:policy/service-role/RDSCloudHsmAuthorizationRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the Amazon RDS service role.",
      "CreateDate": "2015-02-06T18:41:29.000Z",
      "UpdateDate": "2019-09-26T22:14:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudhsm:CreateLunaClient",
          "cloudhsm:DeleteLunaClient",
          "cloudhsm:DescribeHapg",
          "cloudhsm:DescribeLunaClient",
          "cloudhsm:GetConfig",
          "cloudhsm:ModifyHapg",
          "cloudhsm:ModifyLunaClient"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSNSRole": {
    "policy": {
      "PolicyName": "AmazonSNSRole",
      "PolicyId": "ANPAJK5GQB7CIK7KHY2GA",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSNSRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for Amazon SNS service role.",
      "CreateDate": "2015-02-06T18:41:30.000Z",
      "UpdateDate": "2015-02-06T18:41:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:PutMetricFilter",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSConnector": {
    "policy": {
      "PolicyName": "AWSConnector",
      "PolicyId": "ANPAJ6YATONJHICG3DJ3U",
      "Arn": "arn:aws:iam::aws:policy/AWSConnector",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables broad read/write access to ALL EC2 objects, read/write access to S3 buckets starting with 'import-to-ec2-', and the ability to list all S3 buckets, for the AWS Connector to import VMs on your behalf.",
      "CreateDate": "2015-02-11T17:14:31.000Z",
      "UpdateDate": "2015-09-28T19:50:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetUser"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:DeleteObject",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:AbortMultipartUpload",
          "s3:ListBucketMultipartUploads",
          "s3:ListMultipartUploadParts"
        ],
        "Resource": [
          "arn:aws:s3:::import-to-ec2-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CancelConversionTask",
          "ec2:CancelExportTask",
          "ec2:CreateImage",
          "ec2:CreateInstanceExportTask",
          "ec2:CreateTags",
          "ec2:CreateVolume",
          "ec2:DeleteTags",
          "ec2:DeleteVolume",
          "ec2:DescribeConversionTasks",
          "ec2:DescribeExportTasks",
          "ec2:DescribeImages",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstances",
          "ec2:DescribeRegions",
          "ec2:DescribeTags",
          "ec2:DetachVolume",
          "ec2:ImportInstance",
          "ec2:ImportVolume",
          "ec2:ModifyInstanceAttribute",
          "ec2:RunInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:ImportImage",
          "ec2:DescribeImportImageTasks",
          "ec2:DeregisterImage",
          "ec2:DescribeSnapshots",
          "ec2:DeleteSnapshot",
          "ec2:CancelImportTask",
          "ec2:ImportSnapshot",
          "ec2:DescribeImportSnapshotTasks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:metrics-sns-topic-for-*"
        ]
      }
    ]
  },
  "AWSMarketplaceFullAccess": {
    "policy": {
      "PolicyName": "AWSMarketplaceFullAccess",
      "PolicyId": "ANPAI2DV5ULJSO2FYVPYG",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the ability to subscribe and unsubscribe to AWS Marketplace software, allows users to manage Marketplace software instances from the Marketplace 'Your Software' page, and provides administrative access to EC2.",
      "CreateDate": "2015-02-11T17:21:45.000Z",
      "UpdateDate": "2022-03-04T17:04:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:*",
          "cloudformation:CreateStack",
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStackResources",
          "cloudformation:DescribeStacks",
          "cloudformation:List*",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateSecurityGroup",
          "ec2:CreateTags",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVpcs",
          "ec2:RunInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CopyImage",
          "ec2:DeregisterImage",
          "ec2:DescribeSnapshots",
          "ec2:DeleteSnapshot",
          "ec2:CreateImage",
          "ec2:DescribeInstanceStatus",
          "ssm:GetAutomationExecution",
          "ssm:ListDocuments",
          "ssm:DescribeDocument",
          "sns:ListTopics",
          "sns:GetTopicAttributes",
          "sns:CreateTopic",
          "iam:GetRole",
          "iam:GetInstanceProfile",
          "iam:ListRoles",
          "iam:ListInstanceProfiles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*image-build*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish",
          "sns:setTopicAttributes"
        ],
        "Resource": [
          "arn:aws:sns:*:*:*image-build*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
          "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
          "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
          "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
          "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
          "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
          "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
          "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSConfigUserAccess": {
    "policy": {
      "PolicyName": "AWSConfigUserAccess",
      "PolicyId": "ANPAIWTTSFJ7KKJE3MWGA",
      "Arn": "arn:aws:iam::aws:policy/AWSConfigUserAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to use AWS Config, including searching by tags on resources, and reading all tags. This does not provide permission to configure AWS Config, which requires administrative privileges.",
      "CreateDate": "2015-02-18T19:38:41.000Z",
      "UpdateDate": "2019-03-18T20:27:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "config:Get*",
          "config:Describe*",
          "config:Deliver*",
          "config:List*",
          "config:Select*",
          "tag:GetResources",
          "tag:GetTagKeys",
          "cloudtrail:DescribeTrails",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:LookupEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2ContainerServiceforEC2Role": {
    "policy": {
      "PolicyName": "AmazonEC2ContainerServiceforEC2Role",
      "PolicyId": "ANPAJLYJCVHC7TQHCSQDS",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
      "Path": "/service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the Amazon EC2 Role for Amazon EC2 Container Service.",
      "CreateDate": "2015-03-19T18:45:18.000Z",
      "UpdateDate": "2023-03-06T22:19:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeTags",
          "ecs:CreateCluster",
          "ecs:DeregisterContainerInstance",
          "ecs:DiscoverPollEndpoint",
          "ecs:Poll",
          "ecs:RegisterContainerInstance",
          "ecs:StartTelemetrySession",
          "ecs:UpdateContainerInstancesState",
          "ecs:Submit*",
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer",
          "ecr:BatchGetImage",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCognitoReadOnly": {
    "policy": {
      "PolicyName": "AmazonCognitoReadOnly",
      "PolicyId": "ANPAJBFTRZD2GQGJHSVQK",
      "Arn": "arn:aws:iam::aws:policy/AmazonCognitoReadOnly",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Cognito resources.",
      "CreateDate": "2015-03-24T17:06:46.000Z",
      "UpdateDate": "2019-08-01T19:21:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cognito-identity:Describe*",
          "cognito-identity:Get*",
          "cognito-identity:List*",
          "cognito-idp:Describe*",
          "cognito-idp:AdminGet*",
          "cognito-idp:AdminList*",
          "cognito-idp:List*",
          "cognito-idp:Get*",
          "cognito-sync:Describe*",
          "cognito-sync:Get*",
          "cognito-sync:List*",
          "iam:ListOpenIdConnectProviders",
          "iam:ListRoles",
          "sns:ListPlatformApplications"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCognitoPowerUser": {
    "policy": {
      "PolicyName": "AmazonCognitoPowerUser",
      "PolicyId": "ANPAJKW5H2HNCPGCYGR6Y",
      "Arn": "arn:aws:iam::aws:policy/AmazonCognitoPowerUser",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrative access to existing Amazon Cognito resources. You will need AWS account admin privileges to create new Cognito resources.",
      "CreateDate": "2015-03-24T17:14:56.000Z",
      "UpdateDate": "2021-06-01T17:33:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cognito-identity:*",
          "cognito-idp:*",
          "cognito-sync:*",
          "iam:ListRoles",
          "iam:ListOpenIdConnectProviders",
          "iam:GetRole",
          "iam:ListSAMLProviders",
          "iam:GetSAMLProvider",
          "kinesis:ListStreams",
          "lambda:GetPolicy",
          "lambda:ListFunctions",
          "sns:GetSMSSandboxAccountStatus",
          "sns:ListPlatformApplications",
          "ses:ListIdentities",
          "ses:GetIdentityVerificationAttributes",
          "mobiletargeting:GetApps",
          "acm:ListCertificates"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdp*",
          "arn:aws:iam::*:role/aws-service-role/email.cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdpEmail*"
        ]
      }
    ]
  },
  "AmazonCognitoDeveloperAuthenticatedIdentities": {
    "policy": {
      "PolicyName": "AmazonCognitoDeveloperAuthenticatedIdentities",
      "PolicyId": "ANPAIQOKZ5BGKLCMTXH4W",
      "Arn": "arn:aws:iam::aws:policy/AmazonCognitoDeveloperAuthenticatedIdentities",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Amazon Cognito APIs to support developer authenticated identities from your authentication backend.",
      "CreateDate": "2015-03-24T17:22:23.000Z",
      "UpdateDate": "2015-03-24T17:22:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
          "cognito-identity:LookupDeveloperIdentity",
          "cognito-identity:MergeDeveloperIdentities",
          "cognito-identity:UnlinkDeveloperIdentity"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkSpacesApplicationManagerAdminAccess": {
    "policy": {
      "PolicyName": "AmazonWorkSpacesApplicationManagerAdminAccess",
      "PolicyId": "ANPAJPRL4KYETIH7XGTSS",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkSpacesApplicationManagerAdminAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrator access for packaging an application in Amazon WorkSpaces Application Manager.",
      "CreateDate": "2015-04-09T14:03:18.000Z",
      "UpdateDate": "2015-04-09T14:03:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "wam:AuthenticatePackager"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambdaBasicExecutionRole": {
    "policy": {
      "PolicyName": "AWSLambdaBasicExecutionRole",
      "PolicyId": "ANPAJNCQGXC42545SKXIK",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 13,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides write permissions to CloudWatch Logs.",
      "CreateDate": "2015-04-09T15:03:43.000Z",
      "UpdateDate": "2015-04-09T15:03:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambdaDynamoDBExecutionRole": {
    "policy": {
      "PolicyName": "AWSLambdaDynamoDBExecutionRole",
      "PolicyId": "ANPAIP7WNAGMIPYNW4WQG",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides list and read access to DynamoDB streams and write permissions to CloudWatch logs.",
      "CreateDate": "2015-04-09T15:09:29.000Z",
      "UpdateDate": "2015-04-09T15:09:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:DescribeStream",
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:ListStreams",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2ContainerServiceRole": {
    "policy": {
      "PolicyName": "AmazonEC2ContainerServiceRole",
      "PolicyId": "ANPAJO53W2XHNACG7V77Q",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for Amazon ECS service role.",
      "CreateDate": "2015-04-09T16:14:19.000Z",
      "UpdateDate": "2016-08-11T13:08:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:Describe*",
          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
          "elasticloadbalancing:DeregisterTargets",
          "elasticloadbalancing:Describe*",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
          "elasticloadbalancing:RegisterTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambdaKinesisExecutionRole": {
    "policy": {
      "PolicyName": "AWSLambdaKinesisExecutionRole",
      "PolicyId": "ANPAJHOLKJPXV4GBRMJUQ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides list and read access to Kinesis streams and write permissions to CloudWatch logs.",
      "CreateDate": "2015-04-09T15:14:16.000Z",
      "UpdateDate": "2018-11-19T20:09:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:DescribeStream",
          "kinesis:DescribeStreamSummary",
          "kinesis:GetRecords",
          "kinesis:GetShardIterator",
          "kinesis:ListShards",
          "kinesis:ListStreams",
          "kinesis:SubscribeToShard",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMachineLearningBatchPredictionsAccess": {
    "policy": {
      "PolicyName": "AmazonMachineLearningBatchPredictionsAccess",
      "PolicyId": "ANPAILOI4HTQSFTF3GQSC",
      "Arn": "arn:aws:iam::aws:policy/AmazonMachineLearningBatchPredictionsAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants users permission to request Amazon Machine Learning batch predictions.",
      "CreateDate": "2015-04-09T17:12:19.000Z",
      "UpdateDate": "2015-04-09T17:12:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "machinelearning:CreateBatchPrediction",
          "machinelearning:DeleteBatchPrediction",
          "machinelearning:DescribeBatchPredictions",
          "machinelearning:GetBatchPrediction",
          "machinelearning:UpdateBatchPrediction"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMachineLearningCreateOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMachineLearningCreateOnlyAccess",
      "PolicyId": "ANPAJDRUNIC2RYAMAT3CK",
      "Arn": "arn:aws:iam::aws:policy/AmazonMachineLearningCreateOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides create access for non-prediction Amazon Machine Learning resources.",
      "CreateDate": "2015-04-09T17:18:09.000Z",
      "UpdateDate": "2016-06-29T20:55:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "machinelearning:Add*",
          "machinelearning:Create*",
          "machinelearning:Delete*",
          "machinelearning:Describe*",
          "machinelearning:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMachineLearningFullAccess": {
    "policy": {
      "PolicyName": "AmazonMachineLearningFullAccess",
      "PolicyId": "ANPAIWKW6AGSGYOQ5ERHC",
      "Arn": "arn:aws:iam::aws:policy/AmazonMachineLearningFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Machine Learning resources.",
      "CreateDate": "2015-04-09T17:25:41.000Z",
      "UpdateDate": "2015-04-09T17:25:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "machinelearning:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMachineLearningManageRealTimeEndpointOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMachineLearningManageRealTimeEndpointOnlyAccess",
      "PolicyId": "ANPAJJL3PC3VCSVZP6OCI",
      "Arn": "arn:aws:iam::aws:policy/AmazonMachineLearningManageRealTimeEndpointOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants users permission to create and delete the real-time endpoint for Amazon Machine Learning models.",
      "CreateDate": "2015-04-09T17:32:41.000Z",
      "UpdateDate": "2015-04-09T17:32:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "machinelearning:CreateRealtimeEndpoint",
          "machinelearning:DeleteRealtimeEndpoint"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMachineLearningReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMachineLearningReadOnlyAccess",
      "PolicyId": "ANPAIW5VYBCGEX56JCINC",
      "Arn": "arn:aws:iam::aws:policy/AmazonMachineLearningReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Machine Learning resources.",
      "CreateDate": "2015-04-09T17:40:02.000Z",
      "UpdateDate": "2015-04-09T17:40:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "machinelearning:Describe*",
          "machinelearning:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMachineLearningRealTimePredictionOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMachineLearningRealTimePredictionOnlyAccess",
      "PolicyId": "ANPAIWMCNQPRWMWT36GVQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonMachineLearningRealTimePredictionOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants users permission to request Amazon Machine Learning real-time predictions.",
      "CreateDate": "2015-04-09T17:44:06.000Z",
      "UpdateDate": "2015-04-09T17:44:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "machinelearning:Predict"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeDeployRole": {
    "policy": {
      "PolicyName": "AWSCodeDeployRole",
      "PolicyId": "ANPAJ2NKMKD73QS5NBFLA",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides CodeDeploy service access to expand tags and interact with Auto Scaling on your behalf.",
      "CreateDate": "2015-05-04T18:05:37.000Z",
      "UpdateDate": "2023-08-16T20:38:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:CompleteLifecycleAction",
          "autoscaling:DeleteLifecycleHook",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeLifecycleHooks",
          "autoscaling:PutLifecycleHook",
          "autoscaling:RecordLifecycleActionHeartbeat",
          "autoscaling:CreateAutoScalingGroup",
          "autoscaling:CreateOrUpdateTags",
          "autoscaling:UpdateAutoScalingGroup",
          "autoscaling:EnableMetricsCollection",
          "autoscaling:DescribePolicies",
          "autoscaling:DescribeScheduledActions",
          "autoscaling:DescribeNotificationConfigurations",
          "autoscaling:SuspendProcesses",
          "autoscaling:ResumeProcesses",
          "autoscaling:AttachLoadBalancers",
          "autoscaling:AttachLoadBalancerTargetGroups",
          "autoscaling:PutScalingPolicy",
          "autoscaling:PutScheduledUpdateGroupAction",
          "autoscaling:PutNotificationConfiguration",
          "autoscaling:PutWarmPool",
          "autoscaling:DescribeScalingActivities",
          "autoscaling:DeleteAutoScalingGroup",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:TerminateInstances",
          "tag:GetResources",
          "sns:Publish",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:PutMetricAlarm",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeTargetGroupAttributes",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:DeregisterTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2RoleforAWSCodeDeploy": {
    "policy": {
      "PolicyName": "AmazonEC2RoleforAWSCodeDeploy",
      "PolicyId": "ANPAIAZKXZ27TAJ4PVWGK",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides EC2 access to S3 bucket to download revision. This role is needed by the CodeDeploy agent on EC2 instances.",
      "CreateDate": "2015-05-19T18:10:14.000Z",
      "UpdateDate": "2017-03-20T17:14:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:ListBucket"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeDeployFullAccess": {
    "policy": {
      "PolicyName": "AWSCodeDeployFullAccess",
      "PolicyId": "ANPAIONKN3TJZUKXCHXWC",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeDeployFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to CodeDeploy resources.",
      "CreateDate": "2015-05-19T18:13:23.000Z",
      "UpdateDate": "2020-04-02T16:14:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codedeploy:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsReadWriteAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:CreateNotificationRule",
          "codestar-notifications:DescribeNotificationRule",
          "codestar-notifications:UpdateNotificationRule",
          "codestar-notifications:DeleteNotificationRule",
          "codestar-notifications:Subscribe",
          "codestar-notifications:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsListAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListTargets",
          "codestar-notifications:ListTagsforResource",
          "codestar-notifications:ListEventTypes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:SetTopicAttributes"
        ],
        "Resource": [
          "arn:aws:sns:*:*:codestar-notifications*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsChatbotAccess",
        "Effect": "Allow",
        "Action": [
          "chatbot:DescribeSlackChannelConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SNSTopicListAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeDeployDeployerAccess": {
    "policy": {
      "PolicyName": "AWSCodeDeployDeployerAccess",
      "PolicyId": "ANPAJUWEPOMGLMVXJAPUI",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to register and deploy a revision.",
      "CreateDate": "2015-05-19T18:18:43.000Z",
      "UpdateDate": "2020-04-02T16:16:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codedeploy:Batch*",
          "codedeploy:CreateDeployment",
          "codedeploy:Get*",
          "codedeploy:List*",
          "codedeploy:RegisterApplicationRevision"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsReadWriteAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:CreateNotificationRule",
          "codestar-notifications:DescribeNotificationRule",
          "codestar-notifications:UpdateNotificationRule",
          "codestar-notifications:Subscribe",
          "codestar-notifications:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsListAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListTargets",
          "codestar-notifications:ListTagsforResource",
          "codestar-notifications:ListEventTypes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsChatbotAccess",
        "Effect": "Allow",
        "Action": [
          "chatbot:DescribeSlackChannelConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SNSTopicListAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeDeployReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCodeDeployReadOnlyAccess",
      "PolicyId": "ANPAILZHHKCKB4NE7XOIQ",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeDeployReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to CodeDeploy resources.",
      "CreateDate": "2015-05-19T18:21:32.000Z",
      "UpdateDate": "2020-04-02T16:20:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codedeploy:Batch*",
          "codedeploy:Get*",
          "codedeploy:List*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsPowerUserAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:DescribeNotificationRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsListAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListEventTypes",
          "codestar-notifications:ListTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticFileSystemFullAccess": {
    "policy": {
      "PolicyName": "AmazonElasticFileSystemFullAccess",
      "PolicyId": "ANPAJKXTMNVQGIDNCKPBC",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess",
      "Path": "/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon EFS via the AWS Management Console.",
      "CreateDate": "2015-05-27T16:22:28.000Z",
      "UpdateDate": "2023-11-28T16:53:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:GetMetricData",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "ec2:ModifyNetworkInterfaceAttribute",
          "elasticfilesystem:CreateFileSystem",
          "elasticfilesystem:CreateMountTarget",
          "elasticfilesystem:CreateTags",
          "elasticfilesystem:CreateAccessPoint",
          "elasticfilesystem:CreateReplicationConfiguration",
          "elasticfilesystem:DeleteFileSystem",
          "elasticfilesystem:DeleteMountTarget",
          "elasticfilesystem:DeleteTags",
          "elasticfilesystem:DeleteAccessPoint",
          "elasticfilesystem:DeleteFileSystemPolicy",
          "elasticfilesystem:DeleteReplicationConfiguration",
          "elasticfilesystem:DescribeAccountPreferences",
          "elasticfilesystem:DescribeBackupPolicy",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeFileSystemPolicy",
          "elasticfilesystem:DescribeLifecycleConfiguration",
          "elasticfilesystem:DescribeMountTargets",
          "elasticfilesystem:DescribeMountTargetSecurityGroups",
          "elasticfilesystem:DescribeTags",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeReplicationConfigurations",
          "elasticfilesystem:ModifyMountTargetSecurityGroups",
          "elasticfilesystem:PutAccountPreferences",
          "elasticfilesystem:PutBackupPolicy",
          "elasticfilesystem:PutLifecycleConfiguration",
          "elasticfilesystem:PutFileSystemPolicy",
          "elasticfilesystem:UpdateFileSystem",
          "elasticfilesystem:UpdateFileSystemProtection",
          "elasticfilesystem:TagResource",
          "elasticfilesystem:UntagResource",
          "elasticfilesystem:ListTagsForResource",
          "elasticfilesystem:Backup",
          "elasticfilesystem:Restore",
          "kms:DescribeKey",
          "kms:ListAliases"
        ],
        "Sid": "ElasticFileSystemFullAccess",
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Sid": "CreateServiceLinkedRoleForEFS",
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticFileSystemReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonElasticFileSystemReadOnlyAccess",
      "PolicyId": "ANPAIPN5S4NE5JJOKVC4Y",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticFileSystemReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon EFS via the AWS Management Console.",
      "CreateDate": "2015-05-27T16:25:25.000Z",
      "UpdateDate": "2022-01-10T18:53:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:GetMetricData",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "elasticfilesystem:DescribeAccountPreferences",
          "elasticfilesystem:DescribeBackupPolicy",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeFileSystemPolicy",
          "elasticfilesystem:DescribeLifecycleConfiguration",
          "elasticfilesystem:DescribeMountTargets",
          "elasticfilesystem:DescribeMountTargetSecurityGroups",
          "elasticfilesystem:DescribeTags",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeReplicationConfigurations",
          "elasticfilesystem:ListTagsForResource",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSSMFullAccess": {
    "policy": {
      "PolicyName": "AmazonSSMFullAccess",
      "PolicyId": "ANPAJA7V6HI4ISQFMDYAG",
      "Arn": "arn:aws:iam::aws:policy/AmazonSSMFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon SSM.",
      "CreateDate": "2015-05-29T17:39:47.000Z",
      "UpdateDate": "2019-11-20T20:08:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData",
          "ds:CreateComputer",
          "ds:DescribeDirectories",
          "ec2:DescribeInstanceStatus",
          "logs:*",
          "ssm:*",
          "ec2messages:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssmmessages:CreateControlChannel",
          "ssmmessages:CreateDataChannel",
          "ssmmessages:OpenControlChannel",
          "ssmmessages:OpenDataChannel"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSSMReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonSSMReadOnlyAccess",
      "PolicyId": "ANPAJODSKQGGJTHRYZ5FC",
      "Arn": "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon SSM.",
      "CreateDate": "2015-05-29T17:44:19.000Z",
      "UpdateDate": "2015-05-29T17:44:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:Describe*",
          "ssm:Get*",
          "ssm:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2RoleforSSM": {
    "policy": {
      "PolicyName": "AmazonEC2RoleforSSM",
      "PolicyId": "ANPAI6TL3SMY22S4KMMX6",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
      "Path": "/service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy will soon be deprecated. Please use AmazonSSMManagedInstanceCore policy to enable AWS Systems Manager service core functionality on EC2 instances. For more information see https://docs.aws.amazon.com/systems-manager/latest/userguide/setup-instance-profile.html",
      "CreateDate": "2015-05-29T17:48:35.000Z",
      "UpdateDate": "2019-01-24T19:20:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeAssociation",
          "ssm:GetDeployablePatchSnapshotForInstance",
          "ssm:GetDocument",
          "ssm:DescribeDocument",
          "ssm:GetManifest",
          "ssm:GetParameters",
          "ssm:ListAssociations",
          "ssm:ListInstanceAssociations",
          "ssm:PutInventory",
          "ssm:PutComplianceItems",
          "ssm:PutConfigurePackageResult",
          "ssm:UpdateAssociationStatus",
          "ssm:UpdateInstanceAssociationStatus",
          "ssm:UpdateInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssmmessages:CreateControlChannel",
          "ssmmessages:CreateDataChannel",
          "ssmmessages:OpenControlChannel",
          "ssmmessages:OpenDataChannel"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2messages:AcknowledgeMessage",
          "ec2messages:DeleteMessage",
          "ec2messages:FailMessage",
          "ec2messages:GetEndpoint",
          "ec2messages:GetMessages",
          "ec2messages:SendReply"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstanceStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ds:CreateComputer",
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:PutObject",
          "s3:GetObject",
          "s3:GetEncryptionConfiguration",
          "s3:AbortMultipartUpload",
          "s3:ListMultipartUploadParts",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchActionsEC2Access": {
    "policy": {
      "PolicyName": "CloudWatchActionsEC2Access",
      "PolicyId": "ANPAIOWD4E3FVSORSZTGU",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchActionsEC2Access",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to CloudWatch alarms and metrics as well as EC2 metadata. Provides access to Stop, Terminate and Reboot EC2 instances.",
      "CreateDate": "2015-07-07T00:00:33.000Z",
      "UpdateDate": "2015-07-07T00:00:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:Describe*",
          "ec2:Describe*",
          "ec2:RebootInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodePipelineCustomActionAccess": {
    "policy": {
      "PolicyName": "AWSCodePipelineCustomActionAccess",
      "PolicyId": "ANPAJFW5Z32BTVF76VCYC",
      "Arn": "arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access for custom actions to poll for jobs details (including temporary credentials) and report status updates to AWS CodePipeline.",
      "CreateDate": "2015-07-09T17:02:54.000Z",
      "UpdateDate": "2015-07-09T17:02:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codepipeline:AcknowledgeJob",
          "codepipeline:GetJobDetails",
          "codepipeline:PollForJobs",
          "codepipeline:PutJobFailureResult",
          "codepipeline:PutJobSuccessResult"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeCommitFullAccess": {
    "policy": {
      "PolicyName": "AWSCodeCommitFullAccess",
      "PolicyId": "ANPAI4VCZ3XPIZLQ5NZV2",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess",
      "Path": "/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS CodeCommit via the AWS Management Console.",
      "CreateDate": "2015-07-09T17:02:19.000Z",
      "UpdateDate": "2023-07-17T21:50:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codecommit:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchEventsCodeCommitRulesAccess",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:DescribeRule",
          "events:DisableRule",
          "events:EnableRule",
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/codecommit*"
        ]
      },
      {
        "Sid": "SNSTopicAndSubscriptionAccess",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:DeleteTopic",
          "sns:Subscribe",
          "sns:Unsubscribe",
          "sns:SetTopicAttributes"
        ],
        "Resource": [
          "arn:aws:sns:*:*:codecommit*"
        ]
      },
      {
        "Sid": "SNSTopicAndSubscriptionReadAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics",
          "sns:ListSubscriptionsByTopic",
          "sns:GetTopicAttributes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LambdaReadOnlyListAccess",
        "Effect": "Allow",
        "Action": [
          "lambda:ListFunctions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMReadOnlyListAccess",
        "Effect": "Allow",
        "Action": [
          "iam:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMReadOnlyConsoleAccess",
        "Effect": "Allow",
        "Action": [
          "iam:ListAccessKeys",
          "iam:ListSSHPublicKeys",
          "iam:ListServiceSpecificCredentials"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      },
      {
        "Sid": "IAMUserSSHKeys",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteSSHPublicKey",
          "iam:GetSSHPublicKey",
          "iam:ListSSHPublicKeys",
          "iam:UpdateSSHPublicKey",
          "iam:UploadSSHPublicKey"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      },
      {
        "Sid": "IAMSelfManageServiceSpecificCredentials",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceSpecificCredential",
          "iam:UpdateServiceSpecificCredential",
          "iam:DeleteServiceSpecificCredential",
          "iam:ResetServiceSpecificCredential"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      },
      {
        "Sid": "CodeStarNotificationsReadWriteAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:CreateNotificationRule",
          "codestar-notifications:DescribeNotificationRule",
          "codestar-notifications:UpdateNotificationRule",
          "codestar-notifications:DeleteNotificationRule",
          "codestar-notifications:Subscribe",
          "codestar-notifications:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsListAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListTargets",
          "codestar-notifications:ListTagsforResource",
          "codestar-notifications:ListEventTypes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:SetTopicAttributes"
        ],
        "Resource": [
          "arn:aws:sns:*:*:codestar-notifications*"
        ]
      },
      {
        "Sid": "AmazonCodeGuruReviewerFullAccess",
        "Effect": "Allow",
        "Action": [
          "codeguru-reviewer:AssociateRepository",
          "codeguru-reviewer:DescribeRepositoryAssociation",
          "codeguru-reviewer:ListRepositoryAssociations",
          "codeguru-reviewer:DisassociateRepository",
          "codeguru-reviewer:DescribeCodeReview",
          "codeguru-reviewer:ListCodeReviews"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonCodeGuruReviewerSLRCreation",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer"
        ]
      },
      {
        "Sid": "CloudWatchEventsManagedRules",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets",
          "events:DeleteRule",
          "events:RemoveTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsChatbotAccess",
        "Effect": "Allow",
        "Action": [
          "chatbot:DescribeSlackChannelConfigurations",
          "chatbot:ListMicrosoftTeamsChannelConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarConnectionsReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:ListConnections",
          "codestar-connections:GetConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      }
    ]
  },
  "AWSCodeCommitReadOnly": {
    "policy": {
      "PolicyName": "AWSCodeCommitReadOnly",
      "PolicyId": "ANPAJACNSXR7Z2VLJW3D6",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeCommitReadOnly",
      "Path": "/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS CodeCommit via the AWS Management Console.",
      "CreateDate": "2015-07-09T17:05:06.000Z",
      "UpdateDate": "2021-08-18T18:18:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codecommit:BatchGet*",
          "codecommit:BatchDescribe*",
          "codecommit:Describe*",
          "codecommit:EvaluatePullRequestApprovalRules",
          "codecommit:Get*",
          "codecommit:List*",
          "codecommit:GitPull"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/codecommit*"
        ]
      },
      {
        "Sid": "SNSSubscriptionAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics",
          "sns:ListSubscriptionsByTopic",
          "sns:GetTopicAttributes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LambdaReadOnlyListAccess",
        "Effect": "Allow",
        "Action": [
          "lambda:ListFunctions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMReadOnlyListAccess",
        "Effect": "Allow",
        "Action": [
          "iam:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMReadOnlyConsoleAccess",
        "Effect": "Allow",
        "Action": [
          "iam:ListSSHPublicKeys",
          "iam:ListServiceSpecificCredentials",
          "iam:ListAccessKeys",
          "iam:GetSSHPublicKey"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      },
      {
        "Sid": "CodeStarConnectionsReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:ListConnections",
          "codestar-connections:GetConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:DescribeNotificationRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsListAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListEventTypes",
          "codestar-notifications:ListTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonCodeGuruReviewerReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "codeguru-reviewer:DescribeRepositoryAssociation",
          "codeguru-reviewer:ListRepositoryAssociations",
          "codeguru-reviewer:DescribeCodeReview",
          "codeguru-reviewer:ListCodeReviews"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeCommitPowerUser": {
    "policy": {
      "PolicyName": "AWSCodeCommitPowerUser",
      "PolicyId": "ANPAI4UIINUVGB5SEC57G",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeCommitPowerUser",
      "Path": "/",
      "DefaultVersionId": "v15",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS CodeCommit repositories, but does not allow repository deletion.",
      "CreateDate": "2015-07-09T17:06:49.000Z",
      "UpdateDate": "2023-07-17T21:49:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codecommit:AssociateApprovalRuleTemplateWithRepository",
          "codecommit:BatchAssociateApprovalRuleTemplateWithRepositories",
          "codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories",
          "codecommit:BatchGet*",
          "codecommit:BatchDescribe*",
          "codecommit:Create*",
          "codecommit:DeleteBranch",
          "codecommit:DeleteFile",
          "codecommit:Describe*",
          "codecommit:DisassociateApprovalRuleTemplateFromRepository",
          "codecommit:EvaluatePullRequestApprovalRules",
          "codecommit:Get*",
          "codecommit:List*",
          "codecommit:Merge*",
          "codecommit:OverridePullRequestApprovalRules",
          "codecommit:Put*",
          "codecommit:Post*",
          "codecommit:TagResource",
          "codecommit:Test*",
          "codecommit:UntagResource",
          "codecommit:Update*",
          "codecommit:GitPull",
          "codecommit:GitPush"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchEventsCodeCommitRulesAccess",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:DescribeRule",
          "events:DisableRule",
          "events:EnableRule",
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/codecommit*"
        ]
      },
      {
        "Sid": "SNSTopicAndSubscriptionAccess",
        "Effect": "Allow",
        "Action": [
          "sns:Subscribe",
          "sns:Unsubscribe"
        ],
        "Resource": [
          "arn:aws:sns:*:*:codecommit*"
        ]
      },
      {
        "Sid": "SNSTopicAndSubscriptionReadAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics",
          "sns:ListSubscriptionsByTopic",
          "sns:GetTopicAttributes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LambdaReadOnlyListAccess",
        "Effect": "Allow",
        "Action": [
          "lambda:ListFunctions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMReadOnlyListAccess",
        "Effect": "Allow",
        "Action": [
          "iam:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMReadOnlyConsoleAccess",
        "Effect": "Allow",
        "Action": [
          "iam:ListAccessKeys",
          "iam:ListSSHPublicKeys",
          "iam:ListServiceSpecificCredentials"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      },
      {
        "Sid": "IAMUserSSHKeys",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteSSHPublicKey",
          "iam:GetSSHPublicKey",
          "iam:ListSSHPublicKeys",
          "iam:UpdateSSHPublicKey",
          "iam:UploadSSHPublicKey"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      },
      {
        "Sid": "IAMSelfManageServiceSpecificCredentials",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceSpecificCredential",
          "iam:UpdateServiceSpecificCredential",
          "iam:DeleteServiceSpecificCredential",
          "iam:ResetServiceSpecificCredential"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      },
      {
        "Sid": "CodeStarNotificationsReadWriteAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:CreateNotificationRule",
          "codestar-notifications:DescribeNotificationRule",
          "codestar-notifications:UpdateNotificationRule",
          "codestar-notifications:Subscribe",
          "codestar-notifications:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsListAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListTargets",
          "codestar-notifications:ListTagsforResource",
          "codestar-notifications:ListEventTypes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonCodeGuruReviewerFullAccess",
        "Effect": "Allow",
        "Action": [
          "codeguru-reviewer:AssociateRepository",
          "codeguru-reviewer:DescribeRepositoryAssociation",
          "codeguru-reviewer:ListRepositoryAssociations",
          "codeguru-reviewer:DisassociateRepository",
          "codeguru-reviewer:DescribeCodeReview",
          "codeguru-reviewer:ListCodeReviews"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonCodeGuruReviewerSLRCreation",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer"
        ]
      },
      {
        "Sid": "CloudWatchEventsManagedRules",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets",
          "events:DeleteRule",
          "events:RemoveTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsChatbotAccess",
        "Effect": "Allow",
        "Action": [
          "chatbot:DescribeSlackChannelConfigurations",
          "chatbot:ListMicrosoftTeamsChannelConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarConnectionsReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:ListConnections",
          "codestar-connections:GetConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      }
    ]
  },
  "IAMUserSSHKeys": {
    "policy": {
      "PolicyName": "IAMUserSSHKeys",
      "PolicyId": "ANPAJTSHUA4UXGXU7ANUA",
      "Arn": "arn:aws:iam::aws:policy/IAMUserSSHKeys",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the ability for an IAM user to manage their own SSH keys.",
      "CreateDate": "2015-07-09T17:08:54.000Z",
      "UpdateDate": "2015-07-09T17:08:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteSSHPublicKey",
          "iam:GetSSHPublicKey",
          "iam:ListSSHPublicKeys",
          "iam:UpdateSSHPublicKey",
          "iam:UploadSSHPublicKey"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      }
    ]
  },
  "AmazonAPIGatewayAdministrator": {
    "policy": {
      "PolicyName": "AmazonAPIGatewayAdministrator",
      "PolicyId": "ANPAJ4PT6VY5NLKTNUYSI",
      "Arn": "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to create/edit/delete APIs in Amazon API Gateway via the AWS Management Console.",
      "CreateDate": "2015-07-09T17:34:45.000Z",
      "UpdateDate": "2015-07-09T17:34:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:*"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/*"
        ]
      }
    ]
  },
  "AmazonAPIGatewayInvokeFullAccess": {
    "policy": {
      "PolicyName": "AmazonAPIGatewayInvokeFullAccess",
      "PolicyId": "ANPAIIWAX2NOOQJ4AIEQ6",
      "Arn": "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to invoke APIs in Amazon API Gateway.",
      "CreateDate": "2015-07-09T17:36:12.000Z",
      "UpdateDate": "2018-12-18T18:25:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "execute-api:Invoke",
          "execute-api:ManageConnections"
        ],
        "Resource": [
          "arn:aws:execute-api:*:*:*"
        ]
      }
    ]
  },
  "AWSDeviceFarmFullAccess": {
    "policy": {
      "PolicyName": "AWSDeviceFarmFullAccess",
      "PolicyId": "ANPAJO7KEDP4VYJPNT5UW",
      "Arn": "arn:aws:iam::aws:policy/AWSDeviceFarmFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all AWS Device Farm operations.",
      "CreateDate": "2015-07-13T16:37:38.000Z",
      "UpdateDate": "2015-07-13T16:37:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "devicefarm:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDRSVPCManagement": {
    "policy": {
      "PolicyName": "AmazonDRSVPCManagement",
      "PolicyId": "ANPAJPXIBTTZMBEFEX6UA",
      "Arn": "arn:aws:iam::aws:policy/AmazonDRSVPCManagement",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to manage VPC settings for Amazon managed customer configurations",
      "CreateDate": "2015-09-02T00:09:20.000Z",
      "UpdateDate": "2015-09-02T00:09:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:RevokeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "VMImportExportRoleForAWSConnector": {
    "policy": {
      "PolicyName": "VMImportExportRoleForAWSConnector",
      "PolicyId": "ANPAJFLQOOJ6F5XNX4LAW",
      "Arn": "arn:aws:iam::aws:policy/service-role/VMImportExportRoleForAWSConnector",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the VM Import/Export service role, for customers using the AWS Connector. The VM Import/Export service assumes a role with this policy to fulfill virtual machine migration requests from the AWS Connector virtual appliance. (Note that the AWS Connector uses the \"AWSConnector\" managed policy to issue requests on the customer's behalf to the VM Import/Export service.) Provides the ability to create AMIs and EBS snapshots, modify EBS snapshot attributes, make \"Describe*\" calls on EC2 objects, and read from S3 buckets starting with 'import-to-ec2-'.",
      "CreateDate": "2015-09-03T20:48:59.000Z",
      "UpdateDate": "2015-09-03T20:48:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::import-to-ec2-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifySnapshotAttribute",
          "ec2:CopySnapshot",
          "ec2:RegisterImage",
          "ec2:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkSpacesAdmin": {
    "policy": {
      "PolicyName": "AmazonWorkSpacesAdmin",
      "PolicyId": "ANPAJ26AU6ATUQCT5KVJU",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkSpacesAdmin",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Amazon WorkSpaces administrative actions via AWS SDK and CLI.",
      "CreateDate": "2015-09-22T22:21:15.000Z",
      "UpdateDate": "2023-08-03T23:57:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListAliases",
          "kms:ListKeys",
          "workspaces:CreateTags",
          "workspaces:CreateWorkspaceImage",
          "workspaces:CreateWorkspaces",
          "workspaces:CreateStandbyWorkspaces",
          "workspaces:DeleteTags",
          "workspaces:DescribeTags",
          "workspaces:DescribeWorkspaceBundles",
          "workspaces:DescribeWorkspaceDirectories",
          "workspaces:DescribeWorkspaces",
          "workspaces:DescribeWorkspacesConnectionStatus",
          "workspaces:ModifyCertificateBasedAuthProperties",
          "workspaces:ModifySamlProperties",
          "workspaces:ModifyWorkspaceProperties",
          "workspaces:RebootWorkspaces",
          "workspaces:RebuildWorkspaces",
          "workspaces:RestoreWorkspace",
          "workspaces:StartWorkspaces",
          "workspaces:StopWorkspaces",
          "workspaces:TerminateWorkspaces"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonESFullAccess": {
    "policy": {
      "PolicyName": "AmazonESFullAccess",
      "PolicyId": "ANPAJM6ZTCU24QL5PZCGC",
      "Arn": "arn:aws:iam::aws:policy/AmazonESFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the Amazon ES configuration service.",
      "CreateDate": "2015-10-01T19:14:00.000Z",
      "UpdateDate": "2015-10-01T19:14:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "es:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonESReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonESReadOnlyAccess",
      "PolicyId": "ANPAJUDMRLOQ7FPAR46FQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonESReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to the Amazon ES configuration service.",
      "CreateDate": "2015-10-01T19:18:24.000Z",
      "UpdateDate": "2018-10-03T03:32:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "es:Describe*",
          "es:List*",
          "es:Get*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSWAFReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSWAFReadOnlyAccess",
      "PolicyId": "ANPAINZVDMX2SBF7EU2OC",
      "Arn": "arn:aws:iam::aws:policy/AWSWAFReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS WAF actions.",
      "CreateDate": "2015-10-06T20:43:45.000Z",
      "UpdateDate": "2023-06-05T20:55:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "waf:Get*",
          "waf:List*",
          "waf-regional:Get*",
          "waf-regional:List*",
          "wafv2:Get*",
          "wafv2:List*",
          "wafv2:Describe*",
          "wafv2:CheckCapacity",
          "cognito-idp:ListResourcesForWebACL",
          "cognito-idp:GetWebACLForResource",
          "apprunner:DescribeWebAclForService",
          "apprunner:ListServices",
          "apprunner:ListAssociatedServicesForWebAcl",
          "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
          "ec2:GetVerifiedAccessInstanceWebAcl"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSWAFFullAccess": {
    "policy": {
      "PolicyName": "AWSWAFFullAccess",
      "PolicyId": "ANPAJMIKIAFXZEGOLRH7C",
      "Arn": "arn:aws:iam::aws:policy/AWSWAFFullAccess",
      "Path": "/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS WAF actions.",
      "CreateDate": "2015-10-06T20:44:00.000Z",
      "UpdateDate": "2023-06-05T20:55:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowUseOfAWSWAF",
        "Effect": "Allow",
        "Action": [
          "waf:*",
          "waf-regional:*",
          "wafv2:*",
          "elasticloadbalancing:SetWebACL",
          "apigateway:SetWebACL",
          "appsync:SetWebACL",
          "logs:DescribeResourcePolicies",
          "logs:DescribeLogGroups",
          "cognito-idp:AssociateWebACL",
          "cognito-idp:DisassociateWebACL",
          "cognito-idp:ListResourcesForWebACL",
          "cognito-idp:GetWebACLForResource",
          "apprunner:AssociateWebAcl",
          "apprunner:DisassociateWebAcl",
          "apprunner:DescribeWebAclForService",
          "apprunner:ListServices",
          "apprunner:ListAssociatedServicesForWebAcl",
          "ec2:AssociateVerifiedAccessInstanceWebAcl",
          "ec2:DisassociateVerifiedAccessInstanceWebAcl",
          "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
          "ec2:GetVerifiedAccessInstanceWebAcl"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowLogDeliverySubscription",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:DeleteLogDelivery"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GrantLogDeliveryPermissionForS3Bucket",
        "Effect": "Allow",
        "Action": [
          "s3:PutBucketPolicy",
          "s3:GetBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::aws-waf-logs-*"
        ]
      },
      {
        "Sid": "GrantLogDeliveryPermissionForCloudWatchLogGroup",
        "Effect": "Allow",
        "Action": [
          "logs:PutResourcePolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonInspectorReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonInspectorReadOnlyAccess",
      "PolicyId": "ANPAJXQNTHTEJ2JFRN2SE",
      "Arn": "arn:aws:iam::aws:policy/AmazonInspectorReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Inspector.",
      "CreateDate": "2015-10-07T17:08:01.000Z",
      "UpdateDate": "2019-10-01T15:17:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "inspector:Describe*",
          "inspector:Get*",
          "inspector:List*",
          "inspector:Preview*",
          "ec2:DescribeInstances",
          "ec2:DescribeTags",
          "sns:ListTopics",
          "events:DescribeRule",
          "events:ListRuleNamesByTarget"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonInspectorFullAccess": {
    "policy": {
      "PolicyName": "AmazonInspectorFullAccess",
      "PolicyId": "ANPAI7Y6NTA27NWNA5U5E",
      "Arn": "arn:aws:iam::aws:policy/AmazonInspectorFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Inspector.",
      "CreateDate": "2015-10-07T17:08:04.000Z",
      "UpdateDate": "2017-12-21T14:53:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "inspector:*",
          "ec2:DescribeInstances",
          "ec2:DescribeTags",
          "sns:ListTopics",
          "events:DescribeRule",
          "events:ListRuleNamesByTarget"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector"
        ]
      }
    ]
  },
  "AmazonKinesisFirehoseReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonKinesisFirehoseReadOnlyAccess",
      "PolicyId": "ANPAJ36NT645INW4K24W6",
      "Arn": "arn:aws:iam::aws:policy/AmazonKinesisFirehoseReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to all Amazon Kinesis Firehose Delivery Streams.",
      "CreateDate": "2015-10-07T18:43:39.000Z",
      "UpdateDate": "2015-10-07T18:43:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "firehose:Describe*",
          "firehose:List*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKinesisFirehoseFullAccess": {
    "policy": {
      "PolicyName": "AmazonKinesisFirehoseFullAccess",
      "PolicyId": "ANPAJMZQMTZ7FRBFHHAHI",
      "Arn": "arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all Amazon Kinesis Firehose Delivery Streams.",
      "CreateDate": "2015-10-07T18:45:26.000Z",
      "UpdateDate": "2015-10-07T18:45:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "firehose:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTRuleActions": {
    "policy": {
      "PolicyName": "AWSIoTRuleActions",
      "PolicyId": "ANPAJEZ6FS7BUZVUHMOKY",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTRuleActions",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows access to all AWS services supported in AWS IoT Rule Actions",
      "CreateDate": "2015-10-08T15:14:51.000Z",
      "UpdateDate": "2018-01-16T19:28:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:PutItem",
          "kinesis:PutRecord",
          "iot:Publish",
          "s3:PutObject",
          "sns:Publish",
          "sqs:SendMessage*",
          "cloudwatch:SetAlarmState",
          "cloudwatch:PutMetricData",
          "es:ESHttpPut",
          "firehose:PutRecord"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTLogging": {
    "policy": {
      "PolicyName": "AWSIoTLogging",
      "PolicyId": "ANPAI6R6Z2FHHGS454W7W",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTLogging",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows creation of Amazon CloudWatch Log groups and streaming logs to the groups",
      "CreateDate": "2015-10-08T15:17:25.000Z",
      "UpdateDate": "2015-10-08T15:17:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:PutMetricFilter",
          "logs:PutRetentionPolicy",
          "logs:GetLogEvents",
          "logs:DeleteLogStream"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTFullAccess": {
    "policy": {
      "PolicyName": "AWSIoTFullAccess",
      "PolicyId": "ANPAJU2FPGG6PQWN72V2G",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy gives full access to the AWS IoT configuration and messaging actions",
      "CreateDate": "2015-10-08T15:19:49.000Z",
      "UpdateDate": "2022-05-19T21:39:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:*",
          "iotjobsdata:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTDataAccess": {
    "policy": {
      "PolicyName": "AWSIoTDataAccess",
      "PolicyId": "ANPAJM2KI2UJDR24XPS2K",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTDataAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy gives full access to the AWS IoT messaging actions",
      "CreateDate": "2015-10-27T21:51:18.000Z",
      "UpdateDate": "2021-06-23T21:34:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:Connect",
          "iot:Publish",
          "iot:Subscribe",
          "iot:Receive",
          "iot:GetThingShadow",
          "iot:UpdateThingShadow",
          "iot:DeleteThingShadow",
          "iot:ListNamedShadowsForThing"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTConfigAccess": {
    "policy": {
      "PolicyName": "AWSIoTConfigAccess",
      "PolicyId": "ANPAIWWGD4LM4EMXNRL7I",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTConfigAccess",
      "Path": "/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy gives full access to the AWS IoT configuration actions",
      "CreateDate": "2015-10-27T21:52:07.000Z",
      "UpdateDate": "2019-09-27T20:48:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:AcceptCertificateTransfer",
          "iot:AddThingToThingGroup",
          "iot:AssociateTargetsWithJob",
          "iot:AttachPolicy",
          "iot:AttachPrincipalPolicy",
          "iot:AttachThingPrincipal",
          "iot:CancelCertificateTransfer",
          "iot:CancelJob",
          "iot:CancelJobExecution",
          "iot:ClearDefaultAuthorizer",
          "iot:CreateAuthorizer",
          "iot:CreateCertificateFromCsr",
          "iot:CreateJob",
          "iot:CreateKeysAndCertificate",
          "iot:CreateOTAUpdate",
          "iot:CreatePolicy",
          "iot:CreatePolicyVersion",
          "iot:CreateRoleAlias",
          "iot:CreateStream",
          "iot:CreateThing",
          "iot:CreateThingGroup",
          "iot:CreateThingType",
          "iot:CreateTopicRule",
          "iot:DeleteAuthorizer",
          "iot:DeleteCACertificate",
          "iot:DeleteCertificate",
          "iot:DeleteJob",
          "iot:DeleteJobExecution",
          "iot:DeleteOTAUpdate",
          "iot:DeletePolicy",
          "iot:DeletePolicyVersion",
          "iot:DeleteRegistrationCode",
          "iot:DeleteRoleAlias",
          "iot:DeleteStream",
          "iot:DeleteThing",
          "iot:DeleteThingGroup",
          "iot:DeleteThingType",
          "iot:DeleteTopicRule",
          "iot:DeleteV2LoggingLevel",
          "iot:DeprecateThingType",
          "iot:DescribeAuthorizer",
          "iot:DescribeCACertificate",
          "iot:DescribeCertificate",
          "iot:DescribeDefaultAuthorizer",
          "iot:DescribeEndpoint",
          "iot:DescribeEventConfigurations",
          "iot:DescribeIndex",
          "iot:DescribeJob",
          "iot:DescribeJobExecution",
          "iot:DescribeRoleAlias",
          "iot:DescribeStream",
          "iot:DescribeThing",
          "iot:DescribeThingGroup",
          "iot:DescribeThingRegistrationTask",
          "iot:DescribeThingType",
          "iot:DetachPolicy",
          "iot:DetachPrincipalPolicy",
          "iot:DetachThingPrincipal",
          "iot:DisableTopicRule",
          "iot:EnableTopicRule",
          "iot:GetEffectivePolicies",
          "iot:GetIndexingConfiguration",
          "iot:GetJobDocument",
          "iot:GetLoggingOptions",
          "iot:GetOTAUpdate",
          "iot:GetPolicy",
          "iot:GetPolicyVersion",
          "iot:GetRegistrationCode",
          "iot:GetTopicRule",
          "iot:GetV2LoggingOptions",
          "iot:ListAttachedPolicies",
          "iot:ListAuthorizers",
          "iot:ListCACertificates",
          "iot:ListCertificates",
          "iot:ListCertificatesByCA",
          "iot:ListIndices",
          "iot:ListJobExecutionsForJob",
          "iot:ListJobExecutionsForThing",
          "iot:ListJobs",
          "iot:ListOTAUpdates",
          "iot:ListOutgoingCertificates",
          "iot:ListPolicies",
          "iot:ListPolicyPrincipals",
          "iot:ListPolicyVersions",
          "iot:ListPrincipalPolicies",
          "iot:ListPrincipalThings",
          "iot:ListRoleAliases",
          "iot:ListStreams",
          "iot:ListTargetsForPolicy",
          "iot:ListThingGroups",
          "iot:ListThingGroupsForThing",
          "iot:ListThingPrincipals",
          "iot:ListThingRegistrationTaskReports",
          "iot:ListThingRegistrationTasks",
          "iot:ListThings",
          "iot:ListThingsInThingGroup",
          "iot:ListThingTypes",
          "iot:ListTopicRules",
          "iot:ListV2LoggingLevels",
          "iot:RegisterCACertificate",
          "iot:RegisterCertificate",
          "iot:RegisterThing",
          "iot:RejectCertificateTransfer",
          "iot:RemoveThingFromThingGroup",
          "iot:ReplaceTopicRule",
          "iot:SearchIndex",
          "iot:SetDefaultAuthorizer",
          "iot:SetDefaultPolicyVersion",
          "iot:SetLoggingOptions",
          "iot:SetV2LoggingLevel",
          "iot:SetV2LoggingOptions",
          "iot:StartThingRegistrationTask",
          "iot:StopThingRegistrationTask",
          "iot:TestAuthorization",
          "iot:TestInvokeAuthorizer",
          "iot:TransferCertificate",
          "iot:UpdateAuthorizer",
          "iot:UpdateCACertificate",
          "iot:UpdateCertificate",
          "iot:UpdateEventConfigurations",
          "iot:UpdateIndexingConfiguration",
          "iot:UpdateRoleAlias",
          "iot:UpdateStream",
          "iot:UpdateThing",
          "iot:UpdateThingGroup",
          "iot:UpdateThingGroupsForThing",
          "iot:UpdateAccountAuditConfiguration",
          "iot:DescribeAccountAuditConfiguration",
          "iot:DeleteAccountAuditConfiguration",
          "iot:StartOnDemandAuditTask",
          "iot:CancelAuditTask",
          "iot:DescribeAuditTask",
          "iot:ListAuditTasks",
          "iot:CreateScheduledAudit",
          "iot:UpdateScheduledAudit",
          "iot:DeleteScheduledAudit",
          "iot:DescribeScheduledAudit",
          "iot:ListScheduledAudits",
          "iot:ListAuditFindings",
          "iot:CreateSecurityProfile",
          "iot:DescribeSecurityProfile",
          "iot:UpdateSecurityProfile",
          "iot:DeleteSecurityProfile",
          "iot:AttachSecurityProfile",
          "iot:DetachSecurityProfile",
          "iot:ListSecurityProfiles",
          "iot:ListSecurityProfilesForTarget",
          "iot:ListTargetsForSecurityProfile",
          "iot:ListActiveViolations",
          "iot:ListViolationEvents",
          "iot:ValidateSecurityProfileBehaviors"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTConfigReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSIoTConfigReadOnlyAccess",
      "PolicyId": "ANPAJHENEMXGX4XMFOIOI",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTConfigReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy gives read only access to the AWS IoT configuration actions",
      "CreateDate": "2015-10-27T21:52:31.000Z",
      "UpdateDate": "2019-09-27T20:52:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:DescribeAuthorizer",
          "iot:DescribeCACertificate",
          "iot:DescribeCertificate",
          "iot:DescribeDefaultAuthorizer",
          "iot:DescribeEndpoint",
          "iot:DescribeEventConfigurations",
          "iot:DescribeIndex",
          "iot:DescribeJob",
          "iot:DescribeJobExecution",
          "iot:DescribeRoleAlias",
          "iot:DescribeStream",
          "iot:DescribeThing",
          "iot:DescribeThingGroup",
          "iot:DescribeThingRegistrationTask",
          "iot:DescribeThingType",
          "iot:GetEffectivePolicies",
          "iot:GetIndexingConfiguration",
          "iot:GetJobDocument",
          "iot:GetLoggingOptions",
          "iot:GetOTAUpdate",
          "iot:GetPolicy",
          "iot:GetPolicyVersion",
          "iot:GetRegistrationCode",
          "iot:GetTopicRule",
          "iot:GetV2LoggingOptions",
          "iot:ListAttachedPolicies",
          "iot:ListAuthorizers",
          "iot:ListCACertificates",
          "iot:ListCertificates",
          "iot:ListCertificatesByCA",
          "iot:ListIndices",
          "iot:ListJobExecutionsForJob",
          "iot:ListJobExecutionsForThing",
          "iot:ListJobs",
          "iot:ListOTAUpdates",
          "iot:ListOutgoingCertificates",
          "iot:ListPolicies",
          "iot:ListPolicyPrincipals",
          "iot:ListPolicyVersions",
          "iot:ListPrincipalPolicies",
          "iot:ListPrincipalThings",
          "iot:ListRoleAliases",
          "iot:ListStreams",
          "iot:ListTargetsForPolicy",
          "iot:ListThingGroups",
          "iot:ListThingGroupsForThing",
          "iot:ListThingPrincipals",
          "iot:ListThingRegistrationTaskReports",
          "iot:ListThingRegistrationTasks",
          "iot:ListThings",
          "iot:ListThingsInThingGroup",
          "iot:ListThingTypes",
          "iot:ListTopicRules",
          "iot:ListV2LoggingLevels",
          "iot:SearchIndex",
          "iot:TestAuthorization",
          "iot:TestInvokeAuthorizer",
          "iot:DescribeAccountAuditConfiguration",
          "iot:DescribeAuditTask",
          "iot:ListAuditTasks",
          "iot:DescribeScheduledAudit",
          "iot:ListScheduledAudits",
          "iot:ListAuditFindings",
          "iot:DescribeSecurityProfile",
          "iot:ListSecurityProfiles",
          "iot:ListSecurityProfilesForTarget",
          "iot:ListTargetsForSecurityProfile",
          "iot:ListActiveViolations",
          "iot:ListViolationEvents",
          "iot:ValidateSecurityProfileBehaviors"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSQuickSightDescribeRDS": {
    "policy": {
      "PolicyName": "AWSQuickSightDescribeRDS",
      "PolicyId": "ANPAJU5J6OAMCJD3OO76O",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSQuickSightDescribeRDS",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow QuickSight to describe the RDS resources",
      "CreateDate": "2015-11-10T23:24:50.000Z",
      "UpdateDate": "2015-11-10T23:24:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "rds:Describe*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSQuickSightDescribeRedshift": {
    "policy": {
      "PolicyName": "AWSQuickSightDescribeRedshift",
      "PolicyId": "ANPAJFEM6MLSLTW4ZNBW2",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSQuickSightDescribeRedshift",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow QuickSight to describe Redshift resources",
      "CreateDate": "2015-11-10T23:25:01.000Z",
      "UpdateDate": "2015-11-10T23:25:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "redshift:Describe*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSQuickSightListIAM": {
    "policy": {
      "PolicyName": "AWSQuickSightListIAM",
      "PolicyId": "ANPAI3CH5UUWZN4EKGILO",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSQuickSightListIAM",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow QuickSight to list IAM entities",
      "CreateDate": "2015-11-10T23:25:07.000Z",
      "UpdateDate": "2015-11-10T23:25:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSEnhancedMonitoringRole": {
    "policy": {
      "PolicyName": "AmazonRDSEnhancedMonitoringRole",
      "PolicyId": "ANPAJV7BS425S4PTSSVGK",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Cloudwatch for RDS Enhanced Monitoring",
      "CreateDate": "2015-11-11T19:58:29.000Z",
      "UpdateDate": "2015-11-11T19:58:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:RDS*"
        ]
      },
      {
        "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
        ]
      }
    ]
  },
  "AmazonAPIGatewayPushToCloudWatchLogs": {
    "policy": {
      "PolicyName": "AmazonAPIGatewayPushToCloudWatchLogs",
      "PolicyId": "ANPAIK4GFO7HLKYN64ASK",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows API Gateway to push logs to user's account.",
      "CreateDate": "2015-11-11T23:41:46.000Z",
      "UpdateDate": "2015-11-11T23:41:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents",
          "logs:GetLogEvents",
          "logs:FilterLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDMSVPCManagementRole": {
    "policy": {
      "PolicyName": "AmazonDMSVPCManagementRole",
      "PolicyId": "ANPAJHKIGMBQI4AEFFSYO",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to manage VPC settings for AWS managed customer configurations",
      "CreateDate": "2015-11-18T16:33:19.000Z",
      "UpdateDate": "2016-05-23T16:29:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DeleteNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMechanicalTurkFullAccess": {
    "policy": {
      "PolicyName": "AmazonMechanicalTurkFullAccess",
      "PolicyId": "ANPAJDGCL5BET73H5QIQC",
      "Arn": "arn:aws:iam::aws:policy/AmazonMechanicalTurkFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all APIs in Amazon Mechanical Turk.",
      "CreateDate": "2015-12-11T19:08:19.000Z",
      "UpdateDate": "2015-12-11T19:08:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mechanicalturk:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMechanicalTurkReadOnly": {
    "policy": {
      "PolicyName": "AmazonMechanicalTurkReadOnly",
      "PolicyId": "ANPAIO5IY3G3WXSX5PPRM",
      "Arn": "arn:aws:iam::aws:policy/AmazonMechanicalTurkReadOnly",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to read only APIs in Amazon Mechanical Turk.",
      "CreateDate": "2015-12-11T19:08:28.000Z",
      "UpdateDate": "2019-09-25T21:06:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mechanicalturk:Get*",
          "mechanicalturk:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2ContainerRegistryReadOnly": {
    "policy": {
      "PolicyName": "AmazonEC2ContainerRegistryReadOnly",
      "PolicyId": "ANPAIFYZPA37OOHVIH7KQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon EC2 Container Registry repositories.",
      "CreateDate": "2015-12-21T17:04:15.000Z",
      "UpdateDate": "2019-12-10T20:56:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer",
          "ecr:GetRepositoryPolicy",
          "ecr:DescribeRepositories",
          "ecr:ListImages",
          "ecr:DescribeImages",
          "ecr:BatchGetImage",
          "ecr:GetLifecyclePolicy",
          "ecr:GetLifecyclePolicyPreview",
          "ecr:ListTagsForResource",
          "ecr:DescribeImageScanFindings"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2ContainerRegistryPowerUser": {
    "policy": {
      "PolicyName": "AmazonEC2ContainerRegistryPowerUser",
      "PolicyId": "ANPAJDNE5PIHROIBGGDDW",
      "Arn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon EC2 Container Registry repositories, but does not allow repository deletion or policy changes.",
      "CreateDate": "2015-12-21T17:05:33.000Z",
      "UpdateDate": "2019-12-10T20:48:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer",
          "ecr:GetRepositoryPolicy",
          "ecr:DescribeRepositories",
          "ecr:ListImages",
          "ecr:DescribeImages",
          "ecr:BatchGetImage",
          "ecr:GetLifecyclePolicy",
          "ecr:GetLifecyclePolicyPreview",
          "ecr:ListTagsForResource",
          "ecr:DescribeImageScanFindings",
          "ecr:InitiateLayerUpload",
          "ecr:UploadLayerPart",
          "ecr:CompleteLayerUpload",
          "ecr:PutImage"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2ContainerRegistryFullAccess": {
    "policy": {
      "PolicyName": "AmazonEC2ContainerRegistryFullAccess",
      "PolicyId": "ANPAIESRL7KD7IIVF6V4W",
      "Arn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrative access to Amazon ECR resources",
      "CreateDate": "2015-12-21T17:06:48.000Z",
      "UpdateDate": "2020-12-05T00:04:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr:*",
          "cloudtrail:LookupEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDMSCloudWatchLogsRole": {
    "policy": {
      "PolicyName": "AmazonDMSCloudWatchLogsRole",
      "PolicyId": "ANPAJBG7UXZZXUJD3TDJE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to upload DMS replication logs to cloudwatch logs in customer account.",
      "CreateDate": "2016-01-07T23:44:53.000Z",
      "UpdateDate": "2023-05-23T21:32:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowDescribeOnAllLogGroups",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:dms-tasks-*",
          "arn:aws:logs:*:*:log-group:dms-serverless-replication-*"
        ]
      },
      {
        "Sid": "AllowCreationOfDmsLogGroups",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:dms-tasks-*",
          "arn:aws:logs:*:*:log-group:dms-serverless-replication-*:log-stream:"
        ]
      },
      {
        "Sid": "AllowCreationOfDmsLogStream",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*",
          "arn:aws:logs:*:*:log-group:dms-serverless-replication-*:log-stream:dms-serverless-*"
        ]
      },
      {
        "Sid": "AllowUploadOfLogEventsToDmsLogStream",
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*",
          "arn:aws:logs:*:*:log-group:dms-serverless-replication-*:log-stream:dms-serverless-*"
        ]
      }
    ]
  },
  "CloudWatchEventsReadOnlyAccess": {
    "policy": {
      "PolicyName": "CloudWatchEventsReadOnlyAccess",
      "PolicyId": "ANPAIILJPXXA6F7GYLYBS",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchEventsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon CloudWatch Events.",
      "CreateDate": "2016-01-14T18:27:18.000Z",
      "UpdateDate": "2022-12-01T16:29:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:DescribeEventBus",
          "events:DescribeEventSource",
          "events:ListEventBuses",
          "events:ListEventSources",
          "events:ListRuleNamesByTarget",
          "events:ListRules",
          "events:ListTargetsByRule",
          "events:TestEventPattern",
          "events:DescribeArchive",
          "events:ListArchives",
          "events:DescribeReplay",
          "events:ListReplays",
          "events:DescribeConnection",
          "events:ListConnections",
          "events:DescribeApiDestination",
          "events:ListApiDestinations",
          "events:DescribeEndpoint",
          "events:ListEndpoints",
          "schemas:DescribeCodeBinding",
          "schemas:DescribeDiscoverer",
          "schemas:DescribeRegistry",
          "schemas:DescribeSchema",
          "schemas:ExportSchema",
          "schemas:GetCodeBindingSource",
          "schemas:GetDiscoveredSchema",
          "schemas:GetResourcePolicy",
          "schemas:ListDiscoverers",
          "schemas:ListRegistries",
          "schemas:ListSchemas",
          "schemas:ListSchemaVersions",
          "schemas:ListTagsForResource",
          "schemas:SearchSchemas",
          "scheduler:GetSchedule",
          "scheduler:GetScheduleGroup",
          "scheduler:ListSchedules",
          "scheduler:ListScheduleGroups",
          "scheduler:ListTagsForResource",
          "pipes:DescribePipe",
          "pipes:ListPipes",
          "pipes:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchEventsBuiltInTargetExecutionAccess": {
    "policy": {
      "PolicyName": "CloudWatchEventsBuiltInTargetExecutionAccess",
      "PolicyId": "ANPAIC5AQ5DATYSNF4AUM",
      "Arn": "arn:aws:iam::aws:policy/service-role/CloudWatchEventsBuiltInTargetExecutionAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows built-in targets in Amazon CloudWatch Events to perform EC2 actions on your behalf.",
      "CreateDate": "2016-01-14T18:35:49.000Z",
      "UpdateDate": "2016-01-14T18:35:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess",
        "Effect": "Allow",
        "Action": [
          "ec2:Describe*",
          "ec2:RebootInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchEventsInvocationAccess": {
    "policy": {
      "PolicyName": "CloudWatchEventsInvocationAccess",
      "PolicyId": "ANPAJJXD6JKJLK2WDLZNO",
      "Arn": "arn:aws:iam::aws:policy/service-role/CloudWatchEventsInvocationAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon CloudWatch Events to relay events to the streams in AWS Kinesis Streams in your account.",
      "CreateDate": "2016-01-14T18:36:33.000Z",
      "UpdateDate": "2016-01-14T18:36:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudWatchEventsInvocationAccess",
        "Effect": "Allow",
        "Action": [
          "kinesis:PutRecord"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchEventsFullAccess": {
    "policy": {
      "PolicyName": "CloudWatchEventsFullAccess",
      "PolicyId": "ANPAJZLOYLNHESMYOJAFU",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchEventsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon CloudWatch Events.",
      "CreateDate": "2016-01-14T18:37:08.000Z",
      "UpdateDate": "2022-12-01T17:05:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EventBridgeActions",
        "Effect": "Allow",
        "Action": [
          "events:*",
          "schemas:*",
          "scheduler:*",
          "pipes:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMCreateServiceLinkedRoleForApiDestinations",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/AmazonEventBridgeApiDestinationsServiceRolePolicy"
        ]
      },
      {
        "Sid": "IAMCreateServiceLinkedRoleForAmazonEventBridgeSchemas",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/schemas.amazonaws.com/AWSServiceRoleForSchemas"
        ]
      },
      {
        "Sid": "SecretsManagerAccessForApiDestinations",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:PutSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:events!*"
        ]
      },
      {
        "Sid": "IAMPassRoleForCloudWatchEvents",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWS_Events_Invoke_Targets"
        ]
      },
      {
        "Sid": "IAMPassRoleAccessForScheduler",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "IAMPassRoleAccessForPipes",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AWSCertificateManagerReadOnly": {
    "policy": {
      "PolicyName": "AWSCertificateManagerReadOnly",
      "PolicyId": "ANPAI4GSWX6S4MESJ3EWC",
      "Arn": "arn:aws:iam::aws:policy/AWSCertificateManagerReadOnly",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Certificate Manager (ACM).",
      "CreateDate": "2016-01-21T17:07:33.000Z",
      "UpdateDate": "2021-03-15T16:25:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm:DescribeCertificate",
          "acm:ListCertificates",
          "acm:GetCertificate",
          "acm:ListTagsForCertificate",
          "acm:GetAccountConfiguration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkWebTier": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkWebTier",
      "PolicyId": "ANPAIUF4325SJYOREKW3A",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide the instances in your web server environment access to upload log files to Amazon S3. ",
      "CreateDate": "2016-02-08T23:08:54.000Z",
      "UpdateDate": "2020-09-09T19:38:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "BucketAccess",
        "Action": [
          "s3:Get*",
          "s3:List*",
          "s3:PutObject"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*",
          "arn:aws:s3:::elasticbeanstalk-*/*"
        ]
      },
      {
        "Sid": "XRayAccess",
        "Action": [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:GetSamplingRules",
          "xray:GetSamplingTargets",
          "xray:GetSamplingStatisticSummaries"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchLogsAccess",
        "Action": [
          "logs:PutLogEvents",
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:DescribeLogGroups"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
        ]
      },
      {
        "Sid": "ElasticBeanstalkHealthAccess",
        "Action": [
          "elasticbeanstalk:PutInstanceStatistics"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:elasticbeanstalk:*:*:application/*",
          "arn:aws:elasticbeanstalk:*:*:environment/*"
        ]
      }
    ]
  },
  "AWSCertificateManagerFullAccess": {
    "policy": {
      "PolicyName": "AWSCertificateManagerFullAccess",
      "PolicyId": "ANPAJYCHABBP6VQIVBCBQ",
      "Arn": "arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Certificate Manager (ACM)",
      "CreateDate": "2016-01-21T17:02:36.000Z",
      "UpdateDate": "2020-08-17T22:18:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/acm.amazonaws.com/AWSServiceRoleForCertificateManager*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus",
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/acm.amazonaws.com/AWSServiceRoleForCertificateManager*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkWorkerTier": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkWorkerTier",
      "PolicyId": "ANPAJQDLBRSJVKVF4JMSK",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide the instances in your worker environment access to upload log files to Amazon S3, to use Amazon SQS to monitor your application's job queue, to use Amazon DynamoDB to perform leader election, and to Amazon CloudWatch to publish metrics for health monitoring. ",
      "CreateDate": "2016-02-08T23:12:02.000Z",
      "UpdateDate": "2020-09-09T19:53:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "MetricsAccess",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "XRayAccess",
        "Action": [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:GetSamplingRules",
          "xray:GetSamplingTargets",
          "xray:GetSamplingStatisticSummaries"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "QueueAccess",
        "Action": [
          "sqs:ChangeMessageVisibility",
          "sqs:DeleteMessage",
          "sqs:ReceiveMessage",
          "sqs:SendMessage"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BucketAccess",
        "Action": [
          "s3:Get*",
          "s3:List*",
          "s3:PutObject"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*",
          "arn:aws:s3:::elasticbeanstalk-*/*"
        ]
      },
      {
        "Sid": "DynamoPeriodicTasks",
        "Action": [
          "dynamodb:BatchGetItem",
          "dynamodb:BatchWriteItem",
          "dynamodb:DeleteItem",
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:Query",
          "dynamodb:Scan",
          "dynamodb:UpdateItem"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
        ]
      },
      {
        "Sid": "CloudWatchLogsAccess",
        "Action": [
          "logs:PutLogEvents",
          "logs:CreateLogStream"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
        ]
      },
      {
        "Sid": "ElasticBeanstalkHealthAccess",
        "Action": [
          "elasticbeanstalk:PutInstanceStatistics"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:elasticbeanstalk:*:*:application/*",
          "arn:aws:elasticbeanstalk:*:*:environment/*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkMulticontainerDocker": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkMulticontainerDocker",
      "PolicyId": "ANPAJ45SBYG72SD6SHJEY",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide the instances in your multicontainer Docker environment access to use the Amazon EC2 Container Service to manage container deployment tasks. ",
      "CreateDate": "2016-02-08T23:15:29.000Z",
      "UpdateDate": "2023-03-23T22:04:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ECSAccess",
        "Effect": "Allow",
        "Action": [
          "ecs:Poll",
          "ecs:StartTask",
          "ecs:StopTask",
          "ecs:DiscoverPollEndpoint",
          "ecs:StartTelemetrySession",
          "ecs:RegisterContainerInstance",
          "ecs:DeregisterContainerInstance",
          "ecs:DescribeContainerInstances",
          "ecs:Submit*",
          "ecs:DescribeTasks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowECSTagResource",
        "Effect": "Allow",
        "Action": [
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkEnhancedHealth": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkEnhancedHealth",
      "PolicyId": "ANPAIH5EFJNMOGUUTKLFE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth",
      "Path": "/service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS Elastic Beanstalk Service policy for Health Monitoring system",
      "CreateDate": "2016-02-08T23:17:27.000Z",
      "UpdateDate": "2018-04-09T22:12:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetHealth",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:GetConsoleOutput",
          "ec2:AssociateAddress",
          "ec2:DescribeAddresses",
          "ec2:DescribeSecurityGroups",
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeScalingActivities",
          "autoscaling:DescribeNotificationConfigurations",
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogStreams",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*"
        ]
      }
    ]
  },
  "AWSLambdaVPCAccessExecutionRole": {
    "policy": {
      "PolicyName": "AWSLambdaVPCAccessExecutionRole",
      "PolicyId": "ANPAJVTME3YLVNL72YR2K",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides minimum permissions for a Lambda function to execute while accessing a resource within a VPC - create, describe, delete network interfaces and write permissions to CloudWatch Logs. ",
      "CreateDate": "2016-02-11T23:15:26.000Z",
      "UpdateDate": "2024-01-05T22:38:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSLambdaVPCAccessExecutionPermissions",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSubnets",
          "ec2:DeleteNetworkInterface",
          "ec2:AssignPrivateIpAddresses",
          "ec2:UnassignPrivateIpAddresses"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSDirectoryServiceAccess": {
    "policy": {
      "PolicyName": "AmazonRDSDirectoryServiceAccess",
      "PolicyId": "ANPAIL4KBY57XWMYUHKUU",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonRDSDirectoryServiceAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow RDS to access Directory Service Managed AD on behalf of the customer for domain-joined SQL Server DB instances.",
      "CreateDate": "2016-02-26T02:02:05.000Z",
      "UpdateDate": "2019-05-15T16:51:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ds:DescribeDirectories",
          "ds:AuthorizeApplication",
          "ds:UnauthorizeApplication",
          "ds:GetAuthorizedApplicationDetails"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceMeteringFullAccess": {
    "policy": {
      "PolicyName": "AWSMarketplaceMeteringFullAccess",
      "PolicyId": "ANPAJ65YJPG7CC7LDXNA6",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceMeteringFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Marketplace Metering.",
      "CreateDate": "2016-03-17T22:39:22.000Z",
      "UpdateDate": "2016-03-17T22:39:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "aws-marketplace:MeterUsage"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSConfigRulesExecutionRole": {
    "policy": {
      "PolicyName": "AWSConfigRulesExecutionRole",
      "PolicyId": "ANPAJUB3KIKTA4PU4OYAA",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows an AWS Lambda function to access the AWS Config API and the configuration snapshots that AWS Config delivers periodically to Amazon S3. This access is required by functions that evaluate configuration changes for custom Config rules.",
      "CreateDate": "2016-03-25T17:59:36.000Z",
      "UpdateDate": "2019-05-13T21:33:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*/AWSLogs/*/Config/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:Put*",
          "config:Get*",
          "config:List*",
          "config:Describe*",
          "config:BatchGet*",
          "config:Select*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkService": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkService",
      "PolicyId": "ANPAJKQ5SN74ZQ4WASXBM",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService",
      "Path": "/service-role/",
      "DefaultVersionId": "v17",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is on a deprecation path. See documentation for guidance: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-servicerole.html. AWS Elastic Beanstalk Service role policy which grants permissions to create & manage resources (i.e.: AutoScaling, EC2, S3, CloudFormation, ELB, etc.) on your behalf.",
      "CreateDate": "2016-04-11T20:27:23.000Z",
      "UpdateDate": "2023-05-10T19:29:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks",
        "Effect": "Allow",
        "Action": [
          "cloudformation:*"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awseb-*",
          "arn:aws:cloudformation:*:*:stack/eb-*"
        ]
      },
      {
        "Sid": "AllowDeleteCloudwatchLogGroups",
        "Effect": "Allow",
        "Action": [
          "logs:DeleteLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
        ]
      },
      {
        "Sid": "AllowECSTagResource",
        "Effect": "Allow",
        "Action": [
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets",
        "Effect": "Allow",
        "Action": [
          "s3:*"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*",
          "arn:aws:s3:::elasticbeanstalk-*/*"
        ]
      },
      {
        "Sid": "AllowLaunchTemplateRunInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowELBAddTags",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowOperations",
        "Effect": "Allow",
        "Action": [
          "autoscaling:AttachInstances",
          "autoscaling:CreateAutoScalingGroup",
          "autoscaling:CreateLaunchConfiguration",
          "autoscaling:CreateOrUpdateTags",
          "autoscaling:DeleteLaunchConfiguration",
          "autoscaling:DeleteAutoScalingGroup",
          "autoscaling:DeleteScheduledAction",
          "autoscaling:DescribeAccountLimits",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:DescribeLoadBalancers",
          "autoscaling:DescribeNotificationConfigurations",
          "autoscaling:DescribeScalingActivities",
          "autoscaling:DescribeScheduledActions",
          "autoscaling:DetachInstances",
          "autoscaling:DeletePolicy",
          "autoscaling:PutScalingPolicy",
          "autoscaling:PutScheduledUpdateGroupAction",
          "autoscaling:PutNotificationConfiguration",
          "autoscaling:ResumeProcesses",
          "autoscaling:SetDesiredCapacity",
          "autoscaling:SuspendProcesses",
          "autoscaling:TerminateInstanceInAutoScalingGroup",
          "autoscaling:UpdateAutoScalingGroup",
          "cloudwatch:PutMetricAlarm",
          "ec2:AssociateAddress",
          "ec2:AllocateAddress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateLaunchTemplate",
          "ec2:CreateLaunchTemplateVersion",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteLaunchTemplateVersions",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeVpcClassicLink",
          "ec2:DisassociateAddress",
          "ec2:ReleaseAddress",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:TerminateInstances",
          "ecs:CreateCluster",
          "ecs:DeleteCluster",
          "ecs:DescribeClusters",
          "ecs:RegisterTaskDefinition",
          "elasticbeanstalk:*",
          "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
          "elasticloadbalancing:ConfigureHealthCheck",
          "elasticloadbalancing:CreateLoadBalancer",
          "elasticloadbalancing:DeleteLoadBalancer",
          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:DeregisterTargets",
          "iam:ListRoles",
          "iam:PassRole",
          "logs:CreateLogGroup",
          "logs:PutRetentionPolicy",
          "logs:DescribeLogGroups",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeOrderableDBInstanceOptions",
          "s3:GetObject",
          "s3:GetObjectAcl",
          "s3:ListBucket",
          "sns:CreateTopic",
          "sns:GetTopicAttributes",
          "sns:ListSubscriptionsByTopic",
          "sns:Subscribe",
          "sns:SetTopicAttributes",
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "codebuild:CreateProject",
          "codebuild:DeleteProject",
          "codebuild:BatchGetBuilds",
          "codebuild:StartBuild"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDMSRedshiftS3Role": {
    "policy": {
      "PolicyName": "AmazonDMSRedshiftS3Role",
      "PolicyId": "ANPAI3CCUQ4U5WNC5F6B6",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonDMSRedshiftS3Role",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to manage S3 settings for Redshift endpoints for DMS.",
      "CreateDate": "2016-04-20T17:05:56.000Z",
      "UpdateDate": "2019-07-08T18:19:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:ListBucket",
          "s3:DeleteBucket",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:GetObjectVersion",
          "s3:GetBucketPolicy",
          "s3:PutBucketPolicy",
          "s3:GetBucketAcl",
          "s3:PutBucketVersioning",
          "s3:GetBucketVersioning",
          "s3:PutLifecycleConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:DeleteBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::dms-*"
        ]
      }
    ]
  },
  "AWSApplicationDiscoveryServiceFullAccess": {
    "policy": {
      "PolicyName": "AWSApplicationDiscoveryServiceFullAccess",
      "PolicyId": "ANPAJBNJEA6ZXM2SBOPDU",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationDiscoveryServiceFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to view and tag Configuration Items maintained by the AWS Application Discovery Service ",
      "CreateDate": "2016-05-11T21:30:50.000Z",
      "UpdateDate": "2019-06-19T21:21:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "mgh:*",
          "discovery:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:GetRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationDiscoveryAgentAccess": {
    "policy": {
      "PolicyName": "AWSApplicationDiscoveryAgentAccess",
      "PolicyId": "ANPAICZIOVAGC6JPF3WHC",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationDiscoveryAgentAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access for the Discovery Agent to register with AWS Application Discovery Service.",
      "CreateDate": "2016-05-11T21:38:47.000Z",
      "UpdateDate": "2020-02-24T22:26:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "arsenal:RegisterOnPremisesAgent"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgh:GetHomeRegion"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2ContainerServiceAutoscaleRole": {
    "policy": {
      "PolicyName": "AmazonEC2ContainerServiceAutoscaleRole",
      "PolicyId": "ANPAIUAP3EGGGXXCPDQKK",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "  Policy to enable Task Autoscaling for Amazon EC2 Container Service",
      "CreateDate": "2016-05-12T23:25:44.000Z",
      "UpdateDate": "2018-02-05T19:15:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecs:DescribeServices",
          "ecs:UpdateService"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms",
          "cloudwatch:PutMetricAlarm"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSOpsWorksInstanceRegistration": {
    "policy": {
      "PolicyName": "AWSOpsWorksInstanceRegistration",
      "PolicyId": "ANPAJG3LCPVNI4WDZCIMU",
      "Arn": "arn:aws:iam::aws:policy/AWSOpsWorksInstanceRegistration",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access for an Amazon EC2 instance to register with an AWS OpsWorks stack.",
      "CreateDate": "2016-06-03T14:23:15.000Z",
      "UpdateDate": "2016-06-03T14:23:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "opsworks:DescribeStackProvisioningParameters",
          "opsworks:DescribeStacks",
          "opsworks:RegisterInstance"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodePipelineApproverAccess": {
    "policy": {
      "PolicyName": "AWSCodePipelineApproverAccess",
      "PolicyId": "ANPAICXNWK42SQ6LMDXM2",
      "Arn": "arn:aws:iam::aws:policy/AWSCodePipelineApproverAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to view and approve manual changes for all pipelines",
      "CreateDate": "2016-07-28T18:59:17.000Z",
      "UpdateDate": "2017-08-02T17:24:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codepipeline:GetPipeline",
          "codepipeline:GetPipelineState",
          "codepipeline:GetPipelineExecution",
          "codepipeline:ListPipelineExecutions",
          "codepipeline:ListPipelines",
          "codepipeline:PutApprovalResult"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAgentlessDiscoveryService": {
    "policy": {
      "PolicyName": "AWSAgentlessDiscoveryService",
      "PolicyId": "ANPAIA3DIL7BYQ35ISM4K",
      "Arn": "arn:aws:iam::aws:policy/AWSAgentlessDiscoveryService",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access for the Discovery Agentless Connector to register with AWS Application Discovery Service.",
      "CreateDate": "2016-08-02T01:35:11.000Z",
      "UpdateDate": "2020-02-24T23:08:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "awsconnector:RegisterConnector",
          "awsconnector:GetConnectorHealth"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetUser"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::connector-platform-upgrade-info/*",
          "arn:aws:s3:::connector-platform-upgrade-info",
          "arn:aws:s3:::connector-platform-upgrade-bundles/*",
          "arn:aws:s3:::connector-platform-upgrade-bundles",
          "arn:aws:s3:::connector-platform-release-notes/*",
          "arn:aws:s3:::connector-platform-release-notes",
          "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*",
          "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:PutObjectAcl"
        ],
        "Resource": [
          "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:metrics-sns-topic-for-*"
        ]
      },
      {
        "Sid": "Discovery",
        "Effect": "Allow",
        "Action": [
          "discovery:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "arsenal",
        "Effect": "Allow",
        "Action": [
          "arsenal:RegisterOnPremisesAgent"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgh:GetHomeRegion"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2SpotFleetAutoscaleRole": {
    "policy": {
      "PolicyName": "AmazonEC2SpotFleetAutoscaleRole",
      "PolicyId": "ANPAIMFFRMIOBGDP2TAVE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetAutoscaleRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable Autoscaling for Amazon EC2 Spot Fleet",
      "CreateDate": "2016-08-19T18:27:22.000Z",
      "UpdateDate": "2019-02-18T19:17:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSpotFleetRequests",
          "ec2:ModifySpotFleetRequest"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/ec2.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_EC2SpotFleetRequest"
        ]
      }
    ]
  },
  "AmazonKinesisAnalyticsReadOnly": {
    "policy": {
      "PolicyName": "AmazonKinesisAnalyticsReadOnly",
      "PolicyId": "ANPAIJIEXZAFUK43U7ARK",
      "Arn": "arn:aws:iam::aws:policy/AmazonKinesisAnalyticsReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon Kinesis Analytics via the AWS Management Console.",
      "CreateDate": "2016-09-21T18:16:43.000Z",
      "UpdateDate": "2016-09-21T18:16:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kinesisanalytics:Describe*",
          "kinesisanalytics:Get*",
          "kinesisanalytics:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:DescribeStream",
          "kinesis:ListStreams"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "firehose:DescribeDeliveryStream",
          "firehose:ListDeliveryStreams"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:GetLogEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListPolicyVersions",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKinesisAnalyticsFullAccess": {
    "policy": {
      "PolicyName": "AmazonKinesisAnalyticsFullAccess",
      "PolicyId": "ANPAJQOSKHTXP43R7P5AC",
      "Arn": "arn:aws:iam::aws:policy/AmazonKinesisAnalyticsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Kinesis Analytics via the AWS Management Console.",
      "CreateDate": "2016-09-21T19:01:14.000Z",
      "UpdateDate": "2016-09-21T19:01:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kinesisanalytics:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:CreateStream",
          "kinesis:DeleteStream",
          "kinesis:DescribeStream",
          "kinesis:ListStreams",
          "kinesis:PutRecord",
          "kinesis:PutRecords"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "firehose:DescribeDeliveryStream",
          "firehose:ListDeliveryStreams"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:GetLogEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListPolicyVersions",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/kinesis-analytics*"
        ]
      }
    ]
  },
  "ServerMigrationConnector": {
    "policy": {
      "PolicyName": "ServerMigrationConnector",
      "PolicyId": "ANPAJKZRWXIPK5HSG3QDQ",
      "Arn": "arn:aws:iam::aws:policy/ServerMigrationConnector",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions to allow the AWS Server Migration Connector to migrate VMs to EC2. Allows communication with the AWS Server Migration Service, read/write access to S3 buckets starting with 'sms-b-' and 'import-to-ec2-' as well as the buckets used for AWS Server Migration Connector upgrade, AWS Server Migration Connector registration with AWS, and metrics upload to AWS.",
      "CreateDate": "2016-10-24T21:45:56.000Z",
      "UpdateDate": "2016-10-24T21:45:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetUser"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sms:SendMessage",
          "sms:GetMessages"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:DeleteObject",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:PutLifecycleConfiguration",
          "s3:AbortMultipartUpload",
          "s3:ListBucketMultipartUploads",
          "s3:ListMultipartUploadParts"
        ],
        "Resource": [
          "arn:aws:s3:::sms-b-*",
          "arn:aws:s3:::import-to-ec2-*",
          "arn:aws:s3:::server-migration-service-upgrade",
          "arn:aws:s3:::server-migration-service-upgrade/*",
          "arn:aws:s3:::connector-platform-upgrade-info/*",
          "arn:aws:s3:::connector-platform-upgrade-info",
          "arn:aws:s3:::connector-platform-upgrade-bundles/*",
          "arn:aws:s3:::connector-platform-upgrade-bundles",
          "arn:aws:s3:::connector-platform-release-notes/*",
          "arn:aws:s3:::connector-platform-release-notes"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "awsconnector:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:metrics-sns-topic-for-*"
        ]
      }
    ]
  },
  "ViewOnlyAccess": {
    "policy": {
      "PolicyName": "ViewOnlyAccess",
      "PolicyId": "ANPAID22R6XPJATWOFDK6",
      "Arn": "arn:aws:iam::aws:policy/job-function/ViewOnlyAccess",
      "Path": "/job-function/",
      "DefaultVersionId": "v18",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions to view resources and basic metadata across all AWS services. ",
      "CreateDate": "2016-11-10T17:20:15.000Z",
      "UpdateDate": "2024-03-28T21:28:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "GeneralViewOnlyAccessStatement",
        "Effect": "Allow",
        "Action": [
          "acm:ListCertificates",
          "athena:List*",
          "autoscaling:Describe*",
          "aws-marketplace:ViewSubscriptions",
          "backup:DescribeBackupJob",
          "backup:DescribeBackupVault",
          "backup:DescribeCopyJob",
          "backup:DescribeFramework",
          "backup:DescribeGlobalSettings",
          "backup:DescribeProtectedResource",
          "backup:DescribeRecoveryPoint",
          "backup:DescribeRegionSettings",
          "backup:DescribeReportJob",
          "backup:DescribeReportPlan",
          "backup:DescribeRestoreJob",
          "backup:GetSupportedResourceTypes",
          "backup:ListBackupJobs",
          "backup:ListBackupPlanTemplates",
          "backup:ListBackupPlanVersions",
          "backup:ListBackupPlans",
          "backup:ListBackupSelections",
          "backup:ListBackupVaults",
          "backup:ListCopyJobs",
          "backup:ListFrameworks",
          "backup:ListLegalHolds",
          "backup:ListProtectedResources",
          "backup:ListProtectedResourcesByBackupVault",
          "backup:ListRecoveryPointsByBackupVault",
          "backup:ListRecoveryPointsByLegalHold",
          "backup:ListRecoveryPointsByResource",
          "backup:ListReportJobs",
          "backup:ListReportPlans",
          "backup:ListRestoreJobs",
          "backup:ListTags",
          "batch:ListJobs",
          "bedrock:ListCustomModels",
          "bedrock:ListTagsForResource",
          "clouddirectory:ListAppliedSchemaArns",
          "clouddirectory:ListDevelopmentSchemaArns",
          "clouddirectory:ListDirectories",
          "clouddirectory:ListPublishedSchemaArns",
          "cloudformation:DescribeStacks",
          "cloudformation:List*",
          "cloudfront:List*",
          "cloudsearch:DescribeDomains",
          "cloudsearch:List*",
          "cloudtrail:DescribeTrails",
          "cloudtrail:ListTrails",
          "cloudtrail:LookupEvents",
          "cloudwatch:Get*",
          "cloudwatch:List*",
          "codebuild:ListBuilds*",
          "codebuild:ListProjects",
          "codecommit:List*",
          "codedeploy:Get*",
          "codedeploy:List*",
          "codepipeline:ListPipelines",
          "codestar:List*",
          "cognito-identity:ListIdentities",
          "cognito-identity:ListIdentityPools",
          "cognito-idp:List*",
          "cognito-sync:ListDatasets",
          "comprehend:Describe*",
          "comprehend:List*",
          "config:Describe*",
          "config:List*",
          "connect:List*",
          "cost-optimization-hub:GetPreferences",
          "cost-optimization-hub:GetRecommendation",
          "cost-optimization-hub:ListEnrollmentStatuses",
          "cost-optimization-hub:ListRecommendationSummaries",
          "cost-optimization-hub:ListRecommendations",
          "databrew:ListJobs",
          "databrew:ListProjects",
          "datapipeline:DescribePipelines",
          "datapipeline:GetAccountLimits",
          "datapipeline:ListPipelines",
          "dax:DescribeClusters",
          "dax:DescribeDefaultParameters",
          "dax:DescribeEvents",
          "dax:DescribeParameterGroups",
          "dax:DescribeParameters",
          "dax:DescribeSubnetGroups",
          "dax:ListTags",
          "devicefarm:List*",
          "directconnect:Describe*",
          "discovery:List*",
          "dms:List*",
          "ds:DescribeDirectories",
          "dynamodb:DescribeBackup",
          "dynamodb:DescribeContinuousBackups",
          "dynamodb:DescribeGlobalTable",
          "dynamodb:DescribeGlobalTableSettings",
          "dynamodb:DescribeLimits",
          "dynamodb:DescribeReservedCapacity",
          "dynamodb:DescribeReservedCapacityOfferings",
          "dynamodb:DescribeStream",
          "dynamodb:DescribeTable",
          "dynamodb:DescribeTimeToLive",
          "dynamodb:ListBackups",
          "dynamodb:ListExports",
          "dynamodb:ListGlobalTables",
          "dynamodb:ListStreams",
          "dynamodb:ListTables",
          "dynamodb:ListTagsOfResource",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeBundleTasks",
          "ec2:DescribeCarrierGateways",
          "ec2:DescribeClassicLinkInstances",
          "ec2:DescribeConversionTasks",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeExportTasks",
          "ec2:DescribeFlowLogs",
          "ec2:DescribeHost*",
          "ec2:DescribeIdFormat",
          "ec2:DescribeIdentityIdFormat",
          "ec2:DescribeImage*",
          "ec2:DescribeImport*",
          "ec2:DescribeInstance*",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
          "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
          "ec2:DescribeLocalGatewayRouteTables",
          "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
          "ec2:DescribeLocalGatewayVirtualInterfaces",
          "ec2:DescribeLocalGateways",
          "ec2:DescribeMovingAddresses",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetwork*",
          "ec2:DescribePlacementGroups",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRegions",
          "ec2:DescribeReserved*",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroupRules",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshot*",
          "ec2:DescribeSpot*",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVolume*",
          "ec2:DescribeVpc*",
          "ec2:DescribeVpnGateways",
          "ec2:SearchLocalGatewayRoutes",
          "ecr:DescribeRegistry",
          "ecr:DescribeRepositories",
          "ecr:ListImages",
          "ecs:Describe*",
          "ecs:List*",
          "eks:ListTagsForResource",
          "elastic-inference:DescribeAcceleratorOfferings",
          "elastic-inference:DescribeAcceleratorTypes",
          "elastic-inference:DescribeAccelerators",
          "elastic-inference:ListTagsForResource",
          "elasticache:Describe*",
          "elasticbeanstalk:DescribeApplicationVersions",
          "elasticbeanstalk:DescribeApplications",
          "elasticbeanstalk:DescribeEnvironments",
          "elasticbeanstalk:ListAvailableSolutionStacks",
          "elasticfilesystem:DescribeFileSystems",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticmapreduce:List*",
          "elastictranscoder:List*",
          "emr-serverless:ListApplications",
          "es:DescribeElasticsearchDomain",
          "es:DescribeElasticsearchDomains",
          "es:ListDomainNames",
          "events:ListRuleNamesByTarget",
          "events:ListRules",
          "events:ListTargetsByRule",
          "firehose:DescribeDeliveryStream",
          "firehose:List*",
          "fsx:DescribeFileSystems",
          "gamelift:List*",
          "glacier:List*",
          "glue:GetTags",
          "greengrass:List*",
          "iam:GetAccountSummary",
          "iam:GetLoginProfile",
          "iam:List*",
          "importexport:ListJobs",
          "inspector:List*",
          "iot:List*",
          "kafka:ListClusters",
          "kendra:ListDataSources",
          "kendra:ListTagsForResource",
          "kinesis:ListStreams",
          "kinesisanalytics:ListApplications",
          "kinesisanalytics:ListTagsForResource",
          "kms:ListKeys",
          "kms:ListResourceTags",
          "lambda:List*",
          "lex:GetBotAliases",
          "lex:GetBotChannelAssociations",
          "lex:GetBotVersions",
          "lex:GetBots",
          "lex:GetIntentVersions",
          "lex:GetIntents",
          "lex:GetSlotTypeVersions",
          "lex:GetSlotTypes",
          "lex:GetUtterancesView",
          "lightsail:GetBlueprints",
          "lightsail:GetBundles",
          "lightsail:GetInstanceSnapshots",
          "lightsail:GetInstances",
          "lightsail:GetKeyPair",
          "lightsail:GetRegions",
          "lightsail:GetStaticIps",
          "lightsail:IsVpcPeered",
          "logs:Describe*",
          "logs:ListTagsForResource",
          "lookoutvision:ListModelPackagingJobs",
          "lookoutvision:ListModels",
          "lookoutvision:ListProjects",
          "machinelearning:Describe*",
          "mediaconnect:ListEntitlements",
          "mediaconnect:ListFlows",
          "mediaconnect:ListOfferings",
          "mediaconnect:ListReservations",
          "mobiletargeting:GetApplicationSettings",
          "mobiletargeting:GetCampaigns",
          "mobiletargeting:GetImportJobs",
          "mobiletargeting:GetSegments",
          "oam:ListAttachedLinks",
          "oam:ListLinks",
          "oam:ListSinks",
          "opsworks-cm:Describe*",
          "opsworks:Describe*",
          "organizations:List*",
          "outposts:GetOutpost",
          "outposts:GetOutpostInstanceTypes",
          "outposts:ListOutposts",
          "outposts:ListSites",
          "outposts:ListTagsForResource",
          "polly:Describe*",
          "polly:List*",
          "profile:ListDomains",
          "profile:ListIntegrations",
          "rds:Describe*",
          "redshift-serverless:ListTagsForResource",
          "redshift-serverless:ListWorkgroups",
          "redshift:DescribeClusters",
          "redshift:DescribeEvents",
          "redshift:ViewQueriesInConsole",
          "resource-explorer-2:GetDefaultView",
          "resource-explorer-2:GetIndex",
          "resource-explorer-2:ListIndexes",
          "resource-explorer-2:ListSupportedResourceTypes",
          "resource-explorer-2:ListTagsForResource",
          "resource-explorer-2:ListViews",
          "route53:Get*",
          "route53:List*",
          "route53domains:List*",
          "route53resolver:Get*",
          "route53resolver:List*",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListMultiRegionAccessPoints",
          "sagemaker:Describe*",
          "sagemaker:List*",
          "sdb:List*",
          "servicecatalog:List*",
          "ses:DescribeActiveReceiptRuleSet",
          "ses:List*",
          "ses:ListDedicatedIpPools",
          "shield:List*",
          "sns:List*",
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "sqs:ListDeadLetterSourceQueues",
          "sqs:ListMessageMoveTasks",
          "sqs:ListQueueTags",
          "sqs:ListQueues",
          "ssm:ListAssociations",
          "ssm:ListDocuments",
          "states:ListActivities",
          "states:ListStateMachineAliases",
          "states:ListStateMachineVersions",
          "states:ListStateMachines",
          "storagegateway:ListGateways",
          "storagegateway:ListLocalDisks",
          "storagegateway:ListVolumeRecoveryPoints",
          "storagegateway:ListVolumes",
          "swf:List*",
          "trustedadvisor:Describe*",
          "waf-regional:List*",
          "waf:List*",
          "wafv2:List*",
          "workdocs:DescribeAvailableDirectories",
          "workdocs:DescribeInstances",
          "workmail:Describe*",
          "workspaces:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Sid": "APIGatewayAccess",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/apis",
          "arn:aws:apigateway:*::/apis/*/authorizers/*",
          "arn:aws:apigateway:*::/apis/*/authorizers",
          "arn:aws:apigateway:*::/apis/*/cors",
          "arn:aws:apigateway:*::/apis/*/deployments/*",
          "arn:aws:apigateway:*::/apis/*/deployments",
          "arn:aws:apigateway:*::/apis/*/exports/*",
          "arn:aws:apigateway:*::/apis/*/integrations/*",
          "arn:aws:apigateway:*::/apis/*/integrations",
          "arn:aws:apigateway:*::/apis/*/models/*",
          "arn:aws:apigateway:*::/apis/*/models",
          "arn:aws:apigateway:*::/apis/*/routes/*",
          "arn:aws:apigateway:*::/apis/*/routes",
          "arn:aws:apigateway:*::/apis/*/stages",
          "arn:aws:apigateway:*::/apis/*/stages/*",
          "arn:aws:apigateway:*::/clientcertificates",
          "arn:aws:apigateway:*::/clientcertificates/*",
          "arn:aws:apigateway:*::/domainnames",
          "arn:aws:apigateway:*::/domainnames/*/apimappings",
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/restapis/*/authorizers/*",
          "arn:aws:apigateway:*::/restapis/*/authorizers",
          "arn:aws:apigateway:*::/restapis/*/deployments/*",
          "arn:aws:apigateway:*::/restapis/*/deployments",
          "arn:aws:apigateway:*::/restapis/*/documentation/parts/*",
          "arn:aws:apigateway:*::/restapis/*/documentation/parts",
          "arn:aws:apigateway:*::/restapis/*/documentation/versions/*",
          "arn:aws:apigateway:*::/restapis/*/documentation/versions",
          "arn:aws:apigateway:*::/restapis/*/gatewayresponses/*",
          "arn:aws:apigateway:*::/restapis/*/gatewayresponses",
          "arn:aws:apigateway:*::/restapis/*/models/*",
          "arn:aws:apigateway:*::/restapis/*/models",
          "arn:aws:apigateway:*::/restapis/*/requestvalidators",
          "arn:aws:apigateway:*::/restapis/*/requestvalidators/*",
          "arn:aws:apigateway:*::/restapis/*/resources/*",
          "arn:aws:apigateway:*::/restapis/*/resources",
          "arn:aws:apigateway:*::/restapis/*/stages",
          "arn:aws:apigateway:*::/restapis/*/stages/*",
          "arn:aws:apigateway:*::/tags/*",
          "arn:aws:apigateway:*::/vpclinks"
        ]
      }
    ]
  },
  "SupportUser": {
    "policy": {
      "PolicyName": "SupportUser",
      "PolicyId": "ANPAI3V4GSSN5SJY3P2RO",
      "Arn": "arn:aws:iam::aws:policy/job-function/SupportUser",
      "Path": "/job-function/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions to troubleshoot and resolve issues in an AWS account. This policy also enables the user to contact AWS support to create and manage cases.",
      "CreateDate": "2016-11-10T17:21:53.000Z",
      "UpdateDate": "2023-08-25T18:40:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "support:*",
          "acm:DescribeCertificate",
          "acm:GetCertificate",
          "acm:List*",
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:ListCertificateAuthorities",
          "apigateway:GET",
          "autoscaling:Describe*",
          "aws-marketplace:ViewSubscriptions",
          "cloudformation:Describe*",
          "cloudformation:Get*",
          "cloudformation:List*",
          "cloudformation:EstimateTemplateCost",
          "cloudfront:Get*",
          "cloudfront:List*",
          "cloudsearch:Describe*",
          "cloudsearch:List*",
          "cloudtrail:DescribeTrails",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:LookupEvents",
          "cloudtrail:ListTags",
          "cloudtrail:ListPublicKeys",
          "cloudwatch:Describe*",
          "cloudwatch:Get*",
          "cloudwatch:List*",
          "codecommit:BatchGetRepositories",
          "codecommit:Get*",
          "codecommit:List*",
          "codedeploy:Batch*",
          "codedeploy:Get*",
          "codedeploy:List*",
          "codepipeline:AcknowledgeJob",
          "codepipeline:AcknowledgeThirdPartyJob",
          "codepipeline:ListActionTypes",
          "codepipeline:ListPipelines",
          "codepipeline:PollForJobs",
          "codepipeline:PollForThirdPartyJobs",
          "codepipeline:GetPipelineState",
          "codepipeline:GetPipeline",
          "cognito-identity:List*",
          "cognito-identity:LookupDeveloperIdentity",
          "cognito-identity:Describe*",
          "cognito-idp:DescribeResourceServer",
          "cognito-idp:DescribeRiskConfiguration",
          "cognito-idp:DescribeUserImportJob",
          "cognito-idp:DescribeUserPool",
          "cognito-idp:DescribeUserPoolDomain",
          "cognito-idp:List*",
          "cognito-sync:Describe*",
          "cognito-sync:GetBulkPublishDetails",
          "cognito-sync:GetCognitoEvents",
          "cognito-sync:GetIdentityPoolConfiguration",
          "cognito-sync:List*",
          "config:DescribeConfigurationRecorders",
          "config:DescribeConfigurationRecorderStatus",
          "config:DescribeConfigRuleEvaluationStatus",
          "config:DescribeConfigRules",
          "config:DescribeDeliveryChannels",
          "config:DescribeDeliveryChannelStatus",
          "config:GetResourceConfigHistory",
          "config:ListDiscoveredResources",
          "datapipeline:DescribeObjects",
          "datapipeline:DescribePipelines",
          "datapipeline:GetPipelineDefinition",
          "datapipeline:ListPipelines",
          "datapipeline:QueryObjects",
          "datapipeline:ReportTaskProgress",
          "datapipeline:ReportTaskRunnerHeartbeat",
          "devicefarm:List*",
          "devicefarm:Get*",
          "directconnect:Describe*",
          "discovery:Describe*",
          "discovery:ListConfigurations",
          "dms:Describe*",
          "dms:List*",
          "ds:DescribeDirectories",
          "ds:DescribeSnapshots",
          "ds:GetDirectoryLimits",
          "ds:GetSnapshotLimits",
          "ds:ListAuthorizedApplications",
          "dynamodb:DescribeLimits",
          "dynamodb:DescribeTable",
          "dynamodb:ListTables",
          "ec2:Describe*",
          "ec2:DescribeHosts",
          "ec2:describeIdentityIdFormat",
          "ec2:DescribeIdFormat",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeNatGateways",
          "ec2:DescribeReservedInstancesModifications",
          "ec2:DescribeTags",
          "ec2:SearchLocalGatewayRoutes",
          "ecr:GetRepositoryPolicy",
          "ecr:BatchCheckLayerAvailability",
          "ecr:DescribeRepositories",
          "ecr:ListImages",
          "ecs:Describe*",
          "ecs:List*",
          "elasticache:Describe*",
          "elasticache:List*",
          "elasticbeanstalk:Check*",
          "elasticbeanstalk:Describe*",
          "elasticbeanstalk:List*",
          "elasticbeanstalk:RequestEnvironmentInfo",
          "elasticbeanstalk:RetrieveEnvironmentInfo",
          "elasticbeanstalk:ValidateConfigurationSettings",
          "elasticfilesystem:Describe*",
          "elasticloadbalancing:Describe*",
          "elasticmapreduce:Describe*",
          "elasticmapreduce:List*",
          "elastictranscoder:List*",
          "elastictranscoder:ReadJob",
          "elasticfilesystem:DescribeFileSystems",
          "es:Describe*",
          "es:List*",
          "es:ESHttpGet",
          "es:ESHttpHead",
          "events:DescribeRule",
          "events:List*",
          "events:TestEventPattern",
          "firehose:Describe*",
          "firehose:List*",
          "gamelift:List*",
          "gamelift:Describe*",
          "glacier:ListVaults",
          "glacier:DescribeVault",
          "glacier:DescribeJob",
          "glacier:Get*",
          "glacier:List*",
          "iam:GenerateCredentialReport",
          "iam:GenerateServiceLastAccessedDetails",
          "iam:Get*",
          "iam:List*",
          "importexport:GetStatus",
          "importexport:ListJobs",
          "inspector:Describe*",
          "inspector:List*",
          "iot:Describe*",
          "iot:Get*",
          "iot:List*",
          "kinesisanalytics:DescribeApplication",
          "kinesisanalytics:DiscoverInputSchema",
          "kinesisanalytics:GetApplicationState",
          "kinesisanalytics:ListApplications",
          "kinesis:Describe*",
          "kinesis:Get*",
          "kinesis:List*",
          "kms:Describe*",
          "kms:Get*",
          "kms:List*",
          "lambda:List*",
          "lambda:Get*",
          "logs:Describe*",
          "logs:TestMetricFilter",
          "machinelearning:Describe*",
          "machinelearning:Get*",
          "opsworks:Describe*",
          "rds:Describe*",
          "rds:ListTagsForResource",
          "redshift:Describe*",
          "route53:Get*",
          "route53:List*",
          "route53domains:CheckDomainAvailability",
          "route53domains:GetDomainDetail",
          "route53domains:GetOperationDetail",
          "route53domains:List*",
          "s3:List*",
          "sdb:GetAttributes",
          "sdb:List*",
          "sdb:Select*",
          "servicecatalog:SearchProducts",
          "servicecatalog:DescribeProduct",
          "servicecatalog:DescribeProductView",
          "servicecatalog:ListLaunchPaths",
          "servicecatalog:DescribeProvisioningParameters",
          "servicecatalog:ListRecordHistory",
          "servicecatalog:DescribeRecord",
          "servicecatalog:ScanProvisionedProducts",
          "ses:Get*",
          "ses:List*",
          "sns:Get*",
          "sns:List*",
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "sqs:ListQueues",
          "sqs:ReceiveMessage",
          "ssm:List*",
          "ssm:Describe*",
          "storagegateway:Describe*",
          "storagegateway:List*",
          "swf:Count*",
          "swf:Describe*",
          "swf:Get*",
          "swf:List*",
          "waf:Get*",
          "waf:List*",
          "workdocs:Describe*",
          "workmail:Describe*",
          "workmail:Get*",
          "workspaces:Describe*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "SystemAdministrator": {
    "policy": {
      "PolicyName": "SystemAdministrator",
      "PolicyId": "ANPAITJPEZXCYCBXANDSW",
      "Arn": "arn:aws:iam::aws:policy/job-function/SystemAdministrator",
      "Path": "/job-function/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access permissions necessary for resources required for application and development operations.",
      "CreateDate": "2016-11-10T17:23:56.000Z",
      "UpdateDate": "2020-08-24T20:05:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "acm:Describe*",
          "acm:Get*",
          "acm:List*",
          "acm:Request*",
          "acm:Resend*",
          "autoscaling:*",
          "cloudtrail:DescribeTrails",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:ListPublicKeys",
          "cloudtrail:ListTags",
          "cloudtrail:LookupEvents",
          "cloudtrail:StartLogging",
          "cloudtrail:StopLogging",
          "cloudwatch:*",
          "codecommit:BatchGetRepositories",
          "codecommit:CreateBranch",
          "codecommit:CreateRepository",
          "codecommit:Get*",
          "codecommit:GitPull",
          "codecommit:GitPush",
          "codecommit:List*",
          "codecommit:Put*",
          "codecommit:Test*",
          "codecommit:Update*",
          "codedeploy:*",
          "codepipeline:*",
          "config:*",
          "ds:*",
          "ec2:Allocate*",
          "ec2:AssignPrivateIpAddresses*",
          "ec2:Associate*",
          "ec2:Allocate*",
          "ec2:AttachInternetGateway",
          "ec2:AttachNetworkInterface",
          "ec2:AttachVpnGateway",
          "ec2:Bundle*",
          "ec2:Cancel*",
          "ec2:Copy*",
          "ec2:CreateCustomerGateway",
          "ec2:CreateDhcpOptions",
          "ec2:CreateFlowLogs",
          "ec2:CreateImage",
          "ec2:CreateInstanceExportTask",
          "ec2:CreateInternetGateway",
          "ec2:CreateKeyPair",
          "ec2:CreateLaunchTemplate",
          "ec2:CreateLaunchTemplateVersion",
          "ec2:CreateNatGateway",
          "ec2:CreateNetworkInterface",
          "ec2:CreatePlacementGroup",
          "ec2:CreateReservedInstancesListing",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSnapshot",
          "ec2:CreateSpotDatafeedSubscription",
          "ec2:CreateSubnet",
          "ec2:CreateTags",
          "ec2:CreateVolume",
          "ec2:CreateVpc",
          "ec2:CreateVpcEndpoint",
          "ec2:CreateVpnConnection",
          "ec2:CreateVpnConnectionRoute",
          "ec2:CreateVpnGateway",
          "ec2:DeleteFlowLogs",
          "ec2:DeleteKeyPair",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteLaunchTemplateVersions",
          "ec2:DeleteNatGateway",
          "ec2:DeleteNetworkInterface",
          "ec2:DeletePlacementGroup",
          "ec2:DeleteSnapshot",
          "ec2:DeleteSpotDatafeedSubscription",
          "ec2:DeleteSubnet",
          "ec2:DeleteTags",
          "ec2:DeleteVpc",
          "ec2:DeleteVpcEndpoints",
          "ec2:DeleteVpnConnection",
          "ec2:DeleteVpnConnectionRoute",
          "ec2:DeleteVpnGateway",
          "ec2:DeregisterImage",
          "ec2:Describe*",
          "ec2:DetachInternetGateway",
          "ec2:DetachNetworkInterface",
          "ec2:DetachVpnGateway",
          "ec2:DisableVgwRoutePropagation",
          "ec2:DisableVpcClassicLinkDnsSupport",
          "ec2:DisassociateAddress",
          "ec2:DisassociateRouteTable",
          "ec2:EnableVgwRoutePropagation",
          "ec2:EnableVolumeIO",
          "ec2:EnableVpcClassicLinkDnsSupport",
          "ec2:GetConsoleOutput",
          "ec2:GetHostReservationPurchasePreview",
          "ec2:GetLaunchTemplateData",
          "ec2:GetPasswordData",
          "ec2:Import*",
          "ec2:Modify*",
          "ec2:MonitorInstances",
          "ec2:MoveAddressToVpc",
          "ec2:Purchase*",
          "ec2:RegisterImage",
          "ec2:Release*",
          "ec2:Replace*",
          "ec2:ReportInstanceStatus",
          "ec2:Request*",
          "ec2:Reset*",
          "ec2:RestoreAddressToClassic",
          "ec2:RunScheduledInstances",
          "ec2:UnassignPrivateIpAddresses",
          "ec2:UnmonitorInstances",
          "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
          "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
          "elasticloadbalancing:*",
          "events:*",
          "iam:GetAccount*",
          "iam:GetContextKeys*",
          "iam:GetCredentialReport",
          "iam:ListAccountAliases",
          "iam:ListGroups",
          "iam:ListOpenIDConnectProviders",
          "iam:ListPolicies",
          "iam:ListPoliciesGrantingServiceAccess",
          "iam:ListRoles",
          "iam:ListSAMLProviders",
          "iam:ListServerCertificates",
          "iam:Simulate*",
          "iam:UpdateServerCertificate",
          "iam:UpdateSigningCertificate",
          "kinesis:ListStreams",
          "kinesis:PutRecord",
          "kms:CreateAlias",
          "kms:CreateKey",
          "kms:DeleteAlias",
          "kms:Describe*",
          "kms:GenerateRandom",
          "kms:Get*",
          "kms:List*",
          "kms:Encrypt",
          "kms:ReEncrypt*",
          "lambda:Create*",
          "lambda:Delete*",
          "lambda:Get*",
          "lambda:InvokeFunction",
          "lambda:List*",
          "lambda:PublishVersion",
          "lambda:Update*",
          "logs:*",
          "rds:Describe*",
          "rds:ListTagsForResource",
          "route53:*",
          "route53domains:*",
          "ses:*",
          "sns:*",
          "sqs:*",
          "trustedadvisor:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "ec2:AcceptVpcPeeringConnection",
          "ec2:AttachClassicLinkVpc",
          "ec2:AttachVolume",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateVpcPeeringConnection",
          "ec2:DeleteCustomerGateway",
          "ec2:DeleteDhcpOptions",
          "ec2:DeleteInternetGateway",
          "ec2:DeleteNetworkAcl*",
          "ec2:DeleteRoute",
          "ec2:DeleteRouteTable",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteVolume",
          "ec2:DeleteVpcPeeringConnection",
          "ec2:DetachClassicLinkVpc",
          "ec2:DetachVolume",
          "ec2:DisableVpcClassicLink",
          "ec2:EnableVpcClassicLink",
          "ec2:GetConsoleScreenshot",
          "ec2:RebootInstances",
          "ec2:RejectVpcPeeringConnection",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RunInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "s3:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:GetAccessKeyLastUsed",
          "iam:GetGroup*",
          "iam:GetInstanceProfile",
          "iam:GetLoginProfile",
          "iam:GetOpenIDConnectProvider",
          "iam:GetPolicy*",
          "iam:GetRole*",
          "iam:GetSAMLProvider",
          "iam:GetSSHPublicKey",
          "iam:GetServerCertificate",
          "iam:GetServiceLastAccessed*",
          "iam:GetUser*",
          "iam:ListAccessKeys",
          "iam:ListAttached*",
          "iam:ListEntitiesForPolicy",
          "iam:ListGroupPolicies",
          "iam:ListGroupsForUser",
          "iam:ListInstanceProfiles*",
          "iam:ListMFADevices",
          "iam:ListPolicyVersions",
          "iam:ListRolePolicies",
          "iam:ListSSHPublicKeys",
          "iam:ListSigningCertificates",
          "iam:ListUserPolicies",
          "iam:Upload*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:GetRole",
          "iam:ListRoles",
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/rds-monitoring-role",
          "arn:aws:iam::*:role/ec2-sysadmin-*",
          "arn:aws:iam::*:role/ecr-sysadmin-*",
          "arn:aws:iam::*:role/lambda-sysadmin-*"
        ]
      }
    ]
  },
  "DatabaseAdministrator": {
    "policy": {
      "PolicyName": "DatabaseAdministrator",
      "PolicyId": "ANPAIGBMAW4VUQKOQNVT6",
      "Arn": "arn:aws:iam::aws:policy/job-function/DatabaseAdministrator",
      "Path": "/job-function/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access permissions to AWS services and actions required to set up and configure AWS database services.",
      "CreateDate": "2016-11-10T17:25:43.000Z",
      "UpdateDate": "2019-01-08T00:48:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DeleteAlarms",
          "cloudwatch:Describe*",
          "cloudwatch:DisableAlarmActions",
          "cloudwatch:EnableAlarmActions",
          "cloudwatch:Get*",
          "cloudwatch:List*",
          "cloudwatch:PutMetricAlarm",
          "datapipeline:ActivatePipeline",
          "datapipeline:CreatePipeline",
          "datapipeline:DeletePipeline",
          "datapipeline:DescribeObjects",
          "datapipeline:DescribePipelines",
          "datapipeline:GetPipelineDefinition",
          "datapipeline:ListPipelines",
          "datapipeline:PutPipelineDefinition",
          "datapipeline:QueryObjects",
          "dynamodb:*",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "elasticache:*",
          "iam:ListRoles",
          "iam:GetRole",
          "kms:ListKeys",
          "lambda:CreateEventSourceMapping",
          "lambda:CreateFunction",
          "lambda:DeleteEventSourceMapping",
          "lambda:DeleteFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:ListEventSourceMappings",
          "lambda:ListFunctions",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:FilterLogEvents",
          "logs:GetLogEvents",
          "logs:Create*",
          "logs:PutLogEvents",
          "logs:PutMetricFilter",
          "rds:*",
          "redshift:*",
          "s3:CreateBucket",
          "sns:CreateTopic",
          "sns:DeleteTopic",
          "sns:Get*",
          "sns:List*",
          "sns:SetTopicAttributes",
          "sns:Subscribe",
          "sns:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:DeleteObject*",
          "s3:Get*",
          "s3:List*",
          "s3:PutAccelerateConfiguration",
          "s3:PutBucketTagging",
          "s3:PutBucketVersioning",
          "s3:PutBucketWebsite",
          "s3:PutLifecycleConfiguration",
          "s3:PutReplicationConfiguration",
          "s3:PutObject*",
          "s3:Replicate*",
          "s3:RestoreObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/rds-monitoring-role",
          "arn:aws:iam::*:role/rdbms-lambda-access",
          "arn:aws:iam::*:role/lambda_exec_role",
          "arn:aws:iam::*:role/lambda-dynamodb-*",
          "arn:aws:iam::*:role/lambda-vpc-execution-role",
          "arn:aws:iam::*:role/DataPipelineDefaultRole",
          "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
        ]
      }
    ]
  },
  "DataScientist": {
    "policy": {
      "PolicyName": "DataScientist",
      "PolicyId": "ANPAJ5YHI2BQW7EQFYDXS",
      "Arn": "arn:aws:iam::aws:policy/job-function/DataScientist",
      "Path": "/job-function/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to AWS data analytics services.",
      "CreateDate": "2016-11-10T17:28:48.000Z",
      "UpdateDate": "2019-12-03T16:48:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "autoscaling:*",
          "cloudwatch:*",
          "cloudformation:CreateStack",
          "cloudformation:DescribeStackEvents",
          "datapipeline:Describe*",
          "datapipeline:ListPipelines",
          "datapipeline:GetPipelineDefinition",
          "datapipeline:QueryObjects",
          "dynamodb:*",
          "ec2:CancelSpotInstanceRequests",
          "ec2:CancelSpotFleetRequests",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:Describe*",
          "ec2:ModifyImageAttribute",
          "ec2:ModifyInstanceAttribute",
          "ec2:ModifySpotFleetRequest",
          "ec2:RequestSpotInstances",
          "ec2:RequestSpotFleet",
          "elasticfilesystem:*",
          "elasticmapreduce:*",
          "es:*",
          "firehose:*",
          "fsx:DescribeFileSystems",
          "iam:GetInstanceProfile",
          "iam:GetRole",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:ListRoles",
          "kinesis:*",
          "kms:List*",
          "lambda:Create*",
          "lambda:Delete*",
          "lambda:Get*",
          "lambda:InvokeFunction",
          "lambda:PublishVersion",
          "lambda:Update*",
          "lambda:List*",
          "machinelearning:*",
          "sdb:*",
          "rds:*",
          "sns:ListSubscriptions",
          "sns:ListTopics",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "redshift:*",
          "s3:CreateBucket",
          "sns:CreateTopic",
          "sns:Get*",
          "sns:List*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:Abort*",
          "s3:DeleteObject",
          "s3:Get*",
          "s3:List*",
          "s3:PutAccelerateConfiguration",
          "s3:PutBucketCors",
          "s3:PutBucketLogging",
          "s3:PutBucketNotification",
          "s3:PutBucketTagging",
          "s3:PutObject",
          "s3:Replicate*",
          "s3:RestoreObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/DataPipelineDefaultRole",
          "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
          "arn:aws:iam::*:role/EMR_EC2_DefaultRole",
          "arn:aws:iam::*:role/EMR_DefaultRole",
          "arn:aws:iam::*:role/kinesis-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:*"
        ],
        "NotResource": [
          "arn:aws:sagemaker:*:*:domain/*",
          "arn:aws:sagemaker:*:*:user-profile/*",
          "arn:aws:sagemaker:*:*:app/*",
          "arn:aws:sagemaker:*:*:flow-definition/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreatePresignedDomainUrl",
          "sagemaker:DescribeDomain",
          "sagemaker:ListDomains",
          "sagemaker:DescribeUserProfile",
          "sagemaker:ListUserProfiles",
          "sagemaker:*App",
          "sagemaker:ListApps"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:*FlowDefinition",
          "sagemaker:*FlowDefinitions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "NetworkAdministrator": {
    "policy": {
      "PolicyName": "NetworkAdministrator",
      "PolicyId": "ANPAJPNMADZFJCVPJVZA2",
      "Arn": "arn:aws:iam::aws:policy/job-function/NetworkAdministrator",
      "Path": "/job-function/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access permissions to AWS services and actions required to set up and configure AWS network resources.",
      "CreateDate": "2016-11-10T17:31:35.000Z",
      "UpdateDate": "2021-09-16T20:22:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:Describe*",
          "cloudfront:ListDistributions",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:PutMetricAlarm",
          "directconnect:*",
          "ec2:AcceptVpcEndpointConnections",
          "ec2:AllocateAddress",
          "ec2:AssignIpv6Addresses",
          "ec2:AssignPrivateIpAddresses",
          "ec2:AssociateAddress",
          "ec2:AssociateDhcpOptions",
          "ec2:AssociateRouteTable",
          "ec2:AssociateSubnetCidrBlock",
          "ec2:AssociateVpcCidrBlock",
          "ec2:AttachInternetGateway",
          "ec2:AttachNetworkInterface",
          "ec2:AttachVpnGateway",
          "ec2:CreateCarrierGateway",
          "ec2:CreateCustomerGateway",
          "ec2:CreateDefaultSubnet",
          "ec2:CreateDefaultVpc",
          "ec2:CreateDhcpOptions",
          "ec2:CreateEgressOnlyInternetGateway",
          "ec2:CreateFlowLogs",
          "ec2:CreateInternetGateway",
          "ec2:CreateNatGateway",
          "ec2:CreateNetworkAcl",
          "ec2:CreateNetworkAclEntry",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:CreatePlacementGroup",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSubnet",
          "ec2:CreateTags",
          "ec2:CreateVpc",
          "ec2:CreateVpcEndpoint",
          "ec2:CreateVpcEndpointConnectionNotification",
          "ec2:CreateVpcEndpointServiceConfiguration",
          "ec2:CreateVpnConnection",
          "ec2:CreateVpnConnectionRoute",
          "ec2:CreateVpnGateway",
          "ec2:DeleteCarrierGateway",
          "ec2:DeleteEgressOnlyInternetGateway",
          "ec2:DeleteFlowLogs",
          "ec2:DeleteNatGateway",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DeletePlacementGroup",
          "ec2:DeleteSubnet",
          "ec2:DeleteTags",
          "ec2:DeleteVpc",
          "ec2:DeleteVpcEndpointConnectionNotifications",
          "ec2:DeleteVpcEndpointServiceConfigurations",
          "ec2:DeleteVpcEndpoints",
          "ec2:DeleteVpnConnection",
          "ec2:DeleteVpnConnectionRoute",
          "ec2:DeleteVpnGateway",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCarrierGateways",
          "ec2:DescribeClassicLinkInstances",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeEgressOnlyInternetGateways",
          "ec2:DescribeFlowLogs",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeMovingAddresses",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeNetworkInterfacePermissions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePlacementGroups",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroupReferences",
          "ec2:DescribeSecurityGroupRules",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeStaleSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcClassicLink",
          "ec2:DescribeVpcClassicLinkDnsSupport",
          "ec2:DescribeVpcEndpointConnectionNotifications",
          "ec2:DescribeVpcEndpointConnections",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeVpcEndpointServicePermissions",
          "ec2:DescribeVpcEndpointServices",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:DescribePublicIpv4Pools",
          "ec2:DescribeIpv6Pools",
          "ec2:DetachInternetGateway",
          "ec2:DetachNetworkInterface",
          "ec2:DetachVpnGateway",
          "ec2:DisableVgwRoutePropagation",
          "ec2:DisableVpcClassicLinkDnsSupport",
          "ec2:DisassociateAddress",
          "ec2:DisassociateRouteTable",
          "ec2:DisassociateSubnetCidrBlock",
          "ec2:DisassociateVpcCidrBlock",
          "ec2:EnableVgwRoutePropagation",
          "ec2:EnableVpcClassicLinkDnsSupport",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:ModifySecurityGroupRules",
          "ec2:ModifySubnetAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:ModifyVpcEndpoint",
          "ec2:ModifyVpcEndpointConnectionNotification",
          "ec2:ModifyVpcEndpointServiceConfiguration",
          "ec2:ModifyVpcEndpointServicePermissions",
          "ec2:ModifyVpcPeeringConnectionOptions",
          "ec2:ModifyVpcTenancy",
          "ec2:MoveAddressToVpc",
          "ec2:RejectVpcEndpointConnections",
          "ec2:ReleaseAddress",
          "ec2:ReplaceNetworkAclAssociation",
          "ec2:ReplaceNetworkAclEntry",
          "ec2:ReplaceRoute",
          "ec2:ReplaceRouteTableAssociation",
          "ec2:ResetNetworkInterfaceAttribute",
          "ec2:RestoreAddressToClassic",
          "ec2:UnassignIpv6Addresses",
          "ec2:UnassignPrivateIpAddresses",
          "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
          "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
          "elasticbeanstalk:Describe*",
          "elasticbeanstalk:List*",
          "elasticbeanstalk:RequestEnvironmentInfo",
          "elasticbeanstalk:RetrieveEnvironmentInfo",
          "elasticloadbalancing:*",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "route53:*",
          "route53domains:*",
          "sns:CreateTopic",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AcceptVpcPeeringConnection",
          "ec2:AttachClassicLinkVpc",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateVpcPeeringConnection",
          "ec2:DeleteCustomerGateway",
          "ec2:DeleteDhcpOptions",
          "ec2:DeleteInternetGateway",
          "ec2:DeleteNetworkAcl",
          "ec2:DeleteNetworkAclEntry",
          "ec2:DeleteRoute",
          "ec2:DeleteRouteTable",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteVolume",
          "ec2:DeleteVpcPeeringConnection",
          "ec2:DetachClassicLinkVpc",
          "ec2:DisableVpcClassicLink",
          "ec2:EnableVpcClassicLink",
          "ec2:GetConsoleScreenshot",
          "ec2:RejectVpcPeeringConnection",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLocalGatewayRoute",
          "ec2:CreateLocalGatewayRouteTableVpcAssociation",
          "ec2:DeleteLocalGatewayRoute",
          "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
          "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
          "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
          "ec2:DescribeLocalGatewayRouteTables",
          "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
          "ec2:DescribeLocalGatewayVirtualInterfaces",
          "ec2:DescribeLocalGateways",
          "ec2:SearchLocalGatewayRoutes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:GetBucketWebsite",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:ListRoles",
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/flow-logs-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "networkmanager:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AcceptTransitGatewayVpcAttachment",
          "ec2:AssociateTransitGatewayRouteTable",
          "ec2:CreateTransitGateway",
          "ec2:CreateTransitGatewayRoute",
          "ec2:CreateTransitGatewayRouteTable",
          "ec2:CreateTransitGatewayVpcAttachment",
          "ec2:DeleteTransitGateway",
          "ec2:DeleteTransitGatewayRoute",
          "ec2:DeleteTransitGatewayRouteTable",
          "ec2:DeleteTransitGatewayVpcAttachment",
          "ec2:DescribeTransitGatewayAttachments",
          "ec2:DescribeTransitGatewayRouteTables",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "ec2:DescribeTransitGateways",
          "ec2:DisableTransitGatewayRouteTablePropagation",
          "ec2:DisassociateTransitGatewayRouteTable",
          "ec2:EnableTransitGatewayRouteTablePropagation",
          "ec2:ExportTransitGatewayRoutes",
          "ec2:GetTransitGatewayAttachmentPropagations",
          "ec2:GetTransitGatewayRouteTableAssociations",
          "ec2:GetTransitGatewayRouteTablePropagations",
          "ec2:ModifyTransitGateway",
          "ec2:ModifyTransitGatewayVpcAttachment",
          "ec2:RejectTransitGatewayVpcAttachment",
          "ec2:ReplaceTransitGatewayRoute",
          "ec2:SearchTransitGatewayRoutes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "Billing": {
    "policy": {
      "PolicyName": "Billing",
      "PolicyId": "ANPAIFTHXT6FFMIRT7ZEA",
      "Arn": "arn:aws:iam::aws:policy/job-function/Billing",
      "Path": "/job-function/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 2,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions for billing and cost management. This includes viewing account usage and viewing and modifying budgets and payment methods.",
      "CreateDate": "2016-11-10T17:33:18.000Z",
      "UpdateDate": "2024-01-17T18:03:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "VisualEditor0",
        "Effect": "Allow",
        "Action": [
          "account:GetAccountInformation",
          "aws-portal:*Billing",
          "aws-portal:*PaymentMethods",
          "aws-portal:*Usage",
          "billing:GetBillingData",
          "billing:GetBillingDetails",
          "billing:GetBillingNotifications",
          "billing:GetBillingPreferences",
          "billing:GetContractInformation",
          "billing:GetCredits",
          "billing:GetIAMAccessPreference",
          "billing:GetSellerOfRecord",
          "billing:ListBillingViews",
          "billing:PutContractInformation",
          "billing:RedeemCredits",
          "billing:UpdateBillingPreferences",
          "billing:UpdateIAMAccessPreference",
          "budgets:CreateBudgetAction",
          "budgets:DeleteBudgetAction",
          "budgets:DescribeBudgetActionsForBudget",
          "budgets:DescribeBudgetAction",
          "budgets:DescribeBudgetActionsForAccount",
          "budgets:DescribeBudgetActionHistories",
          "budgets:ExecuteBudgetAction",
          "budgets:ModifyBudget",
          "budgets:UpdateBudgetAction",
          "budgets:ViewBudget",
          "ce:CreateCostCategoryDefinition",
          "ce:CreateNotificationSubscription",
          "ce:CreateReport",
          "ce:DeleteCostCategoryDefinition",
          "ce:DeleteNotificationSubscription",
          "ce:DeleteReport",
          "ce:DescribeCostCategoryDefinition",
          "ce:GetCostAndUsage",
          "ce:ListCostAllocationTags",
          "ce:ListCostCategoryDefinitions",
          "ce:ListTagsForResource",
          "ce:TagResource",
          "ce:UpdateCostAllocationTagsStatus",
          "ce:UpdateNotificationSubscription",
          "ce:UpdatePreferences",
          "ce:UpdateReport",
          "ce:UpdateCostCategoryDefinition",
          "ce:UntagResource",
          "consolidatedbilling:GetAccountBillingRole",
          "consolidatedbilling:ListLinkedAccounts",
          "cur:DeleteReportDefinition",
          "cur:DescribeReportDefinitions",
          "cur:GetClassicReport",
          "cur:GetClassicReportPreferences",
          "cur:GetUsageReport",
          "cur:ModifyReportDefinition",
          "cur:PutClassicReportPreferences",
          "cur:PutReportDefinition",
          "cur:ValidateReportDestination",
          "freetier:GetFreeTierAlertPreference",
          "freetier:GetFreeTierUsage",
          "freetier:PutFreeTierAlertPreference",
          "invoicing:GetInvoiceEmailDeliveryPreferences",
          "invoicing:GetInvoicePDF",
          "invoicing:ListInvoiceSummaries",
          "invoicing:PutInvoiceEmailDeliveryPreferences",
          "payments:CreatePaymentInstrument",
          "payments:DeletePaymentInstrument",
          "payments:GetPaymentInstrument",
          "payments:GetPaymentStatus",
          "payments:ListPaymentPreferences",
          "payments:MakePayment",
          "payments:UpdatePaymentPreferences",
          "pricing:DescribeServices",
          "purchase-orders:AddPurchaseOrder",
          "purchase-orders:DeletePurchaseOrder",
          "purchase-orders:GetPurchaseOrder",
          "purchase-orders:ListPurchaseOrderInvoices",
          "purchase-orders:ListPurchaseOrders",
          "purchase-orders:ListTagsForResource",
          "purchase-orders:ModifyPurchaseOrders",
          "purchase-orders:TagResource",
          "purchase-orders:UntagResource",
          "purchase-orders:UpdatePurchaseOrder",
          "purchase-orders:UpdatePurchaseOrderStatus",
          "purchase-orders:ViewPurchaseOrders",
          "support:CreateCase",
          "support:AddAttachmentsToSet",
          "sustainability:GetCarbonFootprintSummary",
          "tax:BatchPutTaxRegistration",
          "tax:DeleteTaxRegistration",
          "tax:GetExemptions",
          "tax:GetTaxInheritance",
          "tax:GetTaxInterview",
          "tax:GetTaxRegistration",
          "tax:GetTaxRegistrationDocument",
          "tax:ListTaxRegistrations",
          "tax:PutTaxInheritance",
          "tax:PutTaxInterview",
          "tax:PutTaxRegistration",
          "tax:UpdateExemptions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "IAMUserChangePassword": {
    "policy": {
      "PolicyName": "IAMUserChangePassword",
      "PolicyId": "ANPAJ4L4MM2A7QIEB56MS",
      "Arn": "arn:aws:iam::aws:policy/IAMUserChangePassword",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the ability for an IAM user to change their own password.",
      "CreateDate": "2016-11-15T00:25:16.000Z",
      "UpdateDate": "2016-11-15T23:18:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:ChangePassword"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetAccountPasswordPolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticMapReduceforAutoScalingRole": {
    "policy": {
      "PolicyName": "AmazonElasticMapReduceforAutoScalingRole",
      "PolicyId": "ANPAJSVXG6QHPE6VHDZ4Q",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforAutoScalingRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Amazon Elastic MapReduce for Auto Scaling. Role to allow Auto Scaling to add and remove instances from your EMR cluster.",
      "CreateDate": "2016-11-18T01:09:10.000Z",
      "UpdateDate": "2016-11-18T01:09:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudwatch:DescribeAlarms",
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ModifyInstanceGroups"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonAppStreamServiceAccess": {
    "policy": {
      "PolicyName": "AmazonAppStreamServiceAccess",
      "PolicyId": "ANPAISBRZ7LMMCBYEF3SE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonAppStreamServiceAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for Amazon AppStream service role. ",
      "CreateDate": "2016-11-19T04:17:37.000Z",
      "UpdateDate": "2020-06-26T16:33:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeAvailabilityZones",
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeSubnets",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcEndpoints",
          "s3:ListAllMyBuckets",
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:ListBucket",
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:GetObjectVersion",
          "s3:DeleteObjectVersion",
          "s3:GetBucketPolicy",
          "s3:PutBucketPolicy",
          "s3:PutEncryptionConfiguration"
        ],
        "Resource": [
          "arn:aws:s3:::appstream2-36fb080bb8-*",
          "arn:aws:s3:::appstream-app-settings-*",
          "arn:aws:s3:::appstream-logs-*"
        ]
      }
    ]
  },
  "AWSOpsWorksCMInstanceProfileRole": {
    "policy": {
      "PolicyName": "AWSOpsWorksCMInstanceProfileRole",
      "PolicyId": "ANPAICSU3OSHCURP2WIZW",
      "Arn": "arn:aws:iam::aws:policy/AWSOpsWorksCMInstanceProfileRole",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides S3 access for instances launched by OpsWorks CM.",
      "CreateDate": "2016-11-24T09:48:22.000Z",
      "UpdateDate": "2021-04-23T17:34:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudformation:DescribeStackResource",
          "cloudformation:SignalResource"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListMultipartUploadParts",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-opsworks-cm-*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "acm:GetCertificate"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:opsworks-cm!aws-opsworks-cm-secrets-*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AWSOpsWorksCMServiceRole": {
    "policy": {
      "PolicyName": "AWSOpsWorksCMServiceRole",
      "PolicyId": "ANPAJ6I6MPGJE62URSHCO",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSOpsWorksCMServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v14",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Role Policy to be used for Creating OpsWorks CM servers.",
      "CreateDate": "2016-11-24T09:49:46.000Z",
      "UpdateDate": "2021-04-23T17:32:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::aws-opsworks-cm-*"
        ],
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteObject",
          "s3:DeleteBucket",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutBucketPolicy",
          "s3:PutObject",
          "s3:GetBucketTagging",
          "s3:PutBucketTagging"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "tag:UntagResources",
          "tag:TagResources"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "ssm:DescribeInstanceInformation",
          "ssm:GetCommandInvocation",
          "ssm:ListCommandInvocations",
          "ssm:ListCommands"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "ssm:SendCommand"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "arn:aws:ssm:*::document/*",
          "arn:aws:s3:::aws-opsworks-cm-*"
        ],
        "Action": [
          "ssm:SendCommand"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "ec2:AllocateAddress",
          "ec2:AssociateAddress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateImage",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSnapshot",
          "ec2:CreateTags",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteSnapshot",
          "ec2:DeregisterImage",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeImages",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstances",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DisassociateAddress",
          "ec2:ReleaseAddress",
          "ec2:RunInstances",
          "ec2:StopInstances"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "ec2:TerminateInstances",
          "ec2:RebootInstances"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "arn:aws:opsworks-cm:*:*:server/*"
        ],
        "Action": [
          "opsworks-cm:DeleteServer",
          "opsworks-cm:StartMaintenance"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
        ],
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResources",
          "cloudformation:DescribeStacks",
          "cloudformation:UpdateStack"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-opsworks-cm-*",
          "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
        ],
        "Action": [
          "iam:PassRole"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "acm:DeleteCertificate",
          "acm:ImportCertificate"
        ]
      },
      {
        "Effect": "Allow",
        "Resource": [
          "arn:aws:secretsmanager:*:*:opsworks-cm!aws-opsworks-cm-secrets-*"
        ],
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:UpdateSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:TagResource",
          "secretsmanager:UntagResource"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:elastic-ip/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      }
    ]
  },
  "AmazonRekognitionFullAccess": {
    "policy": {
      "PolicyName": "AmazonRekognitionFullAccess",
      "PolicyId": "ANPAIWDAOK6AIFDVX6TT6",
      "Arn": "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Access to all Amazon Rekognition APIs",
      "CreateDate": "2016-11-30T14:40:44.000Z",
      "UpdateDate": "2016-11-30T14:40:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rekognition:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRekognitionReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRekognitionReadOnlyAccess",
      "PolicyId": "ANPAILWSUHXUY4ES43SA4",
      "Arn": "arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Access to all Read rekognition APIs",
      "CreateDate": "2016-11-30T14:58:06.000Z",
      "UpdateDate": "2023-11-08T18:30:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonRekognitionReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "rekognition:CompareFaces",
          "rekognition:DetectFaces",
          "rekognition:DetectLabels",
          "rekognition:ListCollections",
          "rekognition:ListFaces",
          "rekognition:SearchFaces",
          "rekognition:SearchFacesByImage",
          "rekognition:DetectText",
          "rekognition:GetCelebrityInfo",
          "rekognition:RecognizeCelebrities",
          "rekognition:DetectModerationLabels",
          "rekognition:GetLabelDetection",
          "rekognition:GetFaceDetection",
          "rekognition:GetContentModeration",
          "rekognition:GetPersonTracking",
          "rekognition:GetCelebrityRecognition",
          "rekognition:GetFaceSearch",
          "rekognition:GetTextDetection",
          "rekognition:GetSegmentDetection",
          "rekognition:DescribeStreamProcessor",
          "rekognition:ListStreamProcessors",
          "rekognition:DescribeProjects",
          "rekognition:DescribeProjectVersions",
          "rekognition:DetectCustomLabels",
          "rekognition:DetectProtectiveEquipment",
          "rekognition:ListTagsForResource",
          "rekognition:ListDatasetEntries",
          "rekognition:ListDatasetLabels",
          "rekognition:DescribeDataset",
          "rekognition:ListProjectPolicies",
          "rekognition:ListUsers",
          "rekognition:SearchUsers",
          "rekognition:SearchUsersByImage",
          "rekognition:GetMediaAnalysisJob",
          "rekognition:ListMediaAnalysisJobs"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonAthenaFullAccess": {
    "policy": {
      "PolicyName": "AmazonAthenaFullAccess",
      "PolicyId": "ANPAIPJMLMD4C7RYZ6XCK",
      "Arn": "arn:aws:iam::aws:policy/AmazonAthenaFullAccess",
      "Path": "/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide full access to Amazon Athena and scoped access to the dependencies needed to enable querying, writing results, and data management.",
      "CreateDate": "2016-11-30T16:46:01.000Z",
      "UpdateDate": "2024-01-03T19:05:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "BaseAthenaPermissions",
        "Effect": "Allow",
        "Action": [
          "athena:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BaseGluePermissions",
        "Effect": "Allow",
        "Action": [
          "glue:CreateDatabase",
          "glue:DeleteDatabase",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:UpdateDatabase",
          "glue:CreateTable",
          "glue:DeleteTable",
          "glue:BatchDeleteTable",
          "glue:UpdateTable",
          "glue:GetTable",
          "glue:GetTables",
          "glue:BatchCreatePartition",
          "glue:CreatePartition",
          "glue:DeletePartition",
          "glue:BatchDeletePartition",
          "glue:UpdatePartition",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:BatchGetPartition",
          "glue:StartColumnStatisticsTaskRun",
          "glue:GetColumnStatisticsTaskRun",
          "glue:GetColumnStatisticsTaskRuns"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BaseQueryResultsPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:ListMultipartUploadParts",
          "s3:AbortMultipartUpload",
          "s3:CreateBucket",
          "s3:PutObject",
          "s3:PutBucketPublicAccessBlock"
        ],
        "Resource": [
          "arn:aws:s3:::aws-athena-query-results-*"
        ]
      },
      {
        "Sid": "BaseAthenaExamplesPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::athena-examples*"
        ]
      },
      {
        "Sid": "BaseS3BucketPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BaseSNSPermissions",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics",
          "sns:GetTopicAttributes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BaseCloudWatchPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BaseLakeFormationPermissions",
        "Effect": "Allow",
        "Action": [
          "lakeformation:GetDataAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BaseDataZonePermissions",
        "Effect": "Allow",
        "Action": [
          "datazone:ListDomains",
          "datazone:ListProjects",
          "datazone:ListAccountEnvironments"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BasePricingPermissions",
        "Effect": "Allow",
        "Action": [
          "pricing:GetProducts"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonPollyFullAccess": {
    "policy": {
      "PolicyName": "AmazonPollyFullAccess",
      "PolicyId": "ANPAJUZOYQU6XQYPR7EWS",
      "Arn": "arn:aws:iam::aws:policy/AmazonPollyFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to Amazon Polly service and resources.",
      "CreateDate": "2016-11-30T18:59:06.000Z",
      "UpdateDate": "2016-11-30T18:59:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "polly:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonPollyReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonPollyReadOnlyAccess",
      "PolicyId": "ANPAJ5FENL3CVPL2FPDLA",
      "Arn": "arn:aws:iam::aws:policy/AmazonPollyReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants read-only access to Amazon Polly resources.",
      "CreateDate": "2016-11-30T18:59:24.000Z",
      "UpdateDate": "2018-07-17T16:41:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "polly:DescribeVoices",
          "polly:GetLexicon",
          "polly:GetSpeechSynthesisTask",
          "polly:ListLexicons",
          "polly:ListSpeechSynthesisTasks",
          "polly:SynthesizeSpeech"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSXrayWriteOnlyAccess": {
    "policy": {
      "PolicyName": "AWSXrayWriteOnlyAccess",
      "PolicyId": "ANPAIAACM4LMYSRGBCTM6",
      "Arn": "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS X-Ray write only managed policy",
      "CreateDate": "2016-12-01T18:19:53.000Z",
      "UpdateDate": "2018-08-28T23:03:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:GetSamplingRules",
          "xray:GetSamplingTargets",
          "xray:GetSamplingStatisticSummaries"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSSMMaintenanceWindowRole": {
    "policy": {
      "PolicyName": "AmazonSSMMaintenanceWindowRole",
      "PolicyId": "ANPAJV3JNYSTZ47VOXYME",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": " Service Role to be used for EC2 Maintenance Window",
      "CreateDate": "2016-12-01T15:57:54.000Z",
      "UpdateDate": "2019-07-27T00:16:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetAutomationExecution",
          "ssm:GetParameters",
          "ssm:ListCommands",
          "ssm:SendCommand",
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:SSM*",
          "arn:aws:lambda:*:*:function:*:SSM*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "states:DescribeExecution",
          "states:StartExecution"
        ],
        "Resource": [
          "arn:aws:states:*:*:stateMachine:SSM*",
          "arn:aws:states:*:*:execution:SSM*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:ListGroups",
          "resource-groups:ListGroupResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSXrayReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSXrayReadOnlyAccess",
      "PolicyId": "ANPAIH4OFXWPS6ZX6OPGQ",
      "Arn": "arn:aws:iam::aws:policy/AWSXrayReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS X-Ray read only managed policy",
      "CreateDate": "2016-12-01T18:27:02.000Z",
      "UpdateDate": "2024-02-14T00:35:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSXrayReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "xray:GetSamplingRules",
          "xray:GetSamplingTargets",
          "xray:GetSamplingStatisticSummaries",
          "xray:BatchGetTraces",
          "xray:BatchGetTraceSummaryById",
          "xray:GetDistinctTraceGraphs",
          "xray:GetServiceGraph",
          "xray:GetTraceGraph",
          "xray:GetTraceSummaries",
          "xray:GetGroups",
          "xray:GetGroup",
          "xray:ListTagsForResource",
          "xray:ListResourcePolicies",
          "xray:GetTimeSeriesServiceStatistics",
          "xray:GetInsightSummaries",
          "xray:GetInsight",
          "xray:GetInsightEvents",
          "xray:GetInsightImpactGraph"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSXrayFullAccess": {
    "policy": {
      "PolicyName": "AWSXrayFullAccess",
      "PolicyId": "ANPAJQBYG45NSJMVQDB2K",
      "Arn": "arn:aws:iam::aws:policy/AWSXrayFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS X-Ray full access managed policy",
      "CreateDate": "2016-12-01T18:30:55.000Z",
      "UpdateDate": "2024-04-11T17:07:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSXrayFullAccess",
        "Effect": "Allow",
        "Action": [
          "xray:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeBuildDeveloperAccess": {
    "policy": {
      "PolicyName": "AWSCodeBuildDeveloperAccess",
      "PolicyId": "ANPAIMKTMR34XSBQW45HS",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess",
      "Path": "/",
      "DefaultVersionId": "v14",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS CodeBuild via the AWS Management Console, but does not allow CodeBuild project administration. Also attach AmazonS3ReadOnlyAccess to provide access to download build artifacts.",
      "CreateDate": "2016-12-01T19:02:32.000Z",
      "UpdateDate": "2023-07-31T23:06:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSServicesAccess",
        "Action": [
          "codebuild:StartBuild",
          "codebuild:StopBuild",
          "codebuild:StartBuildBatch",
          "codebuild:StopBuildBatch",
          "codebuild:RetryBuild",
          "codebuild:RetryBuildBatch",
          "codebuild:BatchGet*",
          "codebuild:GetResourcePolicy",
          "codebuild:DescribeTestCases",
          "codebuild:DescribeCodeCoverages",
          "codebuild:List*",
          "codecommit:GetBranch",
          "codecommit:GetCommit",
          "codecommit:GetRepository",
          "codecommit:ListBranches",
          "cloudwatch:GetMetricStatistics",
          "events:DescribeRule",
          "events:ListTargetsByRule",
          "events:ListRuleNamesByTarget",
          "logs:GetLogEvents",
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMParameterWriteAccess",
        "Effect": "Allow",
        "Action": [
          "ssm:PutParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/CodeBuild/*"
        ]
      },
      {
        "Sid": "SSMStartSessionAccess",
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:task/*/*"
        ]
      },
      {
        "Sid": "CodeStarConnectionsUserAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:ListConnections",
          "codestar-connections:GetConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsReadWriteAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:CreateNotificationRule",
          "codestar-notifications:DescribeNotificationRule",
          "codestar-notifications:UpdateNotificationRule",
          "codestar-notifications:Subscribe",
          "codestar-notifications:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsListAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListEventTypes",
          "codestar-notifications:ListTargets",
          "codestar-notifications:ListTagsforResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SNSTopicListAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics",
          "sns:GetTopicAttributes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsChatbotAccess",
        "Effect": "Allow",
        "Action": [
          "chatbot:DescribeSlackChannelConfigurations",
          "chatbot:ListMicrosoftTeamsChannelConfigurations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeBuildReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCodeBuildReadOnlyAccess",
      "PolicyId": "ANPAJIZZWN6557F5HVP2K",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeBuildReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS CodeBuild via the AWS Management Console. Also attach AmazonS3ReadOnlyAccess to provide access to download build artifacts.",
      "CreateDate": "2016-12-01T19:03:41.000Z",
      "UpdateDate": "2020-09-14T16:04:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codebuild:BatchGet*",
          "codebuild:GetResourcePolicy",
          "codebuild:List*",
          "codebuild:DescribeTestCases",
          "codebuild:DescribeCodeCoverages",
          "codecommit:GetBranch",
          "codecommit:GetCommit",
          "codecommit:GetRepository",
          "cloudwatch:GetMetricStatistics",
          "events:DescribeRule",
          "events:ListTargetsByRule",
          "events:ListRuleNamesByTarget",
          "logs:GetLogEvents"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarConnectionsUserAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:ListConnections",
          "codestar-connections:GetConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsPowerUserAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:DescribeNotificationRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsListAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListEventTypes",
          "codestar-notifications:ListTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeBuildAdminAccess": {
    "policy": {
      "PolicyName": "AWSCodeBuildAdminAccess",
      "PolicyId": "ANPAJQJGIOIE3CD2TQXDS",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess",
      "Path": "/",
      "DefaultVersionId": "v13",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS CodeBuild via the AWS Management Console. Also attach AmazonS3ReadOnlyAccess to provide access to download build artifacts, and attach IAMFullAccess to create and manage the service role for CodeBuild.",
      "CreateDate": "2016-12-01T19:04:44.000Z",
      "UpdateDate": "2023-07-31T23:06:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSServicesAccess",
        "Action": [
          "codebuild:*",
          "codecommit:GetBranch",
          "codecommit:GetCommit",
          "codecommit:GetRepository",
          "codecommit:ListBranches",
          "codecommit:ListRepositories",
          "cloudwatch:GetMetricStatistics",
          "ec2:DescribeVpcs",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ecr:DescribeRepositories",
          "ecr:ListImages",
          "elasticfilesystem:DescribeFileSystems",
          "events:DeleteRule",
          "events:DescribeRule",
          "events:DisableRule",
          "events:EnableRule",
          "events:ListTargetsByRule",
          "events:ListRuleNamesByTarget",
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets",
          "logs:GetLogEvents",
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CWLDeleteLogGroupAccess",
        "Action": [
          "logs:DeleteLogGroup"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*"
        ]
      },
      {
        "Sid": "SSMParameterWriteAccess",
        "Effect": "Allow",
        "Action": [
          "ssm:PutParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/CodeBuild/*"
        ]
      },
      {
        "Sid": "SSMStartSessionAccess",
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:task/*/*"
        ]
      },
      {
        "Sid": "CodeStarConnectionsReadWriteAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:CreateConnection",
          "codestar-connections:DeleteConnection",
          "codestar-connections:UpdateConnectionInstallation",
          "codestar-connections:TagResource",
          "codestar-connections:UntagResource",
          "codestar-connections:ListConnections",
          "codestar-connections:ListInstallationTargets",
          "codestar-connections:ListTagsForResource",
          "codestar-connections:GetConnection",
          "codestar-connections:GetIndividualAccessToken",
          "codestar-connections:GetInstallationUrl",
          "codestar-connections:PassConnection",
          "codestar-connections:StartOAuthHandshake",
          "codestar-connections:UseConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsReadWriteAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:CreateNotificationRule",
          "codestar-notifications:DescribeNotificationRule",
          "codestar-notifications:UpdateNotificationRule",
          "codestar-notifications:DeleteNotificationRule",
          "codestar-notifications:Subscribe",
          "codestar-notifications:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsListAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListEventTypes",
          "codestar-notifications:ListTargets",
          "codestar-notifications:ListTagsforResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:SetTopicAttributes"
        ],
        "Resource": [
          "arn:aws:sns:*:*:codestar-notifications*"
        ]
      },
      {
        "Sid": "SNSTopicListAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics",
          "sns:GetTopicAttributes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsChatbotAccess",
        "Effect": "Allow",
        "Action": [
          "chatbot:DescribeSlackChannelConfigurations",
          "chatbot:ListMicrosoftTeamsChannelConfigurations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSSMAutomationRole": {
    "policy": {
      "PolicyName": "AmazonSSMAutomationRole",
      "PolicyId": "ANPAJIBQCTBCXD2XRNB6W",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions for EC2 Automation service to execute activities defined within Automation documents",
      "CreateDate": "2016-12-05T22:09:55.000Z",
      "UpdateDate": "2017-07-24T23:29:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:Automation*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateImage",
          "ec2:CopyImage",
          "ec2:DeregisterImage",
          "ec2:DescribeImages",
          "ec2:DeleteSnapshot",
          "ec2:StartInstances",
          "ec2:RunInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:DescribeTags",
          "cloudformation:CreateStack",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStacks",
          "cloudformation:UpdateStack",
          "cloudformation:DeleteStack"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:Automation*"
        ]
      }
    ]
  },
  "AWSLambdaENIManagementAccess": {
    "policy": {
      "PolicyName": "AWSLambdaENIManagementAccess",
      "PolicyId": "ANPAJXAW2Q3KPTURUT2QC",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides minimum permissions for a Lambda function to manage ENIs (create, describe, delete) used by a VPC-enabled Lambda Function.",
      "CreateDate": "2016-12-06T00:37:27.000Z",
      "UpdateDate": "2020-10-01T20:07:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface",
          "ec2:AssignPrivateIpAddresses",
          "ec2:UnassignPrivateIpAddresses"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSHealthFullAccess": {
    "policy": {
      "PolicyName": "AWSHealthFullAccess",
      "PolicyId": "ANPAI3CUMPCPEUPCSXC4Y",
      "Arn": "arn:aws:iam::aws:policy/AWSHealthFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows full access to the AWS Health Apis and Notifications and the Personal Health Dashboard",
      "CreateDate": "2016-12-06T12:30:31.000Z",
      "UpdateDate": "2020-11-16T18:11:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess",
          "organizations:DisableAWSServiceAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "health:*",
          "organizations:ListAccounts",
          "organizations:ListParents",
          "organizations:DescribeAccount",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBatchFullAccess": {
    "policy": {
      "PolicyName": "AWSBatchFullAccess",
      "PolicyId": "ANPAJ7K2KIWB3HZVK3CUO",
      "Arn": "arn:aws:iam::aws:policy/AWSBatchFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access for AWS Batch resources.",
      "CreateDate": "2016-12-06T19:35:42.000Z",
      "UpdateDate": "2022-10-24T16:09:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "batch:*",
          "cloudwatch:GetMetricStatistics",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeVpcs",
          "ec2:DescribeImages",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeLaunchTemplateVersions",
          "ecs:DescribeClusters",
          "ecs:Describe*",
          "ecs:List*",
          "eks:DescribeCluster",
          "eks:ListClusters",
          "logs:Describe*",
          "logs:Get*",
          "logs:TestMetricFilter",
          "logs:FilterLogEvents",
          "iam:ListInstanceProfiles",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSBatchServiceRole",
          "arn:aws:iam::*:role/service-role/AWSBatchServiceRole",
          "arn:aws:iam::*:role/ecsInstanceRole",
          "arn:aws:iam::*:instance-profile/ecsInstanceRole",
          "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role",
          "arn:aws:iam::*:role/aws-ec2-spot-fleet-role",
          "arn:aws:iam::*:role/AWSBatchJobRole*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*Batch*"
        ]
      }
    ]
  },
  "AWSBatchServiceRole": {
    "policy": {
      "PolicyName": "AWSBatchServiceRole",
      "PolicyId": "ANPAIUETIXPCKASQJURFE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v13",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for AWS Batch service role which allows access to related services including EC2, Autoscaling, EC2 Container service and Cloudwatch Logs.",
      "CreateDate": "2016-12-06T19:36:24.000Z",
      "UpdateDate": "2023-12-05T18:49:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSBatchPolicyStatement1",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeImages",
          "ec2:DescribeImageAttribute",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeSpotFleetInstances",
          "ec2:DescribeSpotFleetRequests",
          "ec2:DescribeSpotPriceHistory",
          "ec2:DescribeSpotFleetRequestHistory",
          "ec2:DescribeVpcClassicLink",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:CreateLaunchTemplate",
          "ec2:DeleteLaunchTemplate",
          "ec2:RequestSpotFleet",
          "ec2:CancelSpotFleetRequests",
          "ec2:ModifySpotFleetRequest",
          "ec2:TerminateInstances",
          "ec2:RunInstances",
          "autoscaling:DescribeAccountLimits",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeScalingActivities",
          "autoscaling:CreateLaunchConfiguration",
          "autoscaling:CreateAutoScalingGroup",
          "autoscaling:UpdateAutoScalingGroup",
          "autoscaling:SetDesiredCapacity",
          "autoscaling:DeleteLaunchConfiguration",
          "autoscaling:DeleteAutoScalingGroup",
          "autoscaling:CreateOrUpdateTags",
          "autoscaling:SuspendProcesses",
          "autoscaling:PutNotificationConfiguration",
          "autoscaling:TerminateInstanceInAutoScalingGroup",
          "ecs:DescribeClusters",
          "ecs:DescribeContainerInstances",
          "ecs:DescribeTaskDefinition",
          "ecs:DescribeTasks",
          "ecs:ListAccountSettings",
          "ecs:ListClusters",
          "ecs:ListContainerInstances",
          "ecs:ListTaskDefinitionFamilies",
          "ecs:ListTaskDefinitions",
          "ecs:ListTasks",
          "ecs:CreateCluster",
          "ecs:DeleteCluster",
          "ecs:RegisterTaskDefinition",
          "ecs:DeregisterTaskDefinition",
          "ecs:RunTask",
          "ecs:StartTask",
          "ecs:StopTask",
          "ecs:UpdateContainerAgent",
          "ecs:DeregisterContainerInstance",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "iam:GetInstanceProfile",
          "iam:GetRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement2",
        "Effect": "Allow",
        "Action": [
          "ecs:TagResource"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:task/*_Batch_*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement3",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement4",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement5",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSQuicksightAthenaAccess": {
    "policy": {
      "PolicyName": "AWSQuicksightAthenaAccess",
      "PolicyId": "ANPAI4JB77JXFQXDWNRPM",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSQuicksightAthenaAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Quicksight access to Athena API and S3 buckets used for Athena query results",
      "CreateDate": "2016-12-09T02:31:03.000Z",
      "UpdateDate": "2021-07-07T20:09:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "athena:BatchGetQueryExecution",
          "athena:CancelQueryExecution",
          "athena:GetCatalogs",
          "athena:GetExecutionEngine",
          "athena:GetExecutionEngines",
          "athena:GetNamespace",
          "athena:GetNamespaces",
          "athena:GetQueryExecution",
          "athena:GetQueryExecutions",
          "athena:GetQueryResults",
          "athena:GetQueryResultsStream",
          "athena:GetTable",
          "athena:GetTables",
          "athena:ListQueryExecutions",
          "athena:RunQuery",
          "athena:StartQueryExecution",
          "athena:StopQueryExecution",
          "athena:ListWorkGroups",
          "athena:ListEngineVersions",
          "athena:GetWorkGroup",
          "athena:GetDataCatalog",
          "athena:GetDatabase",
          "athena:GetTableMetadata",
          "athena:ListDataCatalogs",
          "athena:ListDatabases",
          "athena:ListTableMetadata"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateDatabase",
          "glue:DeleteDatabase",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:UpdateDatabase",
          "glue:CreateTable",
          "glue:DeleteTable",
          "glue:BatchDeleteTable",
          "glue:UpdateTable",
          "glue:GetTable",
          "glue:GetTables",
          "glue:BatchCreatePartition",
          "glue:CreatePartition",
          "glue:DeletePartition",
          "glue:BatchDeletePartition",
          "glue:UpdatePartition",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:BatchGetPartition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:ListMultipartUploadParts",
          "s3:AbortMultipartUpload",
          "s3:CreateBucket",
          "s3:PutObject",
          "s3:PutBucketPublicAccessBlock"
        ],
        "Resource": [
          "arn:aws:s3:::aws-athena-query-results-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lakeformation:GetDataAccess"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "IAMSelfManageServiceSpecificCredentials": {
    "policy": {
      "PolicyName": "IAMSelfManageServiceSpecificCredentials",
      "PolicyId": "ANPAI4VT74EMXK2PMQJM2",
      "Arn": "arn:aws:iam::aws:policy/IAMSelfManageServiceSpecificCredentials",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows an IAM user to manage their own Service Specific Credentials.",
      "CreateDate": "2016-12-22T17:25:18.000Z",
      "UpdateDate": "2016-12-22T17:25:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceSpecificCredential",
          "iam:ListServiceSpecificCredentials",
          "iam:UpdateServiceSpecificCredential",
          "iam:DeleteServiceSpecificCredential",
          "iam:ResetServiceSpecificCredential"
        ],
        "Resource": [
          "arn:aws:iam::*:user/${aws:username}"
        ]
      }
    ]
  },
  "AWSStepFunctionsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSStepFunctionsReadOnlyAccess",
      "PolicyId": "ANPAJONHB2TJQDJPFW5TM",
      "Arn": "arn:aws:iam::aws:policy/AWSStepFunctionsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "An access policy for providing a user/role/etc read only access to the AWS StepFunctions service.",
      "CreateDate": "2017-01-11T21:46:19.000Z",
      "UpdateDate": "2017-11-10T22:03:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "states:ListStateMachines",
          "states:ListActivities",
          "states:DescribeStateMachine",
          "states:DescribeStateMachineForExecution",
          "states:ListExecutions",
          "states:DescribeExecution",
          "states:GetExecutionHistory",
          "states:DescribeActivity"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSStepFunctionsFullAccess": {
    "policy": {
      "PolicyName": "AWSStepFunctionsFullAccess",
      "PolicyId": "ANPAJXKA6VP3UFBVHDPPA",
      "Arn": "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "An access policy for providing a user/role/etc access to the AWS StepFunctions API. For full access, in addition to this policy, a user MUST have iam:PassRole permission on at least one IAM role that can be assumed by the service.",
      "CreateDate": "2017-01-11T21:51:32.000Z",
      "UpdateDate": "2017-01-11T21:51:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "states:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSStepFunctionsConsoleFullAccess": {
    "policy": {
      "PolicyName": "AWSStepFunctionsConsoleFullAccess",
      "PolicyId": "ANPAJIYC52YWRX6OSMJWK",
      "Arn": "arn:aws:iam::aws:policy/AWSStepFunctionsConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "An access policy for providing a user/role/etc access to the AWS StepFunctions console. For a full console experience, in addition to this policy, a user may need iam:PassRole permission on other IAM roles that can be assumed by the service.",
      "CreateDate": "2017-01-11T21:54:31.000Z",
      "UpdateDate": "2017-01-12T00:19:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "states:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/StatesExecutionRole*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:ListFunctions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AutoScalingFullAccess": {
    "policy": {
      "PolicyName": "AutoScalingFullAccess",
      "PolicyId": "ANPAIAWRCSJDDXDXGPCFU",
      "Arn": "arn:aws:iam::aws:policy/AutoScalingFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Auto Scaling.",
      "CreateDate": "2017-01-12T19:31:58.000Z",
      "UpdateDate": "2018-02-06T21:59:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstances",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcClassicLink"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AutoScalingReadOnlyAccess": {
    "policy": {
      "PolicyName": "AutoScalingReadOnlyAccess",
      "PolicyId": "ANPAIAFWUVLC2LPLSFTFG",
      "Arn": "arn:aws:iam::aws:policy/AutoScalingReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Auto Scaling. ",
      "CreateDate": "2017-01-12T19:39:35.000Z",
      "UpdateDate": "2017-01-12T19:39:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AutoScalingConsoleFullAccess": {
    "policy": {
      "PolicyName": "AutoScalingConsoleFullAccess",
      "PolicyId": "ANPAIYEN6FJGYYWJFFCZW",
      "Arn": "arn:aws:iam::aws:policy/AutoScalingConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Auto Scaling via the AWS Management Console.",
      "CreateDate": "2017-01-12T19:43:16.000Z",
      "UpdateDate": "2018-02-06T23:15:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateKeyPair",
          "ec2:CreateSecurityGroup",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstances",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcClassicLink",
          "ec2:ImportKeyPair"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:ListSubscriptions",
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AutoScalingConsoleReadOnlyAccess": {
    "policy": {
      "PolicyName": "AutoScalingConsoleReadOnlyAccess",
      "PolicyId": "ANPAI3A7GDXOYQV3VUQMK",
      "Arn": "arn:aws:iam::aws:policy/AutoScalingConsoleReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Auto Scaling via the AWS Management Console.",
      "CreateDate": "2017-01-12T19:48:53.000Z",
      "UpdateDate": "2017-01-12T19:48:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcClassicLink",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:ListSubscriptions",
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDataPipeline_FullAccess": {
    "policy": {
      "PolicyName": "AWSDataPipeline_FullAccess",
      "PolicyId": "ANPAIXOFIG7RSBMRPHXJ4",
      "Arn": "arn:aws:iam::aws:policy/AWSDataPipeline_FullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Data Pipeline, list access for S3, DynamoDB, Redshift, RDS, SNS, and IAM roles, and passRole access for default Roles.",
      "CreateDate": "2017-01-19T23:14:54.000Z",
      "UpdateDate": "2017-08-17T18:48:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "s3:List*",
          "dynamodb:DescribeTable",
          "rds:DescribeDBInstances",
          "rds:DescribeDBSecurityGroups",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSecurityGroups",
          "sns:ListTopics",
          "sns:Subscribe",
          "iam:ListRoles",
          "iam:GetRolePolicy",
          "iam:GetInstanceProfile",
          "iam:ListInstanceProfiles",
          "datapipeline:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
          "arn:aws:iam::*:role/DataPipelineDefaultRole"
        ]
      }
    ]
  },
  "AWSDataPipeline_PowerUser": {
    "policy": {
      "PolicyName": "AWSDataPipeline_PowerUser",
      "PolicyId": "ANPAIMXGLVY6DVR24VTYS",
      "Arn": "arn:aws:iam::aws:policy/AWSDataPipeline_PowerUser",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Data Pipeline, list access for S3, DynamoDB, Redshift, RDS, SNS, and IAM roles, and passRole access for default Roles.",
      "CreateDate": "2017-01-19T23:16:46.000Z",
      "UpdateDate": "2017-08-17T18:49:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "s3:List*",
          "dynamodb:DescribeTable",
          "rds:DescribeDBInstances",
          "rds:DescribeDBSecurityGroups",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSecurityGroups",
          "sns:ListTopics",
          "iam:ListRoles",
          "iam:GetRolePolicy",
          "iam:GetInstanceProfile",
          "iam:ListInstanceProfiles",
          "datapipeline:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
          "arn:aws:iam::*:role/DataPipelineDefaultRole"
        ]
      }
    ]
  },
  "ApplicationAutoScalingForAmazonAppStreamAccess": {
    "policy": {
      "PolicyName": "ApplicationAutoScalingForAmazonAppStreamAccess",
      "PolicyId": "ANPAIEL3HJCCWFVHA6KPG",
      "Arn": "arn:aws:iam::aws:policy/service-role/ApplicationAutoScalingForAmazonAppStreamAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable Application Autoscaling for Amazon AppStream",
      "CreateDate": "2017-02-06T21:39:56.000Z",
      "UpdateDate": "2017-02-06T21:39:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appstream:UpdateFleet",
          "appstream:DescribeFleets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGreengrassResourceAccessRolePolicy": {
    "policy": {
      "PolicyName": "AWSGreengrassResourceAccessRolePolicy",
      "PolicyId": "ANPAJPKEIMB6YMXDEVRTM",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for AWS Greengrass service role which allows access to related services including AWS Lambda and AWS IoT thing shadows.",
      "CreateDate": "2017-02-14T21:17:24.000Z",
      "UpdateDate": "2018-11-14T00:35:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowGreengrassAccessToShadows",
        "Action": [
          "iot:DeleteThingShadow",
          "iot:GetThingShadow",
          "iot:UpdateThingShadow"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iot:*:*:thing/GG_*",
          "arn:aws:iot:*:*:thing/*-gcm",
          "arn:aws:iot:*:*:thing/*-gda",
          "arn:aws:iot:*:*:thing/*-gci"
        ]
      },
      {
        "Sid": "AllowGreengrassToDescribeThings",
        "Action": [
          "iot:DescribeThing"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iot:*:*:thing/*"
        ]
      },
      {
        "Sid": "AllowGreengrassToDescribeCertificates",
        "Action": [
          "iot:DescribeCertificate"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iot:*:*:cert/*"
        ]
      },
      {
        "Sid": "AllowGreengrassToCallGreengrassServices",
        "Action": [
          "greengrass:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowGreengrassToGetLambdaFunctions",
        "Action": [
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowGreengrassToGetGreengrassSecrets",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:greengrass-*"
        ]
      },
      {
        "Sid": "AllowGreengrassAccessToS3Objects",
        "Action": [
          "s3:GetObject"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::*Greengrass*",
          "arn:aws:s3:::*GreenGrass*",
          "arn:aws:s3:::*greengrass*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Sid": "AllowGreengrassAccessToS3BucketLocation",
        "Action": [
          "s3:GetBucketLocation"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs",
        "Action": [
          "sagemaker:DescribeTrainingJob"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:sagemaker:*:*:training-job/*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkCustomPlatformforEC2Role": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkCustomPlatformforEC2Role",
      "PolicyId": "ANPAJRVFXSS6LEIQGBKDY",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticBeanstalkCustomPlatformforEC2Role",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide the instance in your custom platform builder environment permission to launch EC2 instance, create EBS snapshot and AMI, stream logs to Amazon CloudWatch Logs, and store artifacts in Amazon S3.",
      "CreateDate": "2017-02-21T22:50:30.000Z",
      "UpdateDate": "2017-02-21T22:50:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EC2Access",
        "Action": [
          "ec2:AttachVolume",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CopyImage",
          "ec2:CreateImage",
          "ec2:CreateKeypair",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSnapshot",
          "ec2:CreateTags",
          "ec2:CreateVolume",
          "ec2:DeleteKeypair",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteSnapshot",
          "ec2:DeleteVolume",
          "ec2:DeregisterImage",
          "ec2:DescribeImageAttribute",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeRegions",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVolumes",
          "ec2:DetachVolume",
          "ec2:GetPasswordData",
          "ec2:ModifyImageAttribute",
          "ec2:ModifyInstanceAttribute",
          "ec2:ModifySnapshotAttribute",
          "ec2:RegisterImage",
          "ec2:RunInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BucketAccess",
        "Action": [
          "s3:Get*",
          "s3:List*",
          "s3:PutObject"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*",
          "arn:aws:s3:::elasticbeanstalk-*/*"
        ]
      },
      {
        "Sid": "CloudWatchLogsAccess",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*"
        ]
      }
    ]
  },
  "AmazonCloudDirectoryFullAccess": {
    "policy": {
      "PolicyName": "AmazonCloudDirectoryFullAccess",
      "PolicyId": "ANPAJG3XQK77ATFLCF2CK",
      "Arn": "arn:aws:iam::aws:policy/AmazonCloudDirectoryFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Cloud Directory Service. ",
      "CreateDate": "2017-02-25T00:41:39.000Z",
      "UpdateDate": "2017-02-25T00:41:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "clouddirectory:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCloudDirectoryReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonCloudDirectoryReadOnlyAccess",
      "PolicyId": "ANPAICMSZQGR3O62KMD6M",
      "Arn": "arn:aws:iam::aws:policy/AmazonCloudDirectoryReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Cloud Directory Service. ",
      "CreateDate": "2017-02-28T23:42:06.000Z",
      "UpdateDate": "2017-02-28T23:42:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "clouddirectory:List*",
          "clouddirectory:Get*",
          "clouddirectory:LookupPolicy",
          "clouddirectory:BatchRead"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceGetEntitlements": {
    "policy": {
      "PolicyName": "AWSMarketplaceGetEntitlements",
      "PolicyId": "ANPAJLPIMQE4WMHDC2K7C",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceGetEntitlements",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read access to AWS Marketplace Entitlements",
      "CreateDate": "2017-03-27T19:37:24.000Z",
      "UpdateDate": "2024-04-05T01:27:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSMarketplaceGetEntitlements",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:GetEntitlements"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSOpsWorksCloudWatchLogs": {
    "policy": {
      "PolicyName": "AWSOpsWorksCloudWatchLogs",
      "PolicyId": "ANPAJXFIK7WABAY5CPXM4",
      "Arn": "arn:aws:iam::aws:policy/AWSOpsWorksCloudWatchLogs",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables OpsWorks instances with the CWLogs integration enabled to ship logs and create required log groups",
      "CreateDate": "2017-03-30T17:47:19.000Z",
      "UpdateDate": "2017-03-30T17:47:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:*"
        ]
      }
    ]
  },
  "AmazonLexRunBotsOnly": {
    "policy": {
      "PolicyName": "AmazonLexRunBotsOnly",
      "PolicyId": "ANPAJVZGB5CM3N6YWJHBE",
      "Arn": "arn:aws:iam::aws:policy/AmazonLexRunBotsOnly",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Amazon Lex conversational APIs.",
      "CreateDate": "2017-04-11T23:06:24.000Z",
      "UpdateDate": "2021-08-18T00:15:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lex:PostContent",
          "lex:PostText",
          "lex:PutSession",
          "lex:GetSession",
          "lex:DeleteSession",
          "lex:RecognizeText",
          "lex:RecognizeUtterance",
          "lex:StartConversation"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLexReadOnly": {
    "policy": {
      "PolicyName": "AmazonLexReadOnly",
      "PolicyId": "ANPAJGBI5LSMAJNDGBNAM",
      "Arn": "arn:aws:iam::aws:policy/AmazonLexReadOnly",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon Lex.",
      "CreateDate": "2017-04-11T23:13:33.000Z",
      "UpdateDate": "2023-01-31T19:31:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lex:GetBot",
          "lex:GetBotAlias",
          "lex:GetBotAliases",
          "lex:GetBots",
          "lex:GetBotChannelAssociation",
          "lex:GetBotChannelAssociations",
          "lex:GetBotVersions",
          "lex:GetBuiltinIntent",
          "lex:GetBuiltinIntents",
          "lex:GetBuiltinSlotTypes",
          "lex:GetIntent",
          "lex:GetIntents",
          "lex:GetIntentVersions",
          "lex:GetSlotType",
          "lex:GetSlotTypes",
          "lex:GetSlotTypeVersions",
          "lex:GetUtterancesView",
          "lex:DescribeBot",
          "lex:DescribeBotAlias",
          "lex:DescribeBotChannel",
          "lex:DescribeBotLocale",
          "lex:DescribeBotRecommendation",
          "lex:DescribeBotVersion",
          "lex:DescribeExport",
          "lex:DescribeImport",
          "lex:DescribeIntent",
          "lex:DescribeResourcePolicy",
          "lex:DescribeSlot",
          "lex:DescribeSlotType",
          "lex:ListBots",
          "lex:ListBotLocales",
          "lex:ListBotAliases",
          "lex:ListBotChannels",
          "lex:ListBotRecommendations",
          "lex:ListBotVersions",
          "lex:ListBuiltInIntents",
          "lex:ListBuiltInSlotTypes",
          "lex:ListExports",
          "lex:ListImports",
          "lex:ListIntents",
          "lex:ListRecommendedIntents",
          "lex:ListSlots",
          "lex:ListSlotTypes",
          "lex:ListTagsForResource",
          "lex:SearchAssociatedTranscripts",
          "lex:ListCustomVocabularyItems"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLexFullAccess": {
    "policy": {
      "PolicyName": "AmazonLexFullAccess",
      "PolicyId": "ANPAJVLXDHKVC23HRTKSI",
      "Arn": "arn:aws:iam::aws:policy/AmazonLexFullAccess",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Lex via the AWS Management Console.  Also provides access to create Lex Service Linked Roles and grant Lex permissions to invoke a limited set of Lambda functions.",
      "CreateDate": "2017-04-11T23:20:36.000Z",
      "UpdateDate": "2024-02-07T00:55:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonLexFullAccessStatement1",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmsForMetric",
          "kms:DescribeKey",
          "kms:ListAliases",
          "lambda:GetPolicy",
          "lambda:ListFunctions",
          "lex:*",
          "polly:DescribeVoices",
          "polly:SynthesizeSpeech",
          "kendra:ListIndices",
          "iam:ListRoles",
          "s3:ListAllMyBuckets",
          "logs:DescribeLogGroups",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement2",
        "Effect": "Allow",
        "Action": [
          "lambda:AddPermission",
          "lambda:RemovePermission"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:AmazonLex*"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement3",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
          "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
          "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
          "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
          "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement4",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement5",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement6",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement7",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement8",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement9",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
          "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
          "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
          "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
          "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement10",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement11",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement12",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
        ]
      },
      {
        "Sid": "AmazonLexFullAccessStatement13",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
        ]
      }
    ]
  },
  "AWSCodeStarServiceRole": {
    "policy": {
      "PolicyName": "AWSCodeStarServiceRole",
      "PolicyId": "ANPAIN6D4M2KD3NBOC4M4",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSCodeStarServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "DO NOT USE -  AWS CodeStar Service Role Policy which grants administrative privileges in order for CodeStar to manage IAM and other service resources on behalf of the customer.",
      "CreateDate": "2017-04-19T15:20:50.000Z",
      "UpdateDate": "2021-09-20T19:11:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ProjectEventRules",
        "Effect": "Allow",
        "Action": [
          "events:PutTargets",
          "events:RemoveTargets",
          "events:PutRule",
          "events:DeleteRule",
          "events:DescribeRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/awscodestar-*"
        ]
      },
      {
        "Sid": "ProjectStack",
        "Effect": "Allow",
        "Action": [
          "cloudformation:*Stack*",
          "cloudformation:CreateChangeSet",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:DeleteChangeSet",
          "cloudformation:GetTemplate"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awscodestar-*",
          "arn:aws:cloudformation:*:*:stack/awseb-*",
          "arn:aws:cloudformation:*:*:stack/aws-cloud9-*",
          "arn:aws:cloudformation:*:aws:transform/CodeStar*"
        ]
      },
      {
        "Sid": "ProjectStackTemplate",
        "Effect": "Allow",
        "Action": [
          "cloudformation:GetTemplateSummary",
          "cloudformation:DescribeChangeSet"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ProjectQuickstarts",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::awscodestar-*/*"
        ]
      },
      {
        "Sid": "ProjectS3Buckets",
        "Effect": "Allow",
        "Action": [
          "s3:*"
        ],
        "Resource": [
          "arn:aws:s3:::aws-codestar-*",
          "arn:aws:s3:::elasticbeanstalk-*"
        ]
      },
      {
        "Sid": "ProjectServices",
        "Effect": "Allow",
        "Action": [
          "codestar:*",
          "codecommit:*",
          "codepipeline:*",
          "codedeploy:*",
          "codebuild:*",
          "autoscaling:*",
          "cloudwatch:Put*",
          "ec2:*",
          "elasticbeanstalk:*",
          "elasticloadbalancing:*",
          "iam:ListRoles",
          "logs:*",
          "sns:*",
          "cloud9:CreateEnvironmentEC2",
          "cloud9:DeleteEnvironment",
          "cloud9:DescribeEnvironment*",
          "cloud9:ListEnvironments"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ProjectWorkerRoles",
        "Effect": "Allow",
        "Action": [
          "iam:AttachRolePolicy",
          "iam:CreateRole",
          "iam:DeleteRole",
          "iam:DeleteRolePolicy",
          "iam:DetachRolePolicy",
          "iam:GetRole",
          "iam:PassRole",
          "iam:GetRolePolicy",
          "iam:PutRolePolicy",
          "iam:SetDefaultPolicyVersion",
          "iam:CreatePolicy",
          "iam:DeletePolicy",
          "iam:AddRoleToInstanceProfile",
          "iam:CreateInstanceProfile",
          "iam:DeleteInstanceProfile",
          "iam:RemoveRoleFromInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:role/CodeStarWorker*",
          "arn:aws:iam::*:policy/CodeStarWorker*",
          "arn:aws:iam::*:instance-profile/awscodestar-*"
        ]
      },
      {
        "Sid": "ProjectTeamMembers",
        "Effect": "Allow",
        "Action": [
          "iam:AttachUserPolicy",
          "iam:DetachUserPolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ProjectRoles",
        "Effect": "Allow",
        "Action": [
          "iam:CreatePolicy",
          "iam:DeletePolicy",
          "iam:CreatePolicyVersion",
          "iam:DeletePolicyVersion",
          "iam:ListEntitiesForPolicy",
          "iam:ListPolicyVersions",
          "iam:GetPolicy",
          "iam:GetPolicyVersion"
        ],
        "Resource": [
          "arn:aws:iam::*:policy/CodeStar_*"
        ]
      },
      {
        "Sid": "InspectServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:ListAttachedRolePolicies"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-codestar-service-role",
          "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
        ]
      },
      {
        "Sid": "IAMLinkRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeConfigRuleForARN",
        "Effect": "Allow",
        "Action": [
          "config:DescribeConfigRules"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ProjectCodeStarConnections",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:UseConnection",
          "codestar-connections:GetConnection"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ProjectCodeStarConnectionsPassConnections",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:PassConnection"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeStarFullAccess": {
    "policy": {
      "PolicyName": "AWSCodeStarFullAccess",
      "PolicyId": "ANPAIXI233TFUGLZOJBEC",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeStarFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS CodeStar via the AWS Management Console.",
      "CreateDate": "2017-04-19T16:23:19.000Z",
      "UpdateDate": "2023-03-28T00:06:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CodeStarEC2",
        "Effect": "Allow",
        "Action": [
          "codestar:*",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "cloud9:DescribeEnvironment*",
          "cloud9:ValidateEnvironmentName"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarCF",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStack*",
          "cloudformation:ListStacks*",
          "cloudformation:GetTemplateSummary"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awscodestar-*"
        ]
      }
    ]
  },
  "AWSGreengrassFullAccess": {
    "policy": {
      "PolicyName": "AWSGreengrassFullAccess",
      "PolicyId": "ANPAJWPV6OBK4QONH4J3O",
      "Arn": "arn:aws:iam::aws:policy/AWSGreengrassFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy gives full access to the AWS Greengrass configuration, management and deployment actions",
      "CreateDate": "2017-05-03T00:47:37.000Z",
      "UpdateDate": "2017-05-03T00:47:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "greengrass:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2ContainerServiceEventsRole": {
    "policy": {
      "PolicyName": "AmazonEC2ContainerServiceEventsRole",
      "PolicyId": "ANPAITKFNIUAG27VSYNZ4",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable CloudWatch Events for EC2 Container Service",
      "CreateDate": "2017-05-30T16:51:35.000Z",
      "UpdateDate": "2023-03-06T22:25:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecs:RunTask"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "QuickSightAccessForS3StorageManagementAnalyticsReadOnly": {
    "policy": {
      "PolicyName": "QuickSightAccessForS3StorageManagementAnalyticsReadOnly",
      "PolicyId": "ANPAIFWG3L3WDMR4I7ZJW",
      "Arn": "arn:aws:iam::aws:policy/service-role/QuickSightAccessForS3StorageManagementAnalyticsReadOnly",
      "Path": "/service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy used by QuickSight team to access customer data produced by S3 Storage Management Analytics.",
      "CreateDate": "2017-06-12T18:18:38.000Z",
      "UpdateDate": "2019-10-08T23:53:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::s3-analytics-export-shared-*"
        ]
      },
      {
        "Action": [
          "s3:GetAnalyticsConfiguration",
          "s3:ListAllMyBuckets",
          "s3:GetBucketLocation"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2SpotFleetTaggingRole": {
    "policy": {
      "PolicyName": "AmazonEC2SpotFleetTaggingRole",
      "PolicyId": "ANPAJ5U6UMLCEYLX5OLC4",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows EC2 Spot Fleet to request, terminate and tag Spot Instances on your behalf. ",
      "CreateDate": "2017-06-29T18:19:29.000Z",
      "UpdateDate": "2020-04-23T19:30:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeSubnets",
          "ec2:RequestSpotInstances",
          "ec2:TerminateInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:CreateTags",
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:RegisterTargets"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:*/*"
        ]
      }
    ]
  },
  "AmazonElasticsearchServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonElasticsearchServiceRolePolicy",
      "PolicyId": "ANPAJFEWZPHXKLCVHEUIC",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonElasticsearchServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow Amazon Elasticsearch Service to access other AWS services such as EC2 Networking APIs on your behalf.",
      "CreateDate": "2017-07-07T00:15:31.000Z",
      "UpdateDate": "2023-10-23T06:58:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "Stmt1480452973134",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "elasticloadbalancing:AddListenerCertificates",
          "elasticloadbalancing:RemoveListenerCertificates"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973135",
        "Effect": "Allow",
        "Action": [
          "acm:DescribeCertificate"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973136",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973198",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint",
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "Stmt1480452973199",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "Stmt1480452973200",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint",
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "Stmt1480452973201",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973149",
        "Effect": "Allow",
        "Action": [
          "ec2:AssignIpv6Addresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "Stmt1480452973150",
        "Effect": "Allow",
        "Action": [
          "ec2:UnAssignIpv6Addresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "Stmt1480452973202",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      }
    ]
  },
  "AmazonVPCCrossAccountNetworkInterfaceOperations": {
    "policy": {
      "PolicyName": "AmazonVPCCrossAccountNetworkInterfaceOperations",
      "PolicyId": "ANPAJ53Y4ZY5OHP4CNRJC",
      "Arn": "arn:aws:iam::aws:policy/AmazonVPCCrossAccountNetworkInterfaceOperations",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to create network interfaces and attach them to cross-account resources",
      "CreateDate": "2017-07-18T20:47:16.000Z",
      "UpdateDate": "2023-09-25T15:12:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeRouteTables",
          "ec2:CreateRoute",
          "ec2:DeleteRoute",
          "ec2:ReplaceRoute"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DescribeNetworkInterfacePermissions",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeRegions",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AssignPrivateIpAddresses",
          "ec2:UnassignPrivateIpAddresses"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AssignIpv6Addresses",
          "ec2:UnassignIpv6Addresses"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSSMAutomationApproverAccess": {
    "policy": {
      "PolicyName": "AmazonSSMAutomationApproverAccess",
      "PolicyId": "ANPAIDSSXIRWBSLWWIORC",
      "Arn": "arn:aws:iam::aws:policy/AmazonSSMAutomationApproverAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to view automation executions and send approval decisions to automation waiting for approval",
      "CreateDate": "2017-08-07T23:07:28.000Z",
      "UpdateDate": "2017-08-07T23:07:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeAutomationExecutions",
          "ssm:GetAutomationExecution",
          "ssm:SendAutomationSignal"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMigrationHubDiscoveryAccess": {
    "policy": {
      "PolicyName": "AWSMigrationHubDiscoveryAccess",
      "PolicyId": "ANPAITRMRLSV7JAL6YIGG",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSMigrationHubDiscoveryAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy allows AWSMigrationHubService to call AWSApplicationDiscoveryService on behalf of the customer.",
      "CreateDate": "2017-08-14T13:30:51.000Z",
      "UpdateDate": "2020-08-06T17:34:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "discovery:ListConfigurations",
          "discovery:DescribeConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dms:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:dms:*:*:endpoint:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstanceAttribute"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGlueServiceRole": {
    "policy": {
      "PolicyName": "AWSGlueServiceRole",
      "PolicyId": "ANPAIRUJCPEBPMEZFAS32",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 2,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for AWS Glue service role which allows access to related services including EC2, S3, and Cloudwatch Logs",
      "CreateDate": "2017-08-14T13:37:21.000Z",
      "UpdateDate": "2023-09-11T16:39:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "glue:*",
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketAcl",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeRouteTables",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "iam:ListRolePolicies",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*/*",
          "arn:aws:s3:::*/*aws-glue-*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::crawler-public*",
          "arn:aws:s3:::aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:*:/aws-glue/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AWSGlueConsoleFullAccess": {
    "policy": {
      "PolicyName": "AWSGlueConsoleFullAccess",
      "PolicyId": "ANPAJNZGDEOD7MISOVSVI",
      "Arn": "arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v14",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Glue via the AWS Management Console",
      "CreateDate": "2017-08-14T13:37:39.000Z",
      "UpdateDate": "2023-07-14T14:37:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "BaseAppPermissions",
        "Effect": "Allow",
        "Action": [
          "glue:*",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSubnetGroups",
          "iam:ListRoles",
          "iam:ListUsers",
          "iam:ListGroups",
          "iam:ListRolePolicies",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:ListAttachedRolePolicies",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeRouteTables",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeInstances",
          "ec2:DescribeImages",
          "rds:DescribeDBInstances",
          "rds:DescribeDBClusters",
          "rds:DescribeDBSubnetGroups",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "cloudformation:ListStacks",
          "cloudformation:DescribeStacks",
          "cloudformation:GetTemplateSummary",
          "dynamodb:ListTables",
          "kms:ListAliases",
          "kms:DescribeKey",
          "cloudwatch:GetMetricData",
          "cloudwatch:ListDashboards",
          "databrew:ListRecipes",
          "databrew:ListRecipeVersions",
          "databrew:DescribeRecipe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*/*",
          "arn:aws:s3:::*/*aws-glue-*/*",
          "arn:aws:s3:::aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:GetLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:/aws-glue/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/aws-glue*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:key-pair/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances",
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/AWSGlueServiceRole*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
        ]
      }
    ]
  },
  "AWSGlueServiceNotebookRole": {
    "policy": {
      "PolicyName": "AWSGlueServiceNotebookRole",
      "PolicyId": "ANPAIMRC6VZUHJYCTKWFI",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSGlueServiceNotebookRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for AWS Glue service role which allows customer to manage notebook server",
      "CreateDate": "2017-08-14T13:37:42.000Z",
      "UpdateDate": "2023-10-09T15:59:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateDatabase",
          "glue:CreatePartition",
          "glue:CreateTable",
          "glue:DeleteDatabase",
          "glue:DeletePartition",
          "glue:DeleteTable",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:GetTable",
          "glue:GetTableVersions",
          "glue:GetTables",
          "glue:UpdateDatabase",
          "glue:UpdatePartition",
          "glue:UpdateTable",
          "glue:CreateConnection",
          "glue:CreateJob",
          "glue:DeleteConnection",
          "glue:DeleteJob",
          "glue:GetConnection",
          "glue:GetConnections",
          "glue:GetDevEndpoint",
          "glue:GetDevEndpoints",
          "glue:GetJob",
          "glue:GetJobs",
          "glue:UpdateJob",
          "glue:BatchDeleteConnection",
          "glue:UpdateConnection",
          "glue:GetUserDefinedFunction",
          "glue:UpdateUserDefinedFunction",
          "glue:GetUserDefinedFunctions",
          "glue:DeleteUserDefinedFunction",
          "glue:CreateUserDefinedFunction",
          "glue:BatchGetPartition",
          "glue:BatchDeletePartition",
          "glue:BatchCreatePartition",
          "glue:BatchDeleteTable",
          "glue:UpdateDevEndpoint",
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketAcl",
          "codewhisperer:GenerateRecommendations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::crawler-public*",
          "arn:aws:s3:::aws-glue*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:DeleteObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AWSMigrationHubSMSAccess": {
    "policy": {
      "PolicyName": "AWSMigrationHubSMSAccess",
      "PolicyId": "ANPAIWQYYT6TSVIRJO4TY",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSMigrationHubSMSAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for Server Migration Service to assume role in customer's account to call Migration Hub",
      "CreateDate": "2017-08-14T13:57:54.000Z",
      "UpdateDate": "2019-10-07T18:01:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "mgh:CreateProgressUpdateStream"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:mgh:*:*:progressUpdateStream/SMS"
        ]
      },
      {
        "Action": [
          "mgh:AssociateCreatedArtifact",
          "mgh:DescribeMigrationTask",
          "mgh:DisassociateCreatedArtifact",
          "mgh:ImportMigrationTask",
          "mgh:ListCreatedArtifacts",
          "mgh:NotifyMigrationTaskState",
          "mgh:PutResourceAttributes",
          "mgh:NotifyApplicationState",
          "mgh:DescribeApplicationState",
          "mgh:AssociateDiscoveredResource",
          "mgh:DisassociateDiscoveredResource",
          "mgh:ListDiscoveredResources"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:mgh:*:*:progressUpdateStream/SMS/*"
        ]
      },
      {
        "Action": [
          "mgh:ListMigrationTasks",
          "mgh:GetHomeRegion"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMigrationHubDMSAccess": {
    "policy": {
      "PolicyName": "AWSMigrationHubDMSAccess",
      "PolicyId": "ANPAIUQB56VA4JHLN7G2W",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSMigrationHubDMSAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for Database Migration Service to assume role in customer's account to call Migration Hub",
      "CreateDate": "2017-08-14T14:00:06.000Z",
      "UpdateDate": "2019-10-07T17:51:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "mgh:CreateProgressUpdateStream"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:mgh:*:*:progressUpdateStream/DMS"
        ]
      },
      {
        "Action": [
          "mgh:AssociateCreatedArtifact",
          "mgh:DescribeMigrationTask",
          "mgh:DisassociateCreatedArtifact",
          "mgh:ImportMigrationTask",
          "mgh:ListCreatedArtifacts",
          "mgh:NotifyMigrationTaskState",
          "mgh:PutResourceAttributes",
          "mgh:NotifyApplicationState",
          "mgh:DescribeApplicationState",
          "mgh:AssociateDiscoveredResource",
          "mgh:DisassociateDiscoveredResource",
          "mgh:ListDiscoveredResources"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:mgh:*:*:progressUpdateStream/DMS/*"
        ]
      },
      {
        "Action": [
          "mgh:ListMigrationTasks",
          "mgh:GetHomeRegion"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMigrationHubFullAccess": {
    "policy": {
      "PolicyName": "AWSMigrationHubFullAccess",
      "PolicyId": "ANPAJ4A2SZKHUYHDYIGOK",
      "Arn": "arn:aws:iam::aws:policy/AWSMigrationHubFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Managed policy to provide the customer access to the Migration Hub Service",
      "CreateDate": "2017-08-14T14:02:54.000Z",
      "UpdateDate": "2019-06-19T21:14:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "mgh:*",
          "discovery:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:GetRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMacieServiceRole": {
    "policy": {
      "PolicyName": "AmazonMacieServiceRole",
      "PolicyId": "ANPAJVV7PON3FPBL2PSGC",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonMacieServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants Macie read-only access to resource dependencies in your account in order to enable data analysis.",
      "CreateDate": "2017-08-14T14:53:26.000Z",
      "UpdateDate": "2017-08-14T14:53:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "s3:Get*",
          "s3:List*"
        ]
      }
    ]
  },
  "AmazonMacieFullAccess": {
    "policy": {
      "PolicyName": "AmazonMacieFullAccess",
      "PolicyId": "ANPAJJF2N5FR6S5TZN5OA",
      "Arn": "arn:aws:iam::aws:policy/AmazonMacieFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Macie.",
      "CreateDate": "2017-08-14T14:54:30.000Z",
      "UpdateDate": "2022-07-01T00:41:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "macie2:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/macie.amazonaws.com/AWSServiceRoleForAmazonMacie"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "pricing:GetProducts"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkServiceRolePolicy",
      "PolicyId": "ANPAIID62QSI3OSIPQXTM",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSElasticBeanstalkServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS Elastic Beanstalk Service Linked Role policy which grants permissions to create & manage resources (i.e.: AutoScaling, EC2, S3, CloudFormation, ELB, etc.) on your behalf.",
      "CreateDate": "2017-09-13T23:46:37.000Z",
      "UpdateDate": "2019-06-06T21:59:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStackResources",
          "cloudformation:DescribeStacks"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awseb-*",
          "arn:aws:cloudformation:*:*:stack/eb-*"
        ]
      },
      {
        "Sid": "AllowOperations",
        "Effect": "Allow",
        "Action": [
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeNotificationConfigurations",
          "autoscaling:DescribeScalingActivities",
          "autoscaling:PutNotificationConfiguration",
          "ec2:DescribeInstanceStatus",
          "ec2:AssociateAddress",
          "ec2:DescribeAddresses",
          "ec2:DescribeInstances",
          "ec2:DescribeSecurityGroups",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticloadbalancing:DescribeTargetGroups",
          "lambda:GetFunction",
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowOperationsOnHealthStreamingLogs",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:DeleteLogGroup",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        ]
      }
    ]
  },
  "AWSEC2SpotServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSEC2SpotServiceRolePolicy",
      "PolicyId": "ANPAIZJJBQNXQYVKTEXGM",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSEC2SpotServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows EC2 Spot to launch and manage spot instances",
      "CreateDate": "2017-09-18T18:51:54.000Z",
      "UpdateDate": "2018-12-12T00:13:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRedshiftServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AmazonRedshiftServiceLinkedRolePolicy",
      "PolicyId": "ANPAJPY2VXNRUYOY3SRZS",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonRedshiftServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v13",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Redshift to call AWS services on your behalf",
      "CreateDate": "2017-09-18T19:19:45.000Z",
      "UpdateDate": "2024-03-15T20:00:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "Ec2VpcPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:CreateVpcEndpoint",
          "ec2:DeleteVpcEndpoints",
          "ec2:DescribeVpcEndpoints",
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PublicAccessCreateEip",
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:elastic-ip/*"
        ]
      },
      {
        "Sid": "PublicAccessReleaseEip",
        "Effect": "Allow",
        "Action": [
          "ec2:ReleaseAddress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:elastic-ip/*"
        ]
      },
      {
        "Sid": "EnableCreationAndManagementOfRedshiftCloudwatchLogGroups",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/redshift/*"
        ]
      },
      {
        "Sid": "EnableCreationAndManagementOfRedshiftCloudwatchLogStreams",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/redshift/*:log-stream:*"
        ]
      },
      {
        "Sid": "CreateSecurityGroupWithTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "SecurityGroupPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:ModifySecurityGroupRules",
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "CreateSecurityGroup",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "CreateTagsOnResources",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:route-table/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:internet-gateway/*",
          "arn:aws:ec2:*:*:elastic-ip/*"
        ]
      },
      {
        "Sid": "VPCPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSecurityGroupRules",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeRouteTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretManager",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DescribeSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:PutSecretValue",
          "secretsmanager:UpdateSecret",
          "secretsmanager:UpdateSecretVersionStage",
          "secretsmanager:RotateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:redshift!*"
        ]
      },
      {
        "Sid": "SecretsManagerRandomPassword",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetRandomPassword"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IPV6Permissions",
        "Effect": "Allow",
        "Action": [
          "ec2:AssignIpv6Addresses",
          "ec2:UnassignIpv6Addresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "ServiceQuotasToCheckCustomerLimits",
        "Effect": "Allow",
        "Action": [
          "servicequotas:GetServiceQuota"
        ],
        "Resource": [
          "arn:aws:servicequotas:*:*:ec2/L-0263D0A3",
          "arn:aws:servicequotas:*:*:vpc/L-29B6F2EB"
        ]
      }
    ]
  },
  "AWSElasticLoadBalancingServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSElasticLoadBalancingServiceRolePolicy",
      "PolicyId": "ANPAIMHWGGSRHLOQUICJQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSElasticLoadBalancingServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Linked Role Policy for AWS Elastic Load Balancing Control Plane",
      "CreateDate": "2017-09-19T22:19:04.000Z",
      "UpdateDate": "2021-08-26T19:01:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAddresses",
          "ec2:DescribeCoipPools",
          "ec2:DescribeInstances",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcs",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeClassicLinkInstances",
          "ec2:DescribeVpcClassicLink",
          "ec2:CreateSecurityGroup",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:GetCoipPoolUsage",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:AllocateAddress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:AttachNetworkInterface",
          "ec2:DetachNetworkInterface",
          "ec2:AssignPrivateIpAddresses",
          "ec2:AssignIpv6Addresses",
          "ec2:ReleaseAddress",
          "ec2:UnassignIpv6Addresses",
          "ec2:DescribeVpcPeeringConnections",
          "logs:CreateLogDelivery",
          "logs:GetLogDelivery",
          "logs:UpdateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:ListLogDeliveries",
          "outposts:GetOutpostInstanceTypes"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticLoadBalancingClassicServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSElasticLoadBalancingClassicServiceRolePolicy",
      "PolicyId": "ANPAIUMWW3QP7DPZPNVU4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSElasticLoadBalancingClassicServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Linked Role Policy for AWS Elastic Load Balancing Control Plane - Classic",
      "CreateDate": "2017-09-19T22:36:18.000Z",
      "UpdateDate": "2019-10-07T23:04:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAddresses",
          "ec2:DescribeInstances",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcs",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeClassicLinkInstances",
          "ec2:DescribeVpcClassicLink",
          "ec2:CreateSecurityGroup",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:AttachNetworkInterface",
          "ec2:DetachNetworkInterface",
          "ec2:AssignPrivateIpAddresses",
          "ec2:AssignIpv6Addresses",
          "ec2:UnassignIpv6Addresses"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSEnhancedClassicNetworkingMangementPolicy": {
    "policy": {
      "PolicyName": "AWSEnhancedClassicNetworkingMangementPolicy",
      "PolicyId": "ANPAI7T4V2HZTS72QVO52",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSEnhancedClassicNetworkingMangementPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable enhanced classic networking management feature.",
      "CreateDate": "2017-09-20T17:29:09.000Z",
      "UpdateDate": "2017-09-20T17:29:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeSecurityGroups"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEMRCleanupPolicy": {
    "policy": {
      "PolicyName": "AmazonEMRCleanupPolicy",
      "PolicyId": "ANPAI4YEZURRMKACW56EA",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonEMRCleanupPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the actions that EMR requires to terminate and delete AWS EC2 resources if the EMR Service role has lost that ability.",
      "CreateDate": "2017-09-26T23:54:19.000Z",
      "UpdateDate": "2020-09-29T21:11:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DeleteLaunchTemplate",
          "ec2:ModifyInstanceAttribute",
          "ec2:TerminateInstances",
          "ec2:CancelSpotInstanceRequests",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeVolumeStatus",
          "ec2:DescribeVolumes",
          "ec2:DetachVolume",
          "ec2:DeleteVolume",
          "ec2:DescribePlacementGroups",
          "ec2:DeletePlacementGroup"
        ]
      }
    ]
  },
  "LexChannelPolicy": {
    "policy": {
      "PolicyName": "LexChannelPolicy",
      "PolicyId": "ANPAJKYEISPO63JTBJWPY",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/LexChannelPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for AWS Lex Channel use case",
      "CreateDate": "2017-02-17T23:23:24.000Z",
      "UpdateDate": "2017-02-17T23:23:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "lex:PostText"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "LexBotPolicy": {
    "policy": {
      "PolicyName": "LexBotPolicy",
      "PolicyId": "ANPAJJ3NZRBBQKSESXXJC",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/LexBotPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for AWS Lex Bot use case",
      "CreateDate": "2017-02-17T22:18:13.000Z",
      "UpdateDate": "2019-11-13T22:29:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "polly:SynthesizeSpeech"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "comprehend:DetectSentiment"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambdaReplicator": {
    "policy": {
      "PolicyName": "AWSLambdaReplicator",
      "PolicyId": "ANPAIIQFXZNNLL3E2HKTG",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSLambdaReplicator",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants Lambda Replicator necessary permissions to replicate functions across regions",
      "CreateDate": "2017-05-23T17:53:03.000Z",
      "UpdateDate": "2017-12-08T00:17:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "LambdaCreateDeletePermission",
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction",
          "lambda:DeleteFunction",
          "lambda:DisableReplication"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*"
        ]
      },
      {
        "Sid": "IamPassRolePermission",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudFrontListDistributions",
        "Effect": "Allow",
        "Action": [
          "cloudfront:ListDistributionsByLambdaFunction"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSOrganizationsServiceTrustPolicy": {
    "policy": {
      "PolicyName": "AWSOrganizationsServiceTrustPolicy",
      "PolicyId": "ANPAIQH6ROMVVECFVRJPK",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSOrganizationsServiceTrustPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "A policy to allow AWS Organizations to share trust with other approved AWS Services for the purpose of simplifying customer configuration.",
      "CreateDate": "2017-10-10T23:04:07.000Z",
      "UpdateDate": "2017-11-01T06:01:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
        ]
      },
      {
        "Sid": "AllowCreationOfServiceLinkedRoles",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonECSServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonECSServiceRolePolicy",
      "PolicyId": "ANPAIVUWKCAI7URU4WUEI",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonECSServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable Amazon ECS to manage your cluster.",
      "CreateDate": "2017-10-14T01:18:58.000Z",
      "UpdateDate": "2023-12-04T19:32:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ECSTaskManagement",
        "Effect": "Allow",
        "Action": [
          "ec2:AttachNetworkInterface",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:Describe*",
          "ec2:DetachNetworkInterface",
          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
          "elasticloadbalancing:DeregisterTargets",
          "elasticloadbalancing:Describe*",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
          "elasticloadbalancing:RegisterTargets",
          "route53:ChangeResourceRecordSets",
          "route53:CreateHealthCheck",
          "route53:DeleteHealthCheck",
          "route53:Get*",
          "route53:List*",
          "route53:UpdateHealthCheck",
          "servicediscovery:DeregisterInstance",
          "servicediscovery:Get*",
          "servicediscovery:List*",
          "servicediscovery:RegisterInstance",
          "servicediscovery:UpdateInstanceCustomHealthStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AutoScaling",
        "Effect": "Allow",
        "Action": [
          "autoscaling:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AutoScalingManagement",
        "Effect": "Allow",
        "Action": [
          "autoscaling:DeletePolicy",
          "autoscaling:PutScalingPolicy",
          "autoscaling:SetInstanceProtection",
          "autoscaling:UpdateAutoScalingGroup",
          "autoscaling:PutLifecycleHook",
          "autoscaling:DeleteLifecycleHook",
          "autoscaling:CompleteLifecycleAction",
          "autoscaling:RecordLifecycleActionHeartbeat"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AutoScalingPlanManagement",
        "Effect": "Allow",
        "Action": [
          "autoscaling-plans:CreateScalingPlan",
          "autoscaling-plans:DeleteScalingPlan",
          "autoscaling-plans:DescribeScalingPlans",
          "autoscaling-plans:DescribeScalingPlanResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EventBridge",
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/ecs-managed-*"
        ]
      },
      {
        "Sid": "EventBridgeRuleManagement",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CWAlarmManagement",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:PutMetricAlarm"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:*"
        ]
      },
      {
        "Sid": "ECSTagging",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "CWLogGroupManagement",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/ecs/*"
        ]
      },
      {
        "Sid": "CWLogStreamManagement",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/ecs/*:log-stream:*"
        ]
      },
      {
        "Sid": "ExecuteCommandSessionManagement",
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeSessions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ExecuteCommand",
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:task/*",
          "arn:aws:ssm:*:*:document/AmazonECS-ExecuteInteractiveCommand"
        ]
      },
      {
        "Sid": "CloudMapResourceCreation",
        "Effect": "Allow",
        "Action": [
          "servicediscovery:CreateHttpNamespace",
          "servicediscovery:CreateService"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudMapResourceTagging",
        "Effect": "Allow",
        "Action": [
          "servicediscovery:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudMapResourceDeletion",
        "Effect": "Allow",
        "Action": [
          "servicediscovery:DeleteService"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudMapResourceDiscovery",
        "Effect": "Allow",
        "Action": [
          "servicediscovery:DiscoverInstances",
          "servicediscovery:DiscoverInstancesRevision"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRoleForEC2ScheduledInstances": {
    "policy": {
      "PolicyName": "AWSServiceRoleForEC2ScheduledInstances",
      "PolicyId": "ANPAJ7Y4TT63D6QBKCY4O",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForEC2ScheduledInstances",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows EC2 Scheduled Instances to launch and manage spot instances.",
      "CreateDate": "2017-10-12T18:31:55.000Z",
      "UpdateDate": "2017-10-12T18:31:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingRDSClusterPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingRDSClusterPolicy",
      "PolicyId": "ANPAJ7XS52I27Q2JVKALU",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingRDSClusterPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access RDS and CloudWatch.",
      "CreateDate": "2017-10-17T17:46:56.000Z",
      "UpdateDate": "2018-08-07T19:14:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rds:AddTagsToResource",
          "rds:CreateDBInstance",
          "rds:DeleteDBInstance",
          "rds:DescribeDBClusters",
          "rds:DescribeDBInstances",
          "rds:ModifyDBCluster",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "APIGatewayServiceRolePolicy": {
    "policy": {
      "PolicyName": "APIGatewayServiceRolePolicy",
      "PolicyId": "ANPAJQQDZNLDBF2ULTWK6",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/APIGatewayServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows API Gateway to manage associated AWS Resources on behalf of the customer. ",
      "CreateDate": "2017-10-20T17:23:10.000Z",
      "UpdateDate": "2021-07-12T22:24:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddListenerCertificates",
          "elasticloadbalancing:RemoveListenerCertificates",
          "elasticloadbalancing:ModifyListener",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancers",
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:GetSamplingTargets",
          "xray:GetSamplingRules",
          "logs:CreateLogDelivery",
          "logs:GetLogDelivery",
          "logs:UpdateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:ListLogDeliveries",
          "servicediscovery:DiscoverInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "firehose:DescribeDeliveryStream",
          "firehose:PutRecord",
          "firehose:PutRecordBatch"
        ],
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/amazon-apigateway-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm:DescribeCertificate",
          "acm:GetCertificate"
        ],
        "Resource": [
          "arn:aws:acm:*:*:certificate/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterfacePermission"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DeleteNetworkInterface",
          "ec2:AssignPrivateIpAddresses",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeVpcs",
          "ec2:DescribeNetworkInterfacePermissions",
          "ec2:UnassignPrivateIpAddresses",
          "ec2:DescribeSubnets",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicediscovery:GetNamespace"
        ],
        "Resource": [
          "arn:aws:servicediscovery:*:*:namespace/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicediscovery:GetService"
        ],
        "Resource": [
          "arn:aws:servicediscovery:*:*:service/*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingAppStreamFleetPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingAppStreamFleetPolicy",
      "PolicyId": "ANPAIRI724OWKP56ZG62M",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingAppStreamFleetPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access AppStream and CloudWatch.",
      "CreateDate": "2017-10-20T19:04:06.000Z",
      "UpdateDate": "2017-10-20T19:04:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appstream:UpdateFleet",
          "appstream:DescribeFleets",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingDynamoDBTablePolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingDynamoDBTablePolicy",
      "PolicyId": "ANPAJOVQMDI3JFCBW4LFO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingDynamoDBTablePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access DynamoDB and CloudWatch.",
      "CreateDate": "2017-10-20T21:34:57.000Z",
      "UpdateDate": "2017-10-20T21:34:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:DescribeTable",
          "dynamodb:UpdateTable",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSEC2SpotFleetServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSEC2SpotFleetServiceRolePolicy",
      "PolicyId": "ANPAILWCVTZD57EMYWMBO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSEC2SpotFleetServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows EC2 Spot Fleet to launch and manage spot fleet instances",
      "CreateDate": "2017-10-23T19:13:06.000Z",
      "UpdateDate": "2020-03-16T19:16:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeSubnets",
          "ec2:RequestSpotInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:spot-instances-request/*",
          "arn:aws:ec2:*:*:spot-fleet-request/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:RegisterTargets"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:*/*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingEC2SpotFleetRequestPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingEC2SpotFleetRequestPolicy",
      "PolicyId": "ANPAJNRH3VE3WW4Q4RDTU",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingEC2SpotFleetRequestPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access EC2 Spot Fleet and CloudWatch.",
      "CreateDate": "2017-10-25T18:23:27.000Z",
      "UpdateDate": "2017-10-25T18:23:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSpotFleetRequests",
          "ec2:ModifySpotFleetRequest",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingECSServicePolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingECSServicePolicy",
      "PolicyId": "ANPAJFXLLV7AKH5PSFOYG",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingECSServicePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access EC2 Container Service and CloudWatch.",
      "CreateDate": "2017-10-25T23:53:08.000Z",
      "UpdateDate": "2017-10-25T23:53:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecs:DescribeServices",
          "ecs:UpdateService",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingEMRInstanceGroupPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingEMRInstanceGroupPolicy",
      "PolicyId": "ANPAIQ6M5Z7LQY2YSG2JS",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingEMRInstanceGroupPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access Elastic Map Reduce and CloudWatch.",
      "CreateDate": "2017-10-26T00:57:39.000Z",
      "UpdateDate": "2017-10-26T00:57:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ModifyInstanceGroups",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonChimeReadOnly": {
    "policy": {
      "PolicyName": "AmazonChimeReadOnly",
      "PolicyId": "ANPAJLBFZZFABRXVWRTCI",
      "Arn": "arn:aws:iam::aws:policy/AmazonChimeReadOnly",
      "Path": "/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Chime Admin Console via the AWS Management Console.",
      "CreateDate": "2017-11-01T22:04:17.000Z",
      "UpdateDate": "2020-12-14T20:53:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "chime:List*",
          "chime:Get*",
          "chime:Describe*",
          "chime:SearchAvailablePhoneNumbers"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonChimeFullAccess": {
    "policy": {
      "PolicyName": "AmazonChimeFullAccess",
      "PolicyId": "ANPAIUJFSAKUERNORYRWO",
      "Arn": "arn:aws:iam::aws:policy/AmazonChimeFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Chime Admin Console via the AWS Management Console.",
      "CreateDate": "2017-11-01T22:15:43.000Z",
      "UpdateDate": "2020-12-14T21:00:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "chime:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "s3:GetBucketLogging",
          "s3:GetBucketVersioning",
          "s3:GetBucketWebsite"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "logs:CreateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:GetLogDelivery",
          "logs:ListLogDeliveries",
          "logs:DescribeResourcePolicies",
          "logs:PutResourcePolicy",
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:GetTopicAttributes"
        ],
        "Resource": [
          "arn:aws:sns:*:*:ChimeVoiceConnector-Streaming*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:GetQueueAttributes",
          "sqs:CreateQueue"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:ChimeVoiceConnector-Streaming*"
        ]
      },
      {
        "Action": [
          "kinesis:ListStreams"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:DescribeStream"
        ],
        "Resource": [
          "arn:aws:kinesis:*:*:stream/chime-chat-*",
          "arn:aws:kinesis:*:*:stream/chime-messaging-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetEncryptionConfiguration",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::chime-chat-*"
        ]
      }
    ]
  },
  "AmazonChimeUserManagement": {
    "policy": {
      "PolicyName": "AmazonChimeUserManagement",
      "PolicyId": "ANPAJGLHVUHNMQPSDGSOO",
      "Arn": "arn:aws:iam::aws:policy/AmazonChimeUserManagement",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides user management access to Amazon Chime Admin Console via the AWS Management Console.",
      "CreateDate": "2017-11-01T22:17:26.000Z",
      "UpdateDate": "2020-02-18T19:26:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "chime:ListAccounts",
          "chime:GetAccount",
          "chime:GetAccountSettings",
          "chime:UpdateAccountSettings",
          "chime:ListUsers",
          "chime:GetUser",
          "chime:GetUserByEmail",
          "chime:InviteUsers",
          "chime:InviteUsersFromProvider",
          "chime:SuspendUsers",
          "chime:ActivateUsers",
          "chime:UpdateUserLicenses",
          "chime:ResetPersonalPIN",
          "chime:LogoutUser",
          "chime:ListDomains",
          "chime:GetDomain",
          "chime:ListDirectories",
          "chime:ListGroups",
          "chime:SubmitSupportRequest",
          "chime:ListDelegates",
          "chime:ListAccountUsageReportData",
          "chime:GetMeetingDetail",
          "chime:ListMeetingEvents",
          "chime:ListMeetingsReportData",
          "chime:GetUserActivityReportData",
          "chime:UpdateUser",
          "chime:BatchUpdateUser",
          "chime:BatchSuspendUser",
          "chime:BatchUnsuspendUser",
          "chime:AssociatePhoneNumberWithUser",
          "chime:DisassociatePhoneNumberFromUser",
          "chime:GetPhoneNumber",
          "chime:ListPhoneNumbers",
          "chime:GetUserSettings",
          "chime:UpdateUserSettings",
          "chime:CreateUser",
          "chime:AssociateSigninDelegateGroupsWithAccount",
          "chime:DisassociateSigninDelegateGroupsFromAccount"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudHSMServiceRolePolicy": {
    "policy": {
      "PolicyName": "CloudHSMServiceRolePolicy",
      "PolicyId": "ANPAJILYY7JP6JLMQG56I",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudHSMServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS resources used or managed by CloudHSM",
      "CreateDate": "2017-11-06T19:12:46.000Z",
      "UpdateDate": "2017-11-06T19:12:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:*"
        ]
      }
    ]
  },
  "AmazonECS_FullAccess": {
    "policy": {
      "PolicyName": "AmazonECS_FullAccess",
      "PolicyId": "ANPAJ7S7AN6YQPTJC7IFS",
      "Arn": "arn:aws:iam::aws:policy/AmazonECS_FullAccess",
      "Path": "/",
      "DefaultVersionId": "v20",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrative access to Amazon ECS resources and enables ECS features through access to other AWS service resources, including VPCs, Auto Scaling groups, and CloudFormation stacks.",
      "CreateDate": "2017-11-07T21:36:54.000Z",
      "UpdateDate": "2023-01-04T16:26:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:RegisterScalableTarget",
          "appmesh:DescribeVirtualGateway",
          "appmesh:DescribeVirtualNode",
          "appmesh:ListMeshes",
          "appmesh:ListVirtualGateways",
          "appmesh:ListVirtualNodes",
          "autoscaling:CreateAutoScalingGroup",
          "autoscaling:CreateLaunchConfiguration",
          "autoscaling:DeleteAutoScalingGroup",
          "autoscaling:DeleteLaunchConfiguration",
          "autoscaling:Describe*",
          "autoscaling:UpdateAutoScalingGroup",
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStack*",
          "cloudformation:UpdateStack",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:PutMetricAlarm",
          "codedeploy:BatchGetApplicationRevisions",
          "codedeploy:BatchGetApplications",
          "codedeploy:BatchGetDeploymentGroups",
          "codedeploy:BatchGetDeployments",
          "codedeploy:ContinueDeployment",
          "codedeploy:CreateApplication",
          "codedeploy:CreateDeployment",
          "codedeploy:CreateDeploymentGroup",
          "codedeploy:GetApplication",
          "codedeploy:GetApplicationRevision",
          "codedeploy:GetDeployment",
          "codedeploy:GetDeploymentConfig",
          "codedeploy:GetDeploymentGroup",
          "codedeploy:GetDeploymentTarget",
          "codedeploy:ListApplicationRevisions",
          "codedeploy:ListApplications",
          "codedeploy:ListDeploymentConfigs",
          "codedeploy:ListDeploymentGroups",
          "codedeploy:ListDeployments",
          "codedeploy:ListDeploymentTargets",
          "codedeploy:RegisterApplicationRevision",
          "codedeploy:StopDeployment",
          "ec2:AssociateRouteTable",
          "ec2:AttachInternetGateway",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CancelSpotFleetRequests",
          "ec2:CreateInternetGateway",
          "ec2:CreateLaunchTemplate",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSubnet",
          "ec2:CreateVpc",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteSubnet",
          "ec2:DeleteVpc",
          "ec2:Describe*",
          "ec2:DetachInternetGateway",
          "ec2:DisassociateRouteTable",
          "ec2:ModifySubnetAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:RequestSpotFleet",
          "ec2:RunInstances",
          "ecs:*",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeFileSystems",
          "elasticloadbalancing:CreateListener",
          "elasticloadbalancing:CreateLoadBalancer",
          "elasticloadbalancing:CreateRule",
          "elasticloadbalancing:CreateTargetGroup",
          "elasticloadbalancing:DeleteListener",
          "elasticloadbalancing:DeleteLoadBalancer",
          "elasticloadbalancing:DeleteRule",
          "elasticloadbalancing:DeleteTargetGroup",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTargetGroups",
          "events:DeleteRule",
          "events:DescribeRule",
          "events:ListRuleNamesByTarget",
          "events:ListTargetsByRule",
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets",
          "fsx:DescribeFileSystems",
          "iam:ListAttachedRolePolicies",
          "iam:ListInstanceProfiles",
          "iam:ListRoles",
          "lambda:ListFunctions",
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups",
          "logs:FilterLogEvents",
          "route53:CreateHostedZone",
          "route53:DeleteHostedZone",
          "route53:GetHealthCheck",
          "route53:GetHostedZone",
          "route53:ListHostedZonesByName",
          "servicediscovery:CreatePrivateDnsNamespace",
          "servicediscovery:CreateService",
          "servicediscovery:DeleteService",
          "servicediscovery:GetNamespace",
          "servicediscovery:GetOperation",
          "servicediscovery:GetService",
          "servicediscovery:ListNamespaces",
          "servicediscovery:ListServices",
          "servicediscovery:UpdateService",
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:GetParametersByPath"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/aws/service/ecs*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteInternetGateway",
          "ec2:DeleteRoute",
          "ec2:DeleteRouteTable",
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/ecsInstanceRole*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/ecsAutoscaleRole*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "DynamoDBReplicationServiceRolePolicy": {
    "policy": {
      "PolicyName": "DynamoDBReplicationServiceRolePolicy",
      "PolicyId": "ANPAJCUNRXL4BWASNJED2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/DynamoDBReplicationServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions required by DynamoDB for cross-region data replication",
      "CreateDate": "2017-11-09T23:55:34.000Z",
      "UpdateDate": "2024-01-08T20:10:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DynamoDBActionsNeededForSteadyStateReplication",
        "Effect": "Allow",
        "Action": [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem",
          "dynamodb:DescribeTable",
          "dynamodb:UpdateTable",
          "dynamodb:Scan",
          "dynamodb:DescribeStream",
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:DescribeTimeToLive",
          "dynamodb:UpdateTimeToLive",
          "dynamodb:DescribeLimits",
          "dynamodb:GetResourcePolicy",
          "application-autoscaling:RegisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:DescribeScalingPolicies",
          "account:ListRegions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DynamoDBReplicationServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSSMServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSSMServiceRolePolicy",
      "PolicyId": "ANPAIXJ26NUGBA3TCV7EC",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonSSMServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v14",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS Resources managed or used by Amazon SSM",
      "CreateDate": "2017-11-13T19:20:08.000Z",
      "UpdateDate": "2022-09-14T19:46:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:CancelCommand",
          "ssm:GetCommandInvocation",
          "ssm:ListCommandInvocations",
          "ssm:ListCommands",
          "ssm:SendCommand",
          "ssm:GetAutomationExecution",
          "ssm:GetParameters",
          "ssm:StartAutomationExecution",
          "ssm:StopAutomationExecution",
          "ssm:ListTagsForResource",
          "ssm:GetCalendarState"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:UpdateServiceSetting",
          "ssm:GetServiceSetting"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/*",
          "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:SSM*",
          "arn:aws:lambda:*:*:function:*:SSM*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "states:DescribeExecution",
          "states:StartExecution"
        ],
        "Resource": [
          "arn:aws:states:*:*:stateMachine:SSM*",
          "arn:aws:states:*:*:execution:SSM*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:ListGroups",
          "resource-groups:ListGroupResources",
          "resource-groups:GetGroupQuery"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:SelectResourceConfig"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "compute-optimizer:GetEC2InstanceRecommendations",
          "compute-optimizer:GetEnrollmentStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "support:DescribeTrustedAdvisorChecks",
          "support:DescribeTrustedAdvisorCheckSummaries",
          "support:DescribeTrustedAdvisorCheckResult",
          "support:DescribeCases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DescribeComplianceByConfigRule",
          "config:DescribeComplianceByResource",
          "config:DescribeRemediationConfigurations",
          "config:DescribeConfigurationRecorders"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:ListStackSets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:ListStackInstances",
          "cloudformation:DescribeStackSetOperation",
          "cloudformation:DeleteStackSet"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DeleteStackInstances"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*",
          "arn:aws:cloudformation:*:*:stackset-target/AWS-QuickSetup-SSM*:*",
          "arn:aws:cloudformation:*:*:type/resource/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:RemoveTargets",
          "events:DeleteRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/SSMExplorerManagedRule"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "securityhub:DescribeHub"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonECSTaskExecutionRolePolicy": {
    "policy": {
      "PolicyName": "AmazonECSTaskExecutionRolePolicy",
      "PolicyId": "ANPAJG4T4G4PV56DE72PY",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to other AWS service resources that are required to run Amazon ECS tasks",
      "CreateDate": "2017-11-16T18:48:22.000Z",
      "UpdateDate": "2017-11-16T18:48:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer",
          "ecr:BatchGetImage",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchEventsServiceRolePolicy": {
    "policy": {
      "PolicyName": "CloudWatchEventsServiceRolePolicy",
      "PolicyId": "ANPAJNVASSNSIDZIP4X7I",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudWatchEventsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow AWS CloudWatch to execute actions on your behalf configured through alarms and events.",
      "CreateDate": "2017-11-17T00:42:04.000Z",
      "UpdateDate": "2017-11-17T00:42:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstances",
          "ec2:DescribeSnapshots",
          "ec2:DescribeVolumeStatus",
          "ec2:DescribeVolumes",
          "ec2:RebootInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonInspectorServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonInspectorServiceRolePolicy",
      "PolicyId": "ANPAJKBMSBWLU2TGXHHUQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonInspectorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants Amazon Inspector access to AWS Services needed to perform security assessments",
      "CreateDate": "2017-11-21T15:48:27.000Z",
      "UpdateDate": "2020-09-11T17:12:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "directconnect:DescribeConnections",
          "directconnect:DescribeDirectConnectGateways",
          "directconnect:DescribeDirectConnectGatewayAssociations",
          "directconnect:DescribeDirectConnectGatewayAttachments",
          "directconnect:DescribeVirtualGateways",
          "directconnect:DescribeVirtualInterfaces",
          "directconnect:DescribeTags",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeInstances",
          "ec2:DescribeTags",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRegions",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:DescribeManagedPrefixLists",
          "ec2:GetManagedPrefixListEntries",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeTransitGatewayAttachments",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "ec2:DescribeTransitGatewayRouteTables",
          "ec2:SearchTransitGatewayRoutes",
          "ec2:DescribeTransitGatewayPeeringAttachments",
          "ec2:GetTransitGatewayRouteTablePropagations",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPriceListServiceFullAccess": {
    "policy": {
      "PolicyName": "AWSPriceListServiceFullAccess",
      "PolicyId": "ANPAIADJ4GBYNHKABML3Q",
      "Arn": "arn:aws:iam::aws:policy/AWSPriceListServiceFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Price List Service.",
      "CreateDate": "2017-11-22T00:36:27.000Z",
      "UpdateDate": "2017-11-22T00:36:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "pricing:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeDeployRoleForLambda": {
    "policy": {
      "PolicyName": "AWSCodeDeployRoleForLambda",
      "PolicyId": "ANPAJA3RQZIKNOSJ4ZQSA",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides CodeDeploy service access to perform a Lambda deployment on your behalf.",
      "CreateDate": "2017-11-28T14:05:44.000Z",
      "UpdateDate": "2019-12-03T19:53:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudwatch:DescribeAlarms",
          "lambda:UpdateAlias",
          "lambda:GetAlias",
          "lambda:GetProvisionedConcurrencyConfig",
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "arn:aws:s3:::*/CodeDeploy/*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:CodeDeployHook_*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonMQFullAccess": {
    "policy": {
      "PolicyName": "AmazonMQFullAccess",
      "PolicyId": "ANPAJLKBROJNQYDDXOOGG",
      "Arn": "arn:aws:iam::aws:policy/AmazonMQFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AmazonMQ via the AWS Management Console.",
      "CreateDate": "2017-11-28T15:28:29.000Z",
      "UpdateDate": "2020-11-04T16:34:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mq:*",
          "cloudformation:CreateStack",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DetachNetworkInterface",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfacePermissions",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:CreateSecurityGroup",
          "ec2:AuthorizeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMQReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMQReadOnlyAccess",
      "PolicyId": "ANPAJFH3NKGULDUU66D5C",
      "Arn": "arn:aws:iam::aws:policy/AmazonMQReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AmazonMQ via the AWS Management Console.",
      "CreateDate": "2017-11-28T15:30:32.000Z",
      "UpdateDate": "2017-11-28T19:02:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "mq:Describe*",
          "mq:List*",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonGuardDutyServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonGuardDutyServiceRolePolicy",
      "PolicyId": "ANPAIHZREZOWNSSA6FWQO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonGuardDutyServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enable access to AWS Resources used or managed by Amazon Guard Duty",
      "CreateDate": "2017-11-28T20:12:59.000Z",
      "UpdateDate": "2024-03-27T00:58:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "GuardDutyGetDescribeListPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeImages",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeTransitGatewayAttachments",
          "organizations:ListAccounts",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetEncryptionConfiguration",
          "s3:GetBucketTagging",
          "s3:GetAccountPublicAccessBlock",
          "s3:ListAllMyBuckets",
          "s3:GetBucketAcl",
          "s3:GetBucketPolicy",
          "s3:GetBucketPolicyStatus",
          "lambda:GetFunctionConfiguration",
          "lambda:ListTags",
          "eks:ListClusters",
          "eks:DescribeCluster",
          "ec2:DescribeVpcEndpointServices",
          "ec2:DescribeSecurityGroups",
          "ecs:ListClusters",
          "ecs:DescribeClusters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GuardDutyCreateSLRPolicy",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GuardDutyCreateVpcEndpointPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "GuardDutyModifyDeleteVpcEndpointPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint",
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "GuardDutyCreateModifyVpcEndpointNetworkPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint",
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Sid": "GuardDutyCreateTagsDuringVpcEndpointCreationPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "GuardDutySecurityGroupManagementPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "GuardDutyCreateSecurityGroupPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "GuardDutyCreateSecurityGroupForVpcPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "GuardDutyCreateTagsDuringSecurityGroupCreationPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "GuardDutyCreateEksAddonPolicy",
        "Effect": "Allow",
        "Action": [
          "eks:CreateAddon"
        ],
        "Resource": [
          "arn:aws:eks:*:*:cluster/*"
        ]
      },
      {
        "Sid": "GuardDutyEksAddonManagementPolicy",
        "Effect": "Allow",
        "Action": [
          "eks:DeleteAddon",
          "eks:UpdateAddon",
          "eks:DescribeAddon"
        ],
        "Resource": [
          "arn:aws:eks:*:*:addon/*/aws-guardduty-agent/*"
        ]
      },
      {
        "Sid": "GuardDutyEksClusterTagResourcePolicy",
        "Effect": "Allow",
        "Action": [
          "eks:TagResource"
        ],
        "Resource": [
          "arn:aws:eks:*:*:cluster/*"
        ]
      },
      {
        "Sid": "GuardDutyEcsPutAccountSettingsDefaultPolicy",
        "Effect": "Allow",
        "Action": [
          "ecs:PutAccountSettingDefault"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SsmCreateDescribeUpdateDeleteStartAssociationPermission",
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeAssociation",
          "ssm:DeleteAssociation",
          "ssm:UpdateAssociation",
          "ssm:CreateAssociation",
          "ssm:StartAssociationsOnce"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:association/*"
        ]
      },
      {
        "Sid": "SsmAddTagsToResourcePermission",
        "Effect": "Allow",
        "Action": [
          "ssm:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:association/*"
        ]
      },
      {
        "Sid": "SsmCreateUpdateAssociationInstanceDocumentPermission",
        "Effect": "Allow",
        "Action": [
          "ssm:CreateAssociation",
          "ssm:UpdateAssociation"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AmazonGuardDuty-ConfigureRuntimeMonitoringSsmPlugin"
        ]
      },
      {
        "Sid": "SsmSendCommandPermission",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ssm:*:*:document/AmazonGuardDuty-ConfigureRuntimeMonitoringSsmPlugin"
        ]
      },
      {
        "Sid": "SsmGetCommandStatus",
        "Effect": "Allow",
        "Action": [
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonGuardDutyReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonGuardDutyReadOnlyAccess",
      "PolicyId": "ANPAIVMCEDV336RWUSNHG",
      "Arn": "arn:aws:iam::aws:policy/AmazonGuardDutyReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon GuardDuty resources",
      "CreateDate": "2017-11-28T22:29:40.000Z",
      "UpdateDate": "2023-11-16T23:07:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "guardduty:Describe*",
          "guardduty:Get*",
          "guardduty:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListDelegatedAdministrators",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonGuardDutyFullAccess": {
    "policy": {
      "PolicyName": "AmazonGuardDutyFullAccess",
      "PolicyId": "ANPAIKUTKSN4KC63VDQUM",
      "Arn": "arn:aws:iam::aws:policy/AmazonGuardDutyFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to use Amazon GuardDuty.",
      "CreateDate": "2017-11-28T22:31:30.000Z",
      "UpdateDate": "2023-11-16T23:04:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonGuardDutyFullAccessSid1",
        "Effect": "Allow",
        "Action": [
          "guardduty:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateServiceLinkedRoleSid1",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ActionsForOrganizationsSid1",
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess",
          "organizations:RegisterDelegatedAdministrator",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IamGetRoleSid1",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*AWSServiceRoleForAmazonGuardDutyMalwareProtection"
        ]
      }
    ]
  },
  "AmazonSageMakerReadOnly": {
    "policy": {
      "PolicyName": "AmazonSageMakerReadOnly",
      "PolicyId": "ANPAJTZ2FTFCQ6CFLQA2O",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerReadOnly",
      "Path": "/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon SageMaker via the AWS Management Console and SDK.",
      "CreateDate": "2017-11-29T13:07:09.000Z",
      "UpdateDate": "2021-12-01T16:29:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:Describe*",
          "sagemaker:List*",
          "sagemaker:BatchGetMetrics",
          "sagemaker:GetDeviceRegistration",
          "sagemaker:GetDeviceFleetReport",
          "sagemaker:GetSearchSuggestions",
          "sagemaker:BatchGetRecord",
          "sagemaker:GetRecord",
          "sagemaker:Search",
          "sagemaker:QueryLineage",
          "sagemaker:GetLineageGroupPolicy",
          "sagemaker:BatchDescribeModelPackage",
          "sagemaker:GetModelPackageGroupPolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:DescribeScheduledActions",
          "aws-marketplace:ViewSubscriptions",
          "cloudwatch:DescribeAlarms",
          "cognito-idp:DescribeUserPool",
          "cognito-idp:DescribeUserPoolClient",
          "cognito-idp:ListGroups",
          "cognito-idp:ListIdentityProviders",
          "cognito-idp:ListUserPoolClients",
          "cognito-idp:ListUserPools",
          "cognito-idp:ListUsers",
          "cognito-idp:ListUsersInGroup",
          "ecr:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerFullAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerFullAccess",
      "PolicyId": "ANPAJZ5IWYMXO5QDB4QOG",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v26",
      "AttachmentCount": 7,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon SageMaker via the AWS Management Console and SDK. Also provides select access to related services (e.g., S3, ECR, CloudWatch Logs).",
      "CreateDate": "2017-11-29T13:07:59.000Z",
      "UpdateDate": "2024-03-29T17:35:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowAllNonAdminSageMakerActions",
        "Effect": "Allow",
        "Action": [
          "sagemaker:*",
          "sagemaker-geospatial:*"
        ],
        "NotResource": [
          "arn:aws:sagemaker:*:*:domain/*",
          "arn:aws:sagemaker:*:*:user-profile/*",
          "arn:aws:sagemaker:*:*:app/*",
          "arn:aws:sagemaker:*:*:space/*",
          "arn:aws:sagemaker:*:*:flow-definition/*"
        ]
      },
      {
        "Sid": "AllowAddTagsForSpace",
        "Effect": "Allow",
        "Action": [
          "sagemaker:AddTags"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:space/*"
        ]
      },
      {
        "Sid": "AllowAddTagsForApp",
        "Effect": "Allow",
        "Action": [
          "sagemaker:AddTags"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:app/*"
        ]
      },
      {
        "Sid": "AllowStudioActions",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreatePresignedDomainUrl",
          "sagemaker:DescribeDomain",
          "sagemaker:ListDomains",
          "sagemaker:DescribeUserProfile",
          "sagemaker:ListUserProfiles",
          "sagemaker:DescribeSpace",
          "sagemaker:ListSpaces",
          "sagemaker:DescribeApp",
          "sagemaker:ListApps"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowAppActionsForUserProfile",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateApp",
          "sagemaker:DeleteApp"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:app/*/*/*/*"
        ]
      },
      {
        "Sid": "AllowAppActionsForSharedSpaces",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateApp",
          "sagemaker:DeleteApp"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:app/${sagemaker:DomainId}/*/*/*"
        ]
      },
      {
        "Sid": "AllowMutatingActionsOnSharedSpacesWithoutOwner",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateSpace",
          "sagemaker:UpdateSpace",
          "sagemaker:DeleteSpace"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:space/${sagemaker:DomainId}/*"
        ]
      },
      {
        "Sid": "RestrictMutatingActionsOnSpacesToOwnerUserProfile",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateSpace",
          "sagemaker:UpdateSpace",
          "sagemaker:DeleteSpace"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:space/${sagemaker:DomainId}/*"
        ]
      },
      {
        "Sid": "RestrictMutatingActionsOnPrivateSpaceAppsToOwnerUserProfile",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateApp",
          "sagemaker:DeleteApp"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:app/${sagemaker:DomainId}/*/*/*"
        ]
      },
      {
        "Sid": "AllowFlowDefinitionActions",
        "Effect": "Allow",
        "Action": [
          "sagemaker:*"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:flow-definition/*"
        ]
      },
      {
        "Sid": "AllowAWSServiceActions",
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeleteScheduledAction",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:DescribeScheduledActions",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:PutScheduledAction",
          "application-autoscaling:RegisterScalableTarget",
          "aws-marketplace:ViewSubscriptions",
          "cloudformation:GetTemplateSummary",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:PutMetricData",
          "codecommit:BatchGetRepositories",
          "codecommit:CreateRepository",
          "codecommit:GetRepository",
          "codecommit:List*",
          "cognito-idp:AdminAddUserToGroup",
          "cognito-idp:AdminCreateUser",
          "cognito-idp:AdminDeleteUser",
          "cognito-idp:AdminDisableUser",
          "cognito-idp:AdminEnableUser",
          "cognito-idp:AdminRemoveUserFromGroup",
          "cognito-idp:CreateGroup",
          "cognito-idp:CreateUserPool",
          "cognito-idp:CreateUserPoolClient",
          "cognito-idp:CreateUserPoolDomain",
          "cognito-idp:DescribeUserPool",
          "cognito-idp:DescribeUserPoolClient",
          "cognito-idp:List*",
          "cognito-idp:UpdateUserPool",
          "cognito-idp:UpdateUserPoolClient",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:CreateVpcEndpoint",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcs",
          "ecr:BatchCheckLayerAvailability",
          "ecr:BatchGetImage",
          "ecr:CreateRepository",
          "ecr:Describe*",
          "ecr:GetAuthorizationToken",
          "ecr:GetDownloadUrlForLayer",
          "ecr:StartImageScan",
          "elastic-inference:Connect",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeMountTargets",
          "fsx:DescribeFileSystems",
          "glue:CreateJob",
          "glue:DeleteJob",
          "glue:GetJob*",
          "glue:GetTable*",
          "glue:GetWorkflowRun",
          "glue:ResetJobBookmark",
          "glue:StartJobRun",
          "glue:StartWorkflowRun",
          "glue:UpdateJob",
          "groundtruthlabeling:*",
          "iam:ListRoles",
          "kms:DescribeKey",
          "kms:ListAliases",
          "lambda:ListFunctions",
          "logs:CreateLogDelivery",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DeleteLogDelivery",
          "logs:Describe*",
          "logs:GetLogDelivery",
          "logs:GetLogEvents",
          "logs:ListLogDeliveries",
          "logs:PutLogEvents",
          "logs:PutResourcePolicy",
          "logs:UpdateLogDelivery",
          "robomaker:CreateSimulationApplication",
          "robomaker:DescribeSimulationApplication",
          "robomaker:DeleteSimulationApplication",
          "robomaker:CreateSimulationJob",
          "robomaker:DescribeSimulationJob",
          "robomaker:CancelSimulationJob",
          "secretsmanager:ListSecrets",
          "servicecatalog:Describe*",
          "servicecatalog:List*",
          "servicecatalog:ScanProvisionedProducts",
          "servicecatalog:SearchProducts",
          "servicecatalog:SearchProvisionedProducts",
          "sns:ListTopics",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowECRActions",
        "Effect": "Allow",
        "Action": [
          "ecr:SetRepositoryPolicy",
          "ecr:CompleteLayerUpload",
          "ecr:BatchDeleteImage",
          "ecr:UploadLayerPart",
          "ecr:DeleteRepositoryPolicy",
          "ecr:InitiateLayerUpload",
          "ecr:DeleteRepository",
          "ecr:PutImage"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/*sagemaker*"
        ]
      },
      {
        "Sid": "AllowCodeCommitActions",
        "Effect": "Allow",
        "Action": [
          "codecommit:GitPull",
          "codecommit:GitPush"
        ],
        "Resource": [
          "arn:aws:codecommit:*:*:*sagemaker*",
          "arn:aws:codecommit:*:*:*SageMaker*",
          "arn:aws:codecommit:*:*:*Sagemaker*"
        ]
      },
      {
        "Sid": "AllowCodeBuildActions",
        "Action": [
          "codebuild:BatchGetBuilds",
          "codebuild:StartBuild"
        ],
        "Resource": [
          "arn:aws:codebuild:*:*:project/sagemaker*",
          "arn:aws:codebuild:*:*:build/*"
        ],
        "Effect": "Allow"
      },
      {
        "Sid": "AllowStepFunctionsActions",
        "Action": [
          "states:DescribeExecution",
          "states:GetExecutionHistory",
          "states:StartExecution",
          "states:StopExecution",
          "states:UpdateStateMachine"
        ],
        "Resource": [
          "arn:aws:states:*:*:statemachine:*sagemaker*",
          "arn:aws:states:*:*:execution:*sagemaker*:*"
        ],
        "Effect": "Allow"
      },
      {
        "Sid": "AllowSecretManagerActions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
        ]
      },
      {
        "Sid": "AllowReadOnlySecretManagerActions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowServiceCatalogProvisionProduct",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:ProvisionProduct"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowServiceCatalogTerminateUpdateProvisionProduct",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:TerminateProvisionedProduct",
          "servicecatalog:UpdateProvisionedProduct"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowS3ObjectActions",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:AbortMultipartUpload"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*",
          "arn:aws:s3:::*aws-glue*"
        ]
      },
      {
        "Sid": "AllowS3GetObjectWithSageMakerExistingObjectTag",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "AllowS3GetObjectWithServiceCatalogProvisioningExistingObjectTag",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "AllowS3BucketActions",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketCors",
          "s3:PutBucketCors"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowS3BucketACL",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketAcl",
          "s3:PutObjectAcl"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Sid": "AllowLambdaInvokeFunction",
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*SageMaker*",
          "arn:aws:lambda:*:*:function:*sagemaker*",
          "arn:aws:lambda:*:*:function:*Sagemaker*",
          "arn:aws:lambda:*:*:function:*LabelingFunction*"
        ]
      },
      {
        "Sid": "AllowCreateServiceLinkedRoleForSageMakerApplicationAutoscaling",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint"
        ]
      },
      {
        "Sid": "AllowCreateServiceLinkedRoleForRobomaker",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowSNSActions",
        "Effect": "Allow",
        "Action": [
          "sns:Subscribe",
          "sns:CreateTopic",
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:*SageMaker*",
          "arn:aws:sns:*:*:*Sagemaker*",
          "arn:aws:sns:*:*:*sagemaker*"
        ]
      },
      {
        "Sid": "AllowPassRoleForSageMakerRoles",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*AmazonSageMaker*"
        ]
      },
      {
        "Sid": "AllowPassRoleToSageMaker",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "AllowAthenaActions",
        "Effect": "Allow",
        "Action": [
          "athena:ListDataCatalogs",
          "athena:ListDatabases",
          "athena:ListTableMetadata",
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:StartQueryExecution",
          "athena:StopQueryExecution"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowGlueCreateTable",
        "Effect": "Allow",
        "Action": [
          "glue:CreateTable"
        ],
        "Resource": [
          "arn:aws:glue:*:*:table/*/sagemaker_tmp_*",
          "arn:aws:glue:*:*:table/sagemaker_featurestore/*",
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/*"
        ]
      },
      {
        "Sid": "AllowGlueUpdateTable",
        "Effect": "Allow",
        "Action": [
          "glue:UpdateTable"
        ],
        "Resource": [
          "arn:aws:glue:*:*:table/sagemaker_featurestore/*",
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/sagemaker_featurestore"
        ]
      },
      {
        "Sid": "AllowGlueDeleteTable",
        "Effect": "Allow",
        "Action": [
          "glue:DeleteTable"
        ],
        "Resource": [
          "arn:aws:glue:*:*:table/*/sagemaker_tmp_*",
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/*"
        ]
      },
      {
        "Sid": "AllowGlueGetTablesAndDatabases",
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables"
        ],
        "Resource": [
          "arn:aws:glue:*:*:table/*",
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/*"
        ]
      },
      {
        "Sid": "AllowGlueGetAndCreateDatabase",
        "Effect": "Allow",
        "Action": [
          "glue:CreateDatabase",
          "glue:GetDatabase"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/sagemaker_featurestore",
          "arn:aws:glue:*:*:database/sagemaker_processing",
          "arn:aws:glue:*:*:database/default",
          "arn:aws:glue:*:*:database/sagemaker_data_wrangler"
        ]
      },
      {
        "Sid": "AllowRedshiftDataActions",
        "Effect": "Allow",
        "Action": [
          "redshift-data:ExecuteStatement",
          "redshift-data:DescribeStatement",
          "redshift-data:CancelStatement",
          "redshift-data:GetStatementResult",
          "redshift-data:ListSchemas",
          "redshift-data:ListTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowRedshiftGetClusterCredentials",
        "Effect": "Allow",
        "Action": [
          "redshift:GetClusterCredentials"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
          "arn:aws:redshift:*:*:dbname:*"
        ]
      },
      {
        "Sid": "AllowListTagsForUserProfile",
        "Effect": "Allow",
        "Action": [
          "sagemaker:ListTags"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:user-profile/*"
        ]
      },
      {
        "Sid": "AllowCloudformationListStackResources",
        "Effect": "Allow",
        "Action": [
          "cloudformation:ListStackResources"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/SC-*"
        ]
      },
      {
        "Sid": "AllowS3ExpressObjectActions",
        "Effect": "Allow",
        "Action": [
          "s3express:CreateSession"
        ],
        "Resource": [
          "arn:aws:s3express:*:*:bucket/*SageMaker*",
          "arn:aws:s3express:*:*:bucket/*Sagemaker*",
          "arn:aws:s3express:*:*:bucket/*sagemaker*",
          "arn:aws:s3express:*:*:bucket/*aws-glue*"
        ]
      },
      {
        "Sid": "AllowS3ExpressCreateBucketActions",
        "Effect": "Allow",
        "Action": [
          "s3express:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3express:*:*:bucket/*SageMaker*",
          "arn:aws:s3express:*:*:bucket/*Sagemaker*",
          "arn:aws:s3express:*:*:bucket/*sagemaker*"
        ]
      },
      {
        "Sid": "AllowS3ExpressListBucketActions",
        "Effect": "Allow",
        "Action": [
          "s3express:ListAllMyDirectoryBuckets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonFreeRTOSFullAccess": {
    "policy": {
      "PolicyName": "AmazonFreeRTOSFullAccess",
      "PolicyId": "ANPAJAN6PSDCOH6HXG2SE",
      "Arn": "arn:aws:iam::aws:policy/AmazonFreeRTOSFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Full Access Policy for Amazon FreeRTOS",
      "CreateDate": "2017-11-29T15:32:51.000Z",
      "UpdateDate": "2017-11-29T15:32:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "freertos:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeepLensServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSDeepLensServiceRolePolicy",
      "PolicyId": "ANPAJK2Z2S7FPJFCYGR72",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSDeepLensServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants AWS DeepLens access to AWS Services, resources and roles needed by DeepLens and its dependencies including IoT, S3, GreenGrass and AWS Lambda.",
      "CreateDate": "2017-11-29T15:46:36.000Z",
      "UpdateDate": "2019-09-25T19:25:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DeepLensIoTThingAccess",
        "Effect": "Allow",
        "Action": [
          "iot:CreateThing",
          "iot:DeleteThing",
          "iot:DeleteThingShadow",
          "iot:DescribeThing",
          "iot:GetThingShadow",
          "iot:UpdateThing",
          "iot:UpdateThingShadow"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/deeplens*"
        ]
      },
      {
        "Sid": "DeepLensIoTCertificateAccess",
        "Effect": "Allow",
        "Action": [
          "iot:AttachThingPrincipal",
          "iot:DetachThingPrincipal",
          "iot:UpdateCertificate",
          "iot:DeleteCertificate",
          "iot:DetachPrincipalPolicy"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/deeplens*",
          "arn:aws:iot:*:*:cert/*"
        ]
      },
      {
        "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess",
        "Effect": "Allow",
        "Action": [
          "iot:CreateKeysAndCertificate",
          "iot:CreatePolicy",
          "iot:CreatePolicyVersion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeepLensIoTAttachCertificatePolicyAccess",
        "Effect": "Allow",
        "Action": [
          "iot:AttachPrincipalPolicy"
        ],
        "Resource": [
          "arn:aws:iot:*:*:policy/deeplens*",
          "arn:aws:iot:*:*:cert/*"
        ]
      },
      {
        "Sid": "DeepLensIoTDataAccess",
        "Effect": "Allow",
        "Action": [
          "iot:GetThingShadow",
          "iot:UpdateThingShadow"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/deeplens*"
        ]
      },
      {
        "Sid": "DeepLensIoTEndpointAccess",
        "Effect": "Allow",
        "Action": [
          "iot:DescribeEndpoint"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeepLensAccess",
        "Effect": "Allow",
        "Action": [
          "deeplens:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeepLensS3ObjectAccess",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::deeplens*"
        ]
      },
      {
        "Sid": "DeepLensS3Buckets",
        "Effect": "Allow",
        "Action": [
          "s3:DeleteBucket",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::deeplens*"
        ]
      },
      {
        "Sid": "DeepLensCreateS3Buckets",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeepLensIAMPassRoleAccess",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeepLensIAMLambdaPassRoleAccess",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSDeepLens*",
          "arn:aws:iam::*:role/service-role/AWSDeepLens*"
        ]
      },
      {
        "Sid": "DeepLensGreenGrassAccess",
        "Effect": "Allow",
        "Action": [
          "greengrass:AssociateRoleToGroup",
          "greengrass:AssociateServiceRoleToAccount",
          "greengrass:CreateResourceDefinition",
          "greengrass:CreateResourceDefinitionVersion",
          "greengrass:CreateCoreDefinition",
          "greengrass:CreateCoreDefinitionVersion",
          "greengrass:CreateDeployment",
          "greengrass:CreateFunctionDefinition",
          "greengrass:CreateFunctionDefinitionVersion",
          "greengrass:CreateGroup",
          "greengrass:CreateGroupCertificateAuthority",
          "greengrass:CreateGroupVersion",
          "greengrass:CreateLoggerDefinition",
          "greengrass:CreateLoggerDefinitionVersion",
          "greengrass:CreateSubscriptionDefinition",
          "greengrass:CreateSubscriptionDefinitionVersion",
          "greengrass:DeleteCoreDefinition",
          "greengrass:DeleteFunctionDefinition",
          "greengrass:DeleteGroup",
          "greengrass:DeleteLoggerDefinition",
          "greengrass:DeleteSubscriptionDefinition",
          "greengrass:DisassociateRoleFromGroup",
          "greengrass:DisassociateServiceRoleFromAccount",
          "greengrass:GetAssociatedRole",
          "greengrass:GetConnectivityInfo",
          "greengrass:GetCoreDefinition",
          "greengrass:GetCoreDefinitionVersion",
          "greengrass:GetDeploymentStatus",
          "greengrass:GetDeviceDefinition",
          "greengrass:GetDeviceDefinitionVersion",
          "greengrass:GetFunctionDefinition",
          "greengrass:GetFunctionDefinitionVersion",
          "greengrass:GetGroup",
          "greengrass:GetGroupCertificateAuthority",
          "greengrass:GetGroupCertificateConfiguration",
          "greengrass:GetGroupVersion",
          "greengrass:GetLoggerDefinition",
          "greengrass:GetLoggerDefinitionVersion",
          "greengrass:GetResourceDefinition",
          "greengrass:GetServiceRoleForAccount",
          "greengrass:GetSubscriptionDefinition",
          "greengrass:GetSubscriptionDefinitionVersion",
          "greengrass:ListCoreDefinitionVersions",
          "greengrass:ListCoreDefinitions",
          "greengrass:ListDeployments",
          "greengrass:ListDeviceDefinitionVersions",
          "greengrass:ListDeviceDefinitions",
          "greengrass:ListFunctionDefinitionVersions",
          "greengrass:ListFunctionDefinitions",
          "greengrass:ListGroupCertificateAuthorities",
          "greengrass:ListGroupVersions",
          "greengrass:ListGroups",
          "greengrass:ListLoggerDefinitionVersions",
          "greengrass:ListLoggerDefinitions",
          "greengrass:ListSubscriptionDefinitionVersions",
          "greengrass:ListSubscriptionDefinitions",
          "greengrass:ResetDeployments",
          "greengrass:UpdateConnectivityInfo",
          "greengrass:UpdateCoreDefinition",
          "greengrass:UpdateDeviceDefinition",
          "greengrass:UpdateFunctionDefinition",
          "greengrass:UpdateGroup",
          "greengrass:UpdateGroupCertificateConfiguration",
          "greengrass:UpdateLoggerDefinition",
          "greengrass:UpdateSubscriptionDefinition",
          "greengrass:UpdateResourceDefinition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeepLensLambdaAdminFunctionAccess",
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction",
          "lambda:DeleteFunction",
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:ListFunctions",
          "lambda:ListVersionsByFunction",
          "lambda:PublishVersion",
          "lambda:UpdateFunctionCode",
          "lambda:UpdateFunctionConfiguration"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:deeplens*"
        ]
      },
      {
        "Sid": "DeepLensLambdaUsersFunctionAccess",
        "Effect": "Allow",
        "Action": [
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:ListFunctions",
          "lambda:ListVersionsByFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*"
        ]
      },
      {
        "Sid": "DeepLensSageMakerWriteAccess",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateTrainingJob",
          "sagemaker:DescribeTrainingJob",
          "sagemaker:StopTrainingJob"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:training-job/deeplens*"
        ]
      },
      {
        "Sid": "DeepLensSageMakerReadAccess",
        "Effect": "Allow",
        "Action": [
          "sagemaker:DescribeTrainingJob"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:training-job/*"
        ]
      },
      {
        "Sid": "DeepLensKinesisVideoStreamAccess",
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:CreateStream",
          "kinesisvideo:DescribeStream",
          "kinesisvideo:DeleteStream"
        ],
        "Resource": [
          "arn:aws:kinesisvideo:*:*:stream/deeplens*/*"
        ]
      },
      {
        "Sid": "DeepLensKinesisVideoEndpointAccess",
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:GetDataEndpoint"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeepLensLambdaFunctionAccessPolicy": {
    "policy": {
      "PolicyName": "AWSDeepLensLambdaFunctionAccessPolicy",
      "PolicyId": "ANPAIKIEE4PRM54V4G3ZG",
      "Arn": "arn:aws:iam::aws:policy/AWSDeepLensLambdaFunctionAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy specifies permissions required by DeepLens Administrative lambda functions that run on a DeepLens device",
      "CreateDate": "2017-11-29T15:47:18.000Z",
      "UpdateDate": "2019-06-11T23:11:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DeepLensS3ObjectAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::deeplens*/*",
          "arn:aws:s3:::deeplens*"
        ]
      },
      {
        "Sid": "DeepLensGreenGrassCloudWatchAccess",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/greengrass/*"
        ]
      },
      {
        "Sid": "DeepLensAccess",
        "Effect": "Allow",
        "Action": [
          "deeplens:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeepLensKinesisVideoAccess",
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:DescribeStream",
          "kinesisvideo:CreateStream",
          "kinesisvideo:GetDataEndpoint",
          "kinesisvideo:PutMedia"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRekognitionServiceRole": {
    "policy": {
      "PolicyName": "AmazonRekognitionServiceRole",
      "PolicyId": "ANPAJI6Q3CUQAVBJ2CTE2",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonRekognitionServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Rekognition to call AWS services on your behalf.",
      "CreateDate": "2017-11-29T16:52:13.000Z",
      "UpdateDate": "2017-11-29T16:52:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:AmazonRekognition*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:PutRecord",
          "kinesis:PutRecords"
        ],
        "Resource": [
          "arn:aws:kinesis:*:*:stream/AmazonRekognition*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:GetDataEndpoint",
          "kinesisvideo:GetMedia"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSQuickSightIoTAnalyticsAccess": {
    "policy": {
      "PolicyName": "AWSQuickSightIoTAnalyticsAccess",
      "PolicyId": "ANPAJIZNDRUTKCN5HLZOE",
      "Arn": "arn:aws:iam::aws:policy/AWSQuickSightIoTAnalyticsAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Give QuickSight read-only access to IoT Analytics datasets",
      "CreateDate": "2017-11-29T17:00:54.000Z",
      "UpdateDate": "2017-11-29T17:00:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "iotanalytics:ListDatasets",
          "iotanalytics:DescribeDataset",
          "iotanalytics:GetDatasetContent"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ComprehendFullAccess": {
    "policy": {
      "PolicyName": "ComprehendFullAccess",
      "PolicyId": "ANPAITBM2PMWNG2P7RZEQ",
      "Arn": "arn:aws:iam::aws:policy/ComprehendFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Comprehend.",
      "CreateDate": "2017-11-29T18:08:43.000Z",
      "UpdateDate": "2017-12-05T01:36:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "comprehend:*",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "iam:ListRoles",
          "iam:GetRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ComprehendReadOnly": {
    "policy": {
      "PolicyName": "ComprehendReadOnly",
      "PolicyId": "ANPAJIUV5K2YCHQBBAH7G",
      "Arn": "arn:aws:iam::aws:policy/ComprehendReadOnly",
      "Path": "/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon Comprehend.",
      "CreateDate": "2017-11-29T18:10:19.000Z",
      "UpdateDate": "2022-04-26T21:32:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "comprehend:DetectDominantLanguage",
          "comprehend:BatchDetectDominantLanguage",
          "comprehend:DetectEntities",
          "comprehend:BatchDetectEntities",
          "comprehend:DetectKeyPhrases",
          "comprehend:BatchDetectKeyPhrases",
          "comprehend:DetectPiiEntities",
          "comprehend:ContainsPiiEntities",
          "comprehend:DetectSentiment",
          "comprehend:BatchDetectSentiment",
          "comprehend:DetectSyntax",
          "comprehend:BatchDetectSyntax",
          "comprehend:ClassifyDocument",
          "comprehend:DescribeTopicsDetectionJob",
          "comprehend:ListTopicsDetectionJobs",
          "comprehend:DescribeDominantLanguageDetectionJob",
          "comprehend:ListDominantLanguageDetectionJobs",
          "comprehend:DescribeEntitiesDetectionJob",
          "comprehend:ListEntitiesDetectionJobs",
          "comprehend:DescribeKeyPhrasesDetectionJob",
          "comprehend:ListKeyPhrasesDetectionJobs",
          "comprehend:DescribePiiEntitiesDetectionJob",
          "comprehend:ListPiiEntitiesDetectionJobs",
          "comprehend:DescribeSentimentDetectionJob",
          "comprehend:DescribeTargetedSentimentDetectionJob",
          "comprehend:ListSentimentDetectionJobs",
          "comprehend:ListTargetedSentimentDetectionJobs",
          "comprehend:DescribeDocumentClassifier",
          "comprehend:ListDocumentClassifiers",
          "comprehend:DescribeDocumentClassificationJob",
          "comprehend:ListDocumentClassificationJobs",
          "comprehend:DescribeEntityRecognizer",
          "comprehend:ListEntityRecognizers",
          "comprehend:ListTagsForResource",
          "comprehend:DescribeEndpoint",
          "comprehend:ListEndpoints",
          "comprehend:ListDocumentClassifierSummaries",
          "comprehend:ListEntityRecognizerSummaries",
          "comprehend:DescribeResourcePolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "GreengrassOTAUpdateArtifactAccess": {
    "policy": {
      "PolicyName": "GreengrassOTAUpdateArtifactAccess",
      "PolicyId": "ANPAIFGE66SKIK3GW5UC2",
      "Arn": "arn:aws:iam::aws:policy/service-role/GreengrassOTAUpdateArtifactAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read access to the Greengrass OTA Update artifacts in all Greengrass regions",
      "CreateDate": "2017-11-29T18:11:47.000Z",
      "UpdateDate": "2018-12-18T00:59:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*-greengrass-updates/*"
        ]
      }
    ]
  },
  "TranslateReadOnly": {
    "policy": {
      "PolicyName": "TranslateReadOnly",
      "PolicyId": "ANPAJYAMZMTQNWUDJKY2E",
      "Arn": "arn:aws:iam::aws:policy/TranslateReadOnly",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon Translate.",
      "CreateDate": "2017-11-29T18:22:00.000Z",
      "UpdateDate": "2023-05-24T17:19:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "translate:TranslateText",
          "translate:TranslateDocument",
          "translate:GetTerminology",
          "translate:ListTerminologies",
          "translate:ListTextTranslationJobs",
          "translate:DescribeTextTranslationJob",
          "translate:GetParallelData",
          "translate:ListParallelData",
          "comprehend:DetectDominantLanguage",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloud9User": {
    "policy": {
      "PolicyName": "AWSCloud9User",
      "PolicyId": "ANPAJPFGFWQF67QVARP6U",
      "Arn": "arn:aws:iam::aws:policy/AWSCloud9User",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permission to create AWS Cloud9 development environments and to manage owned environments.",
      "CreateDate": "2017-11-30T16:16:17.000Z",
      "UpdateDate": "2023-10-11T13:24:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloud9:UpdateUserSettings",
          "cloud9:GetUserSettings",
          "iam:GetUser",
          "iam:ListUsers",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeInstanceTypeOfferings",
          "ec2:DescribeRouteTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloud9:CreateEnvironmentEC2",
          "cloud9:CreateEnvironmentSSH"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloud9:GetUserPublicKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloud9:DescribeEnvironmentMemberships"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession",
          "ssm:GetConnectionStatus"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      }
    ]
  },
  "AWSCloud9Administrator": {
    "policy": {
      "PolicyName": "AWSCloud9Administrator",
      "PolicyId": "ANPAIQ4KWP455WDTCBGWK",
      "Arn": "arn:aws:iam::aws:policy/AWSCloud9Administrator",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrator access to AWS Cloud9.",
      "CreateDate": "2017-11-30T16:17:28.000Z",
      "UpdateDate": "2023-10-11T12:59:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloud9:*",
          "iam:GetUser",
          "iam:ListUsers",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeInstanceTypeOfferings",
          "ec2:DescribeRouteTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession",
          "ssm:GetConnectionStatus"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      }
    ]
  },
  "AWSCloud9ServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSCloud9ServiceRolePolicy",
      "PolicyId": "ANPAJFXGCBXQIZATFZ4YG",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSCloud9ServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Linked Role Policy for AWS Cloud9",
      "CreateDate": "2017-11-30T13:44:08.000Z",
      "UpdateDate": "2022-01-17T14:06:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances",
          "ec2:CreateSecurityGroup",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "cloudformation:CreateStack",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances",
          "ec2:DeleteSecurityGroup",
          "ec2:AuthorizeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DeleteStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/aws-cloud9-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:StartInstances",
          "ec2:StopInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:StartInstances",
          "ec2:StopInstances"
        ],
        "Resource": [
          "arn:aws:license-manager:*:*:license-configuration:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListInstanceProfiles",
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/cloud9/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSCloud9SSMAccessRole"
        ]
      }
    ]
  },
  "AWSCloud9EnvironmentMember": {
    "policy": {
      "PolicyName": "AWSCloud9EnvironmentMember",
      "PolicyId": "ANPAI54ULAIPVT5HFTYGK",
      "Arn": "arn:aws:iam::aws:policy/AWSCloud9EnvironmentMember",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the ability to be invited into AWS Cloud9 shared development environments.",
      "CreateDate": "2017-11-30T16:18:28.000Z",
      "UpdateDate": "2023-10-11T12:13:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloud9:GetUserSettings",
          "cloud9:UpdateUserSettings",
          "iam:GetUser",
          "iam:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloud9:DescribeEnvironmentMemberships"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession",
          "ssm:GetConnectionStatus"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      }
    ]
  },
  "AlexaForBusinessFullAccess": {
    "policy": {
      "PolicyName": "AlexaForBusinessFullAccess",
      "PolicyId": "ANPAILUT3JGG7WRIMVNH2",
      "Arn": "arn:aws:iam::aws:policy/AlexaForBusinessFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to AlexaForBusiness resources and access to related AWS Services",
      "CreateDate": "2017-11-30T16:47:09.000Z",
      "UpdateDate": "2020-07-01T21:01:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "a4b:*",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/*a4b.amazonaws.com/AWSServiceRoleForAlexaForBusiness*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DeleteSecret",
          "secretsmanager:UpdateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:A4B*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AlexaForBusinessReadOnlyAccess": {
    "policy": {
      "PolicyName": "AlexaForBusinessReadOnlyAccess",
      "PolicyId": "ANPAI6BKSTB4XMLPBFFJ2",
      "Arn": "arn:aws:iam::aws:policy/AlexaForBusinessReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide read only access to AlexaForBusiness services",
      "CreateDate": "2017-11-30T16:47:12.000Z",
      "UpdateDate": "2019-11-20T00:25:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "a4b:Get*",
          "a4b:List*",
          "a4b:Search*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AlexaForBusinessDeviceSetup": {
    "policy": {
      "PolicyName": "AlexaForBusinessDeviceSetup",
      "PolicyId": "ANPAIUEFZFUTDTY4HGFU2",
      "Arn": "arn:aws:iam::aws:policy/AlexaForBusinessDeviceSetup",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide device setup access to AlexaForBusiness services",
      "CreateDate": "2017-11-30T16:47:16.000Z",
      "UpdateDate": "2019-05-20T21:05:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "a4b:RegisterDevice",
          "a4b:CompleteRegistration",
          "a4b:SearchDevices",
          "a4b:SearchNetworkProfiles",
          "a4b:GetNetworkProfile",
          "a4b:PutDeviceSetupEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "A4bDeviceSetupAccess",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*"
        ]
      }
    ]
  },
  "AlexaForBusinessGatewayExecution": {
    "policy": {
      "PolicyName": "AlexaForBusinessGatewayExecution",
      "PolicyId": "ANPAI3LZ7YP7KHLG4DT2Q",
      "Arn": "arn:aws:iam::aws:policy/AlexaForBusinessGatewayExecution",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide gateway execution access to AlexaForBusiness services",
      "CreateDate": "2017-11-30T16:47:19.000Z",
      "UpdateDate": "2017-11-30T16:47:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "a4b:Send*",
          "a4b:Get*"
        ],
        "Resource": [
          "arn:aws:a4b:*:*:gateway/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:dd-*",
          "arn:aws:sqs:*:*:sd-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "a4b:List*",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTThingsRegistration": {
    "policy": {
      "PolicyName": "AWSIoTThingsRegistration",
      "PolicyId": "ANPAI3YQXTC5XAEVTJNEU",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows users to register things at bulk using AWS IoT StartThingRegistrationTask API",
      "CreateDate": "2017-12-01T20:21:52.000Z",
      "UpdateDate": "2020-10-05T19:20:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:AddThingToThingGroup",
          "iot:AttachPolicy",
          "iot:AttachPrincipalPolicy",
          "iot:AttachThingPrincipal",
          "iot:CreateCertificateFromCsr",
          "iot:CreatePolicy",
          "iot:CreateThing",
          "iot:DescribeCertificate",
          "iot:DescribeThing",
          "iot:DescribeThingGroup",
          "iot:DescribeThingType",
          "iot:DetachPolicy",
          "iot:DetachThingPrincipal",
          "iot:GetPolicy",
          "iot:ListAttachedPolicies",
          "iot:ListPolicyPrincipals",
          "iot:ListPrincipalPolicies",
          "iot:ListPrincipalThings",
          "iot:ListTargetsForPolicy",
          "iot:ListThingGroupsForThing",
          "iot:ListThingPrincipals",
          "iot:RegisterCertificate",
          "iot:RegisterThing",
          "iot:RemoveThingFromThingGroup",
          "iot:UpdateCertificate",
          "iot:UpdateThing",
          "iot:UpdateThingGroupsForThing",
          "iot:AddThingToBillingGroup",
          "iot:DescribeBillingGroup",
          "iot:RemoveThingFromBillingGroup"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKinesisVideoStreamsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonKinesisVideoStreamsReadOnlyAccess",
      "PolicyId": "ANPAJDS2DKUCYTEA7M6UA",
      "Arn": "arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Kinesis Video Streams via the AWS Management Console.",
      "CreateDate": "2017-12-01T23:14:32.000Z",
      "UpdateDate": "2017-12-01T23:14:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:Describe*",
          "kinesisvideo:Get*",
          "kinesisvideo:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKinesisVideoStreamsFullAccess": {
    "policy": {
      "PolicyName": "AmazonKinesisVideoStreamsFullAccess",
      "PolicyId": "ANPAIZAN5AK7E7UVYIAZY",
      "Arn": "arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Kinesis Video Streams via the AWS Management Console.",
      "CreateDate": "2017-12-01T23:27:18.000Z",
      "UpdateDate": "2017-12-01T23:27:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSSOServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSSSOServiceRolePolicy",
      "PolicyId": "ANPAIJ52KSWOD4GI54XP2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSSSOServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v17",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants AWS SSO permissions to manage AWS resources, including IAM roles, policies and SAML IdP on your behalf.",
      "CreateDate": "2017-12-05T18:36:15.000Z",
      "UpdateDate": "2022-10-20T20:05:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "IAMRoleProvisioningActions",
        "Effect": "Allow",
        "Action": [
          "iam:AttachRolePolicy",
          "iam:CreateRole",
          "iam:PutRolePolicy",
          "iam:UpdateRole",
          "iam:UpdateRoleDescription",
          "iam:UpdateAssumeRolePolicy",
          "iam:PutRolePermissionsBoundary",
          "iam:DeleteRolePermissionsBoundary"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*"
        ]
      },
      {
        "Sid": "IAMRoleReadActions",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMRoleCleanupActions",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteRole",
          "iam:DeleteRolePolicy",
          "iam:DetachRolePolicy",
          "iam:ListRolePolicies",
          "iam:ListAttachedRolePolicies"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*"
        ]
      },
      {
        "Sid": "IAMSLRCleanupActions",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus",
          "iam:DeleteRole",
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
        ]
      },
      {
        "Sid": "IAMSAMLProviderCreationAction",
        "Effect": "Allow",
        "Action": [
          "iam:CreateSAMLProvider"
        ],
        "Resource": [
          "arn:aws:iam::*:saml-provider/AWSSSO_*"
        ]
      },
      {
        "Sid": "IAMSAMLProviderUpdateAction",
        "Effect": "Allow",
        "Action": [
          "iam:UpdateSAMLProvider"
        ],
        "Resource": [
          "arn:aws:iam::*:saml-provider/AWSSSO_*"
        ]
      },
      {
        "Sid": "IAMSAMLProviderCleanupActions",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteSAMLProvider",
          "iam:GetSAMLProvider"
        ],
        "Resource": [
          "arn:aws:iam::*:saml-provider/AWSSSO_*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowUnauthAppForDirectory",
        "Effect": "Allow",
        "Action": [
          "ds:UnauthorizeApplication"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowDescribeForDirectory",
        "Effect": "Allow",
        "Action": [
          "ds:DescribeDirectories",
          "ds:DescribeTrusts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowDescribeAndListOperationsOnIdentitySource",
        "Effect": "Allow",
        "Action": [
          "identitystore:DescribeUser",
          "identitystore:DescribeGroup",
          "identitystore:ListGroups",
          "identitystore:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ElastiCacheServiceRolePolicy": {
    "policy": {
      "PolicyName": "ElastiCacheServiceRolePolicy",
      "PolicyId": "ANPAIML5LIBUZBVCSF7PI",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/ElastiCacheServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows ElastiCache to manage AWS resources on your behalf as necessary for managing your cache",
      "CreateDate": "2017-12-07T17:50:04.000Z",
      "UpdateDate": "2023-11-28T03:05:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ElastiCacheManagementActions",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcEndpoints",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:RevokeSecurityGroupIngress",
          "cloudwatch:PutMetricData",
          "outposts:GetOutpost",
          "outposts:GetOutpostInstanceTypes",
          "outposts:ListOutposts",
          "outposts:ListSites"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateDeleteVPCEndpoints",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint",
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "TagVPCEndpointsOnCreation",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "ModifyVpcEndpoints",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "AllowAccessToElastiCacheTaggedVpcEndpoints",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint",
          "ec2:ModifyVpcEndpoint"
        ],
        "NotResource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      }
    ]
  },
  "AWSIoTOTAUpdate": {
    "policy": {
      "PolicyName": "AWSIoTOTAUpdate",
      "PolicyId": "ANPAJLJYWX53STBZFPUEY",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTOTAUpdate",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows access to create AWS IoT Job and describe the AWS code signer job",
      "CreateDate": "2017-12-20T20:36:53.000Z",
      "UpdateDate": "2017-12-20T20:36:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:CreateJob",
          "signer:DescribeSigningJob"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaPackageFullAccess": {
    "policy": {
      "PolicyName": "AWSElementalMediaPackageFullAccess",
      "PolicyId": "ANPAIYI6IYR3JRFAVNQHC",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaPackageFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Elemental MediaPackage resources",
      "CreateDate": "2017-12-29T23:39:52.000Z",
      "UpdateDate": "2017-12-29T23:39:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mediapackage:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaPackageReadOnly": {
    "policy": {
      "PolicyName": "AWSElementalMediaPackageReadOnly",
      "PolicyId": "ANPAJ42DVTPUHKXNYZQCO",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaPackageReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Elemental MediaPackage resources",
      "CreateDate": "2017-12-30T00:04:29.000Z",
      "UpdateDate": "2017-12-30T00:04:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mediapackage:List*",
          "mediapackage:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonRDSServiceRolePolicy",
      "PolicyId": "ANPAIPEU5ZOBJWKWHUIBA",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonRDSServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v13",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon RDS to manage AWS resources on your behalf.",
      "CreateDate": "2018-01-08T18:17:46.000Z",
      "UpdateDate": "2024-01-19T15:10:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CrossRegionCommunication",
        "Effect": "Allow",
        "Action": [
          "rds:CrossRegionCommunication"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2",
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress",
          "ec2:AssociateAddress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateCoipPoolPermission",
          "ec2:CreateLocalGatewayRouteTablePermission",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteCoipPoolPermission",
          "ec2:DeleteLocalGatewayRouteTablePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCoipPools",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeLocalGatewayRouteTablePermissions",
          "ec2:DescribeLocalGatewayRouteTables",
          "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
          "ec2:DescribeLocalGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "ec2:DisassociateAddress",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:ModifyVpcEndpoint",
          "ec2:ReleaseAddress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeVpcEndpoints",
          "ec2:DeleteVpcEndpoints",
          "ec2:AssignPrivateIpAddresses",
          "ec2:UnassignPrivateIpAddresses"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Sns",
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchLogs",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/rds/*",
          "arn:aws:logs:*:*:log-group:/aws/docdb/*",
          "arn:aws:logs:*:*:log-group:/aws/neptune/*"
        ]
      },
      {
        "Sid": "CloudWatchStreams",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
          "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*",
          "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
        ]
      },
      {
        "Sid": "Kinesis",
        "Effect": "Allow",
        "Action": [
          "kinesis:CreateStream",
          "kinesis:PutRecord",
          "kinesis:PutRecords",
          "kinesis:DescribeStream",
          "kinesis:SplitShard",
          "kinesis:MergeShards",
          "kinesis:DeleteStream",
          "kinesis:UpdateShardCount"
        ],
        "Resource": [
          "arn:aws:kinesis:*:*:stream/aws-rds-das-*"
        ]
      },
      {
        "Sid": "CloudWatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerPassword",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetRandomPassword"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerSecret",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DeleteSecret",
          "secretsmanager:DescribeSecret",
          "secretsmanager:PutSecretValue",
          "secretsmanager:RotateSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:UpdateSecretVersionStage",
          "secretsmanager:ListSecretVersionIds"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:rds!*"
        ]
      },
      {
        "Sid": "SecretsManagerTags",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:rds!*"
        ]
      }
    ]
  },
  "AutoScalingServiceRolePolicy": {
    "policy": {
      "PolicyName": "AutoScalingServiceRolePolicy",
      "PolicyId": "ANPAIC5D2V7MRWBMHGD7G",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AutoScalingServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by Auto Scaling",
      "CreateDate": "2018-01-08T23:10:55.000Z",
      "UpdateDate": "2024-02-29T17:48:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EC2InstanceManagement",
        "Effect": "Allow",
        "Action": [
          "ec2:AttachClassicLinkVpc",
          "ec2:CancelSpotInstanceRequests",
          "ec2:CreateFleet",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:Describe*",
          "ec2:DetachClassicLinkVpc",
          "ec2:GetInstanceTypesFromInstanceRequirements",
          "ec2:GetSecurityGroupsForVpc",
          "ec2:ModifyInstanceAttribute",
          "ec2:RequestSpotInstances",
          "ec2:RunInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2InstanceProfileManagement",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2SpotManagement",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ELBManagement",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:Register*",
          "elasticloadbalancing:Deregister*",
          "elasticloadbalancing:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CWManagement",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:PutMetricAlarm"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SNSManagement",
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EventBridgeRuleManagement",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets",
          "events:DeleteRule",
          "events:DescribeRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SystemsManagerParameterManagement",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VpcLatticeManagement",
        "Effect": "Allow",
        "Action": [
          "vpc-lattice:DeregisterTargets",
          "vpc-lattice:GetTargetGroup",
          "vpc-lattice:ListTargets",
          "vpc-lattice:ListTargetGroups",
          "vpc-lattice:RegisterTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53AutoNamingReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53AutoNamingReadOnlyAccess",
      "PolicyId": "ANPAJBPMV2EFBFFKJ6SI4",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53AutoNamingReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to all Route 53 Auto Naming actions.",
      "CreateDate": "2018-01-18T03:02:59.000Z",
      "UpdateDate": "2018-01-18T03:02:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "servicediscovery:Get*",
          "servicediscovery:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53AutoNamingFullAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53AutoNamingFullAccess",
      "PolicyId": "ANPAJCNJBBLMJN2ZMV62Y",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53AutoNamingFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all Route 53 Auto Naming actions.",
      "CreateDate": "2018-01-18T18:40:41.000Z",
      "UpdateDate": "2018-01-18T18:40:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53:GetHostedZone",
          "route53:ListHostedZonesByName",
          "route53:CreateHostedZone",
          "route53:DeleteHostedZone",
          "route53:ChangeResourceRecordSets",
          "route53:CreateHealthCheck",
          "route53:GetHealthCheck",
          "route53:DeleteHealthCheck",
          "route53:UpdateHealthCheck",
          "ec2:DescribeVpcs",
          "ec2:DescribeRegions",
          "servicediscovery:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingSageMakerEndpointPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingSageMakerEndpointPolicy",
      "PolicyId": "ANPAI5DBEBNRZQ4SXYTAW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingSageMakerEndpointPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access SageMaker and CloudWatch.",
      "CreateDate": "2018-02-06T19:58:21.000Z",
      "UpdateDate": "2023-11-13T18:52:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SageMaker",
        "Effect": "Allow",
        "Action": [
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:DescribeInferenceComponent",
          "sagemaker:UpdateEndpointWeightsAndCapacities",
          "sagemaker:UpdateInferenceComponentRuntimeConfig",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SageMakerCloudWatchUpdate",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
        ]
      }
    ]
  },
  "AWSServiceCatalogAdminFullAccess": {
    "policy": {
      "PolicyName": "AWSServiceCatalogAdminFullAccess",
      "PolicyId": "ANPAJWLJU4BZ7AQUJSBVM",
      "Arn": "arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to service catalog admin capabilities",
      "CreateDate": "2018-02-15T17:19:40.000Z",
      "UpdateDate": "2023-04-13T18:43:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStacks",
          "cloudformation:SetStackPolicy",
          "cloudformation:UpdateStack",
          "cloudformation:CreateChangeSet",
          "cloudformation:DescribeChangeSet",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:ListChangeSets",
          "cloudformation:DeleteChangeSet",
          "cloudformation:ListStackResources",
          "cloudformation:TagResource",
          "cloudformation:CreateStackSet",
          "cloudformation:CreateStackInstances",
          "cloudformation:UpdateStackSet",
          "cloudformation:UpdateStackInstances",
          "cloudformation:DeleteStackSet",
          "cloudformation:DeleteStackInstances",
          "cloudformation:DescribeStackSet",
          "cloudformation:DescribeStackInstance",
          "cloudformation:DescribeStackSetOperation",
          "cloudformation:ListStackInstances",
          "cloudformation:ListStackSetOperations",
          "cloudformation:ListStackSetOperationResults"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/SC-*",
          "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
          "arn:aws:cloudformation:*:*:changeSet/SC-*",
          "arn:aws:cloudformation:*:*:stackset/SC-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateUploadBucket",
          "cloudformation:GetTemplateSummary",
          "cloudformation:ValidateTemplate",
          "iam:GetGroup",
          "iam:GetRole",
          "iam:GetUser",
          "iam:ListGroups",
          "iam:ListRoles",
          "iam:ListUsers",
          "servicecatalog:Get*",
          "servicecatalog:Scan*",
          "servicecatalog:Search*",
          "servicecatalog:List*",
          "servicecatalog:TagResource",
          "servicecatalog:UntagResource",
          "servicecatalog:SyncResource",
          "ssm:DescribeDocument",
          "ssm:GetAutomationExecution",
          "ssm:ListDocuments",
          "ssm:ListDocumentVersions",
          "config:DescribeConfigurationRecorders",
          "config:DescribeConfigurationRecorderStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicecatalog:Accept*",
          "servicecatalog:Associate*",
          "servicecatalog:Batch*",
          "servicecatalog:Copy*",
          "servicecatalog:Create*",
          "servicecatalog:Delete*",
          "servicecatalog:Describe*",
          "servicecatalog:Disable*",
          "servicecatalog:Disassociate*",
          "servicecatalog:Enable*",
          "servicecatalog:Execute*",
          "servicecatalog:Import*",
          "servicecatalog:Provision*",
          "servicecatalog:Put*",
          "servicecatalog:Reject*",
          "servicecatalog:Terminate*",
          "servicecatalog:Update*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/orgsdatasync.servicecatalog.amazonaws.com/AWSServiceRoleForServiceCatalogOrgsDataSync"
        ]
      }
    ]
  },
  "AWSServiceCatalogEndUserFullAccess": {
    "policy": {
      "PolicyName": "AWSServiceCatalogEndUserFullAccess",
      "PolicyId": "ANPAJTLLC4DGDMTZB54M4",
      "Arn": "arn:aws:iam::aws:policy/AWSServiceCatalogEndUserFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to service catalog enduser capabilities",
      "CreateDate": "2018-02-15T17:22:32.000Z",
      "UpdateDate": "2019-07-10T20:30:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStacks",
          "cloudformation:SetStackPolicy",
          "cloudformation:ValidateTemplate",
          "cloudformation:UpdateStack",
          "cloudformation:CreateChangeSet",
          "cloudformation:DescribeChangeSet",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:ListChangeSets",
          "cloudformation:DeleteChangeSet",
          "cloudformation:TagResource",
          "cloudformation:CreateStackSet",
          "cloudformation:CreateStackInstances",
          "cloudformation:UpdateStackSet",
          "cloudformation:UpdateStackInstances",
          "cloudformation:DeleteStackSet",
          "cloudformation:DeleteStackInstances",
          "cloudformation:DescribeStackSet",
          "cloudformation:DescribeStackInstance",
          "cloudformation:DescribeStackSetOperation",
          "cloudformation:ListStackInstances",
          "cloudformation:ListStackResources",
          "cloudformation:ListStackSetOperations",
          "cloudformation:ListStackSetOperationResults"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/SC-*",
          "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
          "arn:aws:cloudformation:*:*:changeSet/SC-*",
          "arn:aws:cloudformation:*:*:stackset/SC-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:GetTemplateSummary",
          "servicecatalog:DescribeProduct",
          "servicecatalog:DescribeProductView",
          "servicecatalog:DescribeProvisioningParameters",
          "servicecatalog:ListLaunchPaths",
          "servicecatalog:ProvisionProduct",
          "servicecatalog:SearchProducts",
          "ssm:DescribeDocument",
          "ssm:GetAutomationExecution",
          "config:DescribeConfigurationRecorders",
          "config:DescribeConfigurationRecorderStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicecatalog:DescribeProvisionedProduct",
          "servicecatalog:DescribeRecord",
          "servicecatalog:ListRecordHistory",
          "servicecatalog:ListStackInstancesForProvisionedProduct",
          "servicecatalog:ScanProvisionedProducts",
          "servicecatalog:TerminateProvisionedProduct",
          "servicecatalog:UpdateProvisionedProduct",
          "servicecatalog:SearchProvisionedProducts",
          "servicecatalog:CreateProvisionedProductPlan",
          "servicecatalog:DescribeProvisionedProductPlan",
          "servicecatalog:ExecuteProvisionedProductPlan",
          "servicecatalog:DeleteProvisionedProductPlan",
          "servicecatalog:ListProvisionedProductPlans",
          "servicecatalog:ListServiceActionsForProvisioningArtifact",
          "servicecatalog:ExecuteProvisionedProductServiceAction",
          "servicecatalog:DescribeServiceActionExecutionParameters"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSTrustedAdvisorServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSTrustedAdvisorServiceRolePolicy",
      "PolicyId": "ANPAJH4QJ2WMHBOB47BUE",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSTrustedAdvisorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v12",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Access for the AWS Trusted Advisor Service to help reduce cost, increase performance, and improve security of your AWS environment.",
      "CreateDate": "2018-02-22T21:24:25.000Z",
      "UpdateDate": "2024-01-18T16:25:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "TrustedAdvisorServiceRolePermissions",
        "Effect": "Allow",
        "Action": [
          "autoscaling:DescribeAccountLimits",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeLaunchConfigurations",
          "ce:GetReservationPurchaseRecommendation",
          "ce:GetSavingsPlansPurchaseRecommendation",
          "cloudformation:DescribeAccountLimits",
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks",
          "cloudfront:ListDistributions",
          "cloudtrail:DescribeTrails",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:GetTrail",
          "cloudtrail:ListTrails",
          "cloudtrail:GetEventSelectors",
          "cloudwatch:GetMetricStatistics",
          "dynamodb:DescribeLimits",
          "dynamodb:DescribeTable",
          "dynamodb:ListTables",
          "ec2:DescribeAddresses",
          "ec2:DescribeReservedInstances",
          "ec2:DescribeInstances",
          "ec2:DescribeVpcs",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeImages",
          "ec2:DescribeVolumes",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeRegions",
          "ec2:DescribeReservedInstancesOfferings",
          "ec2:DescribeSnapshots",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:DescribeLaunchTemplateVersions",
          "ecs:DescribeTaskDefinition",
          "ecs:ListTaskDefinitions",
          "elasticloadbalancing:DescribeAccountLimits",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancerPolicies",
          "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroups",
          "iam:GenerateCredentialReport",
          "iam:GetAccountPasswordPolicy",
          "iam:GetAccountSummary",
          "iam:GetCredentialReport",
          "iam:GetServerCertificate",
          "iam:ListServerCertificates",
          "kinesis:DescribeLimits",
          "kafka:ListClustersV2",
          "kafka:ListNodes",
          "outposts:ListAssets",
          "outposts:GetOutpost",
          "outposts:ListOutposts",
          "rds:DescribeAccountAttributes",
          "rds:DescribeDBClusters",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBSecurityGroups",
          "rds:DescribeDBSnapshots",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEngineDefaultParameters",
          "rds:DescribeEvents",
          "rds:DescribeOptionGroupOptions",
          "rds:DescribeOptionGroups",
          "rds:DescribeOrderableDBInstanceOptions",
          "rds:DescribeReservedDBInstances",
          "rds:DescribeReservedDBInstancesOfferings",
          "rds:ListTagsForResource",
          "redshift:DescribeClusters",
          "redshift:DescribeReservedNodeOfferings",
          "redshift:DescribeReservedNodes",
          "route53:GetAccountLimit",
          "route53:GetHealthCheck",
          "route53:GetHostedZone",
          "route53:ListHealthChecks",
          "route53:ListHostedZones",
          "route53:ListHostedZonesByName",
          "route53:ListResourceRecordSets",
          "route53resolver:ListResolverEndpoints",
          "route53resolver:ListResolverEndpointIpAddresses",
          "s3:GetAccountPublicAccessBlock",
          "s3:GetBucketAcl",
          "s3:GetBucketPolicy",
          "s3:GetBucketPolicyStatus",
          "s3:GetBucketLocation",
          "s3:GetBucketLogging",
          "s3:GetBucketVersioning",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetLifecycleConfiguration",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "ses:GetSendQuota",
          "sqs:ListQueues"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonESCognitoAccess": {
    "policy": {
      "PolicyName": "AmazonESCognitoAccess",
      "PolicyId": "ANPAJL2FUMODIGNDPTZHO",
      "Arn": "arn:aws:iam::aws:policy/AmazonESCognitoAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides limited access to the Amazon Cognito configuration service.",
      "CreateDate": "2018-02-28T22:29:18.000Z",
      "UpdateDate": "2021-12-20T14:04:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cognito-idp:DescribeUserPool",
          "cognito-idp:CreateUserPoolClient",
          "cognito-idp:DeleteUserPoolClient",
          "cognito-idp:UpdateUserPoolClient",
          "cognito-idp:DescribeUserPoolClient",
          "cognito-idp:AdminInitiateAuth",
          "cognito-idp:AdminUserGlobalSignOut",
          "cognito-idp:ListUserPoolClients",
          "cognito-identity:DescribeIdentityPool",
          "cognito-identity:UpdateIdentityPool",
          "cognito-identity:SetIdentityPoolRoles",
          "cognito-identity:GetIdentityPoolRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBatchServiceEventTargetRole": {
    "policy": {
      "PolicyName": "AWSBatchServiceEventTargetRole",
      "PolicyId": "ANPAICVHHZ6XHNMA6VE3Q",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSBatchServiceEventTargetRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable CloudWatch Event Target for AWS Batch Job Submission",
      "CreateDate": "2018-02-28T22:31:13.000Z",
      "UpdateDate": "2018-02-28T22:31:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "batch:SubmitJob"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "DAXServiceRolePolicy": {
    "policy": {
      "PolicyName": "DAXServiceRolePolicy",
      "PolicyId": "ANPAJQWMGC67G4DWMREGM",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/DAXServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows DAX to create and manage Network interface, Security group, Subnet and Vpc on behalf of customer",
      "CreateDate": "2018-03-05T17:51:25.000Z",
      "UpdateDate": "2018-03-05T17:51:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:RevokeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaStoreFullAccess": {
    "policy": {
      "PolicyName": "AWSElementalMediaStoreFullAccess",
      "PolicyId": "ANPAJZFYFW2QXSNK7OH6Y",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaStoreFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full read and write access to all MediaStore APIs",
      "CreateDate": "2018-03-05T23:15:31.000Z",
      "UpdateDate": "2018-03-05T23:15:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "mediastore:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchAgentAdminPolicy": {
    "policy": {
      "PolicyName": "CloudWatchAgentAdminPolicy",
      "PolicyId": "ANPAICMXPKT7EBAF6KR3O",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Full permissions required to use AmazonCloudWatchAgent.",
      "CreateDate": "2018-03-07T00:52:31.000Z",
      "UpdateDate": "2024-02-05T20:59:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CWACloudWatchPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData",
          "ec2:DescribeTags",
          "logs:PutLogEvents",
          "logs:PutRetentionPolicy",
          "logs:DescribeLogStreams",
          "logs:DescribeLogGroups",
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:GetSamplingRules",
          "xray:GetSamplingTargets",
          "xray:GetSamplingStatisticSummaries"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CWASSMPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameter",
          "ssm:PutParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
        ]
      }
    ]
  },
  "CloudWatchAgentServerPolicy": {
    "policy": {
      "PolicyName": "CloudWatchAgentServerPolicy",
      "PolicyId": "ANPAIGOPKN7KRDAKTLG4I",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions required to use AmazonCloudWatchAgent on servers",
      "CreateDate": "2018-03-07T01:06:44.000Z",
      "UpdateDate": "2024-02-06T16:37:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CWACloudWatchServerPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData",
          "ec2:DescribeVolumes",
          "ec2:DescribeTags",
          "logs:PutLogEvents",
          "logs:PutRetentionPolicy",
          "logs:DescribeLogStreams",
          "logs:DescribeLogGroups",
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:GetSamplingRules",
          "xray:GetSamplingTargets",
          "xray:GetSamplingStatisticSummaries"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CWASSMServerPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
        ]
      }
    ]
  },
  "AWSResourceGroupsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSResourceGroupsReadOnlyAccess",
      "PolicyId": "ANPAIXFKM2WGBJAEWMFEG",
      "Arn": "arn:aws:iam::aws:policy/AWSResourceGroupsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This is the read only policy for AWS Resource Groups",
      "CreateDate": "2018-03-07T10:27:04.000Z",
      "UpdateDate": "2019-02-05T17:56:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "resource-groups:Get*",
          "resource-groups:List*",
          "resource-groups:Search*",
          "tag:Get*",
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources",
          "ec2:DescribeInstances",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeVolumes",
          "ec2:DescribeVpcs",
          "elasticache:DescribeCacheClusters",
          "elasticache:DescribeSnapshots",
          "elasticache:ListTagsForResource",
          "elasticbeanstalk:DescribeEnvironments",
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:ListClusters",
          "glacier:ListVaults",
          "glacier:DescribeVault",
          "glacier:ListTagsForVault",
          "kinesis:ListStreams",
          "kinesis:DescribeStream",
          "kinesis:ListTagsForStream",
          "opsworks:DescribeStacks",
          "opsworks:ListTags",
          "rds:DescribeDBInstances",
          "rds:DescribeDBSnapshots",
          "rds:ListTagsForResource",
          "redshift:DescribeClusters",
          "redshift:DescribeTags",
          "route53domains:ListDomains",
          "route53:ListHealthChecks",
          "route53:GetHealthCheck",
          "route53:ListHostedZones",
          "route53:GetHostedZone",
          "route53:ListTagsForResource",
          "storagegateway:ListGateways",
          "storagegateway:DescribeGatewayInformation",
          "storagegateway:ListTagsForResource",
          "s3:ListAllMyBuckets",
          "s3:GetBucketTagging",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTags",
          "ssm:ListDocuments"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaStoreReadOnly": {
    "policy": {
      "PolicyName": "AWSElementalMediaStoreReadOnly",
      "PolicyId": "ANPAI4EFXRATQYOFTAEFM",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaStoreReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only permissions for MediaStore APIs",
      "CreateDate": "2018-03-08T19:48:22.000Z",
      "UpdateDate": "2018-03-08T19:48:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "mediastore:Get*",
          "mediastore:List*",
          "mediastore:Describe*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53AutoNamingRegistrantAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53AutoNamingRegistrantAccess",
      "PolicyId": "ANPAJKXLG7EKP2O5SVZW6",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53AutoNamingRegistrantAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides registrant level access to Route 53 Auto Naming actions.",
      "CreateDate": "2018-03-12T22:33:20.000Z",
      "UpdateDate": "2018-03-12T22:33:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53:GetHostedZone",
          "route53:ListHostedZonesByName",
          "route53:ChangeResourceRecordSets",
          "route53:CreateHealthCheck",
          "route53:GetHealthCheck",
          "route53:DeleteHealthCheck",
          "route53:UpdateHealthCheck",
          "servicediscovery:Get*",
          "servicediscovery:List*",
          "servicediscovery:RegisterInstance",
          "servicediscovery:DeregisterInstance"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSConfigRoleForOrganizations": {
    "policy": {
      "PolicyName": "AWSConfigRoleForOrganizations",
      "PolicyId": "ANPAIEHGYAUTHXSXZAW2E",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSConfigRoleForOrganizations",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Config to call read-only AWS Organizations APIs",
      "CreateDate": "2018-03-19T22:53:01.000Z",
      "UpdateDate": "2020-11-24T20:19:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListAccounts",
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAppSyncAdministrator": {
    "policy": {
      "PolicyName": "AWSAppSyncAdministrator",
      "PolicyId": "ANPAJBYY36AJPXTTWIXCY",
      "Arn": "arn:aws:iam::aws:policy/AWSAppSyncAdministrator",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrative access to the AppSync service, though not enough to access via the console.",
      "CreateDate": "2018-03-20T21:20:28.000Z",
      "UpdateDate": "2019-11-04T19:23:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appsync:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/appsync.amazonaws.com/AWSServiceRoleForAppSync*"
        ]
      }
    ]
  },
  "AWSAppSyncSchemaAuthor": {
    "policy": {
      "PolicyName": "AWSAppSyncSchemaAuthor",
      "PolicyId": "ANPAIUCF5WVTOFQXFKY5E",
      "Arn": "arn:aws:iam::aws:policy/AWSAppSyncSchemaAuthor",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to create, update, and query the schema.",
      "CreateDate": "2018-03-20T21:21:06.000Z",
      "UpdateDate": "2023-02-01T18:36:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appsync:GraphQL",
          "appsync:CreateResolver",
          "appsync:CreateType",
          "appsync:DeleteResolver",
          "appsync:DeleteType",
          "appsync:GetResolver",
          "appsync:GetType",
          "appsync:GetDataSource",
          "appsync:GetSchemaCreationStatus",
          "appsync:GetIntrospectionSchema",
          "appsync:GetGraphqlApi",
          "appsync:ListTypes",
          "appsync:ListApiKeys",
          "appsync:ListResolvers",
          "appsync:ListDataSources",
          "appsync:ListGraphqlApis",
          "appsync:StartSchemaCreation",
          "appsync:UpdateResolver",
          "appsync:UpdateType",
          "appsync:TagResource",
          "appsync:UntagResource",
          "appsync:ListTagsForResource",
          "appsync:CreateFunction",
          "appsync:UpdateFunction",
          "appsync:GetFunction",
          "appsync:DeleteFunction",
          "appsync:ListFunctions",
          "appsync:ListResolversByFunction",
          "appsync:EvaluateMappingTemplate",
          "appsync:EvaluateCode"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAppSyncInvokeFullAccess": {
    "policy": {
      "PolicyName": "AWSAppSyncInvokeFullAccess",
      "PolicyId": "ANPAILMPWRRZN27MPE3VM",
      "Arn": "arn:aws:iam::aws:policy/AWSAppSyncInvokeFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full invoking access to the AppSync service - both through the console and independently",
      "CreateDate": "2018-03-20T21:21:20.000Z",
      "UpdateDate": "2018-03-20T21:21:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appsync:GraphQL",
          "appsync:GetGraphqlApi",
          "appsync:ListGraphqlApis",
          "appsync:ListApiKeys"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSEC2FleetServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSEC2FleetServiceRolePolicy",
      "PolicyId": "ANPAJCL355O4TC27CPKVC",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSEC2FleetServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows EC2 Fleet to launch and manage instances.",
      "CreateDate": "2018-03-21T00:08:55.000Z",
      "UpdateDate": "2020-05-04T20:10:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeSubnets",
          "ec2:RequestSpotInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2SpotManagement",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:spot-instances-request/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "FMSServiceRolePolicy": {
    "policy": {
      "PolicyName": "FMSServiceRolePolicy",
      "PolicyId": "ANPAI62NTGYJB446ACUEA",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/FMSServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v28",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Access policy to allow FM service linked role to perform FM-related actions on FM-managed resources within a customer AWS Organization account.",
      "CreateDate": "2018-03-28T23:01:12.000Z",
      "UpdateDate": "2023-04-21T18:33:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "waf:UpdateWebACL",
          "waf:DeleteWebACL",
          "waf:GetWebACL",
          "waf:GetRuleGroup",
          "waf:ListSubscribedRuleGroups",
          "waf-regional:UpdateWebACL",
          "waf-regional:DeleteWebACL",
          "waf-regional:GetWebACL",
          "waf-regional:GetRuleGroup",
          "waf-regional:ListSubscribedRuleGroups",
          "waf-regional:ListResourcesForWebACL",
          "waf-regional:AssociateWebACL",
          "waf-regional:DisassociateWebACL",
          "elasticloadbalancing:SetWebACL",
          "apigateway:SetWebACL",
          "elasticloadbalancing:SetSecurityGroups",
          "waf:ListTagsForResource",
          "waf-regional:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:waf:*:*:webacl/*",
          "arn:aws:waf-regional:*:*:webacl/*",
          "arn:aws:waf:*:*:rulegroup/*",
          "arn:aws:waf-regional:*:*:rulegroup/*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*",
          "arn:aws:apigateway:*::/restapis/*/stages/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "wafv2:PutLoggingConfiguration",
          "wafv2:GetLoggingConfiguration",
          "wafv2:ListLoggingConfigurations",
          "wafv2:DeleteLoggingConfiguration"
        ],
        "Resource": [
          "arn:aws:wafv2:*:*:regional/webacl/*",
          "arn:aws:wafv2:*:*:global/webacl/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "waf:CreateWebACL",
          "waf-regional:CreateWebACL",
          "waf:GetChangeToken",
          "waf-regional:GetChangeToken",
          "waf-regional:GetWebACLForResource"
        ],
        "Resource": [
          "arn:aws:waf:*:*:*",
          "arn:aws:waf-regional:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
          "elasticloadbalancing:DescribeTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "waf:PutPermissionPolicy",
          "waf:GetPermissionPolicy",
          "waf:DeletePermissionPolicy",
          "waf-regional:PutPermissionPolicy",
          "waf-regional:GetPermissionPolicy",
          "waf-regional:DeletePermissionPolicy"
        ],
        "Resource": [
          "arn:aws:waf:*:*:webacl/*",
          "arn:aws:waf:*:*:rulegroup/*",
          "arn:aws:waf-regional:*:*:webacl/*",
          "arn:aws:waf-regional:*:*:rulegroup/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudfront:GetDistribution",
          "cloudfront:UpdateDistribution",
          "cloudfront:ListDistributionsByWebACLId",
          "cloudfront:ListDistributions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DeleteConfigRule",
          "config:GetComplianceDetailsByConfigRule",
          "config:PutConfigRule",
          "config:StartConfigRulesEvaluation"
        ],
        "Resource": [
          "arn:aws:config:*:*:config-rule/aws-service-rule/fms.amazonaws.com/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DescribeComplianceByConfigRule",
          "config:DescribeConfigurationRecorders",
          "config:DescribeConfigurationRecorderStatus",
          "config:PutConfigurationRecorder",
          "config:StartConfigurationRecorder",
          "config:PutDeliveryChannel",
          "config:DescribeDeliveryChannels",
          "config:DescribeDeliveryChannelStatus",
          "config:GetComplianceSummaryByConfigRule",
          "config:GetDiscoveredResourceCounts",
          "config:PutEvaluations",
          "config:SelectResourceConfig"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "config:DescribeConfigRuleEvaluationStatus",
          "config:DescribeConfigRules",
          "organizations:ListAccounts",
          "organizations:DescribeOrganizationalUnit",
          "organizations:ListChildren",
          "organizations:ListRoots",
          "organizations:ListParents",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "shield:CreateProtection",
          "shield:DeleteProtection",
          "shield:DescribeProtection",
          "shield:ListProtections",
          "shield:ListAttacks",
          "shield:CreateSubscription",
          "shield:DescribeSubscription",
          "shield:GetSubscriptionState",
          "shield:DescribeDRTAccess",
          "shield:DescribeEmergencyContactSettings",
          "shield:UpdateEmergencyContactSettings",
          "elasticloadbalancing:DescribeLoadBalancers",
          "ec2:DescribeAddresses",
          "shield:EnableApplicationLayerAutomaticResponse",
          "shield:DisableApplicationLayerAutomaticResponse",
          "shield:UpdateApplicationLayerAutomaticResponse"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:DeleteSecurityGroup",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
          "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteTags",
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup",
          "ec2:DescribeSecurityGroupReferences",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeStaleSecurityGroups",
          "ec2:DescribeNetworkInterfaces",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcPeeringConnections"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "wafv2:TagResource",
          "wafv2:ListResourcesForWebACL",
          "wafv2:AssociateWebACL",
          "wafv2:ListTagsForResource",
          "wafv2:UntagResource",
          "wafv2:GetWebACL",
          "wafv2:DisassociateFirewallManager",
          "wafv2:DeleteWebACL",
          "wafv2:DisassociateWebACL"
        ],
        "Resource": [
          "arn:aws:wafv2:*:*:global/webacl/*",
          "arn:aws:wafv2:*:*:regional/webacl/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "wafv2:UpdateWebACL",
          "wafv2:CreateWebACL",
          "wafv2:DeleteFirewallManagerRuleGroups",
          "wafv2:PutFirewallManagerRuleGroups"
        ],
        "Resource": [
          "arn:aws:wafv2:*:*:global/webacl/*",
          "arn:aws:wafv2:*:*:regional/webacl/*",
          "arn:aws:wafv2:*:*:global/rulegroup/*",
          "arn:aws:wafv2:*:*:regional/rulegroup/*",
          "arn:aws:wafv2:*:*:global/managedruleset/*",
          "arn:aws:wafv2:*:*:regional/managedruleset/*",
          "arn:aws:wafv2:*:*:global/ipset/*",
          "arn:aws:wafv2:*:*:regional/ipset/*",
          "arn:aws:wafv2:*:*:global/regexpatternset/*",
          "arn:aws:wafv2:*:*:regional/regexpatternset/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "wafv2:PutPermissionPolicy",
          "wafv2:GetPermissionPolicy",
          "wafv2:DeletePermissionPolicy"
        ],
        "Resource": [
          "arn:aws:wafv2:*:*:global/rulegroup/*",
          "arn:aws:wafv2:*:*:regional/rulegroup/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudfront:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "wafv2:GetWebACLForResource"
        ],
        "Resource": [
          "arn:aws:wafv2:*:*:regional/webacl/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteRouteTable"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AssociateRouteTable",
          "ec2:CreateSubnet",
          "ec2:CreateRouteTable",
          "ec2:DeleteSubnet",
          "ec2:DisassociateRouteTable",
          "ec2:ReplaceRouteTableAssociation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInternetGateways",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeAvailabilityZones"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ram:TagResource"
        ],
        "Resource": [
          "arn:aws:ram:*:*:resource-share/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ram:AssociateResourceShare",
          "ram:UpdateResourceShare",
          "ram:DeleteResourceShare"
        ],
        "Resource": [
          "arn:aws:ram:*:*:resource-share/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ram:CreateResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ram",
        "Effect": "Allow",
        "Action": [
          "ram:GetResourceShareAssociations",
          "ram:GetResourceShares"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "network-firewall:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "network-firewall:AssociateSubnets",
          "network-firewall:CreateFirewall",
          "network-firewall:CreateFirewallPolicy",
          "network-firewall:DisassociateSubnets",
          "network-firewall:UpdateFirewallDeleteProtection",
          "network-firewall:UpdateFirewallPolicy",
          "network-firewall:UpdateFirewallPolicyChangeProtection",
          "network-firewall:UpdateSubnetChangeProtection",
          "network-firewall:AssociateFirewallPolicy",
          "network-firewall:DescribeFirewall",
          "network-firewall:DescribeFirewallPolicy",
          "network-firewall:DescribeRuleGroup",
          "network-firewall:ListFirewallPolicies",
          "network-firewall:ListFirewalls",
          "network-firewall:ListRuleGroups",
          "network-firewall:PutResourcePolicy",
          "network-firewall:DescribeResourcePolicy",
          "network-firewall:DeleteResourcePolicy",
          "network-firewall:DescribeLoggingConfiguration",
          "network-firewall:UpdateLoggingConfiguration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "network-firewall:DeleteFirewallPolicy",
          "network-firewall:DeleteFirewall"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:ListLogDeliveries",
          "logs:CreateLogDelivery",
          "logs:GetLogDelivery",
          "logs:UpdateLogDelivery",
          "logs:DeleteLogDelivery"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53resolver:ListFirewallRuleGroupAssociations",
          "route53resolver:ListTagsForResource",
          "route53resolver:ListFirewallRuleGroups",
          "route53resolver:GetFirewallRuleGroupAssociation",
          "route53resolver:GetFirewallRuleGroup",
          "route53resolver:GetFirewallRuleGroupPolicy",
          "route53resolver:PutFirewallRuleGroupPolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53resolver:UpdateFirewallRuleGroupAssociation",
          "route53resolver:DisassociateFirewallRuleGroup"
        ],
        "Resource": [
          "arn:aws:route53resolver:*:*:firewall-rule-group-association/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53resolver:AssociateFirewallRuleGroup",
          "route53resolver:TagResource"
        ],
        "Resource": [
          "arn:aws:route53resolver:*:*:firewall-rule-group-association/*"
        ]
      }
    ]
  },
  "AmazonTranscribeReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonTranscribeReadOnlyAccess",
      "PolicyId": "ANPAJM6JONISXCAZKFCAO",
      "Arn": "arn:aws:iam::aws:policy/AmazonTranscribeReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to read only operation for Amazon Transcribe",
      "CreateDate": "2018-04-04T16:05:06.000Z",
      "UpdateDate": "2018-04-04T16:05:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "transcribe:Get*",
          "transcribe:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonTranscribeFullAccess": {
    "policy": {
      "PolicyName": "AmazonTranscribeFullAccess",
      "PolicyId": "ANPAINAV45F5NT5RMFO7K",
      "Arn": "arn:aws:iam::aws:policy/AmazonTranscribeFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Transcribe operations",
      "CreateDate": "2018-04-04T16:06:16.000Z",
      "UpdateDate": "2018-04-04T16:06:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "transcribe:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*transcribe*"
        ]
      }
    ]
  },
  "SecretsManagerReadWrite": {
    "policy": {
      "PolicyName": "SecretsManagerReadWrite",
      "PolicyId": "ANPAI3VG7CI5BIQZQ6G2E",
      "Arn": "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read/write access to AWS Secrets Manager via the AWS Management Console. Note: this exludes IAM actions, so combine with IAMFullAccess if rotation configuration is required.",
      "CreateDate": "2018-04-04T18:05:29.000Z",
      "UpdateDate": "2024-02-22T18:12:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "BasePermissions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:*",
          "cloudformation:CreateChangeSet",
          "cloudformation:DescribeChangeSet",
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStacks",
          "cloudformation:ExecuteChangeSet",
          "docdb-elastic:GetCluster",
          "docdb-elastic:ListClusters",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "kms:DescribeKey",
          "kms:ListAliases",
          "kms:ListKeys",
          "lambda:ListFunctions",
          "rds:DescribeDBClusters",
          "rds:DescribeDBInstances",
          "redshift:DescribeClusters",
          "redshift-serverless:ListWorkgroups",
          "redshift-serverless:GetNamespace",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LambdaPermissions",
        "Effect": "Allow",
        "Action": [
          "lambda:AddPermission",
          "lambda:CreateFunction",
          "lambda:GetFunction",
          "lambda:InvokeFunction",
          "lambda:UpdateFunctionConfiguration"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:SecretsManager*"
        ]
      },
      {
        "Sid": "SARPermissions",
        "Effect": "Allow",
        "Action": [
          "serverlessrepo:CreateCloudFormationChangeSet",
          "serverlessrepo:GetApplication"
        ],
        "Resource": [
          "arn:aws:serverlessrepo:*:*:applications/SecretsManager*"
        ]
      },
      {
        "Sid": "S3Permissions",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::awsserverlessrepo-changesets*",
          "arn:aws:s3:::secrets-manager-rotation-apps-*/*"
        ]
      }
    ]
  },
  "AWSAppSyncPushToCloudWatchLogs": {
    "policy": {
      "PolicyName": "AWSAppSyncPushToCloudWatchLogs",
      "PolicyId": "ANPAIWN7WNO34HLMJPUQS",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AppSync to push logs to user's CloudWatch account.",
      "CreateDate": "2018-04-09T19:38:55.000Z",
      "UpdateDate": "2018-04-09T19:38:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSArtifactAccountSync": {
    "policy": {
      "PolicyName": "AWSArtifactAccountSync",
      "PolicyId": "ANPAJMVPXRWZJZWDTYDNC",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSArtifactAccountSync",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Artifact read-only access to operations in AWS Organizations.",
      "CreateDate": "2018-04-10T23:04:33.000Z",
      "UpdateDate": "2018-04-10T23:04:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListAccounts",
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticTranscoder_FullAccess": {
    "policy": {
      "PolicyName": "AmazonElasticTranscoder_FullAccess",
      "PolicyId": "ANPAICFT6XVF3RSR4E7JG",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticTranscoder_FullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants users full access to Elastic Transcoder and the access to associated services that is required for full Elastic Transcoder functionality.",
      "CreateDate": "2018-04-27T18:59:35.000Z",
      "UpdateDate": "2019-06-10T22:51:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "elastictranscoder:*",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "iam:ListRoles",
          "sns:ListTopics"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSBetaServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonRDSBetaServiceRolePolicy",
      "PolicyId": "ANPAJ36CJAE6OYAR4YEK4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonRDSBetaServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon RDS to manage AWS resources on your behalf.",
      "CreateDate": "2018-05-02T19:41:04.000Z",
      "UpdateDate": "2022-12-14T18:33:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress",
          "ec2:AssociateAddress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateCoipPoolPermission",
          "ec2:CreateLocalGatewayRouteTablePermission",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteCoipPoolPermission",
          "ec2:DeleteLocalGatewayRouteTablePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCoipPools",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeLocalGatewayRouteTablePermissions",
          "ec2:DescribeLocalGatewayRouteTables",
          "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
          "ec2:DescribeLocalGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "ec2:DisassociateAddress",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:ModifyVpcEndpoint",
          "ec2:ReleaseAddress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeVpcEndpoints",
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/rds/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetRandomPassword"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DeleteSecret",
          "secretsmanager:DescribeSecret",
          "secretsmanager:PutSecretValue",
          "secretsmanager:RotateSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:UpdateSecretVersionStage",
          "secretsmanager:ListSecretVersionIds"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:rds-beta-us-east-1!*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:rds-beta-us-east-1!*"
        ]
      }
    ]
  },
  "AWSFMAdminFullAccess": {
    "policy": {
      "PolicyName": "AWSFMAdminFullAccess",
      "PolicyId": "ANPAJLAGM5X6WSNPF4EAQ",
      "Arn": "arn:aws:iam::aws:policy/AWSFMAdminFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Full access for AWS FM Administrator",
      "CreateDate": "2018-05-09T18:06:18.000Z",
      "UpdateDate": "2022-10-20T23:39:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "fms:*",
          "waf:*",
          "waf-regional:*",
          "elasticloadbalancing:SetWebACL",
          "firehose:ListDeliveryStreams",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListRoots",
          "organizations:ListChildren",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListOrganizationalUnitsForParent",
          "shield:GetSubscriptionState",
          "route53resolver:ListFirewallRuleGroups",
          "route53resolver:GetFirewallRuleGroup",
          "wafv2:ListRuleGroups",
          "wafv2:ListAvailableManagedRuleGroups",
          "wafv2:CheckCapacity",
          "wafv2:PutLoggingConfiguration",
          "wafv2:ListAvailableManagedRuleGroupVersions",
          "network-firewall:DescribeRuleGroup",
          "network-firewall:DescribeRuleGroupMetadata",
          "network-firewall:ListRuleGroups",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeRegions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutBucketPolicy",
          "s3:GetBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::aws-waf-logs-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess",
          "organizations:ListDelegatedAdministrators",
          "organizations:RegisterDelegatedAdministrator",
          "organizations:DeregisterDelegatedAdministrator"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSFMAdminReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSFMAdminReadOnlyAccess",
      "PolicyId": "ANPAJA3UKVVBN62QFIKLW",
      "Arn": "arn:aws:iam::aws:policy/AWSFMAdminReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Read only access for AWS FM Administrator that allows monitoring AWS FM operations",
      "CreateDate": "2018-05-09T20:07:39.000Z",
      "UpdateDate": "2022-10-31T22:42:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "fms:Get*",
          "fms:List*",
          "waf:Get*",
          "waf:List*",
          "waf-regional:Get*",
          "waf-regional:List*",
          "firehose:ListDeliveryStreams",
          "organizations:DescribeOrganization",
          "organizations:DescribeAccount",
          "organizations:ListRoots",
          "organizations:ListChildren",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListOrganizationalUnitsForParent",
          "shield:GetSubscriptionState",
          "route53resolver:ListFirewallRuleGroups",
          "route53resolver:GetFirewallRuleGroup",
          "wafv2:ListRuleGroups",
          "wafv2:ListAvailableManagedRuleGroups",
          "wafv2:CheckCapacity",
          "wafv2:ListAvailableManagedRuleGroupVersions",
          "network-firewall:DescribeRuleGroup",
          "network-firewall:DescribeRuleGroupMetadata",
          "network-firewall:ListRuleGroups",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeRegions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::aws-waf-logs-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSFMMemberReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSFMMemberReadOnlyAccess",
      "PolicyId": "ANPAIB2IVAQ4XXNHHA3DW",
      "Arn": "arn:aws:iam::aws:policy/AWSFMMemberReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS WAF actions for AWS Firewall Manager member accounts",
      "CreateDate": "2018-05-09T21:05:29.000Z",
      "UpdateDate": "2018-05-09T21:05:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "fms:GetAdminAccount",
          "waf:Get*",
          "waf:List*",
          "waf-regional:Get*",
          "waf-regional:List*",
          "organizations:DescribeOrganization"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoT1ClickReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSIoT1ClickReadOnlyAccess",
      "PolicyId": "ANPAI35VTLD3EBNY2JGXS",
      "Arn": "arn:aws:iam::aws:policy/AWSIoT1ClickReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS IoT 1-Click.",
      "CreateDate": "2018-05-11T21:49:24.000Z",
      "UpdateDate": "2018-05-11T21:49:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "iot1click:Describe*",
          "iot1click:Get*",
          "iot1click:List*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoT1ClickFullAccess": {
    "policy": {
      "PolicyName": "AWSIoT1ClickFullAccess",
      "PolicyId": "ANPAJPQNJPDUDESCCAMIA",
      "Arn": "arn:aws:iam::aws:policy/AWSIoT1ClickFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS IoT 1-Click.",
      "CreateDate": "2018-05-11T22:10:14.000Z",
      "UpdateDate": "2018-05-11T22:10:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "iot1click:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEKSClusterPolicy": {
    "policy": {
      "PolicyName": "AmazonEKSClusterPolicy",
      "PolicyId": "ANPAIBTLDQMIC6UOIGFWA",
      "Arn": "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 3,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides Kubernetes the permissions it requires to manage resources on your behalf. Kubernetes requires Ec2:CreateTags permissions to place identifying information on EC2 resources including but not limited to Instances, Security Groups, and Elastic Network Interfaces. ",
      "CreateDate": "2018-05-27T21:06:14.000Z",
      "UpdateDate": "2023-02-07T17:33:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:UpdateAutoScalingGroup",
          "ec2:AttachVolume",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateRoute",
          "ec2:CreateSecurityGroup",
          "ec2:CreateTags",
          "ec2:CreateVolume",
          "ec2:DeleteRoute",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteVolume",
          "ec2:DescribeInstances",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVolumes",
          "ec2:DescribeVolumesModifications",
          "ec2:DescribeVpcs",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeAvailabilityZones",
          "ec2:DetachVolume",
          "ec2:ModifyInstanceAttribute",
          "ec2:ModifyVolume",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeInternetGateways",
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
          "elasticloadbalancing:AttachLoadBalancerToSubnets",
          "elasticloadbalancing:ConfigureHealthCheck",
          "elasticloadbalancing:CreateListener",
          "elasticloadbalancing:CreateLoadBalancer",
          "elasticloadbalancing:CreateLoadBalancerListeners",
          "elasticloadbalancing:CreateLoadBalancerPolicy",
          "elasticloadbalancing:CreateTargetGroup",
          "elasticloadbalancing:DeleteListener",
          "elasticloadbalancing:DeleteLoadBalancer",
          "elasticloadbalancing:DeleteLoadBalancerListeners",
          "elasticloadbalancing:DeleteTargetGroup",
          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
          "elasticloadbalancing:DeregisterTargets",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancerPolicies",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroupAttributes",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticloadbalancing:DetachLoadBalancerFromSubnets",
          "elasticloadbalancing:ModifyListener",
          "elasticloadbalancing:ModifyLoadBalancerAttributes",
          "elasticloadbalancing:ModifyTargetGroup",
          "elasticloadbalancing:ModifyTargetGroupAttributes",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
          "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEKS_CNI_Policy": {
    "policy": {
      "PolicyName": "AmazonEKS_CNI_Policy",
      "PolicyId": "ANPAJWLAS474LDBXNNTM4",
      "Arn": "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides the Amazon VPC CNI Plugin (amazon-vpc-cni-k8s) the permissions it requires to modify the IP address configuration on your EKS worker nodes. This permission set allows the CNI to list, describe, and modify Elastic Network Interfaces on your behalf. More information on the AWS VPC CNI Plugin is available here: https://github.com/aws/amazon-vpc-cni-k8s",
      "CreateDate": "2018-05-27T21:07:42.000Z",
      "UpdateDate": "2024-03-04T20:20:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonEKSCNIPolicy",
        "Effect": "Allow",
        "Action": [
          "ec2:AssignPrivateIpAddresses",
          "ec2:AttachNetworkInterface",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeInstances",
          "ec2:DescribeTags",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeSubnets",
          "ec2:DetachNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:UnassignPrivateIpAddresses"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonEKSCNIPolicyENITag",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      }
    ]
  },
  "AmazonEKSServicePolicy": {
    "policy": {
      "PolicyName": "AmazonEKSServicePolicy",
      "PolicyId": "ANPAJFCNXU6HPGCIVXYDI",
      "Arn": "arn:aws:iam::aws:policy/AmazonEKSServicePolicy",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 2,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows Amazon Elastic Container Service for Kubernetes to create and manage the necessary resources to operate EKS Clusters.",
      "CreateDate": "2018-05-27T21:08:21.000Z",
      "UpdateDate": "2020-05-27T19:27:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeInstances",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DetachNetworkInterface",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:ModifyNetworkInterfaceAttribute",
          "iam:ListAttachedRolePolicies",
          "eks:UpdateClusterVersion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53:AssociateVPCWithHostedZone"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEKSWorkerNodePolicy": {
    "policy": {
      "PolicyName": "AmazonEKSWorkerNodePolicy",
      "PolicyId": "ANPAIBVMOY52IPQ6HD3PO",
      "Arn": "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows Amazon EKS worker nodes to connect to Amazon EKS Clusters.",
      "CreateDate": "2018-05-27T21:09:01.000Z",
      "UpdateDate": "2023-11-27T00:06:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "WorkerNodePermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVolumes",
          "ec2:DescribeVolumesModifications",
          "ec2:DescribeVpcs",
          "eks:DescribeCluster",
          "eks-auth:AssumeRoleForPodIdentity"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "NeptuneReadOnlyAccess": {
    "policy": {
      "PolicyName": "NeptuneReadOnlyAccess",
      "PolicyId": "ANPAJS5OQ5RXULC66WTGQ",
      "Arn": "arn:aws:iam::aws:policy/NeptuneReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Neptune. Note that this policy also grants access to Amazon RDS resources. For more information, see https://aws.amazon.com/neptune/faqs/.",
      "CreateDate": "2018-05-30T19:16:37.000Z",
      "UpdateDate": "2024-01-22T16:33:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowReadOnlyPermissionsForRDS",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeAccountAttributes",
          "rds:DescribeCertificates",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBClusterParameters",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBClusters",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBLogFiles",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEventCategories",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeEvents",
          "rds:DescribeGlobalClusters",
          "rds:DescribeOrderableDBInstanceOptions",
          "rds:DescribePendingMaintenanceActions",
          "rds:DownloadDBLogFilePortion",
          "rds:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowReadOnlyPermissionsForCloudwatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowReadOnlyPermissionsForEC2",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowReadOnlyPermissionsForKMS",
        "Effect": "Allow",
        "Action": [
          "kms:ListKeys",
          "kms:ListRetirableGrants",
          "kms:ListAliases",
          "kms:ListKeyPolicies"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowReadOnlyPermissionsForLogs",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogStreams",
          "logs:GetLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
          "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
        ]
      },
      {
        "Sid": "AllowReadOnlyPermissionsForNeptuneDB",
        "Effect": "Allow",
        "Action": [
          "neptune-db:Read*",
          "neptune-db:Get*",
          "neptune-db:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "NeptuneFullAccess": {
    "policy": {
      "PolicyName": "NeptuneFullAccess",
      "PolicyId": "ANPAIXSDEYRCNJRC6ITFK",
      "Arn": "arn:aws:iam::aws:policy/NeptuneFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Neptune. Note this policy also grants full access to publish on all SNS topics within the account and full access to Amazon RDS. For more information, see https://aws.amazon.com/neptune/faqs/.",
      "CreateDate": "2018-05-30T19:17:31.000Z",
      "UpdateDate": "2024-01-22T16:32:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowNeptuneCreate",
        "Effect": "Allow",
        "Action": [
          "rds:CreateDBCluster",
          "rds:CreateDBInstance"
        ],
        "Resource": [
          "arn:aws:rds:*:*:*"
        ]
      },
      {
        "Sid": "AllowManagementPermissionsForRDS",
        "Effect": "Allow",
        "Action": [
          "rds:AddRoleToDBCluster",
          "rds:AddSourceIdentifierToSubscription",
          "rds:AddTagsToResource",
          "rds:ApplyPendingMaintenanceAction",
          "rds:CopyDBClusterParameterGroup",
          "rds:CopyDBClusterSnapshot",
          "rds:CopyDBParameterGroup",
          "rds:CreateDBClusterEndpoint",
          "rds:CreateDBClusterParameterGroup",
          "rds:CreateDBClusterSnapshot",
          "rds:CreateDBParameterGroup",
          "rds:CreateDBSubnetGroup",
          "rds:CreateEventSubscription",
          "rds:CreateGlobalCluster",
          "rds:DeleteDBCluster",
          "rds:DeleteDBClusterEndpoint",
          "rds:DeleteDBClusterParameterGroup",
          "rds:DeleteDBClusterSnapshot",
          "rds:DeleteDBInstance",
          "rds:DeleteDBParameterGroup",
          "rds:DeleteDBSubnetGroup",
          "rds:DeleteEventSubscription",
          "rds:DeleteGlobalCluster",
          "rds:DescribeDBClusterEndpoints",
          "rds:DescribeAccountAttributes",
          "rds:DescribeCertificates",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBClusterParameters",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBClusters",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBLogFiles",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBSecurityGroups",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEngineDefaultClusterParameters",
          "rds:DescribeEngineDefaultParameters",
          "rds:DescribeEventCategories",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeEvents",
          "rds:DescribeGlobalClusters",
          "rds:DescribeOptionGroups",
          "rds:DescribeOrderableDBInstanceOptions",
          "rds:DescribePendingMaintenanceActions",
          "rds:DescribeValidDBInstanceModifications",
          "rds:DownloadDBLogFilePortion",
          "rds:FailoverDBCluster",
          "rds:FailoverGlobalCluster",
          "rds:ListTagsForResource",
          "rds:ModifyDBCluster",
          "rds:ModifyDBClusterEndpoint",
          "rds:ModifyDBClusterParameterGroup",
          "rds:ModifyDBClusterSnapshotAttribute",
          "rds:ModifyDBInstance",
          "rds:ModifyDBParameterGroup",
          "rds:ModifyDBSubnetGroup",
          "rds:ModifyEventSubscription",
          "rds:ModifyGlobalCluster",
          "rds:PromoteReadReplicaDBCluster",
          "rds:RebootDBInstance",
          "rds:RemoveFromGlobalCluster",
          "rds:RemoveRoleFromDBCluster",
          "rds:RemoveSourceIdentifierFromSubscription",
          "rds:RemoveTagsFromResource",
          "rds:ResetDBClusterParameterGroup",
          "rds:ResetDBParameterGroup",
          "rds:RestoreDBClusterFromSnapshot",
          "rds:RestoreDBClusterToPointInTime",
          "rds:StartDBCluster",
          "rds:StopDBCluster"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowOtherDepedentPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "kms:ListAliases",
          "kms:ListKeyPolicies",
          "kms:ListKeys",
          "kms:ListRetirableGrants",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "sns:ListSubscriptions",
          "sns:ListTopics",
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowPassRoleForNeptune",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowCreateSLRForNeptune",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
        ]
      },
      {
        "Sid": "AllowDataAccessForNeptune",
        "Effect": "Allow",
        "Action": [
          "neptune-db:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSPreviewServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonRDSPreviewServiceRolePolicy",
      "PolicyId": "ANPAIZHJJBU3675JOUEMQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonRDSPreviewServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Amazon RDS Preview Service Role Policy",
      "CreateDate": "2018-05-31T18:02:00.000Z",
      "UpdateDate": "2023-10-04T19:01:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rds:CrossRegionCommunication"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress",
          "ec2:AssociateAddress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateCoipPoolPermission",
          "ec2:CreateLocalGatewayRouteTablePermission",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteCoipPoolPermission",
          "ec2:DeleteLocalGatewayRouteTablePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCoipPools",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeLocalGatewayRouteTablePermissions",
          "ec2:DescribeLocalGatewayRouteTables",
          "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
          "ec2:DescribeLocalGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "ec2:DisassociateAddress",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:ReleaseAddress",
          "ec2:RevokeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/rds/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetRandomPassword"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DeleteSecret",
          "secretsmanager:DescribeSecret",
          "secretsmanager:PutSecretValue",
          "secretsmanager:RotateSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:UpdateSecretVersionStage",
          "secretsmanager:ListSecretVersionIds"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:rds-preview-us-east-2!*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:rds-preview-us-east-2!*"
        ]
      }
    ]
  },
  "AWSConfigServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSConfigServiceRolePolicy",
      "PolicyId": "ANPAJUCWFHNZER665LLQQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSConfigServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v50",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Config to call AWS services and collect resource configurations on your behalf.",
      "CreateDate": "2018-05-30T23:31:46.000Z",
      "UpdateDate": "2024-02-22T17:20:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSConfigServiceRolePolicyStatementID",
        "Effect": "Allow",
        "Action": [
          "access-analyzer:GetAnalyzer",
          "access-analyzer:GetArchiveRule",
          "access-analyzer:ListAnalyzers",
          "access-analyzer:ListArchiveRules",
          "access-analyzer:ListTagsForResource",
          "account:GetAlternateContact",
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:GetCertificateAuthorityCsr",
          "acm-pca:ListCertificateAuthorities",
          "acm-pca:ListTags",
          "acm:DescribeCertificate",
          "acm:ListCertificates",
          "acm:ListTagsForCertificate",
          "airflow:GetEnvironment",
          "airflow:ListEnvironments",
          "airflow:ListTagsForResource",
          "amplify:GetApp",
          "amplify:GetBranch",
          "amplify:ListApps",
          "amplify:ListBranches",
          "amplifyuibuilder:ExportThemes",
          "amplifyuibuilder:GetTheme",
          "amplifyuibuilder:ListThemes",
          "app-integrations:GetEventIntegration",
          "app-integrations:ListEventIntegrationAssociations",
          "app-integrations:ListEventIntegrations",
          "appconfig:GetApplication",
          "appconfig:GetConfigurationProfile",
          "appconfig:GetDeployment",
          "appconfig:GetDeploymentStrategy",
          "appconfig:GetEnvironment",
          "appconfig:GetExtensionAssociation",
          "appconfig:GetHostedConfigurationVersion",
          "appconfig:ListApplications",
          "appconfig:ListConfigurationProfiles",
          "appconfig:ListDeployments",
          "appconfig:ListDeploymentStrategies",
          "appconfig:ListEnvironments",
          "appconfig:ListExtensionAssociations",
          "appconfig:ListHostedConfigurationVersions",
          "appconfig:ListTagsForResource",
          "appflow:DescribeConnectorProfiles",
          "appflow:DescribeFlow",
          "appflow:ListFlows",
          "appflow:ListTagsForResource",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingPolicies",
          "appmesh:DescribeGatewayRoute",
          "appmesh:DescribeMesh",
          "appmesh:DescribeRoute",
          "appmesh:DescribeVirtualGateway",
          "appmesh:DescribeVirtualNode",
          "appmesh:DescribeVirtualRouter",
          "appmesh:DescribeVirtualService",
          "appmesh:ListGatewayRoutes",
          "appmesh:ListMeshes",
          "appmesh:ListRoutes",
          "appmesh:ListTagsForResource",
          "appmesh:ListVirtualGateways",
          "appmesh:ListVirtualNodes",
          "appmesh:ListVirtualRouters",
          "appmesh:ListVirtualServices",
          "apprunner:DescribeService",
          "apprunner:DescribeVpcConnector",
          "apprunner:ListServices",
          "apprunner:ListTagsForResource",
          "apprunner:ListVpcConnectors",
          "appstream:DescribeApplications",
          "appstream:DescribeDirectoryConfigs",
          "appstream:DescribeFleets",
          "appstream:DescribeStacks",
          "appstream:ListTagsForResource",
          "appsync:GetApiCache",
          "appsync:GetGraphqlApi",
          "appsync:ListGraphqlApis",
          "aps:DescribeAlertManagerDefinition",
          "aps:DescribeLoggingConfiguration",
          "aps:DescribeRuleGroupsNamespace",
          "aps:DescribeWorkspace",
          "aps:ListRuleGroupsNamespaces",
          "aps:ListTagsForResource",
          "aps:ListWorkspaces",
          "athena:GetDataCatalog",
          "athena:GetPreparedStatement",
          "athena:GetWorkGroup",
          "athena:ListDataCatalogs",
          "athena:ListPreparedStatements",
          "athena:ListTagsForResource",
          "athena:ListWorkGroups",
          "auditmanager:GetAccountStatus",
          "auditmanager:GetAssessment",
          "auditmanager:ListAssessments",
          "autoscaling-plans:DescribeScalingPlanResources",
          "autoscaling-plans:DescribeScalingPlans",
          "autoscaling-plans:GetScalingPlanResourceForecastData",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:DescribeLifecycleHooks",
          "autoscaling:DescribePolicies",
          "autoscaling:DescribeScheduledActions",
          "autoscaling:DescribeTags",
          "autoscaling:DescribeWarmPool",
          "backup-gateway:ListTagsForResource",
          "backup-gateway:ListVirtualMachines",
          "backup:DescribeBackupVault",
          "backup:DescribeFramework",
          "backup:DescribeProtectedResource",
          "backup:DescribeRecoveryPoint",
          "backup:DescribeReportPlan",
          "backup:GetBackupPlan",
          "backup:GetBackupSelection",
          "backup:GetBackupVaultAccessPolicy",
          "backup:GetBackupVaultNotifications",
          "backup:ListBackupPlans",
          "backup:ListBackupSelections",
          "backup:ListBackupVaults",
          "backup:ListFrameworks",
          "backup:ListRecoveryPointsByBackupVault",
          "backup:ListReportPlans",
          "backup:ListTags",
          "batch:DescribeComputeEnvironments",
          "batch:DescribeJobQueues",
          "batch:DescribeSchedulingPolicies",
          "batch:ListSchedulingPolicies",
          "batch:ListTagsForResource",
          "billingconductor:ListAccountAssociations",
          "billingconductor:ListBillingGroups",
          "billingconductor:ListCustomLineItems",
          "billingconductor:ListPricingPlans",
          "billingconductor:ListPricingRules",
          "billingconductor:ListPricingRulesAssociatedToPricingPlan",
          "billingconductor:ListTagsForResource",
          "budgets:DescribeBudgetAction",
          "budgets:DescribeBudgetActionsForAccount",
          "budgets:DescribeBudgetActionsForBudget",
          "budgets:ViewBudget",
          "cassandra:Select",
          "ce:GetAnomalyMonitors",
          "ce:GetAnomalySubscriptions",
          "cloud9:DescribeEnvironmentMemberships",
          "cloud9:DescribeEnvironments",
          "cloud9:ListEnvironments",
          "cloud9:ListTagsForResource",
          "cloudformation:DescribeType",
          "cloudformation:GetResource",
          "cloudformation:ListResources",
          "cloudformation:ListStackResources",
          "cloudformation:ListStacks",
          "cloudformation:ListTypes",
          "cloudfront:GetFunction",
          "cloudfront:GetOriginAccessControl",
          "cloudfront:GetResponseHeadersPolicy",
          "cloudfront:ListDistributions",
          "cloudfront:ListFunctions",
          "cloudfront:ListOriginAccessControls",
          "cloudfront:ListResponseHeadersPolicies",
          "cloudfront:ListTagsForResource",
          "cloudtrail:DescribeTrails",
          "cloudtrail:GetEventDataStore",
          "cloudtrail:GetEventSelectors",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:ListEventDataStores",
          "cloudtrail:ListTags",
          "cloudtrail:ListTrails",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:DescribeAnomalyDetectors",
          "cloudwatch:GetDashboard",
          "cloudwatch:GetMetricStream",
          "cloudwatch:ListDashboards",
          "cloudwatch:ListMetricStreams",
          "cloudwatch:ListTagsForResource",
          "codeartifact:DescribeRepository",
          "codeartifact:GetRepositoryPermissionsPolicy",
          "codeartifact:ListDomains",
          "codeartifact:ListPackages",
          "codeartifact:ListPackageVersions",
          "codeartifact:ListRepositories",
          "codeartifact:ListTagsForResource",
          "codebuild:BatchGetReportGroups",
          "codebuild:ListReportGroups",
          "codecommit:GetRepository",
          "codecommit:GetRepositoryTriggers",
          "codecommit:ListRepositories",
          "codecommit:ListTagsForResource",
          "codedeploy:GetDeploymentConfig",
          "codeguru-profiler:DescribeProfilingGroup",
          "codeguru-profiler:GetNotificationConfiguration",
          "codeguru-profiler:GetPolicy",
          "codeguru-profiler:ListProfilingGroups",
          "codeguru-reviewer:DescribeRepositoryAssociation",
          "codeguru-reviewer:ListRepositoryAssociations",
          "codepipeline:GetPipeline",
          "codepipeline:GetPipelineState",
          "codepipeline:ListPipelines",
          "cognito-identity:DescribeIdentityPool",
          "cognito-identity:GetIdentityPoolRoles",
          "cognito-identity:GetPrincipalTagAttributeMap",
          "cognito-identity:ListIdentityPools",
          "cognito-identity:ListTagsForResource",
          "cognito-idp:DescribeIdentityProvider",
          "cognito-idp:DescribeResourceServer",
          "cognito-idp:DescribeUserPool",
          "cognito-idp:DescribeUserPoolClient",
          "cognito-idp:DescribeUserPoolDomain",
          "cognito-idp:GetGroup",
          "cognito-idp:GetUserPoolMfaConfig",
          "cognito-idp:ListGroups",
          "cognito-idp:ListIdentityProviders",
          "cognito-idp:ListResourceServers",
          "cognito-idp:ListTagsForResource",
          "cognito-idp:ListUserPoolClients",
          "cognito-idp:ListUserPools",
          "config:BatchGet*",
          "config:Describe*",
          "config:Get*",
          "config:List*",
          "config:Put*",
          "config:Select*",
          "connect:DescribeEvaluationForm",
          "connect:DescribeInstance",
          "connect:DescribeInstanceStorageConfig",
          "connect:DescribePhoneNumber",
          "connect:DescribePrompt",
          "connect:DescribeQuickConnect",
          "connect:DescribeRule",
          "connect:DescribeUser",
          "connect:GetTaskTemplate",
          "connect:ListApprovedOrigins",
          "connect:ListEvaluationForms",
          "connect:ListInstanceAttributes",
          "connect:ListInstances",
          "connect:ListInstanceStorageConfigs",
          "connect:ListIntegrationAssociations",
          "connect:ListPhoneNumbers",
          "connect:ListPhoneNumbersV2",
          "connect:ListPrompts",
          "connect:ListQuickConnects",
          "connect:ListRules",
          "connect:ListSecurityKeys",
          "connect:ListTagsForResource",
          "connect:ListTaskTemplates",
          "connect:ListUsers",
          "connect:SearchAvailablePhoneNumbers",
          "databrew:DescribeDataset",
          "databrew:DescribeJob",
          "databrew:DescribeProject",
          "databrew:DescribeRecipe",
          "databrew:DescribeRuleset",
          "databrew:DescribeSchedule",
          "databrew:ListDatasets",
          "databrew:ListJobs",
          "databrew:ListProjects",
          "databrew:ListRecipes",
          "databrew:ListRecipeVersions",
          "databrew:ListRulesets",
          "databrew:ListSchedules",
          "datasync:DescribeAgent",
          "datasync:DescribeLocationEfs",
          "datasync:DescribeLocationFsxLustre",
          "datasync:DescribeLocationFsxWindows",
          "datasync:DescribeLocationHdfs",
          "datasync:DescribeLocationNfs",
          "datasync:DescribeLocationObjectStorage",
          "datasync:DescribeLocationS3",
          "datasync:DescribeLocationSmb",
          "datasync:DescribeTask",
          "datasync:ListAgents",
          "datasync:ListLocations",
          "datasync:ListTagsForResource",
          "datasync:ListTasks",
          "dax:DescribeClusters",
          "dax:DescribeParameterGroups",
          "dax:DescribeParameters",
          "dax:DescribeSubnetGroups",
          "dax:ListTags",
          "detective:ListGraphs",
          "detective:ListTagsForResource",
          "devicefarm:GetInstanceProfile",
          "devicefarm:GetNetworkProfile",
          "devicefarm:GetProject",
          "devicefarm:GetTestGridProject",
          "devicefarm:ListInstanceProfiles",
          "devicefarm:ListNetworkProfiles",
          "devicefarm:ListProjects",
          "devicefarm:ListTagsForResource",
          "devicefarm:ListTestGridProjects",
          "devops-guru:GetResourceCollection",
          "dms:DescribeCertificates",
          "dms:DescribeEndpoints",
          "dms:DescribeEventSubscriptions",
          "dms:DescribeReplicationInstances",
          "dms:DescribeReplicationSubnetGroups",
          "dms:DescribeReplicationTaskAssessmentRuns",
          "dms:DescribeReplicationTasks",
          "dms:ListTagsForResource",
          "ds:DescribeDirectories",
          "ds:DescribeDomainControllers",
          "ds:DescribeEventTopics",
          "ds:ListLogSubscriptions",
          "ds:ListTagsForResource",
          "dynamodb:DescribeContinuousBackups",
          "dynamodb:DescribeGlobalTable",
          "dynamodb:DescribeGlobalTableSettings",
          "dynamodb:DescribeLimits",
          "dynamodb:DescribeTable",
          "dynamodb:DescribeTableReplicaAutoScaling",
          "dynamodb:DescribeTimeToLive",
          "dynamodb:ListTables",
          "dynamodb:ListTagsOfResource",
          "ec2:Describe*",
          "ec2:DescribeClientVpnAuthorizationRules",
          "ec2:DescribeClientVpnEndpoints",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeFleets",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSpotFleetRequests",
          "ec2:DescribeTags",
          "ec2:DescribeTrafficMirrorFilters",
          "ec2:DescribeTrafficMirrorSessions",
          "ec2:DescribeTrafficMirrorTargets",
          "ec2:DescribeVolumeAttribute",
          "ec2:DescribeVolumes",
          "ec2:GetEbsEncryptionByDefault",
          "ec2:GetInstanceTypesFromInstanceRequirements",
          "ec2:GetIpamPoolAllocations",
          "ec2:GetIpamPoolCidrs",
          "ec2:GetManagedPrefixListEntries",
          "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
          "ec2:GetNetworkInsightsAccessScopeContent",
          "ecr-public:DescribeRepositories",
          "ecr-public:GetRepositoryCatalogData",
          "ecr-public:GetRepositoryPolicy",
          "ecr-public:ListTagsForResource",
          "ecr:BatchGetRepositoryScanningConfiguration",
          "ecr:DescribePullThroughCacheRules",
          "ecr:DescribeRegistry",
          "ecr:DescribeRepositories",
          "ecr:GetLifecyclePolicy",
          "ecr:GetRegistryPolicy",
          "ecr:GetRepositoryPolicy",
          "ecr:ListTagsForResource",
          "ecs:DescribeCapacityProviders",
          "ecs:DescribeClusters",
          "ecs:DescribeServices",
          "ecs:DescribeTaskDefinition",
          "ecs:DescribeTaskSets",
          "ecs:ListClusters",
          "ecs:ListServices",
          "ecs:ListTagsForResource",
          "ecs:ListTaskDefinitionFamilies",
          "ecs:ListTaskDefinitions",
          "eks:DescribeAddon",
          "eks:DescribeCluster",
          "eks:DescribeFargateProfile",
          "eks:DescribeIdentityProviderConfig",
          "eks:DescribeNodegroup",
          "eks:ListAddons",
          "eks:ListClusters",
          "eks:ListFargateProfiles",
          "eks:ListIdentityProviderConfigs",
          "eks:ListNodegroups",
          "eks:ListTagsForResource",
          "elasticache:DescribeCacheClusters",
          "elasticache:DescribeCacheParameterGroups",
          "elasticache:DescribeCacheParameters",
          "elasticache:DescribeCacheSecurityGroups",
          "elasticache:DescribeCacheSubnetGroups",
          "elasticache:DescribeGlobalReplicationGroups",
          "elasticache:DescribeReplicationGroups",
          "elasticache:DescribeSnapshots",
          "elasticache:DescribeUserGroups",
          "elasticache:DescribeUsers",
          "elasticache:ListTagsForResource",
          "elasticbeanstalk:DescribeConfigurationSettings",
          "elasticbeanstalk:DescribeEnvironments",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeBackupPolicy",
          "elasticfilesystem:DescribeFileSystemPolicy",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeLifecycleConfiguration",
          "elasticfilesystem:DescribeMountTargets",
          "elasticfilesystem:DescribeMountTargetSecurityGroups",
          "elasticloadbalancing:DescribeListenerCertificates",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancerPolicies",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetGroupAttributes",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:DescribeSecurityConfiguration",
          "elasticmapreduce:DescribeStep",
          "elasticmapreduce:DescribeStudio",
          "elasticmapreduce:GetBlockPublicAccessConfiguration",
          "elasticmapreduce:GetManagedScalingPolicy",
          "elasticmapreduce:GetStudioSessionMapping",
          "elasticmapreduce:ListClusters",
          "elasticmapreduce:ListInstanceFleets",
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ListInstances",
          "elasticmapreduce:ListSecurityConfigurations",
          "elasticmapreduce:ListSteps",
          "elasticmapreduce:ListStudios",
          "elasticmapreduce:ListStudioSessionMappings",
          "emr-containers:DescribeVirtualCluster",
          "emr-containers:ListVirtualClusters",
          "emr-serverless:GetApplication",
          "emr-serverless:ListApplications",
          "es:DescribeDomain",
          "es:DescribeDomains",
          "es:DescribeElasticsearchDomain",
          "es:DescribeElasticsearchDomains",
          "es:GetCompatibleElasticsearchVersions",
          "es:GetCompatibleVersions",
          "es:ListDomainNames",
          "es:ListTags",
          "events:DescribeApiDestination",
          "events:DescribeArchive",
          "events:DescribeConnection",
          "events:DescribeEndpoint",
          "events:DescribeEventBus",
          "events:DescribeRule",
          "events:ListApiDestinations",
          "events:ListArchives",
          "events:ListConnections",
          "events:ListEndpoints",
          "events:ListEventBuses",
          "events:ListRules",
          "events:ListTagsForResource",
          "events:ListTargetsByRule",
          "evidently:GetLaunch",
          "evidently:GetProject",
          "evidently:GetSegment",
          "evidently:ListLaunches",
          "evidently:ListProjects",
          "evidently:ListSegments",
          "evidently:ListTagsForResource",
          "finspace:GetEnvironment",
          "finspace:ListEnvironments",
          "firehose:DescribeDeliveryStream",
          "firehose:ListDeliveryStreams",
          "firehose:ListTagsForDeliveryStream",
          "fis:GetExperimentTemplate",
          "fis:ListExperimentTemplates",
          "fms:GetNotificationChannel",
          "fms:GetPolicy",
          "fms:ListPolicies",
          "fms:ListTagsForResource",
          "forecast:DescribeDataset",
          "forecast:DescribeDatasetGroup",
          "forecast:ListDatasetGroups",
          "forecast:ListDatasets",
          "forecast:ListTagsForResource",
          "frauddetector:GetDetectors",
          "frauddetector:GetDetectorVersion",
          "frauddetector:GetEntityTypes",
          "frauddetector:GetEventTypes",
          "frauddetector:GetExternalModels",
          "frauddetector:GetLabels",
          "frauddetector:GetModels",
          "frauddetector:GetOutcomes",
          "frauddetector:GetRules",
          "frauddetector:GetVariables",
          "frauddetector:ListTagsForResource",
          "fsx:DescribeBackups",
          "fsx:DescribeDataRepositoryAssociations",
          "fsx:DescribeFileSystems",
          "fsx:DescribeSnapshots",
          "fsx:DescribeStorageVirtualMachines",
          "fsx:DescribeVolumes",
          "fsx:ListTagsForResource",
          "gamelift:DescribeAlias",
          "gamelift:DescribeBuild",
          "gamelift:DescribeFleetAttributes",
          "gamelift:DescribeFleetCapacity",
          "gamelift:DescribeFleetLocationAttributes",
          "gamelift:DescribeFleetLocationCapacity",
          "gamelift:DescribeFleetPortSettings",
          "gamelift:DescribeGameServerGroup",
          "gamelift:DescribeGameSessionQueues",
          "gamelift:DescribeMatchmakingConfigurations",
          "gamelift:DescribeMatchmakingRuleSets",
          "gamelift:DescribeRuntimeConfiguration",
          "gamelift:DescribeScript",
          "gamelift:DescribeVpcPeeringAuthorizations",
          "gamelift:DescribeVpcPeeringConnections",
          "gamelift:ListAliases",
          "gamelift:ListBuilds",
          "gamelift:ListFleets",
          "gamelift:ListGameServerGroups",
          "gamelift:ListScripts",
          "gamelift:ListTagsForResource",
          "geo:DescribeGeofenceCollection",
          "geo:DescribeMap",
          "geo:DescribePlaceIndex",
          "geo:DescribeRouteCalculator",
          "geo:DescribeTracker",
          "geo:ListGeofenceCollections",
          "geo:ListMaps",
          "geo:ListPlaceIndexes",
          "geo:ListRouteCalculators",
          "geo:ListTrackerConsumers",
          "geo:ListTrackers",
          "globalaccelerator:DescribeAccelerator",
          "globalaccelerator:DescribeEndpointGroup",
          "globalaccelerator:DescribeListener",
          "globalaccelerator:ListAccelerators",
          "globalaccelerator:ListEndpointGroups",
          "globalaccelerator:ListListeners",
          "globalaccelerator:ListTagsForResource",
          "glue:BatchGetDevEndpoints",
          "glue:BatchGetJobs",
          "glue:BatchGetWorkflows",
          "glue:GetClassifier",
          "glue:GetClassifiers",
          "glue:GetCrawler",
          "glue:GetCrawlers",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetDevEndpoint",
          "glue:GetDevEndpoints",
          "glue:GetJob",
          "glue:GetJobs",
          "glue:GetMLTransform",
          "glue:GetMLTransforms",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:GetSecurityConfiguration",
          "glue:GetSecurityConfigurations",
          "glue:GetTable",
          "glue:GetTags",
          "glue:GetWorkflow",
          "glue:ListCrawlers",
          "glue:ListDevEndpoints",
          "glue:ListJobs",
          "glue:ListMLTransforms",
          "glue:ListWorkflows",
          "grafana:DescribeWorkspace",
          "grafana:DescribeWorkspaceAuthentication",
          "grafana:DescribeWorkspaceConfiguration",
          "grafana:ListWorkspaces",
          "greengrass:DescribeComponent",
          "greengrass:GetComponent",
          "greengrass:ListComponents",
          "greengrass:ListComponentVersions",
          "groundstation:GetConfig",
          "groundstation:GetDataflowEndpointGroup",
          "groundstation:GetMissionProfile",
          "groundstation:ListConfigs",
          "groundstation:ListDataflowEndpointGroups",
          "groundstation:ListMissionProfiles",
          "groundstation:ListTagsForResource",
          "guardduty:DescribePublishingDestination",
          "guardduty:GetAdministratorAccount",
          "guardduty:GetDetector",
          "guardduty:GetFilter",
          "guardduty:GetFindings",
          "guardduty:GetIPSet",
          "guardduty:GetMasterAccount",
          "guardduty:GetMemberDetectors",
          "guardduty:GetMembers",
          "guardduty:GetThreatIntelSet",
          "guardduty:ListDetectors",
          "guardduty:ListFilters",
          "guardduty:ListFindings",
          "guardduty:ListIPSets",
          "guardduty:ListMembers",
          "guardduty:ListOrganizationAdminAccounts",
          "guardduty:ListPublishingDestinations",
          "guardduty:ListTagsForResource",
          "guardduty:ListThreatIntelSets",
          "healthlake:DescribeFHIRDatastore",
          "healthlake:ListFHIRDatastores",
          "healthlake:ListTagsForResource",
          "iam:GenerateCredentialReport",
          "iam:GetAccountAuthorizationDetails",
          "iam:GetAccountPasswordPolicy",
          "iam:GetAccountSummary",
          "iam:GetCredentialReport",
          "iam:GetGroup",
          "iam:GetGroupPolicy",
          "iam:GetInstanceProfile",
          "iam:GetOpenIDConnectProvider",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:GetSAMLProvider",
          "iam:GetServerCertificate",
          "iam:GetUser",
          "iam:GetUserPolicy",
          "iam:ListAccessKeys",
          "iam:ListAttachedGroupPolicies",
          "iam:ListAttachedRolePolicies",
          "iam:ListAttachedUserPolicies",
          "iam:ListEntitiesForPolicy",
          "iam:ListGroupPolicies",
          "iam:ListGroups",
          "iam:ListGroupsForUser",
          "iam:ListInstanceProfiles",
          "iam:ListInstanceProfilesForRole",
          "iam:ListInstanceProfileTags",
          "iam:ListMFADevices",
          "iam:ListMFADeviceTags",
          "iam:ListOpenIDConnectProviders",
          "iam:ListPolicyVersions",
          "iam:ListRolePolicies",
          "iam:ListRoles",
          "iam:ListSAMLProviders",
          "iam:ListServerCertificates",
          "iam:ListUserPolicies",
          "iam:ListUsers",
          "iam:ListVirtualMFADevices",
          "imagebuilder:GetComponent",
          "imagebuilder:GetContainerRecipe",
          "imagebuilder:GetDistributionConfiguration",
          "imagebuilder:GetImage",
          "imagebuilder:GetImagePipeline",
          "imagebuilder:GetImageRecipe",
          "imagebuilder:GetInfrastructureConfiguration",
          "imagebuilder:ListComponentBuildVersions",
          "imagebuilder:ListComponents",
          "imagebuilder:ListContainerRecipes",
          "imagebuilder:ListDistributionConfigurations",
          "imagebuilder:ListImageBuildVersions",
          "imagebuilder:ListImagePipelines",
          "imagebuilder:ListImageRecipes",
          "imagebuilder:ListImages",
          "imagebuilder:ListInfrastructureConfigurations",
          "inspector2:BatchGetAccountStatus",
          "inspector2:GetDelegatedAdminAccount",
          "inspector2:ListFilters",
          "inspector2:ListMembers",
          "iot:DescribeAccountAuditConfiguration",
          "iot:DescribeAuthorizer",
          "iot:DescribeCACertificate",
          "iot:DescribeCertificate",
          "iot:DescribeCustomMetric",
          "iot:DescribeDimension",
          "iot:DescribeDomainConfiguration",
          "iot:DescribeFleetMetric",
          "iot:DescribeJobTemplate",
          "iot:DescribeMitigationAction",
          "iot:DescribeProvisioningTemplate",
          "iot:DescribeRoleAlias",
          "iot:DescribeScheduledAudit",
          "iot:DescribeSecurityProfile",
          "iot:GetPolicy",
          "iot:GetTopicRule",
          "iot:GetTopicRuleDestination",
          "iot:ListAuthorizers",
          "iot:ListCACertificates",
          "iot:ListCertificates",
          "iot:ListCustomMetrics",
          "iot:ListDimensions",
          "iot:ListDomainConfigurations",
          "iot:ListFleetMetrics",
          "iot:ListJobTemplates",
          "iot:ListMitigationActions",
          "iot:ListPolicies",
          "iot:ListProvisioningTemplates",
          "iot:ListRoleAliases",
          "iot:ListScheduledAudits",
          "iot:ListSecurityProfiles",
          "iot:ListSecurityProfilesForTarget",
          "iot:ListTagsForResource",
          "iot:ListTargetsForSecurityProfile",
          "iot:ListTopicRuleDestinations",
          "iot:ListTopicRules",
          "iot:ListV2LoggingLevels",
          "iot:ValidateSecurityProfileBehaviors",
          "iotanalytics:DescribeChannel",
          "iotanalytics:DescribeDataset",
          "iotanalytics:DescribeDatastore",
          "iotanalytics:DescribePipeline",
          "iotanalytics:ListChannels",
          "iotanalytics:ListDatasets",
          "iotanalytics:ListDatastores",
          "iotanalytics:ListPipelines",
          "iotanalytics:ListTagsForResource",
          "iotevents:DescribeAlarmModel",
          "iotevents:DescribeDetectorModel",
          "iotevents:DescribeInput",
          "iotevents:ListAlarmModels",
          "iotevents:ListDetectorModels",
          "iotevents:ListInputs",
          "iotevents:ListTagsForResource",
          "iotsitewise:DescribeAccessPolicy",
          "iotsitewise:DescribeAsset",
          "iotsitewise:DescribeAssetModel",
          "iotsitewise:DescribeDashboard",
          "iotsitewise:DescribeGateway",
          "iotsitewise:DescribePortal",
          "iotsitewise:DescribeProject",
          "iotsitewise:ListAccessPolicies",
          "iotsitewise:ListAssetModels",
          "iotsitewise:ListAssets",
          "iotsitewise:ListDashboards",
          "iotsitewise:ListGateways",
          "iotsitewise:ListPortals",
          "iotsitewise:ListProjectAssets",
          "iotsitewise:ListProjects",
          "iotsitewise:ListTagsForResource",
          "iottwinmaker:GetComponentType",
          "iottwinmaker:GetEntity",
          "iottwinmaker:GetScene",
          "iottwinmaker:GetSyncJob",
          "iottwinmaker:GetWorkspace",
          "iottwinmaker:ListComponentTypes",
          "iottwinmaker:ListEntities",
          "iottwinmaker:ListScenes",
          "iottwinmaker:ListSyncJobs",
          "iottwinmaker:ListTagsForResource",
          "iottwinmaker:ListWorkspaces",
          "iotwireless:GetFuotaTask",
          "iotwireless:GetMulticastGroup",
          "iotwireless:GetServiceProfile",
          "iotwireless:GetWirelessDevice",
          "iotwireless:GetWirelessGatewayTaskDefinition",
          "iotwireless:ListFuotaTasks",
          "iotwireless:ListMulticastGroups",
          "iotwireless:ListServiceProfiles",
          "iotwireless:ListTagsForResource",
          "iotwireless:ListWirelessDevices",
          "iotwireless:ListWirelessGatewayTaskDefinitions",
          "ivs:GetChannel",
          "ivs:GetPlaybackKeyPair",
          "ivs:GetRecordingConfiguration",
          "ivs:GetStreamKey",
          "ivs:ListChannels",
          "ivs:ListPlaybackKeyPairs",
          "ivs:ListRecordingConfigurations",
          "ivs:ListStreamKeys",
          "ivs:ListTagsForResource",
          "kafka:DescribeCluster",
          "kafka:DescribeClusterV2",
          "kafka:DescribeConfiguration",
          "kafka:DescribeConfigurationRevision",
          "kafka:DescribeVpcConnection",
          "kafka:GetClusterPolicy",
          "kafka:ListClusters",
          "kafka:ListClustersV2",
          "kafka:ListConfigurations",
          "kafka:ListScramSecrets",
          "kafka:ListTagsForResource",
          "kafka:ListVpcConnections",
          "kafkaconnect:DescribeConnector",
          "kafkaconnect:ListConnectors",
          "kendra:DescribeIndex",
          "kendra:ListIndices",
          "kendra:ListTagsForResource",
          "kinesis:DescribeStreamConsumer",
          "kinesis:DescribeStreamSummary",
          "kinesis:ListStreamConsumers",
          "kinesis:ListStreams",
          "kinesis:ListTagsForStream",
          "kinesisanalytics:DescribeApplication",
          "kinesisanalytics:ListApplications",
          "kinesisanalytics:ListTagsForResource",
          "kinesisvideo:DescribeSignalingChannel",
          "kinesisvideo:DescribeStream",
          "kinesisvideo:ListSignalingChannels",
          "kinesisvideo:ListStreams",
          "kinesisvideo:ListTagsForResource",
          "kinesisvideo:ListTagsForStream",
          "kms:DescribeKey",
          "kms:GetKeyPolicy",
          "kms:GetKeyRotationStatus",
          "kms:ListAliases",
          "kms:ListKeys",
          "kms:ListResourceTags",
          "lakeformation:DescribeResource",
          "lakeformation:GetDataLakeSettings",
          "lakeformation:ListPermissions",
          "lakeformation:ListResources",
          "lambda:GetAlias",
          "lambda:GetCodeSigningConfig",
          "lambda:GetFunction",
          "lambda:GetFunctionCodeSigningConfig",
          "lambda:GetLayerVersion",
          "lambda:GetPolicy",
          "lambda:ListAliases",
          "lambda:ListCodeSigningConfigs",
          "lambda:ListFunctions",
          "lambda:ListLayers",
          "lambda:ListLayerVersions",
          "lambda:ListTags",
          "lambda:ListVersionsByFunction",
          "lex:DescribeBot",
          "lex:DescribeBotAlias",
          "lex:DescribeBotVersion",
          "lex:DescribeResourcePolicy",
          "lex:ListBotAliases",
          "lex:ListBotLocales",
          "lex:ListBots",
          "lex:ListBotVersions",
          "lex:ListTagsForResource",
          "license-manager:GetGrant",
          "license-manager:GetLicense",
          "license-manager:ListDistributedGrants",
          "license-manager:ListLicenses",
          "license-manager:ListReceivedGrants",
          "lightsail:GetAlarms",
          "lightsail:GetBuckets",
          "lightsail:GetCertificates",
          "lightsail:GetContainerServices",
          "lightsail:GetDisk",
          "lightsail:GetDisks",
          "lightsail:GetDistributions",
          "lightsail:GetInstance",
          "lightsail:GetInstances",
          "lightsail:GetKeyPair",
          "lightsail:GetLoadBalancer",
          "lightsail:GetLoadBalancers",
          "lightsail:GetLoadBalancerTlsCertificates",
          "lightsail:GetRelationalDatabase",
          "lightsail:GetRelationalDatabaseParameters",
          "lightsail:GetRelationalDatabases",
          "lightsail:GetStaticIp",
          "lightsail:GetStaticIps",
          "logs:DescribeDestinations",
          "logs:DescribeLogGroups",
          "logs:DescribeMetricFilters",
          "logs:GetDataProtectionPolicy",
          "logs:GetLogDelivery",
          "logs:ListLogDeliveries",
          "logs:ListTagsLogGroup",
          "lookoutequipment:DescribeInferenceScheduler",
          "lookoutequipment:ListTagsForResource",
          "lookoutmetrics:DescribeAlert",
          "lookoutmetrics:DescribeAnomalyDetector",
          "lookoutmetrics:ListAlerts",
          "lookoutmetrics:ListAnomalyDetectors",
          "lookoutmetrics:ListMetricSets",
          "lookoutmetrics:ListTagsForResource",
          "lookoutvision:DescribeProject",
          "lookoutvision:ListProjects",
          "m2:GetEnvironment",
          "m2:ListEnvironments",
          "m2:ListTagsForResource",
          "macie2:DescribeOrganizationConfiguration",
          "macie2:GetAutomatedDiscoveryConfiguration",
          "macie2:GetClassificationExportConfiguration",
          "macie2:GetCustomDataIdentifier",
          "macie2:GetFindingsPublicationConfiguration",
          "macie2:GetMacieSession",
          "macie2:ListCustomDataIdentifiers",
          "macie2:ListTagsForResource",
          "managedblockchain:GetMember",
          "managedblockchain:GetNetwork",
          "managedblockchain:GetNode",
          "managedblockchain:ListInvitations",
          "managedblockchain:ListMembers",
          "managedblockchain:ListNodes",
          "mediaconnect:DescribeFlow",
          "mediaconnect:ListFlows",
          "mediaconnect:ListTagsForResource",
          "mediapackage-vod:DescribePackagingConfiguration",
          "mediapackage-vod:DescribePackagingGroup",
          "mediapackage-vod:ListPackagingConfigurations",
          "mediapackage-vod:ListPackagingGroups",
          "mediapackage-vod:ListTagsForResource",
          "mediatailor:GetPlaybackConfiguration",
          "mediatailor:ListPlaybackConfigurations",
          "memorydb:DescribeAcls",
          "memorydb:DescribeClusters",
          "memorydb:DescribeParameterGroups",
          "memorydb:DescribeParameters",
          "memorydb:DescribeSubnetGroups",
          "memorydb:DescribeUsers",
          "memorydb:ListTags",
          "mobiletargeting:GetApp",
          "mobiletargeting:GetApplicationSettings",
          "mobiletargeting:GetApps",
          "mobiletargeting:GetCampaign",
          "mobiletargeting:GetCampaigns",
          "mobiletargeting:GetEmailChannel",
          "mobiletargeting:GetEmailTemplate",
          "mobiletargeting:GetEventStream",
          "mobiletargeting:GetInAppTemplate",
          "mobiletargeting:GetSegment",
          "mobiletargeting:GetSegments",
          "mobiletargeting:ListTagsForResource",
          "mobiletargeting:ListTemplates",
          "mq:DescribeBroker",
          "mq:ListBrokers",
          "network-firewall:DescribeLoggingConfiguration",
          "network-firewall:ListFirewalls",
          "networkmanager:DescribeGlobalNetworks",
          "networkmanager:GetConnectPeer",
          "networkmanager:GetCustomerGatewayAssociations",
          "networkmanager:GetDevices",
          "networkmanager:GetLinkAssociations",
          "networkmanager:GetLinks",
          "networkmanager:GetSites",
          "networkmanager:GetTransitGatewayRegistrations",
          "networkmanager:ListConnectPeers",
          "networkmanager:ListTagsForResource",
          "nimble:GetLaunchProfile",
          "nimble:GetLaunchProfileDetails",
          "nimble:GetStreamingImage",
          "nimble:GetStudio",
          "nimble:GetStudioComponent",
          "nimble:ListLaunchProfiles",
          "nimble:ListStreamingImages",
          "nimble:ListStudioComponents",
          "nimble:ListStudios",
          "opsworks:DescribeInstances",
          "opsworks:DescribeLayers",
          "opsworks:DescribeTimeBasedAutoScaling",
          "opsworks:DescribeVolumes",
          "opsworks:ListTags",
          "organizations:DescribeAccount",
          "organizations:DescribeEffectivePolicy",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribePolicy",
          "organizations:DescribeResourcePolicy",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListParents",
          "organizations:ListPolicies",
          "organizations:ListPoliciesForTarget",
          "organizations:ListRoots",
          "organizations:ListTagsForResource",
          "organizations:ListTargetsForPolicy",
          "panorama:DescribeApplicationInstance",
          "panorama:DescribeApplicationInstanceDetails",
          "panorama:DescribePackage",
          "panorama:DescribePackageVersion",
          "panorama:ListApplicationInstances",
          "panorama:ListNodes",
          "panorama:ListPackages",
          "personalize:DescribeDataset",
          "personalize:DescribeDatasetGroup",
          "personalize:DescribeSchema",
          "personalize:DescribeSolution",
          "personalize:ListDatasetGroups",
          "personalize:ListDatasetImportJobs",
          "personalize:ListDatasets",
          "personalize:ListSchemas",
          "personalize:ListSolutions",
          "personalize:ListTagsForResource",
          "profile:GetDomain",
          "profile:GetIntegration",
          "profile:GetProfileObjectType",
          "profile:ListDomains",
          "profile:ListIntegrations",
          "profile:ListProfileObjectTypes",
          "profile:ListTagsForResource",
          "quicksight:DescribeAccountSubscription",
          "quicksight:DescribeAnalysis",
          "quicksight:DescribeAnalysisPermissions",
          "quicksight:DescribeDashboard",
          "quicksight:DescribeDashboardPermissions",
          "quicksight:DescribeDataSet",
          "quicksight:DescribeDataSetPermissions",
          "quicksight:DescribeDataSetRefreshProperties",
          "quicksight:DescribeDataSource",
          "quicksight:DescribeDataSourcePermissions",
          "quicksight:DescribeTemplate",
          "quicksight:DescribeTemplatePermissions",
          "quicksight:DescribeTheme",
          "quicksight:DescribeThemePermissions",
          "quicksight:ListAnalyses",
          "quicksight:ListDashboards",
          "quicksight:ListDataSets",
          "quicksight:ListDataSources",
          "quicksight:ListTagsForResource",
          "quicksight:ListTemplates",
          "quicksight:ListThemes",
          "ram:GetPermission",
          "ram:GetResourceShareAssociations",
          "ram:GetResourceShares",
          "ram:ListPermissionAssociations",
          "ram:ListPermissions",
          "ram:ListPermissionVersions",
          "ram:ListResources",
          "ram:ListResourceSharePermissions",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBClusterParameters",
          "rds:DescribeDBClusters",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBProxies",
          "rds:DescribeDBProxyEndpoints",
          "rds:DescribeDBSecurityGroups",
          "rds:DescribeDBSnapshotAttributes",
          "rds:DescribeDBSnapshots",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEngineDefaultClusterParameters",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeGlobalClusters",
          "rds:DescribeOptionGroups",
          "rds:ListTagsForResource",
          "redshift-serverless:GetNamespace",
          "redshift-serverless:GetWorkgroup",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListTagsForResource",
          "redshift-serverless:ListWorkgroups",
          "redshift:DescribeClusterParameterGroups",
          "redshift:DescribeClusterParameters",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSecurityGroups",
          "redshift:DescribeClusterSnapshots",
          "redshift:DescribeClusterSubnetGroups",
          "redshift:DescribeEndpointAccess",
          "redshift:DescribeEndpointAuthorization",
          "redshift:DescribeEventSubscriptions",
          "redshift:DescribeLoggingStatus",
          "redshift:DescribeScheduledActions",
          "refactor-spaces:GetEnvironment",
          "refactor-spaces:GetService",
          "refactor-spaces:ListApplications",
          "refactor-spaces:ListEnvironments",
          "refactor-spaces:ListServices",
          "rekognition:DescribeStreamProcessor",
          "rekognition:ListStreamProcessors",
          "rekognition:ListTagsForResource",
          "resiliencehub:DescribeApp",
          "resiliencehub:DescribeAppVersionTemplate",
          "resiliencehub:DescribeResiliencyPolicy",
          "resiliencehub:ListApps",
          "resiliencehub:ListAppVersionResourceMappings",
          "resiliencehub:ListResiliencyPolicies",
          "resiliencehub:ListTagsForResource",
          "resource-explorer-2:GetIndex",
          "resource-explorer-2:ListIndexes",
          "resource-explorer-2:ListTagsForResource",
          "resource-groups:GetGroup",
          "resource-groups:GetGroupConfiguration",
          "resource-groups:GetGroupQuery",
          "resource-groups:GetTags",
          "resource-groups:ListGroupResources",
          "resource-groups:ListGroups",
          "robomaker:DescribeRobotApplication",
          "robomaker:DescribeSimulationApplication",
          "robomaker:ListRobotApplications",
          "robomaker:ListSimulationApplications",
          "route53-recovery-control-config:DescribeCluster",
          "route53-recovery-control-config:DescribeControlPanel",
          "route53-recovery-control-config:DescribeRoutingControl",
          "route53-recovery-control-config:DescribeSafetyRule",
          "route53-recovery-control-config:ListClusters",
          "route53-recovery-control-config:ListControlPanels",
          "route53-recovery-control-config:ListRoutingControls",
          "route53-recovery-control-config:ListSafetyRules",
          "route53-recovery-control-config:ListTagsForResource",
          "route53-recovery-readiness:GetCell",
          "route53-recovery-readiness:GetReadinessCheck",
          "route53-recovery-readiness:GetRecoveryGroup",
          "route53-recovery-readiness:GetResourceSet",
          "route53-recovery-readiness:ListCells",
          "route53-recovery-readiness:ListReadinessChecks",
          "route53-recovery-readiness:ListRecoveryGroups",
          "route53-recovery-readiness:ListResourceSets",
          "route53:GetChange",
          "route53:GetDNSSEC",
          "route53:GetHealthCheck",
          "route53:GetHostedZone",
          "route53:ListCidrBlocks",
          "route53:ListCidrCollections",
          "route53:ListCidrLocations",
          "route53:ListHealthChecks",
          "route53:ListHostedZones",
          "route53:ListHostedZonesByName",
          "route53:ListQueryLoggingConfigs",
          "route53:ListResourceRecordSets",
          "route53:ListTagsForResource",
          "route53resolver:GetFirewallDomainList",
          "route53resolver:GetFirewallRuleGroup",
          "route53resolver:GetFirewallRuleGroupAssociation",
          "route53resolver:GetResolverDnssecConfig",
          "route53resolver:GetResolverEndpoint",
          "route53resolver:GetResolverQueryLogConfig",
          "route53resolver:GetResolverQueryLogConfigAssociation",
          "route53resolver:GetResolverRule",
          "route53resolver:GetResolverRuleAssociation",
          "route53resolver:ListFirewallDomainLists",
          "route53resolver:ListFirewallDomains",
          "route53resolver:ListFirewallRuleGroupAssociations",
          "route53resolver:ListFirewallRuleGroups",
          "route53resolver:ListFirewallRules",
          "route53resolver:ListResolverDnssecConfigs",
          "route53resolver:ListResolverEndpointIpAddresses",
          "route53resolver:ListResolverEndpoints",
          "route53resolver:ListResolverQueryLogConfigAssociations",
          "route53resolver:ListResolverQueryLogConfigs",
          "route53resolver:ListResolverRuleAssociations",
          "route53resolver:ListResolverRules",
          "route53resolver:ListTagsForResource",
          "rum:GetAppMonitor",
          "rum:GetAppMonitorData",
          "rum:ListAppMonitors",
          "rum:ListTagsForResource",
          "s3-outposts:GetAccessPoint",
          "s3-outposts:GetAccessPointPolicy",
          "s3-outposts:GetBucket",
          "s3-outposts:GetBucketPolicy",
          "s3-outposts:GetBucketTagging",
          "s3-outposts:GetLifecycleConfiguration",
          "s3-outposts:ListAccessPoints",
          "s3-outposts:ListEndpoints",
          "s3-outposts:ListRegionalBuckets",
          "s3:GetAccelerateConfiguration",
          "s3:GetAccessPoint",
          "s3:GetAccessPointForObjectLambda",
          "s3:GetAccessPointPolicy",
          "s3:GetAccessPointPolicyForObjectLambda",
          "s3:GetAccessPointPolicyStatus",
          "s3:GetAccessPointPolicyStatusForObjectLambda",
          "s3:GetAccountPublicAccessBlock",
          "s3:GetBucketAcl",
          "s3:GetBucketCORS",
          "s3:GetBucketLocation",
          "s3:GetBucketLogging",
          "s3:GetBucketNotification",
          "s3:GetBucketObjectLockConfiguration",
          "s3:GetBucketPolicy",
          "s3:GetBucketPolicyStatus",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetBucketRequestPayment",
          "s3:GetBucketTagging",
          "s3:GetBucketVersioning",
          "s3:GetBucketWebsite",
          "s3:GetEncryptionConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:GetMultiRegionAccessPoint",
          "s3:GetMultiRegionAccessPointPolicy",
          "s3:GetMultiRegionAccessPointPolicyStatus",
          "s3:GetReplicationConfiguration",
          "s3:GetStorageLensConfiguration",
          "s3:GetStorageLensConfigurationTagging",
          "s3:ListAccessPoints",
          "s3:ListAccessPointsForObjectLambda",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListMultiRegionAccessPoints",
          "s3:ListStorageLensConfigurations",
          "s3express:GetBucketPolicy",
          "s3express:ListAllMyDirectoryBuckets",
          "sagemaker:DescribeAppImageConfig",
          "sagemaker:DescribeCodeRepository",
          "sagemaker:DescribeDataQualityJobDefinition",
          "sagemaker:DescribeDeviceFleet",
          "sagemaker:DescribeDomain",
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:DescribeFeatureGroup",
          "sagemaker:DescribeImage",
          "sagemaker:DescribeImageVersion",
          "sagemaker:DescribeInferenceExperiment",
          "sagemaker:DescribeModel",
          "sagemaker:DescribeModelBiasJobDefinition",
          "sagemaker:DescribeModelExplainabilityJobDefinition",
          "sagemaker:DescribeModelQualityJobDefinition",
          "sagemaker:DescribeMonitoringSchedule",
          "sagemaker:DescribeNotebookInstance",
          "sagemaker:DescribeNotebookInstanceLifecycleConfig",
          "sagemaker:DescribePipeline",
          "sagemaker:DescribeProject",
          "sagemaker:DescribeWorkteam",
          "sagemaker:ListAppImageConfigs",
          "sagemaker:ListCodeRepositories",
          "sagemaker:ListDataQualityJobDefinitions",
          "sagemaker:ListDeviceFleets",
          "sagemaker:ListDomains",
          "sagemaker:ListEndpointConfigs",
          "sagemaker:ListEndpoints",
          "sagemaker:ListFeatureGroups",
          "sagemaker:ListImages",
          "sagemaker:ListImageVersions",
          "sagemaker:ListInferenceExperiments",
          "sagemaker:ListModelBiasJobDefinitions",
          "sagemaker:ListModelExplainabilityJobDefinitions",
          "sagemaker:ListModelQualityJobDefinitions",
          "sagemaker:ListModels",
          "sagemaker:ListMonitoringSchedules",
          "sagemaker:ListNotebookInstanceLifecycleConfigs",
          "sagemaker:ListNotebookInstances",
          "sagemaker:ListPipelines",
          "sagemaker:ListProjects",
          "sagemaker:ListTags",
          "sagemaker:ListWorkteams",
          "schemas:DescribeDiscoverer",
          "schemas:DescribeRegistry",
          "schemas:DescribeSchema",
          "schemas:GetResourcePolicy",
          "schemas:ListDiscoverers",
          "schemas:ListRegistries",
          "schemas:ListSchemas",
          "sdb:GetAttributes",
          "sdb:ListDomains",
          "secretsmanager:ListSecrets",
          "secretsmanager:ListSecretVersionIds",
          "securityhub:DescribeHub",
          "servicecatalog:DescribePortfolioShares",
          "servicediscovery:GetInstance",
          "servicediscovery:GetNamespace",
          "servicediscovery:GetService",
          "servicediscovery:ListInstances",
          "servicediscovery:ListNamespaces",
          "servicediscovery:ListServices",
          "servicediscovery:ListTagsForResource",
          "ses:DescribeReceiptRule",
          "ses:DescribeReceiptRuleSet",
          "ses:GetConfigurationSet",
          "ses:GetConfigurationSetEventDestinations",
          "ses:GetContactList",
          "ses:GetEmailTemplate",
          "ses:GetTemplate",
          "ses:ListConfigurationSets",
          "ses:ListContactLists",
          "ses:ListEmailTemplates",
          "ses:ListReceiptFilters",
          "ses:ListReceiptRuleSets",
          "ses:ListTemplates",
          "shield:DescribeDRTAccess",
          "shield:DescribeProtection",
          "shield:DescribeSubscription",
          "signer:GetSigningProfile",
          "signer:ListProfilePermissions",
          "signer:ListSigningProfiles",
          "sns:GetDataProtectionPolicy",
          "sns:GetSMSSandboxAccountStatus",
          "sns:GetSubscriptionAttributes",
          "sns:GetTopicAttributes",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTagsForResource",
          "sns:ListTopics",
          "sqs:GetQueueAttributes",
          "sqs:ListQueues",
          "sqs:ListQueueTags",
          "ssm:DescribeAutomationExecutions",
          "ssm:DescribeDocument",
          "ssm:DescribeDocumentPermission",
          "ssm:DescribeParameters",
          "ssm:GetAutomationExecution",
          "ssm:GetDocument",
          "ssm:ListDocuments",
          "ssm:ListTagsForResource",
          "sso:DescribeInstanceAccessControlAttributeConfiguration",
          "sso:DescribePermissionSet",
          "sso:GetInlinePolicyForPermissionSet",
          "sso:ListManagedPoliciesInPermissionSet",
          "sso:ListPermissionSets",
          "sso:ListTagsForResource",
          "states:DescribeActivity",
          "states:DescribeStateMachine",
          "states:ListActivities",
          "states:ListStateMachines",
          "states:ListTagsForResource",
          "storagegateway:ListGateways",
          "storagegateway:ListTagsForResource",
          "storagegateway:ListVolumes",
          "sts:GetCallerIdentity",
          "support:DescribeCases",
          "synthetics:DescribeCanaries",
          "synthetics:DescribeCanariesLastRun",
          "synthetics:DescribeRuntimeVersions",
          "synthetics:GetCanary",
          "synthetics:GetCanaryRuns",
          "synthetics:GetGroup",
          "synthetics:ListAssociatedGroups",
          "synthetics:ListGroupResources",
          "synthetics:ListGroups",
          "synthetics:ListTagsForResource",
          "tag:GetResources",
          "timestream:DescribeDatabase",
          "timestream:DescribeEndpoints",
          "timestream:DescribeTable",
          "timestream:ListDatabases",
          "timestream:ListTables",
          "timestream:ListTagsForResource",
          "transfer:DescribeAgreement",
          "transfer:DescribeCertificate",
          "transfer:DescribeConnector",
          "transfer:DescribeProfile",
          "transfer:DescribeServer",
          "transfer:DescribeUser",
          "transfer:DescribeWorkflow",
          "transfer:ListAgreements",
          "transfer:ListCertificates",
          "transfer:ListConnectors",
          "transfer:ListProfiles",
          "transfer:ListServers",
          "transfer:ListTagsForResource",
          "transfer:ListUsers",
          "transfer:ListWorkflows",
          "voiceid:DescribeDomain",
          "voiceid:ListTagsForResource",
          "waf-regional:GetLoggingConfiguration",
          "waf-regional:GetWebACL",
          "waf-regional:GetWebACLForResource",
          "waf-regional:ListLoggingConfigurations",
          "waf:GetLoggingConfiguration",
          "waf:GetWebACL",
          "wafv2:GetLoggingConfiguration",
          "wafv2:GetRuleGroup",
          "wafv2:ListRuleGroups",
          "wafv2:ListTagsForResource",
          "workspaces:DescribeConnectionAliases",
          "workspaces:DescribeTags",
          "workspaces:DescribeWorkspaces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSConfigSLRLogStatementID",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/config/*"
        ]
      },
      {
        "Sid": "AWSConfigSLRLogEventStatementID",
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/config/*:log-stream:config-rule-evaluation/*"
        ]
      },
      {
        "Sid": "AWSConfigSLRApiGatewayStatementID",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/apis",
          "arn:aws:apigateway:*::/apis/*",
          "arn:aws:apigateway:*::/apis/*/integrations",
          "arn:aws:apigateway:*::/apis/*/integrations/*",
          "arn:aws:apigateway:*::/domainnames",
          "arn:aws:apigateway:*::/clientcertificates",
          "arn:aws:apigateway:*::/clientcertificates/*",
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
          "arn:aws:apigateway:*::/restapis/*",
          "arn:aws:apigateway:*::/restapis/*/stages/*",
          "arn:aws:apigateway:*::/restapis/*/stages",
          "arn:aws:apigateway:*::/restapis/*/resources",
          "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration",
          "arn:aws:apigateway:*::/restapis/*/resources/*",
          "arn:aws:apigateway:*::/apis/*/routes/*",
          "arn:aws:apigateway:*::/apis/*/routes",
          "arn:aws:apigateway:*::/v2/apis/*/routes",
          "arn:aws:apigateway:*::/v2/apis/*/routes/*",
          "arn:aws:apigateway:*::/v2/apis",
          "arn:aws:apigateway:*::/v2/apis/*",
          "arn:aws:apigateway:*::/v2/apis/*/integrations",
          "arn:aws:apigateway:*::/v2/apis/*/integrations/*"
        ]
      }
    ]
  },
  "AWSApplicationAutoScalingCustomResourcePolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoScalingCustomResourcePolicy",
      "PolicyId": "ANPAJYTKXPX6DO32Z4XXA",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoScalingCustomResourcePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access APIGateway and CloudWatch for custom resource scaling",
      "CreateDate": "2018-06-04T23:22:44.000Z",
      "UpdateDate": "2018-06-04T23:22:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "execute-api:Invoke",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSShieldDRTAccessPolicy": {
    "policy": {
      "PolicyName": "AWSShieldDRTAccessPolicy",
      "PolicyId": "ANPAJWNCSZ4PARLO37VVY",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSShieldDRTAccessPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the AWS DDoS Response Team with limited access to your AWS account to assist with DDoS attack mitigation during a high-severity event.",
      "CreateDate": "2018-06-05T22:29:39.000Z",
      "UpdateDate": "2020-12-15T17:28:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SRTAccessProtectedResources",
        "Effect": "Allow",
        "Action": [
          "cloudfront:List*",
          "route53:List*",
          "elasticloadbalancing:Describe*",
          "cloudwatch:Describe*",
          "cloudwatch:Get*",
          "cloudwatch:List*",
          "cloudfront:GetDistribution*",
          "globalaccelerator:ListAccelerators",
          "globalaccelerator:DescribeAccelerator",
          "ec2:DescribeRegions",
          "ec2:DescribeAddresses"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SRTManageProtections",
        "Effect": "Allow",
        "Action": [
          "shield:*",
          "waf:*",
          "wafv2:*",
          "waf-regional:*",
          "elasticloadbalancing:SetWebACL",
          "cloudfront:UpdateDistribution",
          "apigateway:SetWebACL"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticTranscoder_JobsSubmitter": {
    "policy": {
      "PolicyName": "AmazonElasticTranscoder_JobsSubmitter",
      "PolicyId": "ANPAJ7AUMMRQOVZRI734S",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticTranscoder_JobsSubmitter",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants users permission to change presets, submit jobs, and view Elastic Transcoder settings. This policy also grants some read-only access to some other services required to use the Elastic Transcode console, including S3, IAM, and SNS.",
      "CreateDate": "2018-06-07T21:12:16.000Z",
      "UpdateDate": "2019-06-10T22:49:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "elastictranscoder:Read*",
          "elastictranscoder:List*",
          "elastictranscoder:*Job",
          "elastictranscoder:*Preset",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "iam:ListRoles",
          "sns:ListTopics"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloudFrontLogger": {
    "policy": {
      "PolicyName": "AWSCloudFrontLogger",
      "PolicyId": "ANPAIOI7RPKLCNINBTRP4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSCloudFrontLogger",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants CloudFront Logger write permissions to CloudWatch Logs. ",
      "CreateDate": "2018-06-12T20:15:23.000Z",
      "UpdateDate": "2019-11-22T19:33:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/cloudfront/*"
        ]
      }
    ]
  },
  "AmazonElasticTranscoder_ReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonElasticTranscoder_ReadOnlyAccess",
      "PolicyId": "ANPAI3R3CR6KVEWD4DPFY",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticTranscoder_ReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants users read-only access to Elastic Transcoder and list access to related services.",
      "CreateDate": "2018-06-07T21:09:56.000Z",
      "UpdateDate": "2019-06-10T22:48:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "elastictranscoder:Read*",
          "elastictranscoder:List*",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "iam:ListRoles",
          "sns:ListTopics"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambdaSQSQueueExecutionRole": {
    "policy": {
      "PolicyName": "AWSLambdaSQSQueueExecutionRole",
      "PolicyId": "ANPAJFWJZI6JNND4TSELK",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides receive message, delete message, and read attribute access to SQS queues, and write permissions to CloudWatch logs.",
      "CreateDate": "2018-06-14T21:50:45.000Z",
      "UpdateDate": "2018-06-14T21:50:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage",
          "sqs:GetQueueAttributes",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTAnalyticsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSIoTAnalyticsReadOnlyAccess",
      "PolicyId": "ANPAJ3Z4LYBELMXGFLGMI",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTAnalyticsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to IoT Analytics.",
      "CreateDate": "2018-06-18T21:37:49.000Z",
      "UpdateDate": "2018-06-18T21:37:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotanalytics:Describe*",
          "iotanalytics:List*",
          "iotanalytics:Get*",
          "iotanalytics:SampleChannelData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTAnalyticsFullAccess": {
    "policy": {
      "PolicyName": "AWSIoTAnalyticsFullAccess",
      "PolicyId": "ANPAJ7FB5ZEKQN445QGKY",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTAnalyticsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to IoT Analytics.",
      "CreateDate": "2018-06-18T23:02:45.000Z",
      "UpdateDate": "2018-06-18T23:02:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotanalytics:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "NeptuneConsoleFullAccess": {
    "policy": {
      "PolicyName": "NeptuneConsoleFullAccess",
      "PolicyId": "ANPAJWTD4ELX2KRNICUVQ",
      "Arn": "arn:aws:iam::aws:policy/NeptuneConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to manage Amazon Neptune using the AWS Console. Note this policy also grants full access to publish on all SNS topics within the account, permissions to create and edit Amazon EC2 instances and VPC configurations, permissions to view and list keys on Amazon KMS, and full access to Amazon RDS. For more information, see https://aws.amazon.com/neptune/faqs/.",
      "CreateDate": "2018-06-19T21:35:19.000Z",
      "UpdateDate": "2023-11-30T07:32:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowNeptuneCreate",
        "Effect": "Allow",
        "Action": [
          "rds:CreateDBCluster",
          "rds:CreateDBInstance"
        ],
        "Resource": [
          "arn:aws:rds:*:*:*"
        ]
      },
      {
        "Sid": "AllowManagementPermissionsForRDS",
        "Action": [
          "rds:AddRoleToDBCluster",
          "rds:AddSourceIdentifierToSubscription",
          "rds:AddTagsToResource",
          "rds:ApplyPendingMaintenanceAction",
          "rds:CopyDBClusterParameterGroup",
          "rds:CopyDBClusterSnapshot",
          "rds:CopyDBParameterGroup",
          "rds:CreateDBClusterParameterGroup",
          "rds:CreateDBClusterSnapshot",
          "rds:CreateDBParameterGroup",
          "rds:CreateDBSubnetGroup",
          "rds:CreateEventSubscription",
          "rds:DeleteDBCluster",
          "rds:DeleteDBClusterParameterGroup",
          "rds:DeleteDBClusterSnapshot",
          "rds:DeleteDBInstance",
          "rds:DeleteDBParameterGroup",
          "rds:DeleteDBSubnetGroup",
          "rds:DeleteEventSubscription",
          "rds:DescribeAccountAttributes",
          "rds:DescribeCertificates",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBClusterParameters",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBClusters",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBLogFiles",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBSecurityGroups",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEngineDefaultClusterParameters",
          "rds:DescribeEngineDefaultParameters",
          "rds:DescribeEventCategories",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeEvents",
          "rds:DescribeOptionGroups",
          "rds:DescribeOrderableDBInstanceOptions",
          "rds:DescribePendingMaintenanceActions",
          "rds:DescribeValidDBInstanceModifications",
          "rds:DownloadDBLogFilePortion",
          "rds:FailoverDBCluster",
          "rds:ListTagsForResource",
          "rds:ModifyDBCluster",
          "rds:ModifyDBClusterParameterGroup",
          "rds:ModifyDBClusterSnapshotAttribute",
          "rds:ModifyDBInstance",
          "rds:ModifyDBParameterGroup",
          "rds:ModifyDBSubnetGroup",
          "rds:ModifyEventSubscription",
          "rds:PromoteReadReplicaDBCluster",
          "rds:RebootDBInstance",
          "rds:RemoveRoleFromDBCluster",
          "rds:RemoveSourceIdentifierFromSubscription",
          "rds:RemoveTagsFromResource",
          "rds:ResetDBClusterParameterGroup",
          "rds:ResetDBParameterGroup",
          "rds:RestoreDBClusterFromSnapshot",
          "rds:RestoreDBClusterToPointInTime"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowOtherDepedentPermissions",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "ec2:AllocateAddress",
          "ec2:AssignIpv6Addresses",
          "ec2:AssignPrivateIpAddresses",
          "ec2:AssociateAddress",
          "ec2:AssociateRouteTable",
          "ec2:AssociateSubnetCidrBlock",
          "ec2:AssociateVpcCidrBlock",
          "ec2:AttachInternetGateway",
          "ec2:AttachNetworkInterface",
          "ec2:CreateCustomerGateway",
          "ec2:CreateDefaultSubnet",
          "ec2:CreateDefaultVpc",
          "ec2:CreateInternetGateway",
          "ec2:CreateNatGateway",
          "ec2:CreateNetworkInterface",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSubnet",
          "ec2:CreateVpc",
          "ec2:CreateVpcEndpoint",
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeInstances",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroupReferences",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcs",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:ModifySubnetAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:ModifyVpcEndpoint",
          "iam:ListRoles",
          "kms:ListAliases",
          "kms:ListKeyPolicies",
          "kms:ListKeys",
          "kms:ListRetirableGrants",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "sns:ListSubscriptions",
          "sns:ListTopics",
          "sns:Publish"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowPassRoleForNeptune",
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowCreateSLRForNeptune",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
        ]
      },
      {
        "Sid": "AllowManagementPermissionsForNeptuneAnalytics",
        "Effect": "Allow",
        "Action": [
          "neptune-graph:CreateGraph",
          "neptune-graph:DeleteGraph",
          "neptune-graph:GetGraph",
          "neptune-graph:ListGraphs",
          "neptune-graph:UpdateGraph",
          "neptune-graph:ResetGraph",
          "neptune-graph:CreateGraphSnapshot",
          "neptune-graph:DeleteGraphSnapshot",
          "neptune-graph:GetGraphSnapshot",
          "neptune-graph:ListGraphSnapshots",
          "neptune-graph:RestoreGraphFromSnapshot",
          "neptune-graph:CreatePrivateGraphEndpoint",
          "neptune-graph:GetPrivateGraphEndpoint",
          "neptune-graph:ListPrivateGraphEndpoints",
          "neptune-graph:DeletePrivateGraphEndpoint",
          "neptune-graph:CreateGraphUsingImportTask",
          "neptune-graph:GetImportTask",
          "neptune-graph:ListImportTasks",
          "neptune-graph:CancelImportTask"
        ],
        "Resource": [
          "arn:aws:neptune-graph:*:*:*"
        ]
      },
      {
        "Sid": "AllowPassRoleForNeptuneAnalytics",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowCreateSLRForNeptuneAnalytics",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/neptune-graph.amazonaws.com/AWSServiceRoleForNeptuneGraph"
        ]
      }
    ]
  },
  "AmazonMacieServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonMacieServiceRolePolicy",
      "PolicyId": "ANPAJPLHONRH2HP2H6TNQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonMacieServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service linked role for Amazon Macie",
      "CreateDate": "2018-06-19T22:17:38.000Z",
      "UpdateDate": "2022-05-19T19:16:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListAccountAliases",
          "organizations:DescribeAccount",
          "organizations:ListAccounts",
          "s3:GetAccountPublicAccessBlock",
          "s3:ListAllMyBuckets",
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "s3:GetBucketLogging",
          "s3:GetBucketPolicy",
          "s3:GetBucketPolicyStatus",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetBucketTagging",
          "s3:GetBucketVersioning",
          "s3:GetBucketWebsite",
          "s3:GetEncryptionConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:GetReplicationConfiguration",
          "s3:ListBucket",
          "s3:GetObject",
          "s3:GetObjectAcl",
          "s3:GetObjectTagging"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/macie/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/macie/*:log-stream:*"
        ]
      }
    ]
  },
  "AWSElementalMediaConvertReadOnly": {
    "policy": {
      "PolicyName": "AWSElementalMediaConvertReadOnly",
      "PolicyId": "ANPAJSXYOBSLJN3JEDO42",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaConvertReadOnly",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Elemental MediaConvert via the AWS Management Console and SDK.",
      "CreateDate": "2018-06-25T19:25:14.000Z",
      "UpdateDate": "2019-06-10T22:52:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mediaconvert:Get*",
          "mediaconvert:List*",
          "mediaconvert:DescribeEndpoints",
          "s3:ListAllMyBuckets",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaConvertFullAccess": {
    "policy": {
      "PolicyName": "AWSElementalMediaConvertFullAccess",
      "PolicyId": "ANPAIXDREOCL6LV7RBJWC",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaConvertFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Elemental MediaConvert via the AWS Management Console and SDK.",
      "CreateDate": "2018-06-25T19:25:35.000Z",
      "UpdateDate": "2019-06-10T22:52:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mediaconvert:*",
          "s3:ListAllMyBuckets",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSSOReadOnly": {
    "policy": {
      "PolicyName": "AWSSSOReadOnly",
      "PolicyId": "ANPAJBSMEEZXFDMKMY43I",
      "Arn": "arn:aws:iam::aws:policy/AWSSSOReadOnly",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS SSO configurations.",
      "CreateDate": "2018-06-27T20:24:34.000Z",
      "UpdateDate": "2022-08-22T17:23:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSSSOReadOnly",
        "Effect": "Allow",
        "Action": [
          "ds:DescribeDirectories",
          "ds:DescribeTrusts",
          "iam:ListPolicies",
          "organizations:DescribeOrganization",
          "organizations:DescribeAccount",
          "organizations:ListParents",
          "organizations:ListChildren",
          "organizations:ListAccounts",
          "organizations:ListRoots",
          "organizations:ListAccountsForParent",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListDelegatedAdministrators",
          "sso:Describe*",
          "sso:Get*",
          "sso:List*",
          "sso:Search*",
          "sso-directory:DescribeDirectory",
          "access-analyzer:ValidatePolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSSOMasterAccountAdministrator": {
    "policy": {
      "PolicyName": "AWSSSOMasterAccountAdministrator",
      "PolicyId": "ANPAIHXAQZIS3GOYIETUC",
      "Arn": "arn:aws:iam::aws:policy/AWSSSOMasterAccountAdministrator",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access within AWS SSO to manage AWS Organizations master and member accounts and cloud application",
      "CreateDate": "2018-06-27T20:36:51.000Z",
      "UpdateDate": "2022-10-20T20:34:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSSSOCreateSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
        ]
      },
      {
        "Sid": "AWSSSOMasterAccountAdministrator",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
        ]
      },
      {
        "Sid": "AWSSSOMemberAccountAdministrator",
        "Effect": "Allow",
        "Action": [
          "ds:DescribeTrusts",
          "ds:UnauthorizeApplication",
          "ds:DescribeDirectories",
          "ds:AuthorizeApplication",
          "iam:ListPolicies",
          "organizations:EnableAWSServiceAccess",
          "organizations:ListRoots",
          "organizations:ListAccounts",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListAccountsForParent",
          "organizations:DescribeOrganization",
          "organizations:ListChildren",
          "organizations:DescribeAccount",
          "organizations:ListParents",
          "organizations:ListDelegatedAdministrators",
          "sso:*",
          "sso-directory:*",
          "identitystore:*",
          "identitystore-auth:*",
          "ds:CreateAlias",
          "access-analyzer:ValidatePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSSSOManageDelegatedAdministrator",
        "Effect": "Allow",
        "Action": [
          "organizations:RegisterDelegatedAdministrator",
          "organizations:DeregisterDelegatedAdministrator"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSSOMemberAccountAdministrator": {
    "policy": {
      "PolicyName": "AWSSSOMemberAccountAdministrator",
      "PolicyId": "ANPAIQYHEY7KJWXZFNDPY",
      "Arn": "arn:aws:iam::aws:policy/AWSSSOMemberAccountAdministrator",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access within AWS SSO to manage AWS Organizations member accounts and cloud application",
      "CreateDate": "2018-06-27T20:45:42.000Z",
      "UpdateDate": "2022-10-20T20:32:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSSSOMemberAccountAdministrator",
        "Effect": "Allow",
        "Action": [
          "ds:DescribeDirectories",
          "ds:AuthorizeApplication",
          "ds:UnauthorizeApplication",
          "ds:DescribeTrusts",
          "iam:ListPolicies",
          "organizations:EnableAWSServiceAccess",
          "organizations:DescribeOrganization",
          "organizations:DescribeAccount",
          "organizations:ListRoots",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListParents",
          "organizations:ListChildren",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListDelegatedAdministrators",
          "sso:*",
          "sso-directory:*",
          "identitystore:*",
          "identitystore-auth:*",
          "ds:CreateAlias",
          "access-analyzer:ValidatePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSSSOManageDelegatedAdministrator",
        "Effect": "Allow",
        "Action": [
          "organizations:RegisterDelegatedAdministrator",
          "organizations:DeregisterDelegatedAdministrator"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMacieHandshakeRole": {
    "policy": {
      "PolicyName": "AmazonMacieHandshakeRole",
      "PolicyId": "ANPAJ7CVEIVL347MLOVKI",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonMacieHandshakeRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permission to create the service-linked role of Amazon Macie.",
      "CreateDate": "2018-06-28T15:46:10.000Z",
      "UpdateDate": "2018-06-28T15:46:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDataLifecycleManagerServiceRole": {
    "policy": {
      "PolicyName": "AWSDataLifecycleManagerServiceRole",
      "PolicyId": "ANPAIZRLOKFUFE7YXQOJS",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSDataLifecycleManagerServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides appropriate permissions to AWS Data Lifecycle Manager to take actions on AWS resources",
      "CreateDate": "2018-07-06T19:34:16.000Z",
      "UpdateDate": "2022-09-19T17:34:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot",
          "ec2:CreateSnapshots",
          "ec2:DeleteSnapshot",
          "ec2:DescribeInstances",
          "ec2:DescribeVolumes",
          "ec2:DescribeSnapshots",
          "ec2:EnableFastSnapshotRestores",
          "ec2:DescribeFastSnapshotRestores",
          "ec2:DisableFastSnapshotRestores",
          "ec2:CopySnapshot",
          "ec2:ModifySnapshotAttribute",
          "ec2:DescribeSnapshotAttribute",
          "ec2:DescribeSnapshotTierStatus",
          "ec2:ModifySnapshotTier"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:DeleteRule",
          "events:DescribeRule",
          "events:EnableRule",
          "events:DisableRule",
          "events:ListTargetsByRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AwsDataLifecycleRule.managed-cwe.*"
        ]
      }
    ]
  },
  "AWSIoTDeviceDefenderAudit": {
    "policy": {
      "PolicyName": "AWSIoTDeviceDefenderAudit",
      "PolicyId": "ANPAJKUN6OAGIHZ66TRKO",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderAudit",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read access for IoT and related resources",
      "CreateDate": "2018-07-18T21:17:40.000Z",
      "UpdateDate": "2019-11-25T23:52:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:GetLoggingOptions",
          "iot:GetV2LoggingOptions",
          "iot:ListCACertificates",
          "iot:ListCertificates",
          "iot:DescribeCACertificate",
          "iot:DescribeCertificate",
          "iot:ListPolicies",
          "iot:GetPolicy",
          "iot:GetEffectivePolicies",
          "iot:ListRoleAliases",
          "iot:DescribeRoleAlias",
          "cognito-identity:GetIdentityPoolRoles",
          "iam:ListRolePolicies",
          "iam:ListAttachedRolePolicies",
          "iam:GetRole",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRolePolicy",
          "iam:GenerateServiceLastAccessedDetails",
          "iam:GetServiceLastAccessedDetails"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceImageBuildFullAccess": {
    "policy": {
      "PolicyName": "AWSMarketplaceImageBuildFullAccess",
      "PolicyId": "ANPAI4QBMJWC3BNHBHN6I",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceImageBuildFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Marketplace Private Image Build Feature. In addition to create private images, it also provides permissions to add tags to images, launch and terminate ec2 instances.",
      "CreateDate": "2018-07-31T23:29:49.000Z",
      "UpdateDate": "2022-03-04T17:05:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListBuilds",
          "aws-marketplace:StartBuild",
          "aws-marketplace:DescribeBuilds"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*Automation*",
          "arn:aws:iam::*:role/*Instance*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetAutomationExecution",
          "ssm:ListDocuments",
          "ssm:DescribeDocument",
          "ec2:DeregisterImage",
          "ec2:CopyImage",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeImages",
          "ec2:DescribeSubnets",
          "ec2:DeleteSnapshot",
          "ec2:CreateImage",
          "ec2:RunInstances",
          "ec2:DescribeInstanceStatus",
          "sns:GetTopicAttributes",
          "iam:GetRole",
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::*image-build*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:*image-build*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
          "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
          "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
          "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
          "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
          "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
          "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
          "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AWSDiscoveryContinuousExportFirehosePolicy": {
    "policy": {
      "PolicyName": "AWSDiscoveryContinuousExportFirehosePolicy",
      "PolicyId": "ANPAIX6FHUTEUNXYDFZ7C",
      "Arn": "arn:aws:iam::aws:policy/AWSDiscoveryContinuousExportFirehosePolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides write access to AWS resources required for AWS Discovery Continuous Export",
      "CreateDate": "2018-08-09T18:29:39.000Z",
      "UpdateDate": "2021-06-08T17:32:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "glue:GetTableVersions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-application-discovery-service-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose:log-stream:*"
        ]
      }
    ]
  },
  "ApplicationDiscoveryServiceContinuousExportServiceRolePolicy": {
    "policy": {
      "PolicyName": "ApplicationDiscoveryServiceContinuousExportServiceRolePolicy",
      "PolicyId": "ANPAJMGMY3P6OEWOELRFE",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/ApplicationDiscoveryServiceContinuousExportServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by Application Discovery Service Continuous Export feature",
      "CreateDate": "2018-08-09T20:22:01.000Z",
      "UpdateDate": "2018-08-13T22:31:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "glue:CreateDatabase",
          "glue:UpdateDatabase",
          "glue:CreateTable",
          "glue:UpdateTable",
          "firehose:CreateDeliveryStream",
          "firehose:DescribeDeliveryStream",
          "logs:CreateLogGroup"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "firehose:DeleteDeliveryStream",
          "firehose:PutRecord",
          "firehose:PutRecordBatch",
          "firehose:UpdateDestination"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/aws-application-discovery-service*"
        ]
      },
      {
        "Action": [
          "s3:CreateBucket",
          "s3:ListBucket",
          "s3:PutBucketLogging",
          "s3:PutEncryptionConfiguration"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::aws-application-discovery-service*"
        ]
      },
      {
        "Action": [
          "s3:GetObject"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::aws-application-discovery-service*/*"
        ]
      },
      {
        "Action": [
          "logs:CreateLogStream",
          "logs:PutRetentionPolicy"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/AWSApplicationDiscoveryServiceFirehose"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSApplicationDiscoveryServiceFirehose"
        ]
      }
    ]
  },
  "AWSAutoScalingPlansEC2AutoScalingPolicy": {
    "policy": {
      "PolicyName": "AWSAutoScalingPlansEC2AutoScalingPolicy",
      "PolicyId": "ANPAIXWLPZPD4RYBM3JSU",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSAutoScalingPlansEC2AutoScalingPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to AWS Auto Scaling to periodically forecast capacity and generate scheduled scaling actions for Auto Scaling groups in a scaling plan",
      "CreateDate": "2018-08-23T22:46:59.000Z",
      "UpdateDate": "2018-08-23T22:46:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeScheduledActions",
          "autoscaling:BatchPutScheduledUpdateGroupAction",
          "autoscaling:BatchDeleteScheduledAction"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "WAFRegionalLoggingServiceRolePolicy": {
    "policy": {
      "PolicyName": "WAFRegionalLoggingServiceRolePolicy",
      "PolicyId": "ANPAJE43HAZMEH4CI6SU2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/WAFRegionalLoggingServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Creating SLR to write customer's logs to a firehose stream",
      "CreateDate": "2018-08-24T18:40:55.000Z",
      "UpdateDate": "2018-08-24T18:40:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "firehose:PutRecord",
          "firehose:PutRecordBatch"
        ],
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
        ]
      }
    ]
  },
  "WAFLoggingServiceRolePolicy": {
    "policy": {
      "PolicyName": "WAFLoggingServiceRolePolicy",
      "PolicyId": "ANPAJZ7N545GUNUHNTYOM",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/WAFLoggingServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Creating SLR to write customer's logs to a firehose stream",
      "CreateDate": "2018-08-24T21:05:47.000Z",
      "UpdateDate": "2018-08-24T21:05:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "firehose:PutRecord",
          "firehose:PutRecordBatch"
        ],
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
        ]
      }
    ]
  },
  "AmazonFreeRTOSOTAUpdate": {
    "policy": {
      "PolicyName": "AmazonFreeRTOSOTAUpdate",
      "PolicyId": "ANPAINC2TXHAYDOK3SWMU",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonFreeRTOSOTAUpdate",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows user to access Amazon FreeRTOS OTA Update ",
      "CreateDate": "2018-08-27T22:43:07.000Z",
      "UpdateDate": "2020-12-18T17:47:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObjectVersion",
          "s3:PutObject",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::afr-ota*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "signer:StartSigningJob",
          "signer:DescribeSigningJob",
          "signer:GetSigningProfile",
          "signer:PutSigningProfile"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucketVersions",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iot:DeleteJob",
          "iot:DescribeJob"
        ],
        "Resource": [
          "arn:aws:iot:*:*:job/AFR_OTA*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iot:DeleteStream"
        ],
        "Resource": [
          "arn:aws:iot:*:*:stream/AFR_OTA*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iot:CreateStream",
          "iot:CreateJob"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSXRayDaemonWriteAccess": {
    "policy": {
      "PolicyName": "AWSXRayDaemonWriteAccess",
      "PolicyId": "ANPAIOE47HSUE5AVBNEDM",
      "Arn": "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow the AWS X-Ray Daemon to relay raw trace segments data to the service's API and retrieve sampling data (rules, targets, etc.) to be used by the X-Ray SDK.",
      "CreateDate": "2018-08-28T23:00:33.000Z",
      "UpdateDate": "2024-02-13T21:58:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSXRayDaemonWriteAccess",
        "Effect": "Allow",
        "Action": [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:GetSamplingRules",
          "xray:GetSamplingTargets",
          "xray:GetSamplingStatisticSummaries"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonConnectServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AmazonConnectServiceLinkedRolePolicy",
      "PolicyId": "ANPAJ6R6FMTSRUJSKI72Y",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonConnectServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v14",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Connect to create and manage AWS resources on your behalf.",
      "CreateDate": "2018-09-07T00:21:43.000Z",
      "UpdateDate": "2023-11-28T16:05:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowConnectActions",
        "Effect": "Allow",
        "Action": [
          "connect:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowDeleteSLR",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect_*"
        ]
      },
      {
        "Sid": "AllowS3ObjectForConnectBucket",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectAcl",
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:DeleteObject"
        ],
        "Resource": [
          "arn:aws:s3:::amazon-connect-*/*"
        ]
      },
      {
        "Sid": "AllowGetBucketMetadataForConnectBucket",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:GetBucketAcl"
        ],
        "Resource": [
          "arn:aws:s3:::amazon-connect-*"
        ]
      },
      {
        "Sid": "AllowConnectLogGroupAccess",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/connect/*:*"
        ]
      },
      {
        "Sid": "AllowListLexBotAccess",
        "Effect": "Allow",
        "Action": [
          "lex:ListBots",
          "lex:ListBotAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowCustomerProfilesForConnectDomain",
        "Effect": "Allow",
        "Action": [
          "profile:SearchProfiles",
          "profile:CreateProfile",
          "profile:UpdateProfile",
          "profile:AddProfileKey",
          "profile:ListProfileObjectTypes",
          "profile:ListCalculatedAttributeDefinitions",
          "profile:ListCalculatedAttributesForProfile",
          "profile:GetDomain",
          "profile:ListIntegrations"
        ],
        "Resource": [
          "arn:aws:profile:*:*:domains/amazon-connect-*"
        ]
      },
      {
        "Sid": "AllowReadPermissionForCustomerProfileObjects",
        "Effect": "Allow",
        "Action": [
          "profile:ListProfileObjects",
          "profile:GetProfileObjectType"
        ],
        "Resource": [
          "arn:aws:profile:*:*:domains/amazon-connect-*/object-types/*"
        ]
      },
      {
        "Sid": "AllowListIntegrationForCustomerProfile",
        "Effect": "Allow",
        "Action": [
          "profile:ListAccountIntegrations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowReadForCustomerProfileObjectTemplates",
        "Effect": "Allow",
        "Action": [
          "profile:ListProfileObjectTypeTemplates",
          "profile:GetProfileObjectTypeTemplate"
        ],
        "Resource": [
          "arn:aws:profile:*:*:/templates*"
        ]
      },
      {
        "Sid": "AllowWisdomForConnectEnabledTaggedResources",
        "Effect": "Allow",
        "Action": [
          "wisdom:CreateContent",
          "wisdom:DeleteContent",
          "wisdom:CreateKnowledgeBase",
          "wisdom:GetAssistant",
          "wisdom:GetKnowledgeBase",
          "wisdom:GetContent",
          "wisdom:GetRecommendations",
          "wisdom:GetSession",
          "wisdom:NotifyRecommendationsReceived",
          "wisdom:QueryAssistant",
          "wisdom:StartContentUpload",
          "wisdom:UpdateContent",
          "wisdom:UntagResource",
          "wisdom:TagResource",
          "wisdom:CreateSession",
          "wisdom:CreateQuickResponse",
          "wisdom:GetQuickResponse",
          "wisdom:SearchQuickResponses",
          "wisdom:StartImportJob",
          "wisdom:GetImportJob",
          "wisdom:ListImportJobs",
          "wisdom:ListQuickResponses",
          "wisdom:UpdateQuickResponse",
          "wisdom:DeleteQuickResponse",
          "wisdom:PutFeedback"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowListOperationForWisdom",
        "Effect": "Allow",
        "Action": [
          "wisdom:ListAssistants",
          "wisdom:ListKnowledgeBases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowCustomerProfilesCalculatedAttributesForConnectDomain",
        "Effect": "Allow",
        "Action": [
          "profile:GetCalculatedAttributeForProfile",
          "profile:CreateCalculatedAttributeDefinition",
          "profile:DeleteCalculatedAttributeDefinition",
          "profile:GetCalculatedAttributeDefinition",
          "profile:UpdateCalculatedAttributeDefinition"
        ],
        "Resource": [
          "arn:aws:profile:*:*:domains/amazon-connect-*/calculated-attributes/*"
        ]
      },
      {
        "Sid": "AllowPutMetricsForConnectNamespace",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowSMSVoiceOperationsForConnect",
        "Effect": "Allow",
        "Action": [
          "sms-voice:SendTextMessage",
          "sms-voice:DescribePhoneNumbers"
        ],
        "Resource": [
          "arn:aws:sms-voice:*:*:phone-number/*"
        ]
      }
    ]
  },
  "ElasticLoadBalancingReadOnly": {
    "policy": {
      "PolicyName": "ElasticLoadBalancingReadOnly",
      "PolicyId": "ANPAJMO7B7SNFLQ6HH736",
      "Arn": "arn:aws:iam::aws:policy/ElasticLoadBalancingReadOnly",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon ElasticLoadBalancing and dependent services",
      "CreateDate": "2018-09-20T20:17:09.000Z",
      "UpdateDate": "2023-11-26T18:15:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "Statement1",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:Describe*",
          "elasticloadbalancing:Get*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Statement2",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeClassicLinkInstances",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Statement3",
        "Effect": "Allow",
        "Action": [
          "arc-zonal-shift:GetManagedResource"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
        ]
      },
      {
        "Sid": "Statement4",
        "Effect": "Allow",
        "Action": [
          "arc-zonal-shift:ListManagedResources",
          "arc-zonal-shift:ListZonalShifts"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ElasticLoadBalancingFullAccess": {
    "policy": {
      "PolicyName": "ElasticLoadBalancingFullAccess",
      "PolicyId": "ANPAIDPMLA3IUIOQCISJ4",
      "Arn": "arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon ElasticLoadBalancing, and limited access to other services necessary to provide ElasticLoadBalancing features.",
      "CreateDate": "2018-09-20T20:42:07.000Z",
      "UpdateDate": "2022-11-29T01:45:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcClassicLink",
          "ec2:DescribeInstances",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeClassicLinkInstances",
          "ec2:DescribeRouteTables",
          "ec2:DescribeCoipPools",
          "ec2:GetCoipPoolUsage",
          "ec2:DescribeVpcPeeringConnections",
          "cognito-idp:DescribeUserPoolClient"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "arc-zonal-shift:*"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "arc-zonal-shift:ListManagedResources",
          "arc-zonal-shift:ListZonalShifts"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "LightsailExportAccess": {
    "policy": {
      "PolicyName": "LightsailExportAccess",
      "PolicyId": "ANPAJ4LZGPQLZWMVR4WMQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/LightsailExportAccess",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS Lightsail service linked role policy which grants permissions to export resources",
      "CreateDate": "2018-09-28T16:35:54.000Z",
      "UpdateDate": "2022-01-15T01:45:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/lightsail.amazonaws.com/AWSServiceRoleForLightsail*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CopySnapshot",
          "ec2:DescribeSnapshots",
          "ec2:CopyImage",
          "ec2:DescribeImages"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetAccountPublicAccessBlock"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRedshiftQueryEditor": {
    "policy": {
      "PolicyName": "AmazonRedshiftQueryEditor",
      "PolicyId": "ANPAINVFHHP7CWVHTGBGM",
      "Arn": "arn:aws:iam::aws:policy/AmazonRedshiftQueryEditor",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the Amazon Redshift Query Editor and to saved queries via the AWS Management Console.",
      "CreateDate": "2018-10-04T22:50:32.000Z",
      "UpdateDate": "2021-02-16T19:33:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "redshift:GetClusterCredentials",
          "redshift:ListSchemas",
          "redshift:ListTables",
          "redshift:ListDatabases",
          "redshift:ExecuteQuery",
          "redshift:FetchResults",
          "redshift:CancelQuery",
          "redshift:DescribeClusters",
          "redshift:DescribeQuery",
          "redshift:DescribeTable",
          "redshift:ViewQueriesFromConsole",
          "redshift:DescribeSavedQueries",
          "redshift:CreateSavedQuery",
          "redshift:DeleteSavedQueries",
          "redshift:ModifySavedQuery"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DataAPIPermissions",
        "Action": [
          "redshift-data:ExecuteStatement",
          "redshift-data:ListDatabases",
          "redshift-data:ListSchemas",
          "redshift-data:ListTables",
          "redshift-data:DescribeTable"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DataAPIIAMSessionPermissionsRestriction",
        "Action": [
          "redshift-data:GetStatementResult",
          "redshift-data:CancelStatement",
          "redshift-data:DescribeStatement",
          "redshift-data:ListStatements"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerListPermissions",
        "Action": [
          "secretsmanager:ListSecrets"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerCreateGetPermissions",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:TagResource"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:*"
        ]
      }
    ]
  },
  "AWSGlueConsoleSageMakerNotebookFullAccess": {
    "policy": {
      "PolicyName": "AWSGlueConsoleSageMakerNotebookFullAccess",
      "PolicyId": "ANPAJELFOHJC42QS3ZSYY",
      "Arn": "arn:aws:iam::aws:policy/AWSGlueConsoleSageMakerNotebookFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Glue via the AWS Management Console and access to sagemaker notebook instances.",
      "CreateDate": "2018-10-05T17:52:35.000Z",
      "UpdateDate": "2021-07-15T15:24:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "glue:*",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSubnetGroups",
          "iam:ListRoles",
          "iam:ListRolePolicies",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:ListAttachedRolePolicies",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeRouteTables",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeInstances",
          "ec2:DescribeImages",
          "ec2:CreateNetworkInterface",
          "ec2:AttachNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeNetworkInterfaces",
          "rds:DescribeDBInstances",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "cloudformation:DescribeStacks",
          "cloudformation:GetTemplateSummary",
          "dynamodb:ListTables",
          "kms:ListAliases",
          "kms:DescribeKey",
          "sagemaker:ListNotebookInstances",
          "cloudformation:ListStacks",
          "cloudwatch:GetMetricData",
          "cloudwatch:ListDashboards"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*/*aws-glue-*/*",
          "arn:aws:s3:::aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:GetLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:/aws-glue/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/aws-glue*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreatePresignedNotebookInstanceUrl",
          "sagemaker:CreateNotebookInstance",
          "sagemaker:DeleteNotebookInstance",
          "sagemaker:DescribeNotebookInstance",
          "sagemaker:StartNotebookInstance",
          "sagemaker:StopNotebookInstance",
          "sagemaker:UpdateNotebookInstance",
          "sagemaker:ListTags"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:notebook-instance/aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:DescribeNotebookInstanceLifecycleConfig",
          "sagemaker:CreateNotebookInstanceLifecycleConfig",
          "sagemaker:DeleteNotebookInstanceLifecycleConfig",
          "sagemaker:ListNotebookInstanceLifecycleConfigs"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:key-pair/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances",
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/AWSGlueServiceRole*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/AWSGlueServiceSageMakerNotebookRole*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
        ]
      }
    ]
  },
  "AmazonConnectReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonConnectReadOnlyAccess",
      "PolicyId": "ANPAIVZMH7VU6YYKRY6ZU",
      "Arn": "arn:aws:iam::aws:policy/AmazonConnectReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permission to view the Amazon Connect instances in your AWS account.",
      "CreateDate": "2018-10-17T21:00:44.000Z",
      "UpdateDate": "2019-11-06T22:10:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "connect:Get*",
          "connect:Describe*",
          "connect:List*",
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "connect:GetFederationTokens"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCertificateManagerPrivateCAAuditor": {
    "policy": {
      "PolicyName": "AWSCertificateManagerPrivateCAAuditor",
      "PolicyId": "ANPAJW77VE4UEBJ4PEXEY",
      "Arn": "arn:aws:iam::aws:policy/AWSCertificateManagerPrivateCAAuditor",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides auditor access to AWS Certificate Manager Private Certificate Authority",
      "CreateDate": "2018-10-23T16:51:08.000Z",
      "UpdateDate": "2020-08-17T22:54:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:CreateCertificateAuthorityAuditReport",
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:DescribeCertificateAuthorityAuditReport",
          "acm-pca:GetCertificateAuthorityCsr",
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:GetPolicy",
          "acm-pca:ListPermissions",
          "acm-pca:ListTags"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:ListCertificateAuthorities"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCertificateManagerPrivateCAUser": {
    "policy": {
      "PolicyName": "AWSCertificateManagerPrivateCAUser",
      "PolicyId": "ANPAJBXCSJJULLMRWSNII",
      "Arn": "arn:aws:iam::aws:policy/AWSCertificateManagerPrivateCAUser",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides certificate user access to AWS Certificate Manager Private Certificate Authority",
      "CreateDate": "2018-10-23T16:53:33.000Z",
      "UpdateDate": "2019-06-20T17:42:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:IssueCertificate"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "acm-pca:IssueCertificate"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:RevokeCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:ListPermissions"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:ListCertificateAuthorities"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCertificateManagerPrivateCAFullAccess": {
    "policy": {
      "PolicyName": "AWSCertificateManagerPrivateCAFullAccess",
      "PolicyId": "ANPAIRTQUC55CREAWFLBG",
      "Arn": "arn:aws:iam::aws:policy/AWSCertificateManagerPrivateCAFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Certificate Manager Private Certificate Authority",
      "CreateDate": "2018-10-23T16:54:50.000Z",
      "UpdateDate": "2018-10-23T16:54:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCertificateManagerPrivateCAReadOnly": {
    "policy": {
      "PolicyName": "AWSCertificateManagerPrivateCAReadOnly",
      "PolicyId": "ANPAJQAQT3WIXOXY7TD4A",
      "Arn": "arn:aws:iam::aws:policy/AWSCertificateManagerPrivateCAReadOnly",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Certificate Manager Private Certificate Authority",
      "CreateDate": "2018-10-23T16:57:04.000Z",
      "UpdateDate": "2020-08-17T22:54:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:DescribeCertificateAuthorityAuditReport",
          "acm-pca:ListCertificateAuthorities",
          "acm-pca:GetCertificateAuthorityCsr",
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:GetPolicy",
          "acm-pca:ListPermissions",
          "acm-pca:ListTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudTrailServiceRolePolicy": {
    "policy": {
      "PolicyName": "CloudTrailServiceRolePolicy",
      "PolicyId": "ANPAJXQJ45EGU6U7NQBW4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudTrailServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permission policy for CloudTrail ServiceLinkedRole",
      "CreateDate": "2018-10-24T21:21:44.000Z",
      "UpdateDate": "2023-11-27T01:18:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudTrailFullAccess",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AwsOrgsAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AwsOrgsDelegatedAdminAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeleteTableAccess",
        "Effect": "Allow",
        "Action": [
          "glue:DeleteTable"
        ],
        "Resource": [
          "arn:*:glue:*:*:catalog",
          "arn:*:glue:*:*:database/aws:cloudtrail",
          "arn:*:glue:*:*:table/aws:cloudtrail/*"
        ]
      },
      {
        "Sid": "DeregisterResourceAccess",
        "Effect": "Allow",
        "Action": [
          "lakeformation:DeregisterResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGreengrassReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSGreengrassReadOnlyAccess",
      "PolicyId": "ANPAJLSKLXFVTQTZ5GY3I",
      "Arn": "arn:aws:iam::aws:policy/AWSGreengrassReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy gives read only access to the AWS Greengrass configuration, management and deployment actions",
      "CreateDate": "2018-10-30T16:01:43.000Z",
      "UpdateDate": "2018-10-30T16:01:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "greengrass:List*",
          "greengrass:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSSODirectoryReadOnly": {
    "policy": {
      "PolicyName": "AWSSSODirectoryReadOnly",
      "PolicyId": "ANPAJDPMQELJXZD2NC6JG",
      "Arn": "arn:aws:iam::aws:policy/AWSSSODirectoryReadOnly",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "ReadOnly access for SSO Directory",
      "CreateDate": "2018-10-31T23:49:32.000Z",
      "UpdateDate": "2022-11-16T18:17:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSSSODirectoryReadOnly",
        "Effect": "Allow",
        "Action": [
          "sso-directory:Search*",
          "sso-directory:Describe*",
          "sso-directory:List*",
          "sso-directory:Get*",
          "identitystore:Describe*",
          "identitystore:List*",
          "identitystore-auth:ListSessions",
          "identitystore-auth:BatchGetSession"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSSODirectoryAdministrator": {
    "policy": {
      "PolicyName": "AWSSSODirectoryAdministrator",
      "PolicyId": "ANPAI2TCZRD7WRD5D2E2Q",
      "Arn": "arn:aws:iam::aws:policy/AWSSSODirectoryAdministrator",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Administrator access for SSO Directory",
      "CreateDate": "2018-10-31T23:54:00.000Z",
      "UpdateDate": "2022-10-20T20:34:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSSSODirectoryAdministrator",
        "Effect": "Allow",
        "Action": [
          "sso-directory:*",
          "identitystore:*",
          "identitystore-auth:*",
          "sso:ListDirectoryAssociations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSOrganizationsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSOrganizationsReadOnlyAccess",
      "PolicyId": "ANPAJY5RQATUV77PEPVOM",
      "Arn": "arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to AWS Organizations.",
      "CreateDate": "2018-11-06T20:32:38.000Z",
      "UpdateDate": "2024-02-06T17:36:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSOrganizationsReadOnly",
        "Effect": "Allow",
        "Action": [
          "organizations:Describe*",
          "organizations:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSOrganizationsReadOnlyAccount",
        "Effect": "Allow",
        "Action": [
          "account:GetAlternateContact",
          "account:GetContactInformation",
          "account:ListRegions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRoleForIoTSiteWise": {
    "policy": {
      "PolicyName": "AWSServiceRoleForIoTSiteWise",
      "PolicyId": "ANPAJGQU4DZIQP6HLYQPE",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForIoTSiteWise",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS IoT SiteWise to provision and manage gateways as well as query data. The policy includes required AWS Greengrass permissions for deploying to groups, AWS Lambda permissions for creating and updating service-prefixed functions, and AWS IoT Analytics permissions for querying data from datastores.",
      "CreateDate": "2018-11-14T19:19:17.000Z",
      "UpdateDate": "2023-11-13T18:27:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowSiteWiseReadGreenGrass",
        "Effect": "Allow",
        "Action": [
          "greengrass:GetAssociatedRole",
          "greengrass:GetCoreDefinition",
          "greengrass:GetCoreDefinitionVersion",
          "greengrass:GetGroup",
          "greengrass:GetGroupVersion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowSiteWiseAccessLogGroup",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/iotsitewise*"
        ]
      },
      {
        "Sid": "AllowSiteWiseAccessLog",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/iotsitewise*:log-stream:*"
        ]
      },
      {
        "Sid": "AllowSiteWiseAccessSiteWiseManagedWorkspaceInTwinMaker",
        "Effect": "Allow",
        "Action": [
          "iottwinmaker:GetWorkspace",
          "iottwinmaker:ExecuteQuery"
        ],
        "Resource": [
          "arn:aws:iottwinmaker:*:*:workspace/*"
        ]
      }
    ]
  },
  "AWSOrganizationsFullAccess": {
    "policy": {
      "PolicyName": "AWSOrganizationsFullAccess",
      "PolicyId": "ANPAJZXBNRCJKNLQHSB5M",
      "Arn": "arn:aws:iam::aws:policy/AWSOrganizationsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Organizations.",
      "CreateDate": "2018-11-06T20:31:57.000Z",
      "UpdateDate": "2024-02-06T17:49:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSOrganizationsFullAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSOrganizationsFullAccessAccount",
        "Effect": "Allow",
        "Action": [
          "account:PutAlternateContact",
          "account:DeleteAlternateContact",
          "account:GetAlternateContact",
          "account:GetContactInformation",
          "account:PutContactInformation",
          "account:ListRegions",
          "account:EnableRegion",
          "account:DisableRegion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSOrganizationsFullAccessCreateSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSResourceAccessManagerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSResourceAccessManagerServiceRolePolicy",
      "PolicyId": "ANPAJU667A3V5UAXC4YNE",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSResourceAccessManagerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy containing Read-only AWS Resource Access Manager access to customers' Organizations structure. It also contains IAM permissions to self-delete the role.",
      "CreateDate": "2018-11-14T19:28:28.000Z",
      "UpdateDate": "2018-11-14T19:28:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListChildren",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListParents",
          "organizations:ListRoots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowDeletionOfServiceLinkedRoleForResourceAccessManager",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/ram.amazonaws.com/*"
        ]
      }
    ]
  },
  "AWSKeyManagementServiceCustomKeyStoresServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSKeyManagementServiceCustomKeyStoresServiceRolePolicy",
      "PolicyId": "ANPAIADMJEHVVYK5AUQOO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSKeyManagementServiceCustomKeyStoresServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS services and resources required for AWS KMS custom key stores",
      "CreateDate": "2018-11-14T20:10:53.000Z",
      "UpdateDate": "2023-11-10T19:03:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudhsm:Describe*",
          "ec2:CreateNetworkInterface",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateSecurityGroup",
          "ec2:DescribeSecurityGroups",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:DeleteSecurityGroup",
          "ec2:DescribeVpcs",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaces"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "KafkaServiceRolePolicy": {
    "policy": {
      "PolicyName": "KafkaServiceRolePolicy",
      "PolicyId": "ANPAJUXPRZ76MAP2EVQJU",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/KafkaServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "IAM service linked role policy for Kafka.",
      "CreateDate": "2018-11-15T23:31:48.000Z",
      "UpdateDate": "2023-04-28T00:39:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:AttachNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DetachNetworkInterface",
          "ec2:DescribeVpcEndpoints",
          "acm-pca:GetCertificateAuthorityCertificate",
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:*:ec2:*:*:subnet/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVpcEndpoints",
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:*:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetResourcePolicy",
          "secretsmanager:PutResourcePolicy",
          "secretsmanager:DeleteResourcePolicy",
          "secretsmanager:DescribeSecret"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticMapReduceEditorsRole": {
    "policy": {
      "PolicyName": "AmazonElasticMapReduceEditorsRole",
      "PolicyId": "ANPAIBI5CIE6OHUIGLYVG",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceEditorsRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the Amazon Elastic MapReduce Editors service role.",
      "CreateDate": "2018-11-16T21:55:25.000Z",
      "UpdateDate": "2023-02-09T22:39:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateSecurityGroup",
          "ec2:DescribeSecurityGroups",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DescribeNetworkInterfaces",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DescribeTags",
          "ec2:DescribeInstances",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "elasticmapreduce:ListInstances",
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:ListSteps"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      }
    ]
  },
  "AmazonRDSDataFullAccess": {
    "policy": {
      "PolicyName": "AmazonRDSDataFullAccess",
      "PolicyId": "ANPAJ5HUMNZCSW4IC74T6",
      "Arn": "arn:aws:iam::aws:policy/AmazonRDSDataFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows full access to use the RDS data APIs, secret store APIs for RDS database credentials, and DB console query management APIs to execute SQL statements on Aurora Serverless clusters in the AWS account.",
      "CreateDate": "2018-11-20T21:29:36.000Z",
      "UpdateDate": "2019-11-20T21:58:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SecretsManagerDbCredentialsAccess",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue",
          "secretsmanager:PutResourcePolicy",
          "secretsmanager:PutSecretValue",
          "secretsmanager:DeleteSecret",
          "secretsmanager:DescribeSecret",
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*"
        ]
      },
      {
        "Sid": "RDSDataServiceAccess",
        "Effect": "Allow",
        "Action": [
          "dbqms:CreateFavoriteQuery",
          "dbqms:DescribeFavoriteQueries",
          "dbqms:UpdateFavoriteQuery",
          "dbqms:DeleteFavoriteQueries",
          "dbqms:GetQueryString",
          "dbqms:CreateQueryHistory",
          "dbqms:DescribeQueryHistory",
          "dbqms:UpdateQueryHistory",
          "dbqms:DeleteQueryHistory",
          "rds-data:ExecuteSql",
          "rds-data:ExecuteStatement",
          "rds-data:BatchExecuteStatement",
          "rds-data:BeginTransaction",
          "rds-data:CommitTransaction",
          "rds-data:RollbackTransaction",
          "secretsmanager:CreateSecret",
          "secretsmanager:ListSecrets",
          "secretsmanager:GetRandomPassword",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSRoboMakerReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSRoboMakerReadOnlyAccess",
      "PolicyId": "ANPAIXFHP2ALXXGGECYJI",
      "Arn": "arn:aws:iam::aws:policy/AWSRoboMakerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS RoboMaker via the AWS Management Console and SDK",
      "CreateDate": "2018-11-26T05:30:50.000Z",
      "UpdateDate": "2020-08-28T23:10:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "VisualEditor0",
        "Effect": "Allow",
        "Action": [
          "robomaker:List*",
          "robomaker:BatchDescribe*",
          "robomaker:Describe*",
          "robomaker:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSRoboMakerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSRoboMakerServiceRolePolicy",
      "PolicyId": "ANPAIOSFFLBBLCTKS3ATC",
      "Arn": "arn:aws:iam::aws:policy/AWSRoboMakerServiceRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "RoboMaker service policy",
      "CreateDate": "2018-11-26T05:33:19.000Z",
      "UpdateDate": "2018-11-26T05:33:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeSecurityGroups",
          "greengrass:CreateDeployment",
          "greengrass:CreateGroupVersion",
          "greengrass:CreateFunctionDefinition",
          "greengrass:CreateFunctionDefinitionVersion",
          "greengrass:GetDeploymentStatus",
          "greengrass:GetGroup",
          "greengrass:GetGroupVersion",
          "greengrass:GetCoreDefinitionVersion",
          "greengrass:GetFunctionDefinitionVersion",
          "greengrass:GetAssociatedRole",
          "lambda:CreateFunction"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "lambda:UpdateFunctionCode",
          "lambda:GetFunction",
          "lambda:UpdateFunctionConfiguration"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:lambda:*:*:function:aws-robomaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSRoboMakerServicePolicy": {
    "policy": {
      "PolicyName": "AWSRoboMakerServicePolicy",
      "PolicyId": "ANPAJYLVVUUQMAEEZ3ZNY",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSRoboMakerServicePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "RoboMaker service policy",
      "CreateDate": "2018-11-26T06:30:08.000Z",
      "UpdateDate": "2021-11-11T22:23:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeSecurityGroups",
          "greengrass:CreateDeployment",
          "greengrass:CreateGroupVersion",
          "greengrass:CreateFunctionDefinition",
          "greengrass:CreateFunctionDefinitionVersion",
          "greengrass:GetDeploymentStatus",
          "greengrass:GetGroup",
          "greengrass:GetGroupVersion",
          "greengrass:GetCoreDefinitionVersion",
          "greengrass:GetFunctionDefinitionVersion",
          "greengrass:GetAssociatedRole",
          "lambda:CreateFunction",
          "robomaker:CreateSimulationJob",
          "robomaker:CancelSimulationJob"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "robomaker:TagResource"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:robomaker:*:*:simulation-job/*"
        ]
      },
      {
        "Action": [
          "lambda:UpdateFunctionCode",
          "lambda:GetFunction",
          "lambda:UpdateFunctionConfiguration",
          "lambda:DeleteFunction",
          "lambda:ListVersionsByFunction",
          "lambda:GetAlias",
          "lambda:UpdateAlias",
          "lambda:CreateAlias",
          "lambda:DeleteAlias"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:lambda:*:*:function:aws-robomaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSVPCTransitGatewayServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSVPCTransitGatewayServiceRolePolicy",
      "PolicyId": "ANPAJS2PBJSYV2EZW3MIQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSVPCTransitGatewayServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow VPC Transit Gateway to create and manage necessary resources for your Transit Gateway VPC Attachments.",
      "CreateDate": "2018-11-26T16:21:17.000Z",
      "UpdateDate": "2021-04-15T16:31:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DeleteNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:AssignIpv6Addresses",
          "ec2:UnAssignIpv6Addresses"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow",
        "Sid": "0"
      }
    ]
  },
  "AWSLicenseManagerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSLicenseManagerServiceRolePolicy",
      "PolicyId": "ANPAIM7JPETWHTYNBQSZE",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSLicenseManagerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS License Manager service default role policy",
      "CreateDate": "2018-11-26T19:02:53.000Z",
      "UpdateDate": "2021-07-30T01:43:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "IAMPermissions",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/license-management.marketplace.amazonaws.com/AWSServiceRoleForMarketplaceLicenseManagement"
        ]
      },
      {
        "Sid": "IAMPermissionsForCreatingMemberSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:*:iam::*:role/aws-service-role/license-manager.member-account.amazonaws.com/AWSServiceRoleForAWSLicenseManagerMemberAccountRole"
        ]
      },
      {
        "Sid": "S3BucketPermissions1",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-license-manager-service-*"
        ]
      },
      {
        "Sid": "S3BucketPermissions2",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3ObjectPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-license-manager-service-*"
        ]
      },
      {
        "Sid": "SNSAccountPermissions",
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:aws-license-manager-service-*"
        ]
      },
      {
        "Sid": "SNSTopicPermissions",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2Permissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeImages",
          "ec2:DescribeHosts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:ListInventoryEntries",
          "ssm:GetInventory",
          "ssm:CreateAssociation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OrganizationPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:DescribeOrganization",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LicenseManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "license-manager:GetServiceSettings",
          "license-manager:GetLicense*",
          "license-manager:UpdateLicenseSpecificationsForResource",
          "license-manager:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLicenseManagerMasterAccountRolePolicy": {
    "policy": {
      "PolicyName": "AWSLicenseManagerMasterAccountRolePolicy",
      "PolicyId": "ANPAIJE2NOZW2BDEHYUH2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSLicenseManagerMasterAccountRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS License Manager service master account role policy",
      "CreateDate": "2018-11-26T19:03:51.000Z",
      "UpdateDate": "2022-05-31T20:50:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "S3BucketPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:GetLifecycleConfiguration",
          "s3:PutLifecycleConfiguration",
          "s3:GetBucketPolicy",
          "s3:PutBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::aws-license-manager-service-*"
        ]
      },
      {
        "Sid": "S3ObjectPermissions1",
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:PutObject",
          "s3:GetObject",
          "s3:ListBucketMultipartUploads",
          "s3:ListMultipartUploadParts"
        ],
        "Resource": [
          "arn:aws:s3:::aws-license-manager-service-*"
        ]
      },
      {
        "Sid": "S3ObjectPermissions2",
        "Effect": "Allow",
        "Action": [
          "s3:DeleteObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-license-manager-service-*/resource_sync/*"
        ]
      },
      {
        "Sid": "AthenaPermissions",
        "Effect": "Allow",
        "Action": [
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:StartQueryExecution"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GluePermissions",
        "Effect": "Allow",
        "Action": [
          "glue:GetTable",
          "glue:GetPartition",
          "glue:GetPartitions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OrganizationPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:DescribeAccount",
          "organizations:ListChildren",
          "organizations:ListParents",
          "organizations:ListAccountsForParent",
          "organizations:ListRoots",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RAMPermissions1",
        "Effect": "Allow",
        "Action": [
          "ram:GetResourceShares",
          "ram:GetResourceShareAssociations",
          "ram:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RAMPermissions2",
        "Effect": "Allow",
        "Action": [
          "ram:CreateResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RAMPermissions3",
        "Effect": "Allow",
        "Action": [
          "ram:AssociateResourceShare",
          "ram:DisassociateResourceShare",
          "ram:UpdateResourceShare",
          "ram:DeleteResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMGetRoles",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMPassRoles",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/LicenseManagerServiceResourceDataSyncRole*"
        ]
      },
      {
        "Sid": "CloudformationPermission",
        "Effect": "Allow",
        "Action": [
          "cloudformation:UpdateStack",
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStacks"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/LicenseManagerCrossAccountCloudDiscoveryStack/*"
        ]
      },
      {
        "Sid": "GlueUpdatePermissions",
        "Effect": "Allow",
        "Action": [
          "glue:CreateTable",
          "glue:UpdateTable",
          "glue:DeleteTable",
          "glue:UpdateJob",
          "glue:UpdateCrawler"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:crawler/LicenseManagerResourceSynDataCrawler",
          "arn:aws:glue:*:*:job/LicenseManagerResourceSynDataProcessJob",
          "arn:aws:glue:*:*:table/license_manager_resource_inventory_db/*",
          "arn:aws:glue:*:*:table/license_manager_resource_sync/*",
          "arn:aws:glue:*:*:database/license_manager_resource_inventory_db",
          "arn:aws:glue:*:*:database/license_manager_resource_sync"
        ]
      },
      {
        "Sid": "RGPermissions",
        "Effect": "Allow",
        "Action": [
          "resource-groups:PutGroupPolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLicenseManagerMemberAccountRolePolicy": {
    "policy": {
      "PolicyName": "AWSLicenseManagerMemberAccountRolePolicy",
      "PolicyId": "ANPAJZTYEY2LEGBYAVUY4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSLicenseManagerMemberAccountRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS License Manager service member account role policy",
      "CreateDate": "2018-11-26T19:04:32.000Z",
      "UpdateDate": "2019-11-15T22:09:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "LicenseManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "license-manager:UpdateLicenseSpecificationsForResource",
          "license-manager:GetLicenseConfiguration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:ListInventoryEntries",
          "ssm:GetInventory",
          "ssm:CreateAssociation",
          "ssm:CreateResourceDataSync",
          "ssm:DeleteResourceDataSync",
          "ssm:ListResourceDataSync",
          "ssm:ListAssociations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RAMPermissions",
        "Effect": "Allow",
        "Action": [
          "ram:AcceptResourceShareInvitation",
          "ram:GetResourceShareInvitations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ServerMigrationServiceLaunchRole": {
    "policy": {
      "PolicyName": "ServerMigrationServiceLaunchRole",
      "PolicyId": "ANPAIIIAAMVUCBR2OLXZO",
      "Arn": "arn:aws:iam::aws:policy/service-role/ServerMigrationServiceLaunchRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions to allow the AWS Server Migration Service to create and update relevant AWS resources into the customer's AWS account for launching migrated servers and applications.",
      "CreateDate": "2018-11-26T19:53:06.000Z",
      "UpdateDate": "2020-10-15T17:29:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyInstanceAttribute",
          "ec2:StopInstances",
          "ec2:StartInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DisassociateIamInstanceProfile",
          "ec2:AssociateIamInstanceProfile",
          "ec2:ReplaceIamInstanceProfileAssociation"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances",
          "ec2:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "applicationinsights:Describe*",
          "applicationinsights:List*",
          "cloudformation:ListStackResources",
          "cloudformation:DescribeStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "applicationinsights:CreateApplication",
          "applicationinsights:CreateComponent",
          "applicationinsights:UpdateApplication",
          "applicationinsights:DeleteApplication",
          "applicationinsights:UpdateComponentConfiguration",
          "applicationinsights:DeleteComponent"
        ],
        "Resource": [
          "arn:aws:applicationinsights:*:*:application/resource-group/sms-app-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:CreateGroup",
          "resource-groups:GetGroup",
          "resource-groups:UpdateGroup",
          "resource-groups:DeleteGroup"
        ],
        "Resource": [
          "arn:aws:resource-groups:*:*:group/sms-app-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/AWSServiceRoleForApplicationInsights"
        ]
      }
    ]
  },
  "GlobalAcceleratorReadOnlyAccess": {
    "policy": {
      "PolicyName": "GlobalAcceleratorReadOnlyAccess",
      "PolicyId": "ANPAJYXHGCVENJKQZRNGU",
      "Arn": "arn:aws:iam::aws:policy/GlobalAcceleratorReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow GlobalAccelerator Users Access to Read Only APIs",
      "CreateDate": "2018-11-27T02:41:00.000Z",
      "UpdateDate": "2018-11-27T02:41:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "globalaccelerator:Describe*",
          "globalaccelerator:List*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "GlobalAcceleratorFullAccess": {
    "policy": {
      "PolicyName": "GlobalAcceleratorFullAccess",
      "PolicyId": "ANPAJ3NSRQKPB42BCNRT6",
      "Arn": "arn:aws:iam::aws:policy/GlobalAcceleratorFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow GlobalAccelerator Users full Access to all APIs",
      "CreateDate": "2018-11-27T02:44:44.000Z",
      "UpdateDate": "2020-12-04T19:17:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "globalaccelerator:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "ec2:DescribeAddresses",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeRegions",
          "ec2:DescribeSubnets"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/globalaccelerator.amazonaws.com/AWSServiceRoleForGlobalAccelerator*"
        ]
      }
    ]
  },
  "AWSPrivateMarketplaceAdminFullAccess": {
    "policy": {
      "PolicyName": "AWSPrivateMarketplaceAdminFullAccess",
      "PolicyId": "ANPAJ6VRZDDCYDOVCOCEI",
      "Arn": "arn:aws:iam::aws:policy/AWSPrivateMarketplaceAdminFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all administrative actions for an AWS Private Marketplace.",
      "CreateDate": "2018-11-27T16:32:32.000Z",
      "UpdateDate": "2024-02-14T22:05:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PrivateMarketplaceRequestPermissions",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:AssociateProductsWithPrivateMarketplace",
          "aws-marketplace:DisassociateProductsFromPrivateMarketplace",
          "aws-marketplace:ListPrivateMarketplaceRequests",
          "aws-marketplace:DescribePrivateMarketplaceRequests"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PrivateMarketplaceCatalogAPIPermissions",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListEntities",
          "aws-marketplace:DescribeEntity",
          "aws-marketplace:StartChangeSet",
          "aws-marketplace:ListChangeSets",
          "aws-marketplace:DescribeChangeSet",
          "aws-marketplace:CancelChangeSet"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PrivateMarketplaceCatalogTaggingPermissions",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:TagResource",
          "aws-marketplace:UntagResource",
          "aws-marketplace:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        ]
      },
      {
        "Sid": "PrivateMarketplaceOrganizationPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribeAccount",
          "organizations:ListRoots",
          "organizations:ListParents",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListAccountsForParent",
          "organizations:ListAccounts",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ComprehendMedicalFullAccess": {
    "policy": {
      "PolicyName": "ComprehendMedicalFullAccess",
      "PolicyId": "ANPAJR5SUEX6PPJ3K4RAO",
      "Arn": "arn:aws:iam::aws:policy/ComprehendMedicalFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Comprehend Medical",
      "CreateDate": "2018-11-27T17:55:52.000Z",
      "UpdateDate": "2018-11-27T17:55:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "comprehendmedical:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeDeployRoleForECS": {
    "policy": {
      "PolicyName": "AWSCodeDeployRoleForECS",
      "PolicyId": "ANPAIIL3KXEKRGEN2HFIO",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides CodeDeploy service wide access to perform an ECS blue/green deployment on your behalf. Grants full access to support services, such as  full access to read all S3 objects, invoke all Lambda functions, publish to all SNS topics within the account and update all ECS services.",
      "CreateDate": "2018-11-27T20:40:57.000Z",
      "UpdateDate": "2019-09-23T22:37:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ecs:DescribeServices",
          "ecs:CreateTaskSet",
          "ecs:UpdateServicePrimaryTaskSet",
          "ecs:DeleteTaskSet",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:ModifyListener",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:ModifyRule",
          "lambda:InvokeFunction",
          "cloudwatch:DescribeAlarms",
          "sns:Publish",
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeDeployRoleForECSLimited": {
    "policy": {
      "PolicyName": "AWSCodeDeployRoleForECSLimited",
      "PolicyId": "ANPAJ6Z7L2IOXEFFOGD2M",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECSLimited",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": " Provides CodeDeploy service limited access to perform an ECS blue/green deployment on your behalf. ",
      "CreateDate": "2018-11-27T20:42:42.000Z",
      "UpdateDate": "2019-09-23T22:10:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ecs:DescribeServices",
          "ecs:CreateTaskSet",
          "ecs:UpdateServicePrimaryTaskSet",
          "ecs:DeleteTaskSet",
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:CodeDeployTopic_*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:ModifyListener",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:ModifyRule"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:CodeDeployHook_*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/ecsTaskExecutionRole",
          "arn:aws:iam::*:role/ECSTaskExecution*"
        ]
      }
    ]
  },
  "TranslateFullAccess": {
    "policy": {
      "PolicyName": "TranslateFullAccess",
      "PolicyId": "ANPAIAPOAEI2VFQYUK5RY",
      "Arn": "arn:aws:iam::aws:policy/TranslateFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Translate.",
      "CreateDate": "2018-11-27T23:36:20.000Z",
      "UpdateDate": "2020-01-08T21:22:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "translate:*",
          "comprehend:DetectDominantLanguage",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "iam:ListRoles",
          "iam:GetRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSecurityHubServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSSecurityHubServiceRolePolicy",
      "PolicyId": "ANPAJQPCESDDYDLLSOGYO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSSecurityHubServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v14",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "A service-linked role required for AWS Security Hub to access your resources.",
      "CreateDate": "2018-11-27T23:47:51.000Z",
      "UpdateDate": "2023-11-27T03:46:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SecurityHubServiceRolePermissions",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:DescribeTrails",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:GetEventSelectors",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmsForMetric",
          "logs:DescribeMetricFilters",
          "sns:ListSubscriptionsByTopic",
          "config:DescribeConfigurationRecorders",
          "config:DescribeConfigurationRecorderStatus",
          "config:DescribeConfigRules",
          "config:DescribeConfigRuleEvaluationStatus",
          "config:BatchGetResourceConfig",
          "config:SelectResourceConfig",
          "iam:GenerateCredentialReport",
          "organizations:ListAccounts",
          "config:PutEvaluations",
          "tag:GetResources",
          "iam:GetCredentialReport",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListChildren",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:DescribeOrganizationalUnit",
          "securityhub:BatchDisableStandards",
          "securityhub:BatchEnableStandards",
          "securityhub:BatchUpdateStandardsControlAssociations",
          "securityhub:BatchGetSecurityControls",
          "securityhub:BatchGetStandardsControlAssociations",
          "securityhub:CreateMembers",
          "securityhub:DeleteMembers",
          "securityhub:DescribeHub",
          "securityhub:DescribeOrganizationConfiguration",
          "securityhub:DescribeStandards",
          "securityhub:DescribeStandardsControls",
          "securityhub:DisassociateFromAdministratorAccount",
          "securityhub:DisassociateMembers",
          "securityhub:DisableSecurityHub",
          "securityhub:EnableSecurityHub",
          "securityhub:GetEnabledStandards",
          "securityhub:ListStandardsControlAssociations",
          "securityhub:ListSecurityControlDefinitions",
          "securityhub:UpdateOrganizationConfiguration",
          "securityhub:UpdateSecurityControl",
          "securityhub:UpdateSecurityHubConfiguration",
          "securityhub:UpdateStandardsControl"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecurityHubServiceRoleConfigPermissions",
        "Effect": "Allow",
        "Action": [
          "config:PutConfigRule",
          "config:DeleteConfigRule",
          "config:GetComplianceDetailsByConfigRule"
        ],
        "Resource": [
          "arn:aws:config:*:*:config-rule/aws-service-rule/*securityhub*"
        ]
      },
      {
        "Sid": "SecurityHubServiceRoleOrganizationsPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSecurityHubFullAccess": {
    "policy": {
      "PolicyName": "AWSSecurityHubFullAccess",
      "PolicyId": "ANPAJ4262VZCA4HPBZSO6",
      "Arn": "arn:aws:iam::aws:policy/AWSSecurityHubFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to use AWS Security Hub.",
      "CreateDate": "2018-11-27T23:54:34.000Z",
      "UpdateDate": "2023-11-16T21:10:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SecurityHubAllowAll",
        "Effect": "Allow",
        "Action": [
          "securityhub:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecurityHubServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OtherServicePermission",
        "Effect": "Allow",
        "Action": [
          "guardduty:GetDetector",
          "guardduty:ListDetectors",
          "inspector2:BatchGetAccountStatus"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSecurityHubReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSSecurityHubReadOnlyAccess",
      "PolicyId": "ANPAIEBAQNOFUCLFJ3UHG",
      "Arn": "arn:aws:iam::aws:policy/AWSSecurityHubReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Security Hub resources",
      "CreateDate": "2018-11-28T01:34:29.000Z",
      "UpdateDate": "2024-02-22T23:45:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSSecurityHubReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "securityhub:Get*",
          "securityhub:List*",
          "securityhub:BatchGet*",
          "securityhub:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonFSxServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonFSxServiceRolePolicy",
      "PolicyId": "ANPAIVQ24YKVRBV5IYQ5G",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonFSxServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon FSx to manage AWS resources on your behalf",
      "CreateDate": "2018-11-28T10:38:37.000Z",
      "UpdateDate": "2024-01-10T20:53:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CreateFileSystem",
        "Effect": "Allow",
        "Action": [
          "ds:AuthorizeApplication",
          "ds:GetAuthorizedApplicationDetails",
          "ds:UnauthorizeApplication",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeAddresses",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DisassociateAddress",
          "ec2:GetSecurityGroupsForVpc",
          "route53:AssociateVPCWithHostedZone"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PutMetrics",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TagResourceNetworkInterface",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "ManageNetworkInterface",
        "Effect": "Allow",
        "Action": [
          "ec2:AssignPrivateIpAddresses",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:UnassignPrivateIpAddresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "ManageRouteTable",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateRoute",
          "ec2:ReplaceRoute",
          "ec2:DeleteRoute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "PutCloudWatchLogs",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/fsx/*"
        ]
      },
      {
        "Sid": "ManageAuditLogs",
        "Effect": "Allow",
        "Action": [
          "firehose:DescribeDeliveryStream",
          "firehose:PutRecord",
          "firehose:PutRecordBatch"
        ],
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/aws-fsx-*"
        ]
      }
    ]
  },
  "FSxDeleteServiceLinkedRoleAccess": {
    "policy": {
      "PolicyName": "FSxDeleteServiceLinkedRoleAccess",
      "PolicyId": "ANPAJ6IRP2YV2YPKWPPNQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/FSxDeleteServiceLinkedRoleAccess",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon FSx to delete its Service Linked Roles for Amazon S3 access",
      "CreateDate": "2018-11-28T10:40:24.000Z",
      "UpdateDate": "2018-11-28T10:40:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus",
          "iam:GetRole"
        ],
        "Resource": [
          "arn:*:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/AWSServiceRoleForFSxS3Access_*"
        ]
      }
    ]
  },
  "AmazonFSxReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonFSxReadOnlyAccess",
      "PolicyId": "ANPAJ4ICPKXR6KK32HT52",
      "Arn": "arn:aws:iam::aws:policy/AmazonFSxReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon FSx.",
      "CreateDate": "2018-11-28T16:33:32.000Z",
      "UpdateDate": "2018-11-28T16:33:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "fsx:Describe*",
          "fsx:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonFSxFullAccess": {
    "policy": {
      "PolicyName": "AmazonFSxFullAccess",
      "PolicyId": "ANPAIEUV6Z2X4VNZRVB5I",
      "Arn": "arn:aws:iam::aws:policy/AmazonFSxFullAccess",
      "Path": "/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon FSx and access to related AWS services.",
      "CreateDate": "2018-11-28T16:34:43.000Z",
      "UpdateDate": "2024-01-10T20:16:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ViewAWSDSDirectories",
        "Effect": "Allow",
        "Action": [
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FullAccessToFSx",
        "Effect": "Allow",
        "Action": [
          "fsx:AssociateFileGateway",
          "fsx:AssociateFileSystemAliases",
          "fsx:CancelDataRepositoryTask",
          "fsx:CopyBackup",
          "fsx:CopySnapshotAndUpdateVolume",
          "fsx:CreateBackup",
          "fsx:CreateDataRepositoryAssociation",
          "fsx:CreateDataRepositoryTask",
          "fsx:CreateFileCache",
          "fsx:CreateFileSystem",
          "fsx:CreateFileSystemFromBackup",
          "fsx:CreateSnapshot",
          "fsx:CreateStorageVirtualMachine",
          "fsx:CreateVolume",
          "fsx:CreateVolumeFromBackup",
          "fsx:DeleteBackup",
          "fsx:DeleteDataRepositoryAssociation",
          "fsx:DeleteFileCache",
          "fsx:DeleteFileSystem",
          "fsx:DeleteSnapshot",
          "fsx:DeleteStorageVirtualMachine",
          "fsx:DeleteVolume",
          "fsx:DescribeAssociatedFileGateways",
          "fsx:DescribeBackups",
          "fsx:DescribeDataRepositoryAssociations",
          "fsx:DescribeDataRepositoryTasks",
          "fsx:DescribeFileCaches",
          "fsx:DescribeFileSystemAliases",
          "fsx:DescribeFileSystems",
          "fsx:DescribeSharedVpcConfiguration",
          "fsx:DescribeSnapshots",
          "fsx:DescribeStorageVirtualMachines",
          "fsx:DescribeVolumes",
          "fsx:DisassociateFileGateway",
          "fsx:DisassociateFileSystemAliases",
          "fsx:ListTagsForResource",
          "fsx:ManageBackupPrincipalAssociations",
          "fsx:ReleaseFileSystemNfsV3Locks",
          "fsx:RestoreVolumeFromSnapshot",
          "fsx:TagResource",
          "fsx:UntagResource",
          "fsx:UpdateDataRepositoryAssociation",
          "fsx:UpdateFileCache",
          "fsx:UpdateFileSystem",
          "fsx:UpdateSharedVpcConfiguration",
          "fsx:UpdateSnapshot",
          "fsx:UpdateStorageVirtualMachine",
          "fsx:UpdateVolume"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateSLRForFSx",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateSLRForLustreS3Integration",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateLogsForFSxWindowsAuditLogs",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/fsx/*"
        ]
      },
      {
        "Sid": "WriteToAmazonKinesisDataFirehose",
        "Effect": "Allow",
        "Action": [
          "firehose:PutRecord"
        ],
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/aws-fsx-*"
        ]
      },
      {
        "Sid": "CreateTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "DescribeEC2VpcResources",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSecurityGroups",
          "ec2:GetSecurityGroupsForVpc",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeRouteTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManageCrossAccountDataReplication",
        "Effect": "Allow",
        "Action": [
          "fsx:PutResourcePolicy",
          "fsx:GetResourcePolicy",
          "fsx:DeleteResourcePolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonFSxConsoleReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonFSxConsoleReadOnlyAccess",
      "PolicyId": "ANPAJQUISIZNHGLA6YQFM",
      "Arn": "arn:aws:iam::aws:policy/AmazonFSxConsoleReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon FSx and access to related AWS services via the AWS Management Console.",
      "CreateDate": "2018-11-28T16:35:24.000Z",
      "UpdateDate": "2024-01-10T20:19:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "FSxReadOnlyPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "ds:DescribeDirectories",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeSecurityGroups",
          "ec2:GetSecurityGroupsForVpc",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "firehose:ListDeliveryStreams",
          "fsx:Describe*",
          "fsx:ListTagsForResource",
          "kms:DescribeKey",
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonFSxConsoleFullAccess": {
    "policy": {
      "PolicyName": "AmazonFSxConsoleFullAccess",
      "PolicyId": "ANPAITDDJ23Y5UZ2WCZRQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonFSxConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon FSx and access to related AWS services via the AWS Management Console.",
      "CreateDate": "2018-11-28T16:36:05.000Z",
      "UpdateDate": "2024-01-10T20:07:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ListResourcesAssociatedWithFSxFileSystem",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "ds:DescribeDirectories",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:GetSecurityGroupsForVpc",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "firehose:ListDeliveryStreams",
          "kms:ListAliases",
          "logs:DescribeLogGroups",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FullAccessToFSx",
        "Effect": "Allow",
        "Action": [
          "fsx:AssociateFileGateway",
          "fsx:AssociateFileSystemAliases",
          "fsx:CancelDataRepositoryTask",
          "fsx:CopyBackup",
          "fsx:CopySnapshotAndUpdateVolume",
          "fsx:CreateBackup",
          "fsx:CreateDataRepositoryAssociation",
          "fsx:CreateDataRepositoryTask",
          "fsx:CreateFileCache",
          "fsx:CreateFileSystem",
          "fsx:CreateFileSystemFromBackup",
          "fsx:CreateSnapshot",
          "fsx:CreateStorageVirtualMachine",
          "fsx:CreateVolume",
          "fsx:CreateVolumeFromBackup",
          "fsx:DeleteBackup",
          "fsx:DeleteDataRepositoryAssociation",
          "fsx:DeleteFileCache",
          "fsx:DeleteFileSystem",
          "fsx:DeleteSnapshot",
          "fsx:DeleteStorageVirtualMachine",
          "fsx:DeleteVolume",
          "fsx:DescribeAssociatedFileGateways",
          "fsx:DescribeBackups",
          "fsx:DescribeDataRepositoryAssociations",
          "fsx:DescribeDataRepositoryTasks",
          "fsx:DescribeFileCaches",
          "fsx:DescribeFileSystemAliases",
          "fsx:DescribeFileSystems",
          "fsx:DescribeSharedVpcConfiguration",
          "fsx:DescribeSnapshots",
          "fsx:DescribeStorageVirtualMachines",
          "fsx:DescribeVolumes",
          "fsx:DisassociateFileGateway",
          "fsx:DisassociateFileSystemAliases",
          "fsx:ListTagsForResource",
          "fsx:ManageBackupPrincipalAssociations",
          "fsx:ReleaseFileSystemNfsV3Locks",
          "fsx:RestoreVolumeFromSnapshot",
          "fsx:TagResource",
          "fsx:UntagResource",
          "fsx:UpdateDataRepositoryAssociation",
          "fsx:UpdateFileCache",
          "fsx:UpdateFileSystem",
          "fsx:UpdateSharedVpcConfiguration",
          "fsx:UpdateSnapshot",
          "fsx:UpdateStorageVirtualMachine",
          "fsx:UpdateVolume"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateFSxSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateSLRForLustreS3Integration",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "ManageCrossAccountDataReplication",
        "Effect": "Allow",
        "Action": [
          "fsx:PutResourcePolicy",
          "fsx:GetResourcePolicy",
          "fsx:DeleteResourcePolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonTextractFullAccess": {
    "policy": {
      "PolicyName": "AmazonTextractFullAccess",
      "PolicyId": "ANPAIQDD47A7H3GBVPWOQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonTextractFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Access to all Amazon Textract APIs",
      "CreateDate": "2018-11-28T19:07:42.000Z",
      "UpdateDate": "2018-11-28T19:07:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "textract:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonTextractServiceRole": {
    "policy": {
      "PolicyName": "AmazonTextractServiceRole",
      "PolicyId": "ANPAJBDSAWESWLL34WASG",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonTextractServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Textract to call AWS services on your behalf.",
      "CreateDate": "2018-11-28T19:12:16.000Z",
      "UpdateDate": "2018-11-28T19:12:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:AmazonTextract*"
        ]
      }
    ]
  },
  "AWSCloudMapReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCloudMapReadOnlyAccess",
      "PolicyId": "ANPAIOHISHKLCJTVQQL5E",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudMapReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to all AWS Cloud Map actions.",
      "CreateDate": "2018-11-28T23:45:26.000Z",
      "UpdateDate": "2023-09-20T21:47:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "servicediscovery:Get*",
          "servicediscovery:List*",
          "servicediscovery:DiscoverInstances",
          "servicediscovery:DiscoverInstancesRevision"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloudMapFullAccess": {
    "policy": {
      "PolicyName": "AWSCloudMapFullAccess",
      "PolicyId": "ANPAIZPIMAQZJS3WUXUJM",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudMapFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all AWS Cloud Map actions.",
      "CreateDate": "2018-11-28T23:57:31.000Z",
      "UpdateDate": "2020-07-29T19:15:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53:GetHostedZone",
          "route53:ListHostedZonesByName",
          "route53:CreateHostedZone",
          "route53:DeleteHostedZone",
          "route53:ChangeResourceRecordSets",
          "route53:CreateHealthCheck",
          "route53:GetHealthCheck",
          "route53:DeleteHealthCheck",
          "route53:UpdateHealthCheck",
          "ec2:DescribeVpcs",
          "ec2:DescribeRegions",
          "ec2:DescribeInstances",
          "servicediscovery:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloudMapDiscoverInstanceAccess": {
    "policy": {
      "PolicyName": "AWSCloudMapDiscoverInstanceAccess",
      "PolicyId": "ANPAIPRD7PYYQVYPDME4K",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudMapDiscoverInstanceAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS Cloud Map discovery API.",
      "CreateDate": "2018-11-29T00:02:42.000Z",
      "UpdateDate": "2023-09-20T21:48:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "servicediscovery:DiscoverInstances",
          "servicediscovery:DiscoverInstancesRevision"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloudMapRegisterInstanceAccess": {
    "policy": {
      "PolicyName": "AWSCloudMapRegisterInstanceAccess",
      "PolicyId": "ANPAI4P5Z5HXVWJ75WQBC",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudMapRegisterInstanceAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides registrant level access to AWS Cloud Map actions.",
      "CreateDate": "2018-11-29T00:04:57.000Z",
      "UpdateDate": "2023-09-20T21:47:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53:GetHostedZone",
          "route53:ListHostedZonesByName",
          "route53:ChangeResourceRecordSets",
          "route53:CreateHealthCheck",
          "route53:GetHealthCheck",
          "route53:DeleteHealthCheck",
          "route53:UpdateHealthCheck",
          "servicediscovery:Get*",
          "servicediscovery:List*",
          "servicediscovery:RegisterInstance",
          "servicediscovery:DeregisterInstance",
          "servicediscovery:DiscoverInstances",
          "servicediscovery:DiscoverInstancesRevision",
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "WellArchitectedConsoleFullAccess": {
    "policy": {
      "PolicyName": "WellArchitectedConsoleFullAccess",
      "PolicyId": "ANPAIH6HSBHM3VSYC5SKA",
      "Arn": "arn:aws:iam::aws:policy/WellArchitectedConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Well-Architected Tool via the AWS Management Console",
      "CreateDate": "2018-11-29T18:19:23.000Z",
      "UpdateDate": "2018-11-29T18:19:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "wellarchitected:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "WellArchitectedConsoleReadOnlyAccess": {
    "policy": {
      "PolicyName": "WellArchitectedConsoleReadOnlyAccess",
      "PolicyId": "ANPAIUTK35NDTYF6T2GFY",
      "Arn": "arn:aws:iam::aws:policy/WellArchitectedConsoleReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to AWS Well-Architected Tool via the AWS Management Console",
      "CreateDate": "2018-11-29T18:21:08.000Z",
      "UpdateDate": "2023-06-29T17:16:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "wellarchitected:Get*",
          "wellarchitected:List*",
          "wellarchitected:ExportLens"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudwatchApplicationInsightsServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "CloudwatchApplicationInsightsServiceLinkedRolePolicy",
      "PolicyId": "ANPAJH3SHQERZRQMQOQ44",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudwatchApplicationInsightsServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v24",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Cloudwatch Application Insights Service Linked Role Policy",
      "CreateDate": "2018-12-01T16:22:12.000Z",
      "UpdateDate": "2023-05-11T16:34:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarmHistory",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:ListMetrics",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:PutAnomalyDetector",
          "cloudwatch:DeleteAnomalyDetector",
          "cloudwatch:DescribeAnomalyDetectors"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:FilterLogEvents",
          "logs:GetLogEvents",
          "logs:DescribeLogStreams",
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:UpdateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStackResources"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/ApplicationInsights-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources",
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:ListGroupResources",
          "resource-groups:GetGroupQuery",
          "resource-groups:GetGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:CreateGroup",
          "resource-groups:DeleteGroup"
        ],
        "Resource": [
          "arn:aws:resource-groups:*:*:group/ApplicationInsights-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:DescribeAutoScalingGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:PutParameter",
          "ssm:DeleteParameter",
          "ssm:AddTagsToResource",
          "ssm:RemoveTagsFromResource",
          "ssm:GetParameters"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-ApplicationInsights-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:CreateAssociation",
          "ssm:UpdateAssociation",
          "ssm:DeleteAssociation",
          "ssm:DescribeAssociation"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ssm:*:*:association/*",
          "arn:aws:ssm:*:*:managed-instance/*",
          "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure",
          "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
          "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetOpsItem",
          "ssm:CreateOpsItem",
          "ssm:DescribeOpsItems",
          "ssm:UpdateOpsItem",
          "ssm:DescribeInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:opsitem/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:ListCommandInvocations",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ssm:*:*:document/AWSEC2-CheckPerformanceCounterSets",
          "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
          "arn:aws:ssm:*:*:document/AWSEC2-DetectWorkload",
          "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeVolumes",
          "ec2:DescribeVolumeStatus",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeNatGateways"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances",
          "rds:DescribeDBClusters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:ListFunctions",
          "lambda:GetFunctionConfiguration",
          "lambda:ListEventSourceMappings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets",
          "events:DeleteRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AmazonCloudWatch-ApplicationInsights-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "xray:GetServiceGraph",
          "xray:GetTraceSummaries",
          "xray:GetTimeSeriesServiceStatistics",
          "xray:GetTraceGraph"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:ListTables",
          "dynamodb:DescribeTable",
          "dynamodb:DescribeContributorInsights",
          "dynamodb:DescribeTimeToLive"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DescribeScalableTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "s3:GetMetricsConfiguration",
          "s3:GetReplicationConfiguration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "states:ListStateMachines",
          "states:DescribeExecution",
          "states:DescribeStateMachine",
          "states:GetExecutionHistory"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecs:DescribeClusters",
          "ecs:DescribeContainerInstances",
          "ecs:DescribeServices",
          "ecs:DescribeTaskDefinition",
          "ecs:DescribeTasks",
          "ecs:DescribeTaskSets",
          "ecs:ListClusters",
          "ecs:ListContainerInstances",
          "ecs:ListServices",
          "ecs:ListTasks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecs:UpdateClusterSettings"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:cluster/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "eks:DescribeCluster",
          "eks:DescribeFargateProfile",
          "eks:DescribeNodegroup",
          "eks:ListClusters",
          "eks:ListFargateProfiles",
          "eks:ListNodegroups",
          "fsx:DescribeFileSystems",
          "fsx:DescribeVolumes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:GetSubscriptionAttributes",
          "sns:GetTopicAttributes",
          "sns:GetSMSAttributes",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:ListQueues"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:DeleteSubscriptionFilter"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutSubscriptionFilter"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*",
          "arn:aws:logs:*:*:destination:AmazonCloudWatch-ApplicationInsights-LogIngestionDestination*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DescribeFileSystems"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53:GetHostedZone",
          "route53:GetHealthCheck",
          "route53:ListHostedZones",
          "route53:ListHealthChecks",
          "route53:ListQueryLoggingConfigs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53resolver:ListFirewallRuleGroupAssociations",
          "route53resolver:GetFirewallRuleGroup",
          "route53resolver:ListFirewallRuleGroups",
          "route53resolver:ListResolverEndpoints",
          "route53resolver:GetResolverQueryLogConfig",
          "route53resolver:ListResolverQueryLogConfigs",
          "route53resolver:ListResolverQueryLogConfigAssociations",
          "route53resolver:GetResolverEndpoint",
          "route53resolver:GetFirewallRuleGroupAssociation"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTSiteWiseFullAccess": {
    "policy": {
      "PolicyName": "AWSIoTSiteWiseFullAccess",
      "PolicyId": "ANPAILUK3XBM6TZ5Q3PX2",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTSiteWiseFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to IoT SiteWise.",
      "CreateDate": "2018-12-04T20:53:39.000Z",
      "UpdateDate": "2018-12-04T20:53:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotsitewise:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTSiteWiseReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSIoTSiteWiseReadOnlyAccess",
      "PolicyId": "ANPAJLHEAFKME2QL64WKK",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTSiteWiseReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to IoT SiteWise.",
      "CreateDate": "2018-12-04T20:55:11.000Z",
      "UpdateDate": "2022-09-16T19:05:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotsitewise:Describe*",
          "iotsitewise:List*",
          "iotsitewise:Get*",
          "iotsitewise:BatchGet*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonPersonalizeFullAccess": {
    "policy": {
      "PolicyName": "AmazonPersonalizeFullAccess",
      "PolicyId": "ANPAJ45XBPPZNI3MMVAUK",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonPersonalizeFullAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 4,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Personalize via the AWS Management Console and SDK. Also provides select access to related services (e.g., S3, CloudWatch).",
      "CreateDate": "2018-12-04T22:24:33.000Z",
      "UpdateDate": "2019-05-30T23:46:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "personalize:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData",
          "cloudwatch:ListMetrics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::*Personalize*",
          "arn:aws:s3:::*personalize*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ClientVPNServiceRolePolicy": {
    "policy": {
      "PolicyName": "ClientVPNServiceRolePolicy",
      "PolicyId": "ANPAI2SV25KUCYQYS5N74",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/ClientVPNServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable AWS Client VPN to manage your Client VPN endpoints.",
      "CreateDate": "2018-12-10T21:20:25.000Z",
      "UpdateDate": "2020-08-12T19:39:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeInternetGateways",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeAccountAttributes",
          "ds:AuthorizeApplication",
          "ds:DescribeDirectories",
          "ds:GetDirectoryLimits",
          "ds:UnauthorizeApplication",
          "logs:DescribeLogStreams",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "acm:GetCertificate",
          "acm:DescribeCertificate",
          "iam:GetSAMLProvider",
          "lambda:GetFunctionConfiguration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMQApiReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMQApiReadOnlyAccess",
      "PolicyId": "ANPAIKI5JRHKAFHXQJKMO",
      "Arn": "arn:aws:iam::aws:policy/AmazonMQApiReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AmazonMQ via our API/SDK.",
      "CreateDate": "2018-12-18T20:31:13.000Z",
      "UpdateDate": "2018-12-18T20:31:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "mq:Describe*",
          "mq:List*",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMQApiFullAccess": {
    "policy": {
      "PolicyName": "AmazonMQApiFullAccess",
      "PolicyId": "ANPAI4CMO533EBV3L2GW4",
      "Arn": "arn:aws:iam::aws:policy/AmazonMQApiFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AmazonMQ via our API/SDK.",
      "CreateDate": "2018-12-18T20:31:31.000Z",
      "UpdateDate": "2020-11-04T16:45:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mq:*",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DetachNetworkInterface",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfacePermissions",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDocDBFullAccess": {
    "policy": {
      "PolicyName": "AmazonDocDBFullAccess",
      "PolicyId": "ANPAIQKACUF6JJHALEG5K",
      "Arn": "arn:aws:iam::aws:policy/AmazonDocDBFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon DocumentDB with MongoDB compatibility. Note this policy also grants full access to publish on all SNS topics within the account and full access to Amazon RDS and Amazon Neptune.",
      "CreateDate": "2019-01-09T20:21:44.000Z",
      "UpdateDate": "2019-01-09T20:21:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "rds:AddRoleToDBCluster",
          "rds:AddSourceIdentifierToSubscription",
          "rds:AddTagsToResource",
          "rds:ApplyPendingMaintenanceAction",
          "rds:CopyDBClusterParameterGroup",
          "rds:CopyDBClusterSnapshot",
          "rds:CopyDBParameterGroup",
          "rds:CreateDBCluster",
          "rds:CreateDBClusterParameterGroup",
          "rds:CreateDBClusterSnapshot",
          "rds:CreateDBInstance",
          "rds:CreateDBParameterGroup",
          "rds:CreateDBSubnetGroup",
          "rds:CreateEventSubscription",
          "rds:DeleteDBCluster",
          "rds:DeleteDBClusterParameterGroup",
          "rds:DeleteDBClusterSnapshot",
          "rds:DeleteDBInstance",
          "rds:DeleteDBParameterGroup",
          "rds:DeleteDBSubnetGroup",
          "rds:DeleteEventSubscription",
          "rds:DescribeAccountAttributes",
          "rds:DescribeCertificates",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBClusterParameters",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBClusters",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBLogFiles",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBSecurityGroups",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEngineDefaultClusterParameters",
          "rds:DescribeEngineDefaultParameters",
          "rds:DescribeEventCategories",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeEvents",
          "rds:DescribeOptionGroups",
          "rds:DescribeOrderableDBInstanceOptions",
          "rds:DescribePendingMaintenanceActions",
          "rds:DescribeValidDBInstanceModifications",
          "rds:DownloadDBLogFilePortion",
          "rds:FailoverDBCluster",
          "rds:ListTagsForResource",
          "rds:ModifyDBCluster",
          "rds:ModifyDBClusterParameterGroup",
          "rds:ModifyDBClusterSnapshotAttribute",
          "rds:ModifyDBInstance",
          "rds:ModifyDBParameterGroup",
          "rds:ModifyDBSubnetGroup",
          "rds:ModifyEventSubscription",
          "rds:PromoteReadReplicaDBCluster",
          "rds:RebootDBInstance",
          "rds:RemoveRoleFromDBCluster",
          "rds:RemoveSourceIdentifierFromSubscription",
          "rds:RemoveTagsFromResource",
          "rds:ResetDBClusterParameterGroup",
          "rds:ResetDBParameterGroup",
          "rds:RestoreDBClusterFromSnapshot",
          "rds:RestoreDBClusterToPointInTime"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "kms:ListAliases",
          "kms:ListKeyPolicies",
          "kms:ListKeys",
          "kms:ListRetirableGrants",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "sns:ListSubscriptions",
          "sns:ListTopics",
          "sns:Publish"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
        ]
      }
    ]
  },
  "AmazonDocDBReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonDocDBReadOnlyAccess",
      "PolicyId": "ANPAI477RMVACLTLWY5RQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonDocDBReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon DocumentDB with MongoDB compatibility. Note that this policy also grants access to Amazon RDS and Amazon Neptune resources.",
      "CreateDate": "2019-01-09T20:30:28.000Z",
      "UpdateDate": "2019-01-09T20:30:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "rds:DescribeAccountAttributes",
          "rds:DescribeCertificates",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBClusterParameters",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBClusters",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBLogFiles",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEventCategories",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeEvents",
          "rds:DescribeOrderableDBInstanceOptions",
          "rds:DescribePendingMaintenanceActions",
          "rds:DownloadDBLogFilePortion",
          "rds:ListTagsForResource"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "kms:ListKeys",
          "kms:ListRetirableGrants",
          "kms:ListAliases",
          "kms:ListKeyPolicies"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "logs:DescribeLogStreams",
          "logs:GetLogEvents"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
          "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*"
        ]
      }
    ]
  },
  "AmazonDocDBConsoleFullAccess": {
    "policy": {
      "PolicyName": "AmazonDocDBConsoleFullAccess",
      "PolicyId": "ANPAJHV6VMSNDDHJ3ESNI",
      "Arn": "arn:aws:iam::aws:policy/AmazonDocDBConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to manage Amazon DocumentDB with MongoDB compatibility using the AWS Management Console. Note this policy also grants full access to publish on all SNS topics within the account, permissions to create and edit Amazon EC2 instances and VPC configurations, permissions to view and list keys on Amazon KMS, and full access to Amazon RDS and Amazon Neptune.",
      "CreateDate": "2019-01-09T20:37:28.000Z",
      "UpdateDate": "2022-11-30T15:23:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "docdb-elastic:CreateCluster",
          "docdb-elastic:UpdateCluster",
          "docdb-elastic:GetCluster",
          "docdb-elastic:DeleteCluster",
          "docdb-elastic:ListClusters",
          "docdb-elastic:CreateClusterSnapshot",
          "docdb-elastic:GetClusterSnapshot",
          "docdb-elastic:DeleteClusterSnapshot",
          "docdb-elastic:ListClusterSnapshots",
          "docdb-elastic:RestoreClusterFromSnapshot",
          "docdb-elastic:TagResource",
          "docdb-elastic:UntagResource",
          "docdb-elastic:ListTagsForResource",
          "rds:AddRoleToDBCluster",
          "rds:AddSourceIdentifierToSubscription",
          "rds:AddTagsToResource",
          "rds:ApplyPendingMaintenanceAction",
          "rds:CopyDBClusterParameterGroup",
          "rds:CopyDBClusterSnapshot",
          "rds:CopyDBParameterGroup",
          "rds:CreateDBCluster",
          "rds:CreateDBClusterParameterGroup",
          "rds:CreateDBClusterSnapshot",
          "rds:CreateDBInstance",
          "rds:CreateDBParameterGroup",
          "rds:CreateDBSubnetGroup",
          "rds:CreateEventSubscription",
          "rds:CreateGlobalCluster",
          "rds:DeleteDBCluster",
          "rds:DeleteDBClusterParameterGroup",
          "rds:DeleteDBClusterSnapshot",
          "rds:DeleteDBInstance",
          "rds:DeleteDBParameterGroup",
          "rds:DeleteDBSubnetGroup",
          "rds:DeleteEventSubscription",
          "rds:DeleteGlobalCluster",
          "rds:DescribeAccountAttributes",
          "rds:DescribeCertificates",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBClusterParameters",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBClusters",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBLogFiles",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBSecurityGroups",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEngineDefaultClusterParameters",
          "rds:DescribeEngineDefaultParameters",
          "rds:DescribeEventCategories",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeEvents",
          "rds:DescribeGlobalClusters",
          "rds:DescribeOptionGroups",
          "rds:DescribeOrderableDBInstanceOptions",
          "rds:DescribePendingMaintenanceActions",
          "rds:DescribeValidDBInstanceModifications",
          "rds:DownloadDBLogFilePortion",
          "rds:FailoverDBCluster",
          "rds:ListTagsForResource",
          "rds:ModifyDBCluster",
          "rds:ModifyDBClusterParameterGroup",
          "rds:ModifyDBClusterSnapshotAttribute",
          "rds:ModifyDBInstance",
          "rds:ModifyDBParameterGroup",
          "rds:ModifyDBSubnetGroup",
          "rds:ModifyEventSubscription",
          "rds:ModifyGlobalCluster",
          "rds:PromoteReadReplicaDBCluster",
          "rds:RebootDBInstance",
          "rds:RemoveFromGlobalCluster",
          "rds:RemoveRoleFromDBCluster",
          "rds:RemoveSourceIdentifierFromSubscription",
          "rds:RemoveTagsFromResource",
          "rds:ResetDBClusterParameterGroup",
          "rds:ResetDBParameterGroup",
          "rds:RestoreDBClusterFromSnapshot",
          "rds:RestoreDBClusterToPointInTime"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "ec2:AllocateAddress",
          "ec2:AssignIpv6Addresses",
          "ec2:AssignPrivateIpAddresses",
          "ec2:AssociateAddress",
          "ec2:AssociateRouteTable",
          "ec2:AssociateSubnetCidrBlock",
          "ec2:AssociateVpcCidrBlock",
          "ec2:AttachInternetGateway",
          "ec2:AttachNetworkInterface",
          "ec2:CreateCustomerGateway",
          "ec2:CreateDefaultSubnet",
          "ec2:CreateDefaultVpc",
          "ec2:CreateInternetGateway",
          "ec2:CreateNatGateway",
          "ec2:CreateNetworkInterface",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSubnet",
          "ec2:CreateVpc",
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeInstances",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroupReferences",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcs",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:ModifySubnetAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:ModifyVpcEndpoint",
          "kms:DescribeKey",
          "kms:ListAliases",
          "kms:ListKeyPolicies",
          "kms:ListKeys",
          "kms:ListRetirableGrants",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "sns:ListSubscriptions",
          "sns:ListTopics",
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/docdb-elastic.amazonaws.com/AWSServiceRoleForDocDB-Elastic"
        ]
      }
    ]
  },
  "AWSBackupServiceRolePolicyForBackup": {
    "policy": {
      "PolicyName": "AWSBackupServiceRolePolicyForBackup",
      "PolicyId": "ANPAIOOYZSLZZXWFJJ5N2",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
      "Path": "/service-role/",
      "DefaultVersionId": "v18",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Backup permission to create backups on your behalf across AWS services",
      "CreateDate": "2019-01-10T21:01:28.000Z",
      "UpdateDate": "2023-12-15T22:04:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DynamoDBPermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:DescribeTable",
          "dynamodb:CreateBackup"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*"
        ]
      },
      {
        "Sid": "DynamoDBBackupResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:DescribeBackup",
          "dynamodb:DeleteBackup"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*/backup/*"
        ]
      },
      {
        "Sid": "DynamoDBBackupPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:AddTagsToResource",
          "rds:ListTagsForResource",
          "rds:DescribeDBSnapshots",
          "rds:CreateDBSnapshot",
          "rds:CopyDBSnapshot",
          "rds:DescribeDBInstances",
          "rds:CreateDBClusterSnapshot",
          "rds:DescribeDBClusters",
          "rds:DescribeDBClusterSnapshots",
          "rds:CopyDBClusterSnapshot",
          "rds:DescribeDBClusterAutomatedBackups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RDSModifyPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:ModifyDBInstance"
        ],
        "Resource": [
          "arn:aws:rds:*:*:db:*"
        ]
      },
      {
        "Sid": "RDSClusterPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:ModifyDBCluster"
        ],
        "Resource": [
          "arn:aws:rds:*:*:cluster:*"
        ]
      },
      {
        "Sid": "RDSClusterBackupPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:DeleteDBClusterAutomatedBackup"
        ],
        "Resource": [
          "arn:aws:rds:*:*:cluster-auto-backup:*"
        ]
      },
      {
        "Sid": "RDSBackupPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:DeleteDBSnapshot",
          "rds:ModifyDBSnapshotAttribute"
        ],
        "Resource": [
          "arn:aws:rds:*:*:snapshot:awsbackup:*"
        ]
      },
      {
        "Sid": "RDSClusterModifyPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:DeleteDBClusterSnapshot",
          "rds:ModifyDBClusterSnapshotAttribute"
        ],
        "Resource": [
          "arn:aws:rds:*:*:cluster-snapshot:awsbackup:*"
        ]
      },
      {
        "Sid": "StorageGatewayPermissions",
        "Effect": "Allow",
        "Action": [
          "storagegateway:CreateSnapshot",
          "storagegateway:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        ]
      },
      {
        "Sid": "EBSCopyPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CopySnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "EC2CopyPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CopyImage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EBSTagAndDeletePermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "EC2Permissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateImage",
          "ec2:DeregisterImage",
          "ec2:DescribeSnapshots",
          "ec2:DescribeTags",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceCreditSpecifications",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeElasticGpus",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeSnapshotTierStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2TagPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:image/*"
        ]
      },
      {
        "Sid": "EC2ModifyPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifySnapshotAttribute",
          "ec2:ModifyImageAttribute"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EBSSnapshotTierPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifySnapshotTier"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "BackupVaultPermissions",
        "Effect": "Allow",
        "Action": [
          "backup:DescribeBackupVault",
          "backup:CopyIntoBackupVault"
        ],
        "Resource": [
          "arn:aws:backup:*:*:backup-vault:*"
        ]
      },
      {
        "Sid": "BackupVaultCopyPermissions",
        "Effect": "Allow",
        "Action": [
          "backup:CopyFromBackupVault"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EFSPermissions",
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:Backup",
          "elasticfilesystem:DescribeTags"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:file-system/*"
        ]
      },
      {
        "Sid": "EBSResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot",
          "ec2:DeleteSnapshot",
          "ec2:DescribeVolumes",
          "ec2:DescribeSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "KMSDynamoDBPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSCreateGrantPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSDataKeyEC2Permissions",
        "Effect": "Allow",
        "Action": [
          "kms:GenerateDataKeyWithoutPlaintext"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "GetResourcesPermissions",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:CancelCommand",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMSendPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "FsxBackupPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeBackups"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:backup/*"
        ]
      },
      {
        "Sid": "FsxCreateBackupPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:CreateBackup"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:file-system/*",
          "arn:aws:fsx:*:*:backup/*",
          "arn:aws:fsx:*:*:volume/*"
        ]
      },
      {
        "Sid": "FsxPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeFileSystems"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:file-system/*"
        ]
      },
      {
        "Sid": "FsxVolumePermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeVolumes"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:volume/*"
        ]
      },
      {
        "Sid": "FsxListTagsPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:file-system/*",
          "arn:aws:fsx:*:*:volume/*"
        ]
      },
      {
        "Sid": "FsxDeletePermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DeleteBackup"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:backup/*"
        ]
      },
      {
        "Sid": "FsxResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:ListTagsForResource",
          "fsx:ManageBackupPrincipalAssociations",
          "fsx:CopyBackup",
          "fsx:TagResource"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:backup/*"
        ]
      },
      {
        "Sid": "DynamodbBackupPermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:StartAwsBackupJob",
          "dynamodb:ListTagsOfResource"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*"
        ]
      },
      {
        "Sid": "BackupGatewayBackupPermissions",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:Backup",
          "backup-gateway:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:vm/*"
        ]
      },
      {
        "Sid": "CloudformationStackPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudformation:ListStacks",
          "cloudformation:GetTemplate",
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/*/*"
        ]
      },
      {
        "Sid": "RedshiftCreatePermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:CreateClusterSnapshot",
          "redshift:DescribeClusterSnapshots",
          "redshift:DescribeTags"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:snapshot:*/*",
          "arn:aws:redshift:*:*:cluster:*"
        ]
      },
      {
        "Sid": "RedshiftSnapshotPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DeleteClusterSnapshot"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:snapshot:*/*"
        ]
      },
      {
        "Sid": "RedshiftPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:cluster:*"
        ]
      },
      {
        "Sid": "RedshiftResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:CreateTags"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:snapshot:*/*"
        ]
      },
      {
        "Sid": "TimestreamResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "timestream:StartAwsBackupJob",
          "timestream:GetAwsBackupStatus",
          "timestream:ListTables",
          "timestream:ListDatabases",
          "timestream:ListTagsForResource",
          "timestream:DescribeTable",
          "timestream:DescribeDatabase"
        ],
        "Resource": [
          "arn:aws:timestream:*:*:database/*"
        ]
      },
      {
        "Sid": "TimestreamEndpointPermissions",
        "Effect": "Allow",
        "Action": [
          "timestream:DescribeEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMSAPPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-sap:GetOperation",
          "ssm-sap:ListDatabases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMSAPResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-sap:BackupDatabase",
          "ssm-sap:UpdateHanaBackupSettings",
          "ssm-sap:GetDatabase",
          "ssm-sap:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:ssm-sap:*:*:*"
        ]
      }
    ]
  },
  "AWSIoTEventsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSIoTEventsReadOnlyAccess",
      "PolicyId": "ANPAJYJFNAR7CN5JW52PG",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTEventsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to IoT Events.",
      "CreateDate": "2019-01-10T22:50:08.000Z",
      "UpdateDate": "2019-09-23T17:22:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotevents:Describe*",
          "iotevents:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTEventsFullAccess": {
    "policy": {
      "PolicyName": "AWSIoTEventsFullAccess",
      "PolicyId": "ANPAJGA726P7LVUWJZ2LM",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTEventsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to IoT Events. ",
      "CreateDate": "2019-01-10T22:51:57.000Z",
      "UpdateDate": "2019-01-10T22:51:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotevents:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkMaintenance": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkMaintenance",
      "PolicyId": "ANPAJQPH22XGBH2VV2LSW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSElasticBeanstalkMaintenance",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS Elastic Beanstalk Service Role policy that grants limited permissions to update your resources on your behalf for maintenance purposes.",
      "CreateDate": "2019-01-11T23:22:52.000Z",
      "UpdateDate": "2019-06-04T17:48:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowCloudformationChangeSetOperationsOnElasticBeanstalkStacks",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateChangeSet",
          "cloudformation:DescribeChangeSet",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:DeleteChangeSet",
          "cloudformation:ListChangeSets",
          "cloudformation:DescribeStacks"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awseb-*",
          "arn:aws:cloudformation:*:*:stack/eb-*"
        ]
      },
      {
        "Sid": "AllowElasticBeanstalkStacksUpdateExecuteSuccessfully",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBackupServiceRolePolicyForRestores": {
    "policy": {
      "PolicyName": "AWSBackupServiceRolePolicyForRestores",
      "PolicyId": "ANPAJZCCL6F2WPVOUXZKI",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores",
      "Path": "/service-role/",
      "DefaultVersionId": "v20",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Backup permission to perform restores on your behalf across AWS services. This policy includes permissions to create and delete AWS resources, such as EBS volumes, RDS instances, and EFS file systems, which are part of the restore process.",
      "CreateDate": "2019-01-12T00:23:54.000Z",
      "UpdateDate": "2023-12-15T22:05:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DynamoDBPermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:Scan",
          "dynamodb:Query",
          "dynamodb:UpdateItem",
          "dynamodb:PutItem",
          "dynamodb:GetItem",
          "dynamodb:DeleteItem",
          "dynamodb:BatchWriteItem",
          "dynamodb:DescribeTable"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*"
        ]
      },
      {
        "Sid": "DynamoDBBackupResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:RestoreTableFromBackup"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*/backup/*"
        ]
      },
      {
        "Sid": "EBSPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume",
          "ec2:DeleteVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "EC2DescribePermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeSnapshots",
          "ec2:DescribeVolumes",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSnapshotTierStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "StorageGatewayVolumePermissions",
        "Effect": "Allow",
        "Action": [
          "storagegateway:DeleteVolume",
          "storagegateway:DescribeCachediSCSIVolumes",
          "storagegateway:DescribeStorediSCSIVolumes",
          "storagegateway:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        ]
      },
      {
        "Sid": "StorageGatewayGatewayPermissions",
        "Effect": "Allow",
        "Action": [
          "storagegateway:DescribeGatewayInformation",
          "storagegateway:CreateStorediSCSIVolume",
          "storagegateway:CreateCachediSCSIVolume"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:gateway/*"
        ]
      },
      {
        "Sid": "StorageGatewayListPermissions",
        "Effect": "Allow",
        "Action": [
          "storagegateway:ListVolumes"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:*"
        ]
      },
      {
        "Sid": "RDSPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances",
          "rds:DescribeDBSnapshots",
          "rds:ListTagsForResource",
          "rds:RestoreDBInstanceFromDBSnapshot",
          "rds:DeleteDBInstance",
          "rds:AddTagsToResource",
          "rds:DescribeDBClusters",
          "rds:RestoreDBClusterFromSnapshot",
          "rds:DeleteDBCluster",
          "rds:RestoreDBInstanceToPointInTime",
          "rds:DescribeDBClusterSnapshots",
          "rds:RestoreDBClusterToPointInTime"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EFSPermissions",
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:Restore",
          "elasticfilesystem:CreateFilesystem",
          "elasticfilesystem:DescribeFilesystems",
          "elasticfilesystem:DeleteFilesystem",
          "elasticfilesystem:TagResource"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:file-system/*"
        ]
      },
      {
        "Sid": "KMSDescribePermissions",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt",
          "kms:Encrypt",
          "kms:GenerateDataKey",
          "kms:ReEncryptTo",
          "kms:ReEncryptFrom",
          "kms:GenerateDataKeyWithoutPlaintext"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSCreateGrantPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EBSSnapshotBlockPermissions",
        "Effect": "Allow",
        "Action": [
          "ebs:CompleteSnapshot",
          "ebs:StartSnapshot",
          "ebs:PutSnapshotBlock"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "RDSResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "rds:CreateDBInstance"
        ],
        "Resource": [
          "arn:aws:rds:*:*:db:*"
        ]
      },
      {
        "Sid": "EC2DeleteAndRestorePermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot",
          "ec2:DeleteTags",
          "ec2:RestoreSnapshotTier"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "EC2CreateTagsScopedPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "EC2RunInstancesPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2TerminateInstancesPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "EC2CreateTagsPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "FsxPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:CreateFileSystemFromBackup"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:file-system/*",
          "arn:aws:fsx:*:*:backup/*"
        ]
      },
      {
        "Sid": "FsxTagPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeFileSystems",
          "fsx:TagResource"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:file-system/*"
        ]
      },
      {
        "Sid": "FsxBackupPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeBackups"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:backup/*"
        ]
      },
      {
        "Sid": "FsxDeletePermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DeleteFileSystem",
          "fsx:UntagResource"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:file-system/*"
        ]
      },
      {
        "Sid": "FsxDescribePermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeVolumes"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:volume/*"
        ]
      },
      {
        "Sid": "FsxVolumeTagPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:CreateVolumeFromBackup",
          "fsx:TagResource"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:volume/*"
        ]
      },
      {
        "Sid": "FsxBackupTagPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:CreateVolumeFromBackup",
          "fsx:TagResource"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:storage-virtual-machine/*",
          "arn:aws:fsx:*:*:backup/*",
          "arn:aws:fsx:*:*:volume/*"
        ]
      },
      {
        "Sid": "FsxVolumePermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DeleteVolume",
          "fsx:UntagResource"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:volume/*"
        ]
      },
      {
        "Sid": "DSPermissions",
        "Effect": "Allow",
        "Action": [
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DynamoDBRestorePermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:RestoreTableFromAwsBackup"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*"
        ]
      },
      {
        "Sid": "GatewayRestorePermissions",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:Restore"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:hypervisor/*"
        ]
      },
      {
        "Sid": "CloudformationChangeSetPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateChangeSet",
          "cloudformation:DescribeChangeSet",
          "cloudformation:TagResource"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:*/*/*"
        ]
      },
      {
        "Sid": "RedshiftClusterSnapshotPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:RestoreFromClusterSnapshot",
          "redshift:RestoreTableFromClusterSnapshot"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:snapshot:*/*",
          "arn:aws:redshift:*:*:cluster:*"
        ]
      },
      {
        "Sid": "RedshiftClusterPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:cluster:*"
        ]
      },
      {
        "Sid": "RedshiftTablePermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeTableRestoreStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TimestreamResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "timestream:StartAwsRestoreJob",
          "timestream:GetAwsRestoreStatus",
          "timestream:ListTables",
          "timestream:ListTagsForResource",
          "timestream:ListDatabases",
          "timestream:DescribeTable",
          "timestream:DescribeDatabase"
        ],
        "Resource": [
          "arn:aws:timestream:*:*:database/*"
        ]
      },
      {
        "Sid": "TimestreamEndpointPermissions",
        "Effect": "Allow",
        "Action": [
          "timestream:DescribeEndpoints"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSTransferLoggingAccess": {
    "policy": {
      "PolicyName": "AWSTransferLoggingAccess",
      "PolicyId": "ANPAISIP5WGJX7VKXRQZO",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSTransferLoggingAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Transfer full access to create log streams and groups and put log events to your account",
      "CreateDate": "2019-01-14T15:32:50.000Z",
      "UpdateDate": "2019-01-14T15:32:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:CreateLogGroup",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMSKFullAccess": {
    "policy": {
      "PolicyName": "AmazonMSKFullAccess",
      "PolicyId": "ANPAJERQQQTWI5OMENTQE",
      "Arn": "arn:aws:iam::aws:policy/AmazonMSKFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide full access to Amazon MSK and other required permissions for its dependencies.",
      "CreateDate": "2019-01-14T22:07:52.000Z",
      "UpdateDate": "2023-10-18T11:33:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kafka:*",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeRouteTables",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcAttribute",
          "kms:DescribeKey",
          "kms:CreateGrant",
          "logs:CreateLogDelivery",
          "logs:GetLogDelivery",
          "logs:UpdateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:ListLogDeliveries",
          "logs:PutResourcePolicy",
          "logs:DescribeResourcePolicies",
          "logs:DescribeLogGroups",
          "s3:GetBucketPolicy",
          "firehose:TagDeliveryStream"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:*:ec2:*:*:vpc/*",
          "arn:*:ec2:*:*:subnet/*",
          "arn:*:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:*:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:*:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:*:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/kafka.amazonaws.com/AWSServiceRoleForKafka*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/delivery.logs.amazonaws.com/AWSServiceRoleForLogDelivery*"
        ]
      }
    ]
  },
  "AmazonMSKReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMSKReadOnlyAccess",
      "PolicyId": "ANPAJGMUI3DP2EVP3VGYO",
      "Arn": "arn:aws:iam::aws:policy/AmazonMSKReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide readonly access to Amazon MSK",
      "CreateDate": "2019-01-14T22:28:45.000Z",
      "UpdateDate": "2019-01-14T22:28:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "kafka:Describe*",
          "kafka:List*",
          "kafka:Get*",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "kms:DescribeKey"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonForecastFullAccess": {
    "policy": {
      "PolicyName": "AmazonForecastFullAccess",
      "PolicyId": "ANPAIAKOTFNTUECQVU7C4",
      "Arn": "arn:aws:iam::aws:policy/AmazonForecastFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Gives access to all actions for Amazon Forecast",
      "CreateDate": "2019-01-18T01:52:29.000Z",
      "UpdateDate": "2019-01-18T01:52:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "forecast:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDataSyncReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSDataSyncReadOnlyAccess",
      "PolicyId": "ANPAJRYVEZEDR7ZEAGYLY",
      "Arn": "arn:aws:iam::aws:policy/AWSDataSyncReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to AWS DataSync",
      "CreateDate": "2019-01-18T19:18:44.000Z",
      "UpdateDate": "2020-06-30T17:59:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "datasync:Describe*",
          "datasync:List*",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeMountTargets",
          "fsx:DescribeFileSystems",
          "iam:GetRole",
          "iam:ListRoles",
          "logs:DescribeLogGroups",
          "logs:DescribeResourcePolicies",
          "s3:ListAllMyBuckets",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDataSyncFullAccess": {
    "policy": {
      "PolicyName": "AWSDataSyncFullAccess",
      "PolicyId": "ANPAJGOHCDUQULZJKDGT4",
      "Arn": "arn:aws:iam::aws:policy/AWSDataSyncFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS DataSync and minimal access to its dependencies",
      "CreateDate": "2019-01-18T19:40:36.000Z",
      "UpdateDate": "2024-02-16T17:19:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DataSyncFullAccessPermissions",
        "Effect": "Allow",
        "Action": [
          "datasync:*",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcEndpoints",
          "ec2:ModifyNetworkInterfaceAttribute",
          "fsx:DescribeFileSystems",
          "fsx:DescribeStorageVirtualMachines",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeMountTargets",
          "iam:GetRole",
          "iam:ListRoles",
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups",
          "logs:DescribeResourcePolicies",
          "outposts:ListOutposts",
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListBucketVersions",
          "s3-outposts:ListAccessPoints",
          "s3-outposts:ListRegionalBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DataSyncPassRolePermissions",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeepRacerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSDeepRacerServiceRolePolicy",
      "PolicyId": "ANPAJTUAQLIAVBJ7LZ32S",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSDeepRacerServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows DeepRacer to create required resources and call AWS services on your behalf.",
      "CreateDate": "2019-02-28T21:58:09.000Z",
      "UpdateDate": "2019-06-12T20:55:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "deepracer:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "robomaker:*",
          "sagemaker:*",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:ListStackResources",
          "cloudformation:DescribeStacks",
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStackResources",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DetectStackDrift",
          "cloudformation:DescribeStackDriftDetectionStatus",
          "cloudformation:DescribeStackResourceDrifts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSDeepRacer*",
          "arn:aws:iam::*:role/service-role/AWSDeepRacer*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction",
          "lambda:DeleteFunction",
          "lambda:GetFunction",
          "lambda:InvokeFunction",
          "lambda:UpdateFunctionCode"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*DeepRacer*",
          "arn:aws:lambda:*:*:function:*Deepracer*",
          "arn:aws:lambda:*:*:function:*deepracer*",
          "arn:aws:lambda:*:*:function:*dr-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetBucketLocation",
          "s3:DeleteObject",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:PutBucketPolicy",
          "s3:GetBucketAcl"
        ],
        "Resource": [
          "arn:aws:s3:::*DeepRacer*",
          "arn:aws:s3:::*Deepracer*",
          "arn:aws:s3:::*deepracer*",
          "arn:aws:s3:::dr-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:CreateStream",
          "kinesisvideo:DeleteStream",
          "kinesisvideo:DescribeStream",
          "kinesisvideo:GetDataEndpoint",
          "kinesisvideo:GetHLSStreamingSessionURL",
          "kinesisvideo:GetMedia",
          "kinesisvideo:PutMedia",
          "kinesisvideo:TagStream"
        ],
        "Resource": [
          "arn:aws:kinesisvideo:*:*:stream/dr-*"
        ]
      }
    ]
  },
  "AWSDeepRacerCloudFormationAccessPolicy": {
    "policy": {
      "PolicyName": "AWSDeepRacerCloudFormationAccessPolicy",
      "PolicyId": "ANPAJYG7FM75UF5CW5ICS",
      "Arn": "arn:aws:iam::aws:policy/AWSDeepRacerCloudFormationAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows CloudFormation to create and manage AWS stacks and resources on your behalf.",
      "CreateDate": "2019-02-28T21:59:49.000Z",
      "UpdateDate": "2019-06-14T17:02:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress",
          "ec2:AttachInternetGateway",
          "ec2:AssociateRouteTable",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateInternetGateway",
          "ec2:CreateNatGateway",
          "ec2:CreateNetworkAcl",
          "ec2:CreateNetworkAclEntry",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSubnet",
          "ec2:CreateTags",
          "ec2:CreateVpc",
          "ec2:CreateVpcEndpoint",
          "ec2:DeleteInternetGateway",
          "ec2:DeleteNatGateway",
          "ec2:DeleteNetworkAcl",
          "ec2:DeleteNetworkAclEntry",
          "ec2:DeleteRoute",
          "ec2:DeleteRouteTable",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteSubnet",
          "ec2:DeleteTags",
          "ec2:DeleteVpc",
          "ec2:DeleteVpcEndpoints",
          "ec2:DescribeAddresses",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcs",
          "ec2:DetachInternetGateway",
          "ec2:DisassociateRouteTable",
          "ec2:ModifySubnetAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:ReleaseAddress",
          "ec2:ReplaceNetworkAclAssociation",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSDeepRacerLambdaAccessRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction",
          "lambda:GetFunction",
          "lambda:DeleteFunction",
          "lambda:TagResource",
          "lambda:UpdateFunctionCode"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*DeepRacer*",
          "arn:aws:lambda:*:*:function:*Deepracer*",
          "arn:aws:lambda:*:*:function:*deepracer*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutBucketPolicy",
          "s3:CreateBucket",
          "s3:ListBucket",
          "s3:GetBucketAcl",
          "s3:DeleteBucket"
        ],
        "Resource": [
          "arn:aws:s3:::*DeepRacer*",
          "arn:aws:s3:::*Deepracer*",
          "arn:aws:s3:::*deepracer*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "robomaker:CreateSimulationApplication",
          "robomaker:CreateSimulationApplicationVersion",
          "robomaker:DeleteSimulationApplication",
          "robomaker:DescribeSimulationApplication",
          "robomaker:ListSimulationApplications",
          "robomaker:TagResource",
          "robomaker:UpdateSimulationApplication"
        ],
        "Resource": [
          "arn:aws:robomaker:*:*:/createSimulationApplication",
          "arn:aws:robomaker:*:*:simulation-application/deepracer*"
        ]
      }
    ]
  },
  "WorkLinkServiceRolePolicy": {
    "policy": {
      "PolicyName": "WorkLinkServiceRolePolicy",
      "PolicyId": "ANPAJ6JTE3DI5JOULLNLS",
      "Arn": "arn:aws:iam::aws:policy/WorkLinkServiceRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by Amazon WorkLink",
      "CreateDate": "2019-01-23T19:03:45.000Z",
      "UpdateDate": "2019-01-23T19:03:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:PutRecord",
          "kinesis:PutRecords"
        ],
        "Resource": [
          "arn:aws:kinesis:*:*:stream/AmazonWorkLink-*"
        ]
      }
    ]
  },
  "AWSDeepRacerRoboMakerAccessPolicy": {
    "policy": {
      "PolicyName": "AWSDeepRacerRoboMakerAccessPolicy",
      "PolicyId": "ANPAIUKGYRTDCUFOMRGAM",
      "Arn": "arn:aws:iam::aws:policy/AWSDeepRacerRoboMakerAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows RoboMaker to create required resources and call AWS services on your behalf.",
      "CreateDate": "2019-02-28T21:59:58.000Z",
      "UpdateDate": "2019-02-28T21:59:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "robomaker:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs",
          "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs:log-stream:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*DeepRacer*",
          "arn:aws:s3:::*Deepracer*",
          "arn:aws:s3:::*deepracer*",
          "arn:aws:s3:::dr-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:CreateStream",
          "kinesisvideo:DescribeStream",
          "kinesisvideo:GetDataEndpoint",
          "kinesisvideo:PutMedia",
          "kinesisvideo:TagStream"
        ],
        "Resource": [
          "arn:aws:kinesisvideo:*:*:stream/dr-*"
        ]
      }
    ]
  },
  "ComprehendDataAccessRolePolicy": {
    "policy": {
      "PolicyName": "ComprehendDataAccessRolePolicy",
      "PolicyId": "ANPAJHSDRRKS2Z3MYUPQY",
      "Arn": "arn:aws:iam::aws:policy/service-role/ComprehendDataAccessRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for AWS Comprehend service role which allows access to S3 resources for data access",
      "CreateDate": "2019-03-06T22:28:15.000Z",
      "UpdateDate": "2019-03-06T22:28:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*Comprehend*",
          "arn:aws:s3:::*comprehend*"
        ]
      }
    ]
  },
  "AlexaForBusinessNetworkProfileServicePolicy": {
    "policy": {
      "PolicyName": "AlexaForBusinessNetworkProfileServicePolicy",
      "PolicyId": "ANPAI7GYBNGIZU2EDSMGQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AlexaForBusinessNetworkProfileServicePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy enables Alexa for Business to perform automated tasks scheduled by your network profiles.",
      "CreateDate": "2019-03-13T00:53:40.000Z",
      "UpdateDate": "2019-04-05T21:57:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "A4bPcaTagAccess",
        "Action": [
          "acm-pca:GetCertificate",
          "acm-pca:IssueCertificate",
          "acm-pca:RevokeCertificate"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "A4bNetworkProfileAccess",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*"
        ]
      }
    ]
  },
  "AmazonSSMManagedInstanceCore": {
    "policy": {
      "PolicyName": "AmazonSSMManagedInstanceCore",
      "PolicyId": "ANPAIXSHM2BNB2D3AXXRU",
      "Arn": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The policy for Amazon EC2 Role to enable AWS Systems Manager service core functionality.",
      "CreateDate": "2019-03-15T17:22:12.000Z",
      "UpdateDate": "2019-05-23T16:54:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeAssociation",
          "ssm:GetDeployablePatchSnapshotForInstance",
          "ssm:GetDocument",
          "ssm:DescribeDocument",
          "ssm:GetManifest",
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:ListAssociations",
          "ssm:ListInstanceAssociations",
          "ssm:PutInventory",
          "ssm:PutComplianceItems",
          "ssm:PutConfigurePackageResult",
          "ssm:UpdateAssociationStatus",
          "ssm:UpdateInstanceAssociationStatus",
          "ssm:UpdateInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssmmessages:CreateControlChannel",
          "ssmmessages:CreateDataChannel",
          "ssmmessages:OpenControlChannel",
          "ssmmessages:OpenDataChannel"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2messages:AcknowledgeMessage",
          "ec2messages:DeleteMessage",
          "ec2messages:FailMessage",
          "ec2messages:GetEndpoint",
          "ec2messages:GetMessages",
          "ec2messages:SendReply"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSSMDirectoryServiceAccess": {
    "policy": {
      "PolicyName": "AmazonSSMDirectoryServiceAccess",
      "PolicyId": "ANPAJ7OJQH3CZU674ERII",
      "Arn": "arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows SSM Agent to access Directory Service on behalf of the customer for domain-join the managed instance.",
      "CreateDate": "2019-03-15T17:44:38.000Z",
      "UpdateDate": "2019-03-15T17:44:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ds:CreateComputer",
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCognitoIdpEmailServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonCognitoIdpEmailServiceRolePolicy",
      "PolicyId": "ANPAIX7PW362PLAQFKBHM",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonCognitoIdpEmailServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Cognito User Pools service to use your SES identities for email sending",
      "CreateDate": "2019-03-21T21:32:25.000Z",
      "UpdateDate": "2019-03-21T21:32:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ses:SendEmail",
          "ses:SendRawEmail"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "ses:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIQFullAccess": {
    "policy": {
      "PolicyName": "AWSIQFullAccess",
      "PolicyId": "ANPAZKAPJZG4P4TAHETXT",
      "Arn": "arn:aws:iam::aws:policy/AWSIQFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS IQ",
      "CreateDate": "2019-04-04T23:13:42.000Z",
      "UpdateDate": "2019-09-25T20:22:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "iq:*",
          "iq-permission:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGlobalAcceleratorSLRPolicy": {
    "policy": {
      "PolicyName": "AWSGlobalAcceleratorSLRPolicy",
      "PolicyId": "ANPAZKAPJZG4EJ5ZEQR2C",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSGlobalAcceleratorSLRPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to AWS Global Accelerator to manage EC2 Elastic Network Interfaces and Security Groups. ",
      "CreateDate": "2019-04-05T19:39:13.000Z",
      "UpdateDate": "2023-09-12T16:45:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EC2Action1",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSubnets",
          "ec2:DescribeRegions",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeAddresses"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2Action2",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSecurityGroup",
          "ec2:AssignIpv6Addresses",
          "ec2:UnassignIpv6Addresses"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2Action3",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ElbAction1",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeTargetGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2Action4",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      }
    ]
  },
  "AmazonWorkMailEventsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonWorkMailEventsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JG5LNO3U7",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonWorkMailEventsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by Amazon WorkMail Events",
      "CreateDate": "2019-04-16T16:52:43.000Z",
      "UpdateDate": "2019-04-16T16:52:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAppMeshFullAccess": {
    "policy": {
      "PolicyName": "AWSAppMeshFullAccess",
      "PolicyId": "ANPAZKAPJZG4ILVZ5BWFU",
      "Arn": "arn:aws:iam::aws:policy/AWSAppMeshFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the AWS App Mesh APIs and Management Console.",
      "CreateDate": "2019-04-16T17:50:40.000Z",
      "UpdateDate": "2021-01-07T19:54:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appmesh:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/appmesh.amazonaws.com/AWSServiceRoleForAppMesh"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStack*",
          "cloudformation:UpdateStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm:ListCertificates",
          "acm:DescribeCertificate",
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:ListCertificateAuthorities"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicediscovery:ListNamespaces",
          "servicediscovery:ListServices",
          "servicediscovery:ListInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAppMeshReadOnly": {
    "policy": {
      "PolicyName": "AWSAppMeshReadOnly",
      "PolicyId": "ANPAZKAPJZG4HOPFCIWXP",
      "Arn": "arn:aws:iam::aws:policy/AWSAppMeshReadOnly",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to the AWS App Mesh APIs and Management Console.",
      "CreateDate": "2019-04-16T17:51:11.000Z",
      "UpdateDate": "2021-01-07T19:53:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appmesh:Describe*",
          "appmesh:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStack*"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm:ListCertificates",
          "acm:DescribeCertificate",
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:ListCertificateAuthorities"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicediscovery:ListNamespaces",
          "servicediscovery:ListServices",
          "servicediscovery:ListInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonManagedBlockchainConsoleFullAccess": {
    "policy": {
      "PolicyName": "AmazonManagedBlockchainConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4ONVQBFILL",
      "Arn": "arn:aws:iam::aws:policy/AmazonManagedBlockchainConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Managed Blockchain via the AWS Management Console",
      "CreateDate": "2019-04-29T21:23:25.000Z",
      "UpdateDate": "2019-04-29T21:23:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "managedblockchain:*",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:CreateVpcEndpoint",
          "kms:ListAliases",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonManagedBlockchainFullAccess": {
    "policy": {
      "PolicyName": "AmazonManagedBlockchainFullAccess",
      "PolicyId": "ANPAZKAPJZG4CGBOJKRYD",
      "Arn": "arn:aws:iam::aws:policy/AmazonManagedBlockchainFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Managed Blockchain.",
      "CreateDate": "2019-04-29T21:39:29.000Z",
      "UpdateDate": "2019-04-29T21:39:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "managedblockchain:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonManagedBlockchainReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonManagedBlockchainReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4OIIAURVWV",
      "Arn": "arn:aws:iam::aws:policy/AmazonManagedBlockchainReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon Managed Blockchain.",
      "CreateDate": "2019-04-30T18:17:31.000Z",
      "UpdateDate": "2019-04-30T18:17:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "managedblockchain:Get*",
          "managedblockchain:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDenyAll": {
    "policy": {
      "PolicyName": "AWSDenyAll",
      "PolicyId": "ANPAZKAPJZG4P43IUQ5E5",
      "Arn": "arn:aws:iam::aws:policy/AWSDenyAll",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Deny all access.",
      "CreateDate": "2019-05-01T22:36:14.000Z",
      "UpdateDate": "2023-12-18T16:42:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DenyAll",
        "Effect": "Deny",
        "Action": [
          "*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSControlTowerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSControlTowerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4MW35THVLF",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSControlTowerServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS Resources managed or used by AWS Control Tower ",
      "CreateDate": "2019-05-03T18:19:11.000Z",
      "UpdateDate": "2023-04-12T19:15:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:CreateStackInstances",
          "cloudformation:CreateStackSet",
          "cloudformation:DeleteStack",
          "cloudformation:DeleteStackInstances",
          "cloudformation:DeleteStackSet",
          "cloudformation:DescribeStackInstance",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeStackSet",
          "cloudformation:DescribeStackSetOperation",
          "cloudformation:ListStackInstances",
          "cloudformation:UpdateStack",
          "cloudformation:UpdateStackInstances",
          "cloudformation:UpdateStackSet"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:type/resource/AWS-IAM-Role"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:CreateStackInstances",
          "cloudformation:CreateStackSet",
          "cloudformation:DeleteStack",
          "cloudformation:DeleteStackInstances",
          "cloudformation:DeleteStackSet",
          "cloudformation:DescribeStackInstance",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeStackSet",
          "cloudformation:DescribeStackSetOperation",
          "cloudformation:GetTemplate",
          "cloudformation:ListStackInstances",
          "cloudformation:UpdateStack",
          "cloudformation:UpdateStackInstances",
          "cloudformation:UpdateStackSet"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/AWSControlTower*/*",
          "arn:aws:cloudformation:*:*:stack/StackSet-AWSControlTower*/*",
          "arn:aws:cloudformation:*:*:stackset/AWSControlTower*:*",
          "arn:aws:cloudformation:*:*:stackset-target/AWSControlTower*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudtrail:CreateTrail",
          "cloudtrail:DeleteTrail",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:StartLogging",
          "cloudtrail:StopLogging",
          "cloudtrail:UpdateTrail",
          "cloudtrail:PutEventSelectors",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:aws-controltower/CloudTrailLogs:*",
          "arn:aws:cloudtrail:*:*:trail/aws-controltower*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-controltower*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sts:AssumeRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSControlTowerExecution",
          "arn:aws:iam::*:role/AWSControlTowerBlueprintAccess"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudtrail:DescribeTrails",
          "ec2:DescribeAvailabilityZones",
          "iam:ListRoles",
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups",
          "organizations:CreateAccount",
          "organizations:DescribeAccount",
          "organizations:DescribeCreateAccountStatus",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribePolicy",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListChildren",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListParents",
          "organizations:ListPoliciesForTarget",
          "organizations:ListTargetsForPolicy",
          "organizations:ListRoots",
          "organizations:MoveAccount",
          "servicecatalog:AssociatePrincipalWithPortfolio"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:GetUser",
          "iam:ListAttachedRolePolicies",
          "iam:GetRolePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSControlTowerStackSetRole",
          "arn:aws:iam::*:role/service-role/AWSControlTowerCloudTrailRole",
          "arn:aws:iam::*:role/service-role/AWSControlTowerConfigAggregatorRoleForOrganizations"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DeleteConfigurationAggregator",
          "config:PutConfigurationAggregator",
          "config:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess",
          "organizations:DisableAWSServiceAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "account:EnableRegion",
          "account:ListRegions",
          "account:GetRegionOptStatus"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53ResolverFullAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53ResolverFullAccess",
      "PolicyId": "ANPAZKAPJZG4MZN2MQCY3",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53ResolverFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Full access policy for Route 53 Resolver",
      "CreateDate": "2019-05-30T18:10:50.000Z",
      "UpdateDate": "2020-07-17T19:03:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53resolver:*",
          "ec2:DescribeSubnets",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DescribeNetworkInterfaces",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcs",
          "ec2:DescribeAvailabilityZones"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53ResolverReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53ResolverReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4CARVKYCWY",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53ResolverReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Read only policy for Route 53 Resolver",
      "CreateDate": "2019-05-30T18:11:31.000Z",
      "UpdateDate": "2019-09-27T16:37:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53resolver:Get*",
          "route53resolver:List*",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTSiteWiseConsoleFullAccess": {
    "policy": {
      "PolicyName": "AWSIoTSiteWiseConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4K7KP5VA7F",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTSiteWiseConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to manage AWS IoT SiteWise using the AWS Management Console. Note this policy also grants access to create and list data stores used with AWS IoT SiteWise (e.g. AWS IoT Analytics), access to list and view AWS IoT Greengrass resources, list and modify AWS Secrets Manager secrets, retrieve AWS IoT thing shadows, list resources with specific tags, and create and use a service-linked role for AWS IoT SiteWise.",
      "CreateDate": "2019-05-31T21:37:49.000Z",
      "UpdateDate": "2019-05-31T21:37:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "iotsitewise:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iotanalytics:List*",
          "iotanalytics:Describe*",
          "iotanalytics:Create*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iot:DescribeEndpoint",
          "iot:GetThingShadow"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "greengrass:GetGroup",
          "greengrass:GetGroupVersion",
          "greengrass:GetCoreDefinitionVersion",
          "greengrass:ListGroups"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "secretsmanager:ListSecrets",
          "secretsmanager:CreateSecret"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "secretsmanager:UpdateSecret"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:greengrass-*"
        ]
      },
      {
        "Action": [
          "tag:GetResources"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*"
        ]
      }
    ]
  },
  "AWSAppMeshServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSAppMeshServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4B5IHMMEND",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSAppMeshServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by AWS AppMesh",
      "CreateDate": "2019-06-03T18:30:51.000Z",
      "UpdateDate": "2023-10-10T16:46:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudMapServiceDiscovery",
        "Effect": "Allow",
        "Action": [
          "servicediscovery:DiscoverInstances",
          "servicediscovery:DiscoverInstancesRevision"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ACMCertificateVerification",
        "Effect": "Allow",
        "Action": [
          "acm:DescribeCertificate"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSResourceAccessManagerFullAccess": {
    "policy": {
      "PolicyName": "AWSResourceAccessManagerFullAccess",
      "PolicyId": "ANPAZKAPJZG4FYRGF63DP",
      "Arn": "arn:aws:iam::aws:policy/AWSResourceAccessManagerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Resource Access Manager",
      "CreateDate": "2019-06-04T17:28:22.000Z",
      "UpdateDate": "2019-06-04T17:28:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ram:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "MigrationHubServiceRolePolicy": {
    "policy": {
      "PolicyName": "MigrationHubServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NWLJ3LLW3",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/MigrationHubServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Migration Hub to call Application Discovery Service on your behalf",
      "CreateDate": "2019-06-12T17:22:16.000Z",
      "UpdateDate": "2020-08-06T18:08:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "discovery:ListConfigurations",
          "discovery:DescribeConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dms:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:dms:*:*:endpoint:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstanceAttribute"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "MigrationHubDMSAccessServiceRolePolicy": {
    "policy": {
      "PolicyName": "MigrationHubDMSAccessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IV7DIZ555",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/MigrationHubDMSAccessServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for Database Migration Service to assume role in customer's account to call Migration Hub",
      "CreateDate": "2019-06-12T17:50:39.000Z",
      "UpdateDate": "2019-10-07T17:57:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgh:CreateProgressUpdateStream"
        ],
        "Resource": [
          "arn:aws:mgh:*:*:progressUpdateStream/DMS"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgh:DescribeMigrationTask",
          "mgh:AssociateDiscoveredResource",
          "mgh:ListDiscoveredResources",
          "mgh:ImportMigrationTask",
          "mgh:ListCreatedArtifacts",
          "mgh:DisassociateDiscoveredResource",
          "mgh:AssociateCreatedArtifact",
          "mgh:NotifyMigrationTaskState",
          "mgh:DisassociateCreatedArtifact",
          "mgh:PutResourceAttributes"
        ],
        "Resource": [
          "arn:aws:mgh:*:*:progressUpdateStream/DMS/migrationTask/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgh:ListMigrationTasks",
          "mgh:NotifyApplicationState",
          "mgh:DescribeApplicationState",
          "mgh:GetHomeRegion"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "MigrationHubSMSAccessServiceRolePolicy": {
    "policy": {
      "PolicyName": "MigrationHubSMSAccessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JCW2B2IGB",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/MigrationHubSMSAccessServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for Server Migration Service to assume role in customer's account to call Migration Hub",
      "CreateDate": "2019-06-12T18:30:28.000Z",
      "UpdateDate": "2019-10-07T18:02:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgh:CreateProgressUpdateStream"
        ],
        "Resource": [
          "arn:aws:mgh:*:*:progressUpdateStream/SMS"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgh:DescribeMigrationTask",
          "mgh:AssociateDiscoveredResource",
          "mgh:ListDiscoveredResources",
          "mgh:ImportMigrationTask",
          "mgh:ListCreatedArtifacts",
          "mgh:DisassociateDiscoveredResource",
          "mgh:AssociateCreatedArtifact",
          "mgh:NotifyMigrationTaskState",
          "mgh:DisassociateCreatedArtifact",
          "mgh:PutResourceAttributes"
        ],
        "Resource": [
          "arn:aws:mgh:*:*:progressUpdateStream/SMS/migrationTask/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgh:ListMigrationTasks",
          "mgh:NotifyApplicationState",
          "mgh:DescribeApplicationState",
          "mgh:GetHomeRegion"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSConfigMultiAccountSetupPolicy": {
    "policy": {
      "PolicyName": "AWSConfigMultiAccountSetupPolicy",
      "PolicyId": "ANPAZKAPJZG4L5NAGNGTD",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSConfigMultiAccountSetupPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Config to call AWS services and deploy config resources across organization",
      "CreateDate": "2019-06-17T18:03:16.000Z",
      "UpdateDate": "2023-02-24T01:39:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "config:PutConfigRule",
          "config:DeleteConfigRule"
        ],
        "Resource": [
          "arn:aws:config:*:*:config-rule/aws-service-rule/config-multiaccountsetup.amazonaws.com/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DescribeConfigurationRecorders"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListAccounts",
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:DescribeAccount"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:PutConformancePack",
          "config:DeleteConformancePack"
        ],
        "Resource": [
          "arn:aws:config:*:*:conformance-pack/aws-service-conformance-pack/config-multiaccountsetup.amazonaws.com/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DescribeConformancePackStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
        ]
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AWSOpsWorksRegisterCLI_OnPremises": {
    "policy": {
      "PolicyName": "AWSOpsWorksRegisterCLI_OnPremises",
      "PolicyId": "ANPAZKAPJZG4EZJ5DYEPG",
      "Arn": "arn:aws:iam::aws:policy/AWSOpsWorksRegisterCLI_OnPremises",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable registration of On-Premises instances via the OpsWorks CLI",
      "CreateDate": "2019-06-18T15:33:16.000Z",
      "UpdateDate": "2019-06-18T15:33:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "opsworks:AssignInstance",
          "opsworks:CreateLayer",
          "opsworks:DeregisterInstance",
          "opsworks:DescribeInstances",
          "opsworks:DescribeStackProvisioningParameters",
          "opsworks:DescribeStacks",
          "opsworks:UnassignInstance"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateGroup",
          "iam:AddUserToGroup"
        ],
        "Resource": [
          "arn:aws:iam::*:group/AWS/OpsWorks/OpsWorks-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateUser",
          "iam:CreateAccessKey"
        ],
        "Resource": [
          "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:AttachUserPolicy"
        ],
        "Resource": [
          "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
        ]
      }
    ]
  },
  "AWSOpsWorksRegisterCLI_EC2": {
    "policy": {
      "PolicyName": "AWSOpsWorksRegisterCLI_EC2",
      "PolicyId": "ANPAZKAPJZG4NCE3CMCRC",
      "Arn": "arn:aws:iam::aws:policy/AWSOpsWorksRegisterCLI_EC2",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable registration of EC2 instances via the OpsWorks CLI",
      "CreateDate": "2019-06-18T15:56:17.000Z",
      "UpdateDate": "2019-06-18T15:56:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "opsworks:AssignInstance",
          "opsworks:CreateLayer",
          "opsworks:DeregisterInstance",
          "opsworks:DescribeInstances",
          "opsworks:DescribeStackProvisioningParameters",
          "opsworks:DescribeStacks",
          "opsworks:UnassignInstance"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSConfigRemediationServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSConfigRemediationServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BC7ZOM6NP",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSConfigRemediationServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Config to remediate noncompliant resources on your behalf.",
      "CreateDate": "2019-06-18T21:21:35.000Z",
      "UpdateDate": "2019-06-18T21:21:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ssm:GetDocument",
          "ssm:DescribeDocument",
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AWSAppMeshPreviewServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSAppMeshPreviewServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FAQWKJYPJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSAppMeshPreviewServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by AWS App Mesh",
      "CreateDate": "2019-06-19T19:07:00.000Z",
      "UpdateDate": "2019-08-21T21:06:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudMapServiceDiscovery",
        "Effect": "Allow",
        "Action": [
          "servicediscovery:DiscoverInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ACMCertificateVerification",
        "Effect": "Allow",
        "Action": [
          "acm:DescribeCertificate"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCertificateManagerPrivateCAPrivilegedUser": {
    "policy": {
      "PolicyName": "AWSCertificateManagerPrivateCAPrivilegedUser",
      "PolicyId": "ANPAZKAPJZG4EQ6CWU5X5",
      "Arn": "arn:aws:iam::aws:policy/AWSCertificateManagerPrivateCAPrivilegedUser",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides privileged certificate user access to AWS Certificate Manager Private Certificate Authority",
      "CreateDate": "2019-06-20T17:43:13.000Z",
      "UpdateDate": "2019-06-20T17:43:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:IssueCertificate"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "acm-pca:IssueCertificate"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:RevokeCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:ListPermissions"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:ListCertificateAuthorities"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "LakeFormationDataAccessServiceRolePolicy": {
    "policy": {
      "PolicyName": "LakeFormationDataAccessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4N342E3KHW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/LakeFormationDataAccessServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to grant temporary data access to Lake Formation resources",
      "CreateDate": "2019-06-20T20:46:19.000Z",
      "UpdateDate": "2024-02-06T18:37:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "LakeFormationDataAccessServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      }
    ]
  },
  "IAMAccessAdvisorReadOnly": {
    "policy": {
      "PolicyName": "IAMAccessAdvisorReadOnly",
      "PolicyId": "ANPAZKAPJZG4FNDX5PG6Z",
      "Arn": "arn:aws:iam::aws:policy/IAMAccessAdvisorReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants access to read all access information provided by IAM access advisor such as service last accessed information.",
      "CreateDate": "2019-06-21T19:33:45.000Z",
      "UpdateDate": "2019-06-21T19:33:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles",
          "iam:ListUsers",
          "iam:ListGroups",
          "iam:ListPolicies",
          "iam:ListPoliciesGrantingServiceAccess",
          "iam:GenerateServiceLastAccessedDetails",
          "iam:GenerateOrganizationsAccessReport",
          "iam:GenerateCredentialReport",
          "iam:GetRole",
          "iam:GetPolicy",
          "iam:GetServiceLastAccessedDetails",
          "iam:GetServiceLastAccessedDetailsWithEntities",
          "iam:GetOrganizationsAccessReport",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribePolicy",
          "organizations:ListChildren",
          "organizations:ListParents",
          "organizations:ListPoliciesForTarget",
          "organizations:ListRoots",
          "organizations:ListPolicies",
          "organizations:ListTargetsForPolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ServiceQuotasServiceRolePolicy": {
    "policy": {
      "PolicyName": "ServiceQuotasServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FCG7EVJIR",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/ServiceQuotasServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Service Quotas to create support cases on your behalf",
      "CreateDate": "2019-05-22T20:44:17.000Z",
      "UpdateDate": "2019-06-24T14:52:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "support:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ServiceQuotasReadOnlyAccess": {
    "policy": {
      "PolicyName": "ServiceQuotasReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4ITU2HGGUJ",
      "Arn": "arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Service Quotas",
      "CreateDate": "2019-06-24T15:31:06.000Z",
      "UpdateDate": "2020-12-21T18:11:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:DescribeAccountLimits",
          "cloudformation:DescribeAccountLimits",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "dynamodb:DescribeLimits",
          "elasticloadbalancing:DescribeAccountLimits",
          "iam:GetAccountSummary",
          "kinesis:DescribeLimits",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization",
          "rds:DescribeAccountAttributes",
          "route53:GetAccountLimit",
          "tag:GetTagKeys",
          "tag:GetTagValues",
          "servicequotas:GetAssociationForServiceQuotaTemplate",
          "servicequotas:GetAWSDefaultServiceQuota",
          "servicequotas:GetRequestedServiceQuotaChange",
          "servicequotas:GetServiceQuota",
          "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
          "servicequotas:ListAWSDefaultServiceQuotas",
          "servicequotas:ListRequestedServiceQuotaChangeHistory",
          "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
          "servicequotas:ListServices",
          "servicequotas:ListServiceQuotas",
          "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
          "servicequotas:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ServiceQuotasFullAccess": {
    "policy": {
      "PolicyName": "ServiceQuotasFullAccess",
      "PolicyId": "ANPAZKAPJZG4CGHQWENW3",
      "Arn": "arn:aws:iam::aws:policy/ServiceQuotasFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Service Quotas",
      "CreateDate": "2019-06-24T15:44:35.000Z",
      "UpdateDate": "2021-02-04T21:29:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:DescribeAccountLimits",
          "cloudformation:DescribeAccountLimits",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:PutMetricAlarm",
          "dynamodb:DescribeLimits",
          "elasticloadbalancing:DescribeAccountLimits",
          "iam:GetAccountSummary",
          "kinesis:DescribeLimits",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization",
          "rds:DescribeAccountAttributes",
          "route53:GetAccountLimit",
          "tag:GetTagKeys",
          "tag:GetTagValues",
          "servicequotas:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceProcurementSystemAdminFullAccess": {
    "policy": {
      "PolicyName": "AWSMarketplaceProcurementSystemAdminFullAccess",
      "PolicyId": "ANPAZKAPJZG4FIYNR3TC4",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceProcurementSystemAdminFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all administrative actions for an AWS Marketplace eProcurement integration.",
      "CreateDate": "2019-06-25T13:07:47.000Z",
      "UpdateDate": "2019-06-25T13:07:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:PutProcurementSystemConfiguration",
          "aws-marketplace:DescribeProcurementSystemConfiguration",
          "organizations:Describe*",
          "organizations:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkSpacesServiceAccess": {
    "policy": {
      "PolicyName": "AmazonWorkSpacesServiceAccess",
      "PolicyId": "ANPAZKAPJZG4KRXBM753F",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkSpacesServiceAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides customer account access to AWS WorkSpaces service for launching a Workspace.",
      "CreateDate": "2019-06-27T19:19:09.000Z",
      "UpdateDate": "2020-03-18T23:32:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaces"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "EC2InstanceConnect": {
    "policy": {
      "PolicyName": "EC2InstanceConnect",
      "PolicyId": "ANPAZKAPJZG4PBRCMEYY5",
      "Arn": "arn:aws:iam::aws:policy/EC2InstanceConnect",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows customers to call EC2 Instance Connect to publish ephemeral keys to their EC2 instances and connect via ssh or the EC2 Instance Connect CLI.",
      "CreateDate": "2019-06-27T18:53:34.000Z",
      "UpdateDate": "2019-06-27T18:53:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EC2InstanceConnect",
        "Action": [
          "ec2:DescribeInstances",
          "ec2-instance-connect:SendSSHPublicKey"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkSpacesSelfServiceAccess": {
    "policy": {
      "PolicyName": "AmazonWorkSpacesSelfServiceAccess",
      "PolicyId": "ANPAZKAPJZG4MLHUSTJAF",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkSpacesSelfServiceAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Amazon WorkSpaces backend service to perform Workspace Self Service actions",
      "CreateDate": "2019-06-27T19:22:52.000Z",
      "UpdateDate": "2019-06-27T19:22:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "workspaces:RebootWorkspaces",
          "workspaces:RebuildWorkspaces",
          "workspaces:ModifyWorkspaceProperties"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceSellerFullAccess": {
    "policy": {
      "PolicyName": "AWSMarketplaceSellerFullAccess",
      "PolicyId": "ANPAZKAPJZG4JF7OFUANW",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceSellerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all seller operations on the AWS Marketplace and other AWS services such as AMI management.",
      "CreateDate": "2019-07-02T20:40:09.000Z",
      "UpdateDate": "2024-03-15T16:09:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "MarketplaceManagement",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace-management:uploadFiles",
          "aws-marketplace-management:viewMarketing",
          "aws-marketplace-management:viewReports",
          "aws-marketplace-management:viewSupport",
          "aws-marketplace-management:viewSettings",
          "aws-marketplace:ListChangeSets",
          "aws-marketplace:DescribeChangeSet",
          "aws-marketplace:StartChangeSet",
          "aws-marketplace:CancelChangeSet",
          "aws-marketplace:ListEntities",
          "aws-marketplace:DescribeEntity",
          "aws-marketplace:ListTasks",
          "aws-marketplace:DescribeTask",
          "aws-marketplace:UpdateTask",
          "aws-marketplace:CompleteTask",
          "aws-marketplace:GetSellerDashboard",
          "ec2:DescribeImages",
          "ec2:DescribeSnapshots",
          "ec2:ModifyImageAttribute",
          "ec2:ModifySnapshotAttribute"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AgreementAccess",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:SearchAgreements",
          "aws-marketplace:DescribeAgreement",
          "aws-marketplace:GetAgreementTerms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMGetRole",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "AssetScanning",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "VendorInsights",
        "Effect": "Allow",
        "Action": [
          "vendor-insights:GetDataSource",
          "vendor-insights:ListDataSources",
          "vendor-insights:ListSecurityProfiles",
          "vendor-insights:GetSecurityProfile",
          "vendor-insights:GetSecurityProfileSnapshot",
          "vendor-insights:ListSecurityProfileSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TagManagement",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:TagResource",
          "aws-marketplace:UntagResource",
          "aws-marketplace:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        ]
      },
      {
        "Sid": "SellerSettings",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace-management:GetSellerVerificationDetails",
          "aws-marketplace-management:PutSellerVerificationDetails",
          "aws-marketplace-management:GetBankAccountVerificationDetails",
          "aws-marketplace-management:PutBankAccountVerificationDetails",
          "aws-marketplace-management:GetSecondaryUserVerificationDetails",
          "aws-marketplace-management:PutSecondaryUserVerificationDetails",
          "aws-marketplace-management:GetAdditionalSellerNotificationRecipients",
          "aws-marketplace-management:PutAdditionalSellerNotificationRecipients",
          "payments:GetPaymentInstrument",
          "payments:CreatePaymentInstrument",
          "tax:GetTaxInterview",
          "tax:PutTaxInterview",
          "tax:GetTaxInfoReportingDocument"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Support",
        "Effect": "Allow",
        "Action": [
          "support:CreateCase"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ResourcePolicyManagement",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:GetResourcePolicy",
          "aws-marketplace:PutResourcePolicy",
          "aws-marketplace:DeleteResourcePolicy"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        ]
      },
      {
        "Sid": "CreateServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceSellerProductsFullAccess": {
    "policy": {
      "PolicyName": "AWSMarketplaceSellerProductsFullAccess",
      "PolicyId": "ANPAZKAPJZG4DS2YFEG4N",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceSellerProductsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides sellers full access to AWS Marketplace Management Products page and other AWS services such as AMI management.",
      "CreateDate": "2019-07-02T21:06:25.000Z",
      "UpdateDate": "2023-07-18T22:19:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListChangeSets",
          "aws-marketplace:DescribeChangeSet",
          "aws-marketplace:StartChangeSet",
          "aws-marketplace:CancelChangeSet",
          "aws-marketplace:ListEntities",
          "aws-marketplace:DescribeEntity",
          "aws-marketplace:ListTasks",
          "aws-marketplace:DescribeTask",
          "aws-marketplace:UpdateTask",
          "aws-marketplace:CompleteTask",
          "ec2:DescribeImages",
          "ec2:DescribeSnapshots",
          "ec2:ModifyImageAttribute",
          "ec2:ModifySnapshotAttribute"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "vendor-insights:GetDataSource",
          "vendor-insights:ListDataSources",
          "vendor-insights:ListSecurityProfiles",
          "vendor-insights:GetSecurityProfile",
          "vendor-insights:GetSecurityProfileSnapshot",
          "vendor-insights:ListSecurityProfileSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:TagResource",
          "aws-marketplace:UntagResource",
          "aws-marketplace:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:GetResourcePolicy",
          "aws-marketplace:PutResourcePolicy",
          "aws-marketplace:DeleteResourcePolicy"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        ]
      }
    ]
  },
  "AWSMarketplaceSellerProductsReadOnly": {
    "policy": {
      "PolicyName": "AWSMarketplaceSellerProductsReadOnly",
      "PolicyId": "ANPAZKAPJZG4K5Y2Q5F7D",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceSellerProductsReadOnly",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide sellers read-only access to AWS Marketplace Management Products page.",
      "CreateDate": "2019-07-02T21:40:47.000Z",
      "UpdateDate": "2022-11-19T00:08:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListChangeSets",
          "aws-marketplace:DescribeChangeSet",
          "aws-marketplace:ListEntities",
          "aws-marketplace:DescribeEntity",
          "aws-marketplace:ListTasks",
          "aws-marketplace:DescribeTask",
          "ec2:DescribeImages",
          "ec2:DescribeSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
        ]
      }
    ]
  },
  "AWSAppMeshEnvoyAccess": {
    "policy": {
      "PolicyName": "AWSAppMeshEnvoyAccess",
      "PolicyId": "ANPAZKAPJZG4PMG6ZGSZZ",
      "Arn": "arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "App Mesh Envoy policy for accessing Virtual Node configuration.",
      "CreateDate": "2019-07-03T21:29:37.000Z",
      "UpdateDate": "2019-07-03T21:29:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appmesh:StreamAggregatedResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEventBridgeReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonEventBridgeReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4BDMP3LZME",
      "Arn": "arn:aws:iam::aws:policy/AmazonEventBridgeReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon EventBridge.",
      "CreateDate": "2019-07-11T13:59:07.000Z",
      "UpdateDate": "2022-12-01T17:02:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:DescribeEventBus",
          "events:DescribeEventSource",
          "events:ListEventBuses",
          "events:ListEventSources",
          "events:ListRuleNamesByTarget",
          "events:ListRules",
          "events:ListTargetsByRule",
          "events:TestEventPattern",
          "events:DescribeArchive",
          "events:ListArchives",
          "events:DescribeReplay",
          "events:ListReplays",
          "events:DescribeConnection",
          "events:ListConnections",
          "events:DescribeApiDestination",
          "events:ListApiDestinations",
          "events:DescribeEndpoint",
          "events:ListEndpoints",
          "schemas:DescribeCodeBinding",
          "schemas:DescribeDiscoverer",
          "schemas:DescribeRegistry",
          "schemas:DescribeSchema",
          "schemas:ExportSchema",
          "schemas:GetCodeBindingSource",
          "schemas:GetDiscoveredSchema",
          "schemas:GetResourcePolicy",
          "schemas:ListDiscoverers",
          "schemas:ListRegistries",
          "schemas:ListSchemas",
          "schemas:ListSchemaVersions",
          "schemas:ListTagsForResource",
          "schemas:SearchSchemas",
          "scheduler:GetSchedule",
          "scheduler:GetScheduleGroup",
          "scheduler:ListSchedules",
          "scheduler:ListScheduleGroups",
          "scheduler:ListTagsForResource",
          "pipes:DescribePipe",
          "pipes:ListPipes",
          "pipes:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEventBridgeFullAccess": {
    "policy": {
      "PolicyName": "AmazonEventBridgeFullAccess",
      "PolicyId": "ANPAZKAPJZG4BUM4GCASI",
      "Arn": "arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon EventBridge.",
      "CreateDate": "2019-07-11T14:08:55.000Z",
      "UpdateDate": "2022-12-01T17:00:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EventBridgeActions",
        "Effect": "Allow",
        "Action": [
          "events:*",
          "schemas:*",
          "scheduler:*",
          "pipes:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMCreateServiceLinkedRoleForApiDestinations",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/AmazonEventBridgeApiDestinationsServiceRolePolicy"
        ]
      },
      {
        "Sid": "IAMCreateServiceLinkedRoleForAmazonEventBridgeSchemas",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/schemas.amazonaws.com/AWSServiceRoleForSchemas"
        ]
      },
      {
        "Sid": "SecretsManagerAccessForApiDestinations",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:PutSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:events!*"
        ]
      },
      {
        "Sid": "IAMPassRoleAccessForEventBridge",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "IAMPassRoleAccessForScheduler",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "IAMPassRoleAccessForPipes",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "CloudWatch-CrossAccountAccess": {
    "policy": {
      "PolicyName": "CloudWatch-CrossAccountAccess",
      "PolicyId": "ANPAZKAPJZG4OV6AFDA5J",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudWatch-CrossAccountAccess",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows CloudWatch to assume CloudWatch-CrossAccountSharing roles in remote accounts on behalf of the current account in order to display data cross-account, cross-region",
      "CreateDate": "2019-07-23T09:59:27.000Z",
      "UpdateDate": "2019-07-23T09:59:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "sts:AssumeRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/CloudWatch-CrossAccountSharing*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "CloudWatchAutomaticDashboardsAccess": {
    "policy": {
      "PolicyName": "CloudWatchAutomaticDashboardsAccess",
      "PolicyId": "ANPAZKAPJZG4JFCXGSE2Q",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchAutomaticDashboardsAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to the non-CloudWatch APIs used to display CloudWatch Automatic Dashboards, including the contents of objects such as Lambda functions",
      "CreateDate": "2019-07-23T10:01:08.000Z",
      "UpdateDate": "2021-04-20T13:05:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "autoscaling:DescribeAutoScalingGroups",
          "cloudfront:GetDistribution",
          "cloudfront:ListDistributions",
          "dynamodb:DescribeTable",
          "dynamodb:ListTables",
          "ec2:DescribeInstances",
          "ec2:DescribeVolumes",
          "ecs:DescribeClusters",
          "ecs:DescribeContainerInstances",
          "ecs:ListClusters",
          "ecs:ListContainerInstances",
          "ecs:ListServices",
          "elasticache:DescribeCacheClusters",
          "elasticbeanstalk:DescribeEnvironments",
          "elasticfilesystem:DescribeFileSystems",
          "elasticloadbalancing:DescribeLoadBalancers",
          "kinesis:DescribeStream",
          "kinesis:ListStreams",
          "lambda:GetFunction",
          "lambda:ListFunctions",
          "rds:DescribeDBClusters",
          "rds:DescribeDBInstances",
          "resource-groups:ListGroupResources",
          "resource-groups:ListGroups",
          "route53:GetHealthCheck",
          "route53:ListHealthChecks",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "sns:ListTopics",
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "sqs:ListQueues",
          "synthetics:DescribeCanariesLastRun",
          "tag:GetResources"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "apigateway:GET"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:apigateway:*::/restapis*"
        ]
      }
    ]
  },
  "ConfigConformsServiceRolePolicy": {
    "policy": {
      "PolicyName": "ConfigConformsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BCH3IIJPN",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/ConfigConformsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy needed for AWSConfig to create conformance packs",
      "CreateDate": "2019-07-25T21:38:05.000Z",
      "UpdateDate": "2023-01-12T04:17:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "config:PutConfigRule",
          "config:DeleteConfigRule"
        ],
        "Resource": [
          "arn:aws:config:*:*:config-rule/aws-service-rule/config-conforms.amazonaws.com*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DescribeConfigRules"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DescribeRemediationConfigurations",
          "config:DeleteRemediationConfiguration",
          "config:PutRemediationConfigurations"
        ],
        "Resource": [
          "arn:aws:config:*:*:remediation-configuration/aws-service-remediation-configuration/config-conforms.amazonaws.com*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/remediation.config.amazonaws.com/AWSServiceRoleForConfigRemediation"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/remediation.config.amazonaws.com/AWSServiceRoleForConfigRemediation"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeDocument",
          "ssm:GetDocument"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:GetObject",
          "s3:GetBucketAcl"
        ],
        "Resource": [
          "arn:aws:s3:::awsconfigconforms*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStackResources",
          "cloudformation:DescribeStacks",
          "cloudformation:GetStackPolicy",
          "cloudformation:SetStackPolicy",
          "cloudformation:UpdateStack",
          "cloudformation:UpdateTerminationProtection",
          "cloudformation:ValidateTemplate",
          "cloudformation:ListStackResources"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awsconfigconforms-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloudFormationFullAccess": {
    "policy": {
      "PolicyName": "AWSCloudFormationFullAccess",
      "PolicyId": "ANPAZKAPJZG4CRR3ZS723",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS CloudFormation.",
      "CreateDate": "2019-07-26T21:50:35.000Z",
      "UpdateDate": "2019-07-26T21:50:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ElementalAppliancesSoftwareFullAccess": {
    "policy": {
      "PolicyName": "ElementalAppliancesSoftwareFullAccess",
      "PolicyId": "ANPAZKAPJZG4DHARJPIR5",
      "Arn": "arn:aws:iam::aws:policy/ElementalAppliancesSoftwareFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Full access to view and take action on Elemental Appliances and Software quotes and orders",
      "CreateDate": "2019-07-31T16:28:53.000Z",
      "UpdateDate": "2021-02-05T21:01:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elemental-appliances-software:*",
          "elemental-activations:CompleteAccountRegistration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAppMeshPreviewEnvoyAccess": {
    "policy": {
      "PolicyName": "AWSAppMeshPreviewEnvoyAccess",
      "PolicyId": "ANPAZKAPJZG4NKURE3R2M",
      "Arn": "arn:aws:iam::aws:policy/AWSAppMeshPreviewEnvoyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "App Mesh Preview Envoy policy for accessing Virtual Node configuration.",
      "CreateDate": "2019-08-05T23:32:39.000Z",
      "UpdateDate": "2019-08-05T23:32:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appmesh-preview:StreamAggregatedResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSVPCS2SVpnServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSVPCS2SVpnServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4ENV7ZVNT6",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSVPCS2SVpnServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow Site-to-Site VPN to create and manage resources related to your VPN Connections.",
      "CreateDate": "2019-08-06T14:13:58.000Z",
      "UpdateDate": "2019-08-06T14:13:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "0",
        "Effect": "Allow",
        "Action": [
          "acm:ExportCertificate",
          "acm:DescribeCertificate",
          "acm:ListCertificates",
          "acm-pca:DescribeCertificateAuthority"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRoleForSMS": {
    "policy": {
      "PolicyName": "AWSServiceRoleForSMS",
      "PolicyId": "ANPAZKAPJZG4OSYRD2VJZ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForSMS",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS services and resources necessary to migrate service instances into AWS including EC2, S3 and Cloudformation.",
      "CreateDate": "2019-08-06T18:39:29.000Z",
      "UpdateDate": "2020-10-15T17:28:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateChangeSet",
          "cloudformation:CreateStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DeleteStack",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:DeleteChangeSet",
          "cloudformation:DescribeChangeSet",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStackResources",
          "cloudformation:GetTemplate"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:ValidateTemplate",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:DeleteObject",
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:PutLifecycleConfiguration"
        ],
        "Resource": [
          "arn:aws:s3:::sms-app-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sms:CreateReplicationJob",
          "sms:DeleteReplicationJob",
          "sms:GetReplicationJobs",
          "sms:GetReplicationRuns",
          "sms:GetServers",
          "sms:ImportServerCatalog",
          "sms:StartOnDemandReplicationRun",
          "sms:UpdateReplicationJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*::document/AWS-RunRemoteScript",
          "arn:aws:s3:::sms-app-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:CancelCommand",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CopySnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifySnapshotAttribute",
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CopyImage",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSnapshotAttribute",
          "ec2:DeregisterImage",
          "ec2:ImportImage",
          "ec2:DescribeImportImageTasks",
          "ec2:GetEbsEncryptionByDefault"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DisassociateIamInstanceProfile",
          "ec2:AssociateIamInstanceProfile",
          "ec2:ReplaceIamInstanceProfileAssociation"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyInstanceAttribute",
          "ec2:StopInstances",
          "ec2:StartInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "applicationinsights:Describe*",
          "applicationinsights:List*",
          "cloudformation:ListStackResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "applicationinsights:CreateApplication",
          "applicationinsights:CreateComponent",
          "applicationinsights:UpdateApplication",
          "applicationinsights:DeleteApplication",
          "applicationinsights:UpdateComponentConfiguration",
          "applicationinsights:DeleteComponent"
        ],
        "Resource": [
          "arn:aws:applicationinsights:*:*:application/resource-group/sms-app-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:CreateGroup",
          "resource-groups:GetGroup",
          "resource-groups:UpdateGroup",
          "resource-groups:DeleteGroup"
        ],
        "Resource": [
          "arn:aws:resource-groups:*:*:group/sms-app-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/AWSServiceRoleForApplicationInsights"
        ]
      }
    ]
  },
  "AWSIoTDeviceDefenderEnableIoTLoggingMitigationAction": {
    "policy": {
      "PolicyName": "AWSIoTDeviceDefenderEnableIoTLoggingMitigationAction",
      "PolicyId": "ANPAZKAPJZG4G34KP2NLZ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderEnableIoTLoggingMitigationAction",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access for enabling IoT logging for execution of ENABLE_IOT_LOGGING mitigation action",
      "CreateDate": "2019-08-07T17:04:07.000Z",
      "UpdateDate": "2019-08-07T17:04:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:SetV2LoggingOptions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction": {
    "policy": {
      "PolicyName": "AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction",
      "PolicyId": "ANPAZKAPJZG4GZL2FL6JV",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides messages publish access to SNS topic for execution of PUBLISH_FINDING_TO_SNS mitigation action",
      "CreateDate": "2019-08-07T17:04:37.000Z",
      "UpdateDate": "2019-08-07T17:04:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTDeviceDefenderReplaceDefaultPolicyMitigationAction": {
    "policy": {
      "PolicyName": "AWSIoTDeviceDefenderReplaceDefaultPolicyMitigationAction",
      "PolicyId": "ANPAZKAPJZG4HN4VCIBCR",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderReplaceDefaultPolicyMitigationAction",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides write access to IoT policies for execution of REPLACE_DEFAULT_POLICY_VERSION mitigation action",
      "CreateDate": "2019-08-07T17:04:57.000Z",
      "UpdateDate": "2019-08-07T17:04:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:CreatePolicyVersion"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTDeviceDefenderUpdateCACertMitigationAction": {
    "policy": {
      "PolicyName": "AWSIoTDeviceDefenderUpdateCACertMitigationAction",
      "PolicyId": "ANPAZKAPJZG4KLBGET6KX",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderUpdateCACertMitigationAction",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides write access to IoT CA certificates for execution of  UPDATE_CA_CERTIFICATE mitigation action",
      "CreateDate": "2019-08-07T17:05:49.000Z",
      "UpdateDate": "2019-08-07T17:05:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:UpdateCACertificate"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTDeviceDefenderUpdateDeviceCertMitigationAction": {
    "policy": {
      "PolicyName": "AWSIoTDeviceDefenderUpdateDeviceCertMitigationAction",
      "PolicyId": "ANPAZKAPJZG4KB4AHFGEB",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderUpdateDeviceCertMitigationAction",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides write access to IoT certificates for execution of UPDATE_DEVICE_CERTIFICATE mitigation action",
      "CreateDate": "2019-08-07T17:06:00.000Z",
      "UpdateDate": "2019-08-07T17:06:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:UpdateCertificate"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTDeviceDefenderAddThingsToThingGroupMitigationAction": {
    "policy": {
      "PolicyName": "AWSIoTDeviceDefenderAddThingsToThingGroupMitigationAction",
      "PolicyId": "ANPAZKAPJZG4HEHG3RV6B",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderAddThingsToThingGroupMitigationAction",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides write access to IoT thing groups and read access to IoT Certificates for execution of ADD_THINGS_TO_THING_GROUP mitigation action",
      "CreateDate": "2019-08-07T17:55:37.000Z",
      "UpdateDate": "2019-08-07T17:55:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:ListPrincipalThings",
          "iot:AddThingToThingGroup"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLakeFormationDataAdmin": {
    "policy": {
      "PolicyName": "AWSLakeFormationDataAdmin",
      "PolicyId": "ANPAZKAPJZG4OWCH3ENIA",
      "Arn": "arn:aws:iam::aws:policy/AWSLakeFormationDataAdmin",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants administrative access to AWS Lake Formation and related services, such as AWS Glue, to manage data lakes",
      "CreateDate": "2019-08-08T17:33:44.000Z",
      "UpdateDate": "2024-03-22T18:27:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSLakeFormationDataAdminAllow",
        "Effect": "Allow",
        "Action": [
          "lakeformation:*",
          "cloudtrail:DescribeTrails",
          "cloudtrail:LookupEvents",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:CreateDatabase",
          "glue:UpdateDatabase",
          "glue:DeleteDatabase",
          "glue:GetConnections",
          "glue:SearchTables",
          "glue:GetTable",
          "glue:CreateTable",
          "glue:UpdateTable",
          "glue:DeleteTable",
          "glue:GetTableVersions",
          "glue:GetPartitions",
          "glue:GetTables",
          "glue:ListWorkflows",
          "glue:BatchGetWorkflows",
          "glue:DeleteWorkflow",
          "glue:GetWorkflowRuns",
          "glue:StartWorkflowRun",
          "glue:GetWorkflow",
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets",
          "s3:GetBucketAcl",
          "iam:ListUsers",
          "iam:ListRoles",
          "iam:GetRole",
          "iam:GetRolePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSLakeFormationDataAdminDeny",
        "Effect": "Deny",
        "Action": [
          "lakeformation:PutDataLakeSettings"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIQContractServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSIQContractServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4E26ATDUIP",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSIQContractServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Used by AWS IQ to execute payment requests on behalf of a customer",
      "CreateDate": "2019-08-22T19:28:39.000Z",
      "UpdateDate": "2019-08-22T19:28:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "aws-marketplace:Subscribe"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIQPermissionServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSIQPermissionServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4J77DMGFZ5",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSIQPermissionServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS IQ to manage the role assumed by AWS IQ experts.",
      "CreateDate": "2019-08-22T19:36:29.000Z",
      "UpdateDate": "2019-08-22T19:36:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteRole",
          "iam:ListAttachedRolePolicies"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSIQPermission-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:AttachRolePolicy"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSIQPermission-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DetachRolePolicy"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSIQPermission-*"
        ]
      }
    ]
  },
  "AmazonQLDBReadOnly": {
    "policy": {
      "PolicyName": "AmazonQLDBReadOnly",
      "PolicyId": "ANPAZKAPJZG4IC74JOQJR",
      "Arn": "arn:aws:iam::aws:policy/AmazonQLDBReadOnly",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon QLDB.",
      "CreateDate": "2019-09-05T18:19:24.000Z",
      "UpdateDate": "2021-07-02T02:17:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "qldb:ListLedgers",
          "qldb:DescribeLedger",
          "qldb:ListJournalS3Exports",
          "qldb:ListJournalS3ExportsForLedger",
          "qldb:DescribeJournalS3Export",
          "qldb:DescribeJournalKinesisStream",
          "qldb:ListJournalKinesisStreamsForLedger",
          "qldb:GetBlock",
          "qldb:GetDigest",
          "qldb:GetRevision",
          "qldb:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonQLDBFullAccess": {
    "policy": {
      "PolicyName": "AmazonQLDBFullAccess",
      "PolicyId": "ANPAZKAPJZG4HHBBWGE2J",
      "Arn": "arn:aws:iam::aws:policy/AmazonQLDBFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon QLDB via the service API.",
      "CreateDate": "2019-09-05T18:23:32.000Z",
      "UpdateDate": "2022-11-04T17:01:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "qldb:CreateLedger",
          "qldb:UpdateLedger",
          "qldb:UpdateLedgerPermissionsMode",
          "qldb:DeleteLedger",
          "qldb:ListLedgers",
          "qldb:DescribeLedger",
          "qldb:ExportJournalToS3",
          "qldb:ListJournalS3Exports",
          "qldb:ListJournalS3ExportsForLedger",
          "qldb:DescribeJournalS3Export",
          "qldb:CancelJournalKinesisStream",
          "qldb:DescribeJournalKinesisStream",
          "qldb:ListJournalKinesisStreamsForLedger",
          "qldb:StreamJournalToKinesis",
          "qldb:GetDigest",
          "qldb:GetRevision",
          "qldb:GetBlock",
          "qldb:TagResource",
          "qldb:UntagResource",
          "qldb:ListTagsForResource",
          "qldb:SendCommand",
          "qldb:PartiQLCreateTable",
          "qldb:PartiQLCreateIndex",
          "qldb:PartiQLDropTable",
          "qldb:PartiQLDropIndex",
          "qldb:PartiQLUndropTable",
          "qldb:PartiQLDelete",
          "qldb:PartiQLInsert",
          "qldb:PartiQLUpdate",
          "qldb:PartiQLSelect",
          "qldb:PartiQLHistoryFunction",
          "qldb:PartiQLRedact"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonQLDBConsoleFullAccess": {
    "policy": {
      "PolicyName": "AmazonQLDBConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4H2DEHAFRU",
      "Arn": "arn:aws:iam::aws:policy/AmazonQLDBConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon QLDB via the AWS Management Console.",
      "CreateDate": "2019-09-05T18:24:20.000Z",
      "UpdateDate": "2022-11-04T17:01:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "qldb:CreateLedger",
          "qldb:UpdateLedger",
          "qldb:UpdateLedgerPermissionsMode",
          "qldb:DeleteLedger",
          "qldb:ListLedgers",
          "qldb:DescribeLedger",
          "qldb:ExportJournalToS3",
          "qldb:ListJournalS3Exports",
          "qldb:ListJournalS3ExportsForLedger",
          "qldb:DescribeJournalS3Export",
          "qldb:CancelJournalKinesisStream",
          "qldb:DescribeJournalKinesisStream",
          "qldb:ListJournalKinesisStreamsForLedger",
          "qldb:StreamJournalToKinesis",
          "qldb:GetBlock",
          "qldb:GetDigest",
          "qldb:GetRevision",
          "qldb:TagResource",
          "qldb:UntagResource",
          "qldb:ListTagsForResource",
          "qldb:SendCommand",
          "qldb:ExecuteStatement",
          "qldb:ShowCatalog",
          "qldb:InsertSampleData",
          "qldb:PartiQLCreateTable",
          "qldb:PartiQLCreateIndex",
          "qldb:PartiQLDropTable",
          "qldb:PartiQLDropIndex",
          "qldb:PartiQLUndropTable",
          "qldb:PartiQLDelete",
          "qldb:PartiQLInsert",
          "qldb:PartiQLUpdate",
          "qldb:PartiQLSelect",
          "qldb:PartiQLHistoryFunction",
          "qldb:PartiQLRedact"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dbqms:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:ListStreams",
          "kinesis:DescribeStream"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonChimeVoiceConnectorServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AmazonChimeVoiceConnectorServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GP44ZBY4P",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonChimeVoiceConnectorServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Managed policy for Service Linked Role for Amazon Chime VoiceConnector",
      "CreateDate": "2019-09-30T22:16:42.000Z",
      "UpdateDate": "2023-04-14T21:49:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "chime:GetVoiceConnector*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:GetDataEndpoint",
          "kinesisvideo:PutMedia",
          "kinesisvideo:UpdateDataRetention",
          "kinesisvideo:DescribeStream",
          "kinesisvideo:CreateStream"
        ],
        "Resource": [
          "arn:aws:kinesisvideo:*:*:stream/ChimeVoiceConnector-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:ListStreams"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:ChimeVoiceConnector-Streaming*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:SendMessage"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:ChimeVoiceConnector-Streaming*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "polly:SynthesizeSpeech"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "chime:CreateMediaInsightsPipeline",
          "chime:GetMediaInsightsPipelineConfiguration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonChimeServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonChimeServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NA5XMV3PI",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonChimeServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Resources used or managed by Amazon Chime",
      "CreateDate": "2019-09-30T22:25:06.000Z",
      "UpdateDate": "2019-09-30T22:25:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/chime.amazonaws.com/AWSServiceRoleForAmazonChime"
        ]
      }
    ]
  },
  "AWSServiceRoleForLogDeliveryPolicy": {
    "policy": {
      "PolicyName": "AWSServiceRoleForLogDeliveryPolicy",
      "PolicyId": "ANPAZKAPJZG4EMA7ANTDG",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForLogDeliveryPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Log Delivery service to deliver logs by calling log destination on your behalf.",
      "CreateDate": "2019-10-04T17:31:19.000Z",
      "UpdateDate": "2021-07-15T20:07:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "firehose:PutRecord",
          "firehose:PutRecordBatch",
          "firehose:ListTagsForDeliveryStream"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AlexaForBusinessPolyDelegatedAccessPolicy": {
    "policy": {
      "PolicyName": "AlexaForBusinessPolyDelegatedAccessPolicy",
      "PolicyId": "ANPAZKAPJZG4FIHC2UP5Z",
      "Arn": "arn:aws:iam::aws:policy/AlexaForBusinessPolyDelegatedAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide access to Poly AVS devices",
      "CreateDate": "2019-10-16T19:48:45.000Z",
      "UpdateDate": "2019-10-16T19:48:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "a4b:DisassociateDeviceFromRoom",
          "a4b:DeleteDevice",
          "a4b:UpdateDevice",
          "a4b:GetDevice"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:a4b:us-east-1:*:device/*/*:A238TWV36W3S92",
          "arn:aws:a4b:us-east-1:*:device/*/*:A1FUZ1SC53VJXD"
        ]
      },
      {
        "Action": [
          "a4b:RegisterAVSDevice"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "a4b:SearchDevices"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "a4b:AssociateDeviceWithRoom"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:a4b:us-east-1:*:device/*/*:A238TWV36W3S92",
          "arn:aws:a4b:us-east-1:*:device/*/*:A1FUZ1SC53VJXD",
          "arn:aws:a4b:us-east-1:*:room/*"
        ]
      },
      {
        "Action": [
          "a4b:GetRoom",
          "a4b:SearchRooms",
          "a4b:CreateRoom",
          "a4b:GetProfile",
          "a4b:SearchSkillGroups",
          "a4b:DisassociateSkillGroupFromRoom",
          "a4b:AssociateSkillGroupWithRoom",
          "a4b:GetSkillGroup",
          "a4b:SearchProfiles",
          "a4b:GetAddressBook",
          "a4b:UpdateRoom"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerNotebooksServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerNotebooksServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4MYB7OEJED",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonSageMakerNotebooksServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Managed policy for Service Linked Role for Amazon SageMaker Notebooks",
      "CreateDate": "2019-10-18T20:27:37.000Z",
      "UpdateDate": "2023-03-09T18:20:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:CreateAccessPoint"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:file-system/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DeleteAccessPoint"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:access-point/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:CreateFileSystem"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:CreateMountTarget",
          "elasticfilesystem:DeleteFileSystem",
          "elasticfilesystem:DeleteMountTarget"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeMountTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:TagResource"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:access-point/*",
          "arn:aws:elasticfilesystem:*:*:file-system/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DeleteSecurityGroup",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sso:CreateManagedApplicationInstance",
          "sso:DeleteManagedApplicationInstance",
          "sso:GetManagedApplicationInstance"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateUserProfile",
          "sagemaker:DescribeUserProfile"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingLambdaConcurrencyPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingLambdaConcurrencyPolicy",
      "PolicyId": "ANPAZKAPJZG4KIR2KPJCU",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingLambdaConcurrencyPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access Lambda and CloudWatch.",
      "CreateDate": "2019-10-21T20:04:17.000Z",
      "UpdateDate": "2019-10-21T20:04:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lambda:PutProvisionedConcurrencyConfig",
          "lambda:GetProvisionedConcurrencyConfig",
          "lambda:DeleteProvisionedConcurrencyConfig",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSystemsManagerAccountDiscoveryServicePolicy": {
    "policy": {
      "PolicyName": "AWSSystemsManagerAccountDiscoveryServicePolicy",
      "PolicyId": "ANPAZKAPJZG4BPDSHIWK5",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSSystemsManagerAccountDiscoveryServicePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants AWS Systems Manager (SSM) permission to discover AWS account information.",
      "CreateDate": "2019-10-24T17:21:05.000Z",
      "UpdateDate": "2022-10-17T20:25:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:ListRoots",
          "organizations:ListAccounts",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListChildren",
          "organizations:ListParents",
          "organizations:ListDelegatedServicesForAccount",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceCatalogEndUserReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSServiceCatalogEndUserReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4IWYKXJJED",
      "Arn": "arn:aws:iam::aws:policy/AWSServiceCatalogEndUserReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Service Catalog end-user capabilities ",
      "CreateDate": "2019-10-25T18:49:34.000Z",
      "UpdateDate": "2019-10-25T18:49:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeChangeSet",
          "cloudformation:ListChangeSets",
          "cloudformation:DescribeStackSet",
          "cloudformation:DescribeStackInstance",
          "cloudformation:DescribeStackSetOperation",
          "cloudformation:ListStackInstances",
          "cloudformation:ListStackResources",
          "cloudformation:ListStackSetOperations",
          "cloudformation:ListStackSetOperationResults"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/SC-*",
          "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
          "arn:aws:cloudformation:*:*:changeSet/SC-*",
          "arn:aws:cloudformation:*:*:stackset/SC-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:GetTemplateSummary",
          "servicecatalog:DescribeProduct",
          "servicecatalog:DescribeProductView",
          "servicecatalog:DescribeProvisioningParameters",
          "servicecatalog:ListLaunchPaths",
          "servicecatalog:SearchProducts",
          "ssm:DescribeDocument",
          "ssm:GetAutomationExecution",
          "config:DescribeConfigurationRecorders",
          "config:DescribeConfigurationRecorderStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicecatalog:DescribeProvisionedProduct",
          "servicecatalog:DescribeRecord",
          "servicecatalog:ListRecordHistory",
          "servicecatalog:ListStackInstancesForProvisionedProduct",
          "servicecatalog:ScanProvisionedProducts",
          "servicecatalog:SearchProvisionedProducts",
          "servicecatalog:DescribeProvisionedProductPlan",
          "servicecatalog:ListProvisionedProductPlans",
          "servicecatalog:ListServiceActionsForProvisioningArtifact",
          "servicecatalog:DescribeServiceActionExecutionParameters"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceCatalogAdminReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSServiceCatalogAdminReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4MC6ZR7YFX",
      "Arn": "arn:aws:iam::aws:policy/AWSServiceCatalogAdminReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Service Catalog admin capabilities ",
      "CreateDate": "2019-10-25T18:53:38.000Z",
      "UpdateDate": "2019-10-25T18:53:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeChangeSet",
          "cloudformation:ListChangeSets",
          "cloudformation:ListStackResources",
          "cloudformation:DescribeStackSet",
          "cloudformation:DescribeStackInstance",
          "cloudformation:DescribeStackSetOperation",
          "cloudformation:ListStackInstances",
          "cloudformation:ListStackSetOperations",
          "cloudformation:ListStackSetOperationResults"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/SC-*",
          "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
          "arn:aws:cloudformation:*:*:changeSet/SC-*",
          "arn:aws:cloudformation:*:*:stackset/SC-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:GetTemplateSummary",
          "iam:GetGroup",
          "iam:GetRole",
          "iam:GetUser",
          "iam:ListGroups",
          "iam:ListRoles",
          "iam:ListUsers",
          "servicecatalog:Get*",
          "servicecatalog:List*",
          "servicecatalog:Describe*",
          "servicecatalog:ScanProvisionedProducts",
          "servicecatalog:Search*",
          "ssm:DescribeDocument",
          "ssm:GetAutomationExecution",
          "ssm:ListDocuments",
          "ssm:ListDocumentVersions",
          "config:DescribeConfigurationRecorders",
          "config:DescribeConfigurationRecorderStatus"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPrivateMarketplaceRequests": {
    "policy": {
      "PolicyName": "AWSPrivateMarketplaceRequests",
      "PolicyId": "ANPAZKAPJZG4AV6W3DAIW",
      "Arn": "arn:aws:iam::aws:policy/AWSPrivateMarketplaceRequests",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to creating requests in an AWS Private Marketplace.",
      "CreateDate": "2019-10-28T21:44:03.000Z",
      "UpdateDate": "2019-10-28T21:44:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:CreatePrivateMarketplaceRequests",
          "aws-marketplace:ListPrivateMarketplaceRequests",
          "aws-marketplace:DescribePrivateMarketplaceRequests"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSForWordPressPluginPolicy": {
    "policy": {
      "PolicyName": "AWSForWordPressPluginPolicy",
      "PolicyId": "ANPAZKAPJZG4KEKYXDWNJ",
      "Arn": "arn:aws:iam::aws:policy/AWSForWordPressPluginPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Managed policy for AWS For Wordpress Plugin",
      "CreateDate": "2019-10-30T00:27:46.000Z",
      "UpdateDate": "2020-01-20T23:20:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "Permissions1",
        "Effect": "Allow",
        "Action": [
          "polly:SynthesizeSpeech",
          "polly:DescribeVoices",
          "translate:TranslateText"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Permissions2",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetBucketAcl",
          "s3:GetBucketPolicy",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:CreateBucket",
          "s3:PutObjectAcl"
        ],
        "Resource": [
          "arn:aws:s3:::audio_for_wordpress*",
          "arn:aws:s3:::audio-for-wordpress*"
        ]
      },
      {
        "Sid": "Permissions3",
        "Effect": "Allow",
        "Action": [
          "acm:AddTagsToCertificate",
          "acm:DescribeCertificate",
          "acm:RequestCertificate",
          "cloudformation:CreateStack",
          "cloudfront:ListDistributions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Permissions4",
        "Effect": "Allow",
        "Action": [
          "acm:DeleteCertificate",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResources",
          "cloudformation:UpdateStack",
          "cloudfront:CreateDistribution",
          "cloudfront:CreateInvalidation",
          "cloudfront:DeleteDistribution",
          "cloudfront:GetDistribution",
          "cloudfront:GetInvalidation",
          "cloudfront:TagResource",
          "cloudfront:UpdateDistribution"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeStarNotificationsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSCodeStarNotificationsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BGRXOB2GH",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSCodeStarNotificationsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS CodeStar Notifications to access Amazon CloudWatch Events on your behalf",
      "CreateDate": "2019-11-05T16:10:21.000Z",
      "UpdateDate": "2020-03-19T16:01:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "events:PutTargets",
          "events:PutRule",
          "events:DescribeRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/awscodestarnotifications-*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "sns:CreateTopic"
        ],
        "Resource": [
          "arn:aws:sns:*:*:CodeStarNotifications-*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "codecommit:GetCommentsForPullRequest",
          "codecommit:GetCommentsForComparedCommit",
          "chatbot:DescribeSlackChannelConfigurations",
          "chatbot:UpdateSlackChannelConfiguration",
          "codecommit:GetDifferences",
          "codepipeline:ListActionExecutions"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "codecommit:GetFile"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonElasticFileSystemServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonElasticFileSystemServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FXCJYWBN7",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonElasticFileSystemServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Elastic File System to manage AWS resources on your behalf",
      "CreateDate": "2019-11-05T16:52:41.000Z",
      "UpdateDate": "2022-01-10T19:27:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "backup-storage:MountCapsule",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:ModifyNetworkInterfaceAttribute",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "backup:CreateBackupVault",
          "backup:PutBackupVaultAccessPolicy"
        ],
        "Resource": [
          "arn:aws:backup:*:*:backup-vault:aws/efs/automatic-backup-vault"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "backup:CreateBackupPlan",
          "backup:CreateBackupSelection"
        ],
        "Resource": [
          "arn:aws:backup:*:*:backup-plan:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/backup.amazonaws.com/AWSServiceRoleForBackup"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:CreateReplicationConfiguration",
          "elasticfilesystem:DescribeReplicationConfigurations",
          "elasticfilesystem:DeleteReplicationConfiguration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSavingsPlansReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSSavingsPlansReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4OQ26WIHJ5",
      "Arn": "arn:aws:iam::aws:policy/AWSSavingsPlansReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Savings Plans service",
      "CreateDate": "2019-11-06T22:45:10.000Z",
      "UpdateDate": "2019-11-06T22:45:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "savingsplans:Describe*",
          "savingsplans:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSavingsPlansFullAccess": {
    "policy": {
      "PolicyName": "AWSSavingsPlansFullAccess",
      "PolicyId": "ANPAZKAPJZG4NDDOS76AO",
      "Arn": "arn:aws:iam::aws:policy/AWSSavingsPlansFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Savings Plans service",
      "CreateDate": "2019-11-06T22:45:18.000Z",
      "UpdateDate": "2019-11-06T22:45:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "savingsplans:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "WAFV2LoggingServiceRolePolicy": {
    "policy": {
      "PolicyName": "WAFV2LoggingServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4AHQ3ASNCX",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/WAFV2LoggingServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy creates a service-linked role that allows AWS WAF to write logs to Amazon Kinesis Data Firehose.",
      "CreateDate": "2019-11-07T00:40:56.000Z",
      "UpdateDate": "2020-07-23T17:04:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "firehose:PutRecord",
          "firehose:PutRecordBatch"
        ],
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRoleForAmazonEKSNodegroup": {
    "policy": {
      "PolicyName": "AWSServiceRoleForAmazonEKSNodegroup",
      "PolicyId": "ANPAZKAPJZG4KH2AAMJJG",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForAmazonEKSNodegroup",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions required for managing nodegroups in the customer's account. These policies related to management of the following resources: AutoscalingGroups, SecurityGroups, LaunchTemplates and InstanceProfiles.",
      "CreateDate": "2019-11-07T01:34:26.000Z",
      "UpdateDate": "2024-01-04T20:37:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SharedSecurityGroupRelatedPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:RevokeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:DescribeInstances",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EKSCreatedSecurityGroupRelatedPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:RevokeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:DescribeInstances",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LaunchTemplateRelatedPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteLaunchTemplate",
          "ec2:CreateLaunchTemplateVersion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AutoscalingRelatedPermissions",
        "Effect": "Allow",
        "Action": [
          "autoscaling:UpdateAutoScalingGroup",
          "autoscaling:DeleteAutoScalingGroup",
          "autoscaling:TerminateInstanceInAutoScalingGroup",
          "autoscaling:CompleteLifecycleAction",
          "autoscaling:PutLifecycleHook",
          "autoscaling:PutNotificationConfiguration",
          "autoscaling:EnableMetricsCollection"
        ],
        "Resource": [
          "arn:aws:autoscaling:*:*:*:autoScalingGroupName/eks-*"
        ]
      },
      {
        "Sid": "AllowAutoscalingToCreateSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowASGCreationByEKS",
        "Effect": "Allow",
        "Action": [
          "autoscaling:CreateOrUpdateTags",
          "autoscaling:CreateAutoScalingGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowPassRoleToAutoscaling",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowPassRoleToEC2",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PermissionsToManageResourcesForNodegroups",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "ec2:CreateLaunchTemplate",
          "ec2:DescribeInstances",
          "iam:GetInstanceProfile",
          "ec2:DescribeLaunchTemplates",
          "autoscaling:DescribeAutoScalingGroups",
          "ec2:CreateSecurityGroup",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:RunInstances",
          "ec2:DescribeSecurityGroups",
          "ec2:GetConsoleOutput",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PermissionsToCreateAndManageInstanceProfiles",
        "Effect": "Allow",
        "Action": [
          "iam:CreateInstanceProfile",
          "iam:DeleteInstanceProfile",
          "iam:RemoveRoleFromInstanceProfile",
          "iam:AddRoleToInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/eks-*"
        ]
      },
      {
        "Sid": "PermissionsToManageEKSAndKubernetesTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEC2RolePolicyForLaunchWizard": {
    "policy": {
      "PolicyName": "AmazonEC2RolePolicyForLaunchWizard",
      "PolicyId": "ANPAZKAPJZG4CBGI56NFS",
      "Arn": "arn:aws:iam::aws:policy/AmazonEC2RolePolicyForLaunchWizard",
      "Path": "/",
      "DefaultVersionId": "v10",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Managed policy for the Amazon LaunchWizard service role for EC2",
      "CreateDate": "2019-11-13T08:05:53.000Z",
      "UpdateDate": "2022-05-16T21:16:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AttachVolume",
          "ec2:RebootInstances",
          "ec2:StartInstances",
          "ec2:StopInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ReplaceRoute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DescribeInstances",
          "ec2:DescribeImages",
          "ec2:DescribeRegions",
          "ec2:DescribeVolumes",
          "ec2:DescribeRouteTables",
          "ec2:ModifyInstanceAttribute",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:PutMetricData",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:PutObjectTagging",
          "s3:GetBucketLocation",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:*",
          "arn:aws:s3:::launchwizard*",
          "arn:aws:s3:::aws-sap-data-provider/config.properties"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:Create*"
        ],
        "Resource": [
          "arn:aws:logs:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:Describe*",
          "cloudformation:DescribeStackResources",
          "cloudformation:SignalResource",
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:BatchGetItem",
          "dynamodb:PutItem",
          "sqs:ReceiveMessage",
          "sqs:SendMessage",
          "dynamodb:Scan",
          "s3:ListBucket",
          "dynamodb:Query",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteTable",
          "dynamodb:CreateTable",
          "s3:GetObject",
          "dynamodb:DescribeTable",
          "s3:GetBucketLocation",
          "dynamodb:UpdateTable"
        ],
        "Resource": [
          "arn:aws:s3:::launchwizard*",
          "arn:aws:dynamodb:*:*:table/LaunchWizard*",
          "arn:aws:sqs:*:*:LaunchWizard*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand",
          "ssm:GetDocument"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWSSAP-InstallBackint"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeFileSystems",
          "fsx:ListTagsForResource",
          "fsx:DescribeStorageVirtualMachines"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDataExchangeReadOnly": {
    "policy": {
      "PolicyName": "AWSDataExchangeReadOnly",
      "PolicyId": "ANPAZKAPJZG4DQNFEZURI",
      "Arn": "arn:aws:iam::aws:policy/AWSDataExchangeReadOnly",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants read-only access to AWS Data Exchange and AWS Marketplace actions using the AWS Management Console and SDK.",
      "CreateDate": "2019-11-13T19:27:37.000Z",
      "UpdateDate": "2021-05-10T21:15:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "dataexchange:Get*",
          "dataexchange:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ViewSubscriptions",
          "aws-marketplace:GetAgreementRequest",
          "aws-marketplace:ListAgreementRequests",
          "aws-marketplace:GetAgreementApprovalRequest",
          "aws-marketplace:ListAgreementApprovalRequests",
          "aws-marketplace:DescribeEntity",
          "aws-marketplace:ListEntities",
          "aws-marketplace:DescribeChangeSet",
          "aws-marketplace:ListChangeSets",
          "aws-marketplace:SearchAgreements",
          "aws-marketplace:GetAgreementTerms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDataExchangeSubscriberFullAccess": {
    "policy": {
      "PolicyName": "AWSDataExchangeSubscriberFullAccess",
      "PolicyId": "ANPAZKAPJZG4MAWRW4GF7",
      "Arn": "arn:aws:iam::aws:policy/AWSDataExchangeSubscriberFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants data subscriber access to AWS Data Exchange and AWS Marketplace actions using the AWS Management Console and SDK. It also provides select access to related services needed to take full advantage of AWS Data Exchange.",
      "CreateDate": "2019-11-13T19:27:52.000Z",
      "UpdateDate": "2021-11-29T23:00:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "dataexchange:Get*",
          "dataexchange:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dataexchange:CreateJob",
          "dataexchange:StartJob",
          "dataexchange:CancelJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dataexchange:CreateEventAction",
          "dataexchange:UpdateEventAction",
          "dataexchange:DeleteEventAction",
          "dataexchange:SendApiAsset"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*aws-data-exchange*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:Subscribe",
          "aws-marketplace:Unsubscribe",
          "aws-marketplace:ViewSubscriptions",
          "aws-marketplace:GetAgreementRequest",
          "aws-marketplace:ListAgreementRequests",
          "aws-marketplace:CancelAgreementRequest"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListAliases",
          "kms:ListKeys"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDataExchangeProviderFullAccess": {
    "policy": {
      "PolicyName": "AWSDataExchangeProviderFullAccess",
      "PolicyId": "ANPAZKAPJZG4MQSUGZZPZ",
      "Arn": "arn:aws:iam::aws:policy/AWSDataExchangeProviderFullAccess",
      "Path": "/",
      "DefaultVersionId": "v11",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants data provider access to AWS Data Exchange and AWS Marketplace actions using the AWS Management Console and SDK. It also provides select access to related services needed to take full advantage of AWS Data Exchange. ",
      "CreateDate": "2019-11-13T19:27:55.000Z",
      "UpdateDate": "2022-03-15T16:16:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "dataexchange:CreateDataSet",
          "dataexchange:CreateRevision",
          "dataexchange:CreateAsset",
          "dataexchange:Get*",
          "dataexchange:Update*",
          "dataexchange:List*",
          "dataexchange:Delete*",
          "dataexchange:TagResource",
          "dataexchange:UntagResource",
          "dataexchange:PublishDataSet",
          "dataexchange:SendApiAsset",
          "dataexchange:RevokeRevision",
          "tag:GetTagKeys",
          "tag:GetTagValues"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dataexchange:CreateJob",
          "dataexchange:StartJob",
          "dataexchange:CancelJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*aws-data-exchange*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:PutObjectAcl"
        ],
        "Resource": [
          "arn:aws:s3:::*aws-data-exchange*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:DescribeEntity",
          "aws-marketplace:ListEntities",
          "aws-marketplace:DescribeChangeSet",
          "aws-marketplace:ListChangeSets",
          "aws-marketplace:StartChangeSet",
          "aws-marketplace:CancelChangeSet",
          "aws-marketplace:GetAgreementApprovalRequest",
          "aws-marketplace:ListAgreementApprovalRequests",
          "aws-marketplace:AcceptAgreementApprovalRequest",
          "aws-marketplace:RejectAgreementApprovalRequest",
          "aws-marketplace:UpdateAgreementApprovalRequest",
          "aws-marketplace:SearchAgreements",
          "aws-marketplace:GetAgreementTerms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListAliases",
          "kms:ListKeys"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "redshift:AuthorizeDataShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeDataSharesForProducer",
          "redshift:DescribeDataShares"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDataExchangeFullAccess": {
    "policy": {
      "PolicyName": "AWSDataExchangeFullAccess",
      "PolicyId": "ANPAZKAPJZG4MPDTDB3FH",
      "Arn": "arn:aws:iam::aws:policy/AWSDataExchangeFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to AWS Data Exchange and AWS Marketplace actions using the AWS Management Console and SDK. It also provides select access to related services needed to take full advantage of AWS Data Exchange.",
      "CreateDate": "2019-11-13T19:27:59.000Z",
      "UpdateDate": "2021-12-02T16:14:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "dataexchange:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*aws-data-exchange*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:PutObjectAcl"
        ],
        "Resource": [
          "arn:aws:s3:::*aws-data-exchange*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:DescribeEntity",
          "aws-marketplace:ListEntities",
          "aws-marketplace:StartChangeSet",
          "aws-marketplace:ListChangeSets",
          "aws-marketplace:DescribeChangeSet",
          "aws-marketplace:CancelChangeSet",
          "aws-marketplace:GetAgreementApprovalRequest",
          "aws-marketplace:ListAgreementApprovalRequests",
          "aws-marketplace:AcceptAgreementApprovalRequest",
          "aws-marketplace:RejectAgreementApprovalRequest",
          "aws-marketplace:UpdateAgreementApprovalRequest",
          "aws-marketplace:SearchAgreements",
          "aws-marketplace:GetAgreementTerms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:Subscribe",
          "aws-marketplace:Unsubscribe",
          "aws-marketplace:ViewSubscriptions",
          "aws-marketplace:GetAgreementRequest",
          "aws-marketplace:ListAgreementRequests",
          "aws-marketplace:CancelAgreementRequest"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListAliases",
          "kms:ListKeys"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "redshift:AuthorizeDataShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeDataSharesForProducer",
          "redshift:DescribeDataShares"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTSiteWiseMonitorServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSIoTSiteWiseMonitorServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4CR556M6Y5",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSIoTSiteWiseMonitorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This role grants AWS IoT SiteWise monitor permissions to access your AWS IoT SiteWise assets & asset properties, and create AWS IoT Sitewise projects, dashboards & access policies through AWS IoT SiteWise portals.",
      "CreateDate": "2019-11-14T00:59:10.000Z",
      "UpdateDate": "2019-12-13T22:19:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotsitewise:CreateProject",
          "iotsitewise:DescribeProject",
          "iotsitewise:UpdateProject",
          "iotsitewise:DeleteProject",
          "iotsitewise:ListProjects",
          "iotsitewise:BatchAssociateProjectAssets",
          "iotsitewise:BatchDisassociateProjectAssets",
          "iotsitewise:ListProjectAssets",
          "iotsitewise:CreateDashboard",
          "iotsitewise:DescribeDashboard",
          "iotsitewise:UpdateDashboard",
          "iotsitewise:DeleteDashboard",
          "iotsitewise:ListDashboards",
          "iotsitewise:CreateAccessPolicy",
          "iotsitewise:DescribeAccessPolicy",
          "iotsitewise:UpdateAccessPolicy",
          "iotsitewise:DeleteAccessPolicy",
          "iotsitewise:ListAccessPolicies",
          "iotsitewise:DescribeAsset",
          "iotsitewise:ListAssets",
          "iotsitewise:ListAssociatedAssets",
          "iotsitewise:DescribeAssetProperty",
          "iotsitewise:GetAssetPropertyValue",
          "iotsitewise:GetAssetPropertyValueHistory",
          "iotsitewise:GetAssetPropertyAggregates",
          "sso-directory:DescribeUsers"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingComprehendEndpointPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingComprehendEndpointPolicy",
      "PolicyId": "ANPAZKAPJZG4HD4ODS6K6",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingComprehendEndpointPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access Comprehend and CloudWatch. ",
      "CreateDate": "2019-11-14T18:39:07.000Z",
      "UpdateDate": "2019-11-14T18:39:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "comprehend:UpdateEndpoint",
          "comprehend:DescribeEndpoint",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "DynamoDBCloudWatchContributorInsightsServiceRolePolicy": {
    "policy": {
      "PolicyName": "DynamoDBCloudWatchContributorInsightsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4G4VWJTRGV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/DynamoDBCloudWatchContributorInsightsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions required to support Amazon CloudWatch Contributor Insights for Amazon DynamoDB.",
      "CreateDate": "2019-11-15T21:13:58.000Z",
      "UpdateDate": "2019-11-15T21:13:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudwatch:DeleteInsightRules",
          "cloudwatch:PutInsightRule"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
        ]
      },
      {
        "Action": [
          "cloudwatch:DescribeInsightRules"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSChatbotServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AWSChatbotServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4ID4WRYKST",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSChatbotServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The Service Linked Role used by AWS Chatbot.",
      "CreateDate": "2019-11-18T16:39:50.000Z",
      "UpdateDate": "2019-11-18T16:39:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics",
          "sns:Unsubscribe",
          "sns:Subscribe",
          "sns:ListSubscriptions"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents",
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/chatbot/*"
        ]
      }
    ]
  },
  "AWSBackupFullAccess": {
    "policy": {
      "PolicyName": "AWSBackupFullAccess",
      "PolicyId": "ANPAZKAPJZG4LL52EIPJX",
      "Arn": "arn:aws:iam::aws:policy/AWSBackupFullAccess",
      "Path": "/",
      "DefaultVersionId": "v17",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is for backup administrators, granting full access to AWS Backup operations, including creating or editing backup plans, assigning AWS resources to backup plans, deleting backups, and restoring backups.",
      "CreateDate": "2019-11-18T22:21:52.000Z",
      "UpdateDate": "2023-11-27T17:33:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AwsBackupAllAccessPermissions",
        "Effect": "Allow",
        "Action": [
          "backup:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AwsBackupStorageAllAccessPermissions",
        "Effect": "Allow",
        "Action": [
          "backup-storage:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RdsPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBSnapshots",
          "rds:ListTagsForResource",
          "rds:DescribeDBInstances",
          "rds:describeDBEngineVersions",
          "rds:describeOptionGroups",
          "rds:describeOrderableDBInstanceOptions",
          "rds:describeDBSubnetGroups",
          "rds:describeDBClusterSnapshots",
          "rds:describeDBClusters",
          "rds:describeDBParameterGroups",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBInstanceAutomatedBackups",
          "rds:DescribeDBClusterAutomatedBackups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RdsDeletePermissions",
        "Effect": "Allow",
        "Action": [
          "rds:DeleteDBSnapshot",
          "rds:DeleteDBClusterSnapshot"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DynamoDbPermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:ListBackups",
          "dynamodb:ListTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DynamoDbDeleteBackupPermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:DeleteBackup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EfsFileSystemPermissions",
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DescribeFilesystems"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:file-system/*"
        ]
      },
      {
        "Sid": "Ec2Permissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSnapshots",
          "ec2:DescribeVolumes",
          "ec2:describeAvailabilityZones",
          "ec2:DescribeVpcs",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeImages",
          "ec2:DescribeSubnets",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeAddresses"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2DeletePermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot",
          "ec2:DeregisterImage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ResourceGroupTaggingPermissions",
        "Effect": "Allow",
        "Action": [
          "tag:GetTagKeys",
          "tag:GetTagValues",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "StorageGatewayVolumePermissions",
        "Effect": "Allow",
        "Action": [
          "storagegateway:DescribeCachediSCSIVolumes",
          "storagegateway:DescribeStorediSCSIVolumes"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        ]
      },
      {
        "Sid": "StorageGatewayPermissions",
        "Effect": "Allow",
        "Action": [
          "storagegateway:ListGateways"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:*"
        ]
      },
      {
        "Sid": "StorageGatewayGatewayPermissions",
        "Effect": "Allow",
        "Action": [
          "storagegateway:DescribeGatewayInformation",
          "storagegateway:ListVolumes",
          "storagegateway:ListLocalDisks"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:gateway/*"
        ]
      },
      {
        "Sid": "IamRolePermissions",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles",
          "iam:GetRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IamPassRolePermissions",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*AwsBackup*",
          "arn:aws:iam::*:role/*AWSBackup*"
        ]
      },
      {
        "Sid": "AwsOrganizationsPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KmsPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:ListKeys",
          "kms:DescribeKey",
          "kms:GenerateDataKey",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KmsCreateGrantPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SystemManagerCommandPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:CancelCommand",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SystemManagerSendCommandPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "FsxPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeFileSystems",
          "fsx:DescribeBackups",
          "fsx:DescribeVolumes",
          "fsx:DescribeStorageVirtualMachines"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FsxDeletePermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:DeleteBackup"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:backup/*"
        ]
      },
      {
        "Sid": "DirectoryServicePermissions",
        "Effect": "Allow",
        "Action": [
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IamCreateServiceLinkedRolePermissions",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BackupGatewayPermissions",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:AssociateGatewayToServer",
          "backup-gateway:CreateGateway",
          "backup-gateway:DeleteGateway",
          "backup-gateway:DeleteHypervisor",
          "backup-gateway:DisassociateGatewayFromServer",
          "backup-gateway:ImportHypervisorConfiguration",
          "backup-gateway:ListGateways",
          "backup-gateway:ListHypervisors",
          "backup-gateway:ListTagsForResource",
          "backup-gateway:ListVirtualMachines",
          "backup-gateway:PutMaintenanceStartTime",
          "backup-gateway:TagResource",
          "backup-gateway:TestHypervisorConfiguration",
          "backup-gateway:UntagResource",
          "backup-gateway:UpdateGatewayInformation",
          "backup-gateway:UpdateHypervisor"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BackupGatewayHypervisorPermissions",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:GetHypervisor",
          "backup-gateway:GetHypervisorPropertyMappings",
          "backup-gateway:PutHypervisorPropertyMappings",
          "backup-gateway:StartVirtualMachinesMetadataSync"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:hypervisor/*"
        ]
      },
      {
        "Sid": "BackupGatewayVirtualMachinePermissions",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:GetVirtualMachine"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:vm/*"
        ]
      },
      {
        "Sid": "BackupGatewayGatewayPermissions",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:GetBandwidthRateLimitSchedule",
          "backup-gateway:GetGateway",
          "backup-gateway:PutBandwidthRateLimitSchedule"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:gateway/*"
        ]
      },
      {
        "Sid": "CloudWatchPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TimestreamDatabasePermissions",
        "Effect": "Allow",
        "Action": [
          "timestream:ListTables",
          "timestream:ListDatabases"
        ],
        "Resource": [
          "arn:aws:timestream:*:*:database/*"
        ]
      },
      {
        "Sid": "TimestreamPermissions",
        "Effect": "Allow",
        "Action": [
          "timestream:DescribeEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3BucketPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "RedshiftResourcesPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSubnetGroups",
          "redshift:DescribeClusterSnapshots",
          "redshift:DescribeSnapshotSchedules"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:cluster:*",
          "arn:aws:redshift:*:*:subnetgroup:*",
          "arn:aws:redshift:*:*:snapshot:*/*",
          "arn:aws:redshift:*:*:snapshotschedule:*"
        ]
      },
      {
        "Sid": "RedshiftPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeNodeConfigurationOptions",
          "redshift:DescribeOrderableClusterOptions",
          "redshift:DescribeClusterParameterGroups",
          "redshift:DescribeClusterTracks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudFormationStackPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/*"
        ]
      },
      {
        "Sid": "SystemsManagerForSapPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-sap:GetOperation",
          "ssm-sap:ListDatabases",
          "ssm-sap:GetDatabase",
          "ssm-sap:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ResourceAccessManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "ram:GetResourceShareAssociations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBackupOperatorAccess": {
    "policy": {
      "PolicyName": "AWSBackupOperatorAccess",
      "PolicyId": "ANPAZKAPJZG4KHXVYMY4O",
      "Arn": "arn:aws:iam::aws:policy/AWSBackupOperatorAccess",
      "Path": "/",
      "DefaultVersionId": "v15",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants users permissions to assign AWS resources to backup plans, create on-demand backups, and restore backups. This policy does not allow the user to create or edit backup plans or to delete scheduled backups after they are created.",
      "CreateDate": "2019-11-18T22:23:17.000Z",
      "UpdateDate": "2023-09-06T20:45:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "backup:Get*",
          "backup:List*",
          "backup:Describe*",
          "backup:CreateBackupSelection",
          "backup:DeleteBackupSelection",
          "backup:StartBackupJob",
          "backup:StartRestoreJob",
          "backup:StartCopyJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBSnapshots",
          "rds:ListTagsForResource",
          "rds:DescribeDBInstances",
          "rds:describeDBEngineVersions",
          "rds:describeOptionGroups",
          "rds:describeOrderableDBInstanceOptions",
          "rds:describeDBSubnetGroups",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBClusters",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBInstanceAutomatedBackups",
          "rds:DescribeDBClusterAutomatedBackups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:ListBackups",
          "dynamodb:ListTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DescribeFilesystems"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:file-system/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSnapshots",
          "ec2:DescribeVolumes",
          "ec2:describeAvailabilityZones",
          "ec2:DescribeVpcs",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeImages",
          "ec2:DescribeSubnets",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeAddresses"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetTagKeys",
          "tag:GetTagValues",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "storagegateway:DescribeCachediSCSIVolumes",
          "storagegateway:DescribeStorediSCSIVolumes"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "storagegateway:ListGateways"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "storagegateway:DescribeGatewayInformation",
          "storagegateway:ListVolumes",
          "storagegateway:ListLocalDisks"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:gateway/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles",
          "iam:GetRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*AwsBackup*",
          "arn:aws:iam::*:role/*AWSBackup*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:CancelCommand",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeBackups"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:backup/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeFileSystems"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:file-system/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeVolumes"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:volume/*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeStorageVirtualMachines"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:storage-virtual-machine/*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "backup-gateway:ListGateways",
          "backup-gateway:ListHypervisors",
          "backup-gateway:ListTagsForResource",
          "backup-gateway:ListVirtualMachines"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "backup-gateway:GetHypervisor",
          "backup-gateway:GetHypervisorPropertyMappings"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:hypervisor/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "backup-gateway:GetVirtualMachine"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:vm/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "backup-gateway:GetBandwidthRateLimitSchedule",
          "backup-gateway:GetGateway"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:gateway/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "timestream:ListDatabases",
          "timestream:ListTables"
        ],
        "Resource": [
          "arn:aws:timestream:*:*:database/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "timestream:DescribeEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSubnetGroups",
          "redshift:DescribeClusterSnapshots",
          "redshift:DescribeSnapshotSchedules"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:cluster:*",
          "arn:aws:redshift:*:*:subnetgroup:*",
          "arn:aws:redshift:*:*:snapshot:*/*",
          "arn:aws:redshift:*:*:snapshotschedule:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeNodeConfigurationOptions",
          "redshift:DescribeOrderableClusterOptions",
          "redshift:DescribeClusterParameterGroups",
          "redshift:DescribeClusterTracks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm-sap:GetOperation",
          "ssm-sap:ListDatabases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm-sap:GetDatabase",
          "ssm-sap:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:ssm-sap:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ram:GetResourceShareAssociations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSTrustedAdvisorReportingServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSTrustedAdvisorReportingServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NCBYW5OGK",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSTrustedAdvisorReportingServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Policy for Trusted Advisor Multi-account Reporting",
      "CreateDate": "2019-11-19T17:41:13.000Z",
      "UpdateDate": "2023-02-28T23:23:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListChildren",
          "organizations:ListParents",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribeAccount"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceMeteringRegisterUsage": {
    "policy": {
      "PolicyName": "AWSMarketplaceMeteringRegisterUsage",
      "PolicyId": "ANPAZKAPJZG4OIHJX73MZ",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceMeteringRegisterUsage",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions to register a resource and track usage through AWS Marketplace Metering Service.",
      "CreateDate": "2019-11-21T01:17:54.000Z",
      "UpdateDate": "2019-11-21T01:17:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "aws-marketplace:RegisterUsage"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkManagedUpdatesServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkManagedUpdatesServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4HVFNJB4NR",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSElasticBeanstalkManagedUpdatesServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS Elastic Beanstalk Service Role policy that grants limited permissions to managed updates.",
      "CreateDate": "2019-11-21T22:35:06.000Z",
      "UpdateDate": "2023-03-24T00:18:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowPassRoleToElasticBeanstalkAndDownstreamServices",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SingleInstanceAPIs",
        "Effect": "Allow",
        "Action": [
          "ec2:releaseAddress",
          "ec2:allocateAddress",
          "ec2:DisassociateAddress",
          "ec2:AssociateAddress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ECS",
        "Effect": "Allow",
        "Action": [
          "ecs:RegisterTaskDefinition",
          "ecs:DeRegisterTaskDefinition",
          "ecs:List*",
          "ecs:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ElasticBeanstalkAPIs",
        "Effect": "Allow",
        "Action": [
          "elasticbeanstalk:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ReadOnlyAPIs",
        "Effect": "Allow",
        "Action": [
          "cloudformation:Describe*",
          "cloudformation:List*",
          "ec2:Describe*",
          "autoscaling:Describe*",
          "elasticloadbalancing:Describe*",
          "logs:DescribeLogGroups",
          "sns:GetTopicAttributes",
          "sns:ListSubscriptionsByTopic",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ASG",
        "Effect": "Allow",
        "Action": [
          "autoscaling:AttachInstances",
          "autoscaling:CreateAutoScalingGroup",
          "autoscaling:CreateLaunchConfiguration",
          "autoscaling:CreateOrUpdateTags",
          "autoscaling:DeleteAutoScalingGroup",
          "autoscaling:DeleteLaunchConfiguration",
          "autoscaling:DeleteScheduledAction",
          "autoscaling:DetachInstances",
          "autoscaling:PutNotificationConfiguration",
          "autoscaling:PutScalingPolicy",
          "autoscaling:PutScheduledUpdateGroupAction",
          "autoscaling:ResumeProcesses",
          "autoscaling:SuspendProcesses",
          "autoscaling:TerminateInstanceInAutoScalingGroup",
          "autoscaling:UpdateAutoScalingGroup"
        ],
        "Resource": [
          "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
          "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*",
          "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/eb-*",
          "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/eb-*"
        ]
      },
      {
        "Sid": "CFN",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:CancelUpdateStack",
          "cloudformation:DeleteStack",
          "cloudformation:GetTemplate",
          "cloudformation:UpdateStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awseb-e-*",
          "arn:aws:cloudformation:*:*:stack/eb-*"
        ]
      },
      {
        "Sid": "EC2",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "S3Obj",
        "Effect": "Allow",
        "Action": [
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:GetObjectAcl",
          "s3:GetObjectVersion",
          "s3:GetObjectVersionAcl",
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:PutObjectVersionAcl"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*/*"
        ]
      },
      {
        "Sid": "S3Bucket",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:GetBucketPolicy",
          "s3:ListBucket",
          "s3:PutBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*"
        ]
      },
      {
        "Sid": "CWL",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:DeleteLogGroup",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        ]
      },
      {
        "Sid": "ELB",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:DeRegisterTargets",
          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-e-*",
          "arn:aws:elasticloadbalancing:*:*:targetgroup/eb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/eb-*"
        ]
      },
      {
        "Sid": "SNS",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic"
        ],
        "Resource": [
          "arn:aws:sns:*:*:ElasticBeanstalkNotifications-Environment-*"
        ]
      },
      {
        "Sid": "EC2LaunchTemplate",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplate",
          "ec2:DeleteLaunchTemplate",
          "ec2:CreateLaunchTemplateVersion",
          "ec2:DeleteLaunchTemplateVersions"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "AllowLaunchTemplateRunInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowECSTagResource",
        "Effect": "Allow",
        "Action": [
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEKSFargatePodExecutionRolePolicy": {
    "policy": {
      "PolicyName": "AmazonEKSFargatePodExecutionRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FJRXZH7YQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to other AWS service resources that are required to run Amazon EKS pods on AWS Fargate",
      "CreateDate": "2019-11-22T04:34:29.000Z",
      "UpdateDate": "2019-11-22T04:34:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer",
          "ecr:BatchGetImage"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEKSForFargateServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonEKSForFargateServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JAUTVFICB",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonEKSForFargateServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants necessary permissions to Amazon EKS to run fargate tasks",
      "CreateDate": "2019-11-22T04:36:25.000Z",
      "UpdateDate": "2019-11-22T04:36:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeRouteTables"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchSyntheticsReadOnlyAccess": {
    "policy": {
      "PolicyName": "CloudWatchSyntheticsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4C7XDT2FFB",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchSyntheticsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to CloudWatch Synthetics.",
      "CreateDate": "2019-11-25T17:45:40.000Z",
      "UpdateDate": "2020-03-06T19:26:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "synthetics:Describe*",
          "synthetics:Get*",
          "synthetics:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEventBridgeSchemasServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonEventBridgeSchemasServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GZI6BHNDI",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonEventBridgeSchemasServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to Managed Rules created by Amazon EventBridge schemas.",
      "CreateDate": "2019-11-27T01:10:40.000Z",
      "UpdateDate": "2019-11-27T01:10:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets",
          "events:EnableRule",
          "events:DisableRule",
          "events:DeleteRule",
          "events:RemoveTargets",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/*Schemas-*"
        ]
      }
    ]
  },
  "CloudWatchSyntheticsFullAccess": {
    "policy": {
      "PolicyName": "CloudWatchSyntheticsFullAccess",
      "PolicyId": "ANPAZKAPJZG4MAGQWEZP4",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchSyntheticsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to CloudWatch Synthetics.",
      "CreateDate": "2019-11-25T17:39:46.000Z",
      "UpdateDate": "2022-05-06T18:14:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "synthetics:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:PutEncryptionConfiguration"
        ],
        "Resource": [
          "arn:aws:s3:::cw-syn-results-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles",
          "s3:ListAllMyBuckets",
          "xray:GetTraceSummaries",
          "xray:BatchGetTraces",
          "apigateway:GET"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::cw-syn-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "arn:aws:s3:::aws-synthetics-library-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:ListAttachedRolePolicies"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:Synthetics-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction",
          "lambda:AddPermission",
          "lambda:PublishVersion",
          "lambda:UpdateFunctionCode",
          "lambda:UpdateFunctionConfiguration",
          "lambda:GetFunctionConfiguration",
          "lambda:DeleteFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:cwsyn-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:GetLayerVersion",
          "lambda:PublishLayerVersion",
          "lambda:DeleteLayerVersion"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:layer:cwsyn-*",
          "arn:aws:lambda:*:*:layer:Synthetics:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:Subscribe",
          "sns:ListSubscriptionsByTopic"
        ],
        "Resource": [
          "arn:*:sns:*:*:Synthetics-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      }
    ]
  },
  "AmazonEventBridgeSchemasReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonEventBridgeSchemasReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4JK7CLVFIU",
      "Arn": "arn:aws:iam::aws:policy/AmazonEventBridgeSchemasReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon EventBridge Schemas.",
      "CreateDate": "2019-11-28T23:05:57.000Z",
      "UpdateDate": "2020-05-01T00:50:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonEventBridgeSchemasReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "schemas:ListDiscoverers",
          "schemas:DescribeDiscoverer",
          "schemas:ListRegistries",
          "schemas:DescribeRegistry",
          "schemas:SearchSchemas",
          "schemas:ListSchemas",
          "schemas:ListSchemaVersions",
          "schemas:DescribeSchema",
          "schemas:GetDiscoveredSchema",
          "schemas:DescribeCodeBinding",
          "schemas:GetCodeBindingSource",
          "schemas:ListTagsForResource",
          "schemas:GetResourcePolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEventBridgeSchemasFullAccess": {
    "policy": {
      "PolicyName": "AmazonEventBridgeSchemasFullAccess",
      "PolicyId": "ANPAZKAPJZG4JF3KP3V5J",
      "Arn": "arn:aws:iam::aws:policy/AmazonEventBridgeSchemasFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon EventBridge Schemas.",
      "CreateDate": "2019-11-28T23:12:53.000Z",
      "UpdateDate": "2019-11-28T23:12:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonEventBridgeSchemasFullAccess",
        "Effect": "Allow",
        "Action": [
          "schemas:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonEventBridgeManageRule",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets",
          "events:EnableRule",
          "events:DisableRule",
          "events:DeleteRule",
          "events:RemoveTargets",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/*Schemas*"
        ]
      },
      {
        "Sid": "IAMCreateServiceLinkedRoleForAmazonEventBridgeSchemas",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/schemas.amazonaws.com/AWSServiceRoleForSchemas"
        ]
      }
    ]
  },
  "AWSServiceRoleForImageBuilder": {
    "policy": {
      "PolicyName": "AWSServiceRoleForImageBuilder",
      "PolicyId": "ANPAZKAPJZG4NE22WISEW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForImageBuilder",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v19",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows EC2ImageBuilder to call AWS services on your behalf.",
      "CreateDate": "2019-11-29T22:02:13.000Z",
      "UpdateDate": "2023-10-19T21:30:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*::snapshot/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:key-pair/*",
          "arn:aws:ec2:*:*:launch-template/*",
          "arn:aws:license-manager:*:*:license-configuration:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:StopInstances",
          "ec2:StartInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CopyImage",
          "ec2:CreateImage",
          "ec2:CreateLaunchTemplate",
          "ec2:DeregisterImage",
          "ec2:DescribeImages",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypeOfferings",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:ModifyImageAttribute",
          "ec2:DescribeImportImageTasks",
          "ec2:DescribeExportImageTasks",
          "ec2:DescribeSnapshots",
          "ec2:DescribeHosts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifySnapshotAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*:*:export-image-task/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "license-manager:UpdateLicenseSpecificationsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:ListCommands",
          "ssm:ListCommandInvocations",
          "ssm:AddTagsToResource",
          "ssm:DescribeInstanceInformation",
          "ssm:GetAutomationExecution",
          "ssm:StopAutomationExecution",
          "ssm:ListInventoryEntries",
          "ssm:SendAutomationSignal",
          "ssm:DescribeInstanceAssociationsStatus",
          "ssm:DescribeAssociationExecutions",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWS-RunPowerShellScript",
          "arn:aws:ssm:*:*:document/AWS-RunShellScript",
          "arn:aws:ssm:*:*:document/AWSEC2-RunSysprep",
          "arn:aws:s3:::*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-definition/ImageBuilder*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:CreateAssociation",
          "ssm:DeleteAssociation"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWS-GatherSoftwareInventory",
          "arn:aws:ssm:*:*:association/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:Encrypt",
          "kms:Decrypt",
          "kms:ReEncryptFrom",
          "kms:ReEncryptTo",
          "kms:GenerateDataKeyWithoutPlaintext"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sts:AssumeRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/EC2ImageBuilderDistributionCrossAccountRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/imagebuilder/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplateVersion",
          "ec2:DescribeLaunchTemplates",
          "ec2:ModifyLaunchTemplate",
          "ec2:DescribeLaunchTemplateVersions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ExportImage"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ExportImage"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:export-image-task/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CancelExportTask"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:export-image-task/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:EnableFastLaunch"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "inspector2:ListCoverage",
          "inspector2:ListFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:CreateRepository"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:TagResource"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/image-builder-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:BatchDeleteImage"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/image-builder-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:DescribeRule",
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/ImageBuilder-*"
        ]
      }
    ]
  },
  "EC2InstanceProfileForImageBuilder": {
    "policy": {
      "PolicyName": "EC2InstanceProfileForImageBuilder",
      "PolicyId": "ANPAZKAPJZG4EJC2UPLYL",
      "Arn": "arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "EC2 Instance profile for Image Builder service.",
      "CreateDate": "2019-12-01T19:08:23.000Z",
      "UpdateDate": "2020-08-27T16:40:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "imagebuilder:GetComponent"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::ec2imagebuilder*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/imagebuilder/*"
        ]
      }
    ]
  },
  "IAMAccessAnalyzerFullAccess": {
    "policy": {
      "PolicyName": "IAMAccessAnalyzerFullAccess",
      "PolicyId": "ANPAZKAPJZG4MAZGHIYZN",
      "Arn": "arn:aws:iam::aws:policy/IAMAccessAnalyzerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to IAM Access Analyzer",
      "CreateDate": "2019-12-02T17:12:40.000Z",
      "UpdateDate": "2019-12-02T17:12:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "access-analyzer:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListChildren",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListParents",
          "organizations:ListRoots"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "IAMAccessAnalyzerReadOnlyAccess": {
    "policy": {
      "PolicyName": "IAMAccessAnalyzerReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4GY4R3GAPM",
      "Arn": "arn:aws:iam::aws:policy/IAMAccessAnalyzerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to IAM Access Analyzer resources",
      "CreateDate": "2019-12-02T17:12:53.000Z",
      "UpdateDate": "2023-11-27T02:24:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "IAMAccessAnalyzerReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "access-analyzer:CheckAccessNotGranted",
          "access-analyzer:CheckNoNewAccess",
          "access-analyzer:Get*",
          "access-analyzer:List*",
          "access-analyzer:ValidatePolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AccessAnalyzerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AccessAnalyzerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4CAIXDDRI2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AccessAnalyzerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v12",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow Access Analyzer to analyze resource metadata",
      "CreateDate": "2019-12-02T17:13:10.000Z",
      "UpdateDate": "2024-01-22T22:34:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AccessAnalyzerServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "dynamodb:GetResourcePolicy",
          "dynamodb:ListStreams",
          "dynamodb:ListTables",
          "ec2:DescribeAddresses",
          "ec2:DescribeByoipCidrs",
          "ec2:DescribeSnapshotAttribute",
          "ec2:DescribeSnapshots",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcs",
          "ec2:GetSnapshotBlockPublicAccessState",
          "ecr:DescribeRepositories",
          "ecr:GetRepositoryPolicy",
          "elasticfilesystem:DescribeFileSystemPolicy",
          "elasticfilesystem:DescribeFileSystems",
          "iam:GetRole",
          "iam:ListEntitiesForPolicy",
          "iam:ListRoles",
          "iam:ListUsers",
          "iam:GetUser",
          "iam:GetGroup",
          "iam:GenerateServiceLastAccessedDetails",
          "iam:GetServiceLastAccessedDetails",
          "iam:ListAccessKeys",
          "iam:GetLoginProfile",
          "iam:GetAccessKeyLastUsed",
          "kms:DescribeKey",
          "kms:GetKeyPolicy",
          "kms:ListGrants",
          "kms:ListKeyPolicies",
          "kms:ListKeys",
          "lambda:GetFunctionUrlConfig",
          "lambda:GetLayerVersionPolicy",
          "lambda:GetPolicy",
          "lambda:ListAliases",
          "lambda:ListFunctions",
          "lambda:ListLayers",
          "lambda:ListLayerVersions",
          "lambda:ListVersionsByFunction",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListChildren",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListParents",
          "organizations:ListRoots",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBSnapshotAttributes",
          "rds:DescribeDBSnapshots",
          "s3:DescribeMultiRegionAccessPointOperation",
          "s3:GetAccessPoint",
          "s3:GetAccessPointPolicy",
          "s3:GetAccessPointPolicyStatus",
          "s3:GetAccountPublicAccessBlock",
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "s3:GetBucketPolicyStatus",
          "s3:GetBucketPolicy",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetMultiRegionAccessPoint",
          "s3:GetMultiRegionAccessPointPolicy",
          "s3:GetMultiRegionAccessPointPolicyStatus",
          "s3:ListAccessPoints",
          "s3:ListAllMyBuckets",
          "s3:ListMultiRegionAccessPoints",
          "s3express:GetBucketPolicy",
          "s3express:ListAllMyDirectoryBuckets",
          "sns:GetTopicAttributes",
          "sns:ListTopics",
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetResourcePolicy",
          "secretsmanager:ListSecrets",
          "sqs:GetQueueAttributes",
          "sqs:ListQueues"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCodeGuruReviewerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonCodeGuruReviewerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NJY3GAUD2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonCodeGuruReviewerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "A service-linked role required for Amazon CodeGuru Reviewer to access resources on your behalf.",
      "CreateDate": "2019-12-03T05:31:12.000Z",
      "UpdateDate": "2020-11-27T15:09:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AccessCodeGuruReviewerEnabledRepositories",
        "Effect": "Allow",
        "Action": [
          "codecommit:GetRepository",
          "codecommit:GetBranch",
          "codecommit:DescribePullRequestEvents",
          "codecommit:GetCommentsForPullRequest",
          "codecommit:GetDifferences",
          "codecommit:GetPullRequest",
          "codecommit:ListPullRequests",
          "codecommit:PostCommentForPullRequest",
          "codecommit:GitPull",
          "codecommit:UntagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AccessCodeGuruReviewerEnabledConnections",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:UseConnection"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchEventsResourceCleanup",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:RemoveTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowGuruS3GetObject",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::codeguru-reviewer-*",
          "arn:aws:s3:::codeguru-reviewer-*/*"
        ]
      }
    ]
  },
  "AmazonCodeGuruReviewerFullAccess": {
    "policy": {
      "PolicyName": "AmazonCodeGuruReviewerFullAccess",
      "PolicyId": "ANPAZKAPJZG4ENLFBTHWM",
      "Arn": "arn:aws:iam::aws:policy/AmazonCodeGuruReviewerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to Amazon CodeGuru Reviewer and scoped access to required dependencies.",
      "CreateDate": "2019-12-03T08:33:47.000Z",
      "UpdateDate": "2020-08-29T04:16:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonCodeGuruReviewerFullAccess",
        "Effect": "Allow",
        "Action": [
          "codeguru-reviewer:*",
          "codeguru:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonCodeGuruReviewerSLRCreation",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer"
        ]
      },
      {
        "Sid": "AmazonCodeGuruReviewerSLRDeletion",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer"
        ]
      },
      {
        "Sid": "CodeCommitAccess",
        "Effect": "Allow",
        "Action": [
          "codecommit:ListRepositories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeCommitTagManagement",
        "Effect": "Allow",
        "Action": [
          "codecommit:TagResource",
          "codecommit:UntagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeConnectTagManagement",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:TagResource",
          "codestar-connections:UntagResource",
          "codestar-connections:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeConnectManagedRules",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:UseConnection",
          "codestar-connections:ListConnections",
          "codestar-connections:PassConnection"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchEventsManagedRules",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets",
          "events:DeleteRule",
          "events:RemoveTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ComputeOptimizerServiceRolePolicy": {
    "policy": {
      "PolicyName": "ComputeOptimizerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4HPOQZNRNJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/ComputeOptimizerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows ComputeOptimizer to call AWS services and collect workload details on your behalf.",
      "CreateDate": "2019-12-03T08:45:19.000Z",
      "UpdateDate": "2022-06-13T19:05:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ComputeOptimizerFullAccess",
        "Effect": "Allow",
        "Action": [
          "compute-optimizer:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AwsOrgsAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchAccess",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AutoScalingAccess",
        "Effect": "Allow",
        "Action": [
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeAutoScalingGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2Access",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeVolumes"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCodeGuruReviewerReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonCodeGuruReviewerReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4FOJ4PYG77",
      "Arn": "arn:aws:iam::aws:policy/AmazonCodeGuruReviewerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon CodeGuru Reviewer.",
      "CreateDate": "2019-12-03T08:48:24.000Z",
      "UpdateDate": "2020-08-29T04:15:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonCodeGuruReviewerReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "codeguru:Get*",
          "codeguru-reviewer:List*",
          "codeguru-reviewer:Describe*",
          "codeguru-reviewer:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCodeGuruProfilerFullAccess": {
    "policy": {
      "PolicyName": "AmazonCodeGuruProfilerFullAccess",
      "PolicyId": "ANPAZKAPJZG4FVCBNS424",
      "Arn": "arn:aws:iam::aws:policy/AmazonCodeGuruProfilerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon CodeGuru Profiler.",
      "CreateDate": "2019-12-03T10:13:27.000Z",
      "UpdateDate": "2020-07-15T03:23:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codeguru-profiler:*",
          "iam:ListRoles",
          "iam:ListUsers",
          "sns:ListTopics",
          "codeguru:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/*AWSServiceRoleForCodeGuruProfiler*"
        ]
      }
    ]
  },
  "AmazonCodeGuruProfilerReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonCodeGuruProfilerReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4LUSUINUHE",
      "Arn": "arn:aws:iam::aws:policy/AmazonCodeGuruProfilerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon CodeGuru Profiler.",
      "CreateDate": "2019-12-03T10:30:15.000Z",
      "UpdateDate": "2020-06-27T23:52:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codeguru:Get*",
          "codeguru-profiler:BatchGet*",
          "codeguru-profiler:Describe*",
          "codeguru-profiler:Get*",
          "codeguru-profiler:List*",
          "iam:ListRoles",
          "iam:ListUsers"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMCSFullAccess": {
    "policy": {
      "PolicyName": "AmazonMCSFullAccess",
      "PolicyId": "ANPAZKAPJZG4K6JRQY7NV",
      "Arn": "arn:aws:iam::aws:policy/AmazonMCSFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide full access to Amazon Managed Apache Cassandra Service",
      "CreateDate": "2019-12-03T13:45:25.000Z",
      "UpdateDate": "2020-04-17T19:19:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:RegisterScalableTarget",
          "application-autoscaling:PutScheduledAction",
          "application-autoscaling:DeleteScheduledAction",
          "application-autoscaling:DescribeScheduledActions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cassandra:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:PutMetricAlarm"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/cassandra.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_CassandraTable"
        ]
      }
    ]
  },
  "AmazonMCSReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMCSReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4F6NKMXCNS",
      "Arn": "arn:aws:iam::aws:policy/AmazonMCSReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide read only access to Amazon Managed Apache Cassandra Service",
      "CreateDate": "2019-12-03T13:46:21.000Z",
      "UpdateDate": "2020-04-17T19:21:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cassandra:Select"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:DescribeScheduledActions",
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSNetworkManagerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSNetworkManagerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4B346KOB7I",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSNetworkManagerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow NetworkManager to access resources associated with your Global Networks",
      "CreateDate": "2019-12-03T14:03:35.000Z",
      "UpdateDate": "2022-07-27T19:41:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "directconnect:DescribeDirectConnectGateways",
          "directconnect:DescribeConnections",
          "directconnect:DescribeDirectConnectGatewayAttachments",
          "directconnect:DescribeLocations",
          "directconnect:DescribeVirtualInterfaces",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeTransitGatewayAttachments",
          "ec2:DescribeTransitGatewayRouteTables",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpcs",
          "ec2:GetTransitGatewayRouteTableAssociations",
          "ec2:GetTransitGatewayRouteTablePropagations",
          "ec2:SearchTransitGatewayRoutes",
          "ec2:DescribeTransitGatewayPeeringAttachments",
          "ec2:DescribeTransitGatewayConnects",
          "ec2:DescribeTransitGatewayConnectPeers",
          "ec2:DescribeRegions",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListDelegatedAdministrators",
          "ec2:DescribeTransitGatewayRouteTableAnnouncements",
          "ec2:DescribeTransitGatewayPolicyTables",
          "ec2:GetTransitGatewayPolicyTableAssociations",
          "ec2:GetTransitGatewayPolicyTableEntries"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKendraReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonKendraReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4POKTT2LDN",
      "Arn": "arn:aws:iam::aws:policy/AmazonKendraReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Kendra via the AWS Management Console.",
      "CreateDate": "2019-12-03T16:13:45.000Z",
      "UpdateDate": "2021-05-27T17:01:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kendra:Describe*",
          "kendra:List*",
          "kendra:Query",
          "kendra:GetQuerySuggestions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKendraFullAccess": {
    "policy": {
      "PolicyName": "AmazonKendraFullAccess",
      "PolicyId": "ANPAZKAPJZG4BK2ALV3AM",
      "Arn": "arn:aws:iam::aws:policy/AmazonKendraFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Kendra via the AWS Management Console.",
      "CreateDate": "2019-12-03T16:15:37.000Z",
      "UpdateDate": "2019-12-03T16:15:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:ListKeys",
          "kms:ListAliases",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:DescribeSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AmazonKendra-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kendra:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerMechanicalTurkAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerMechanicalTurkAccess",
      "PolicyId": "ANPAZKAPJZG4AYDBKMMDV",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerMechanicalTurkAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to create Amazon Augmented AI FlowDefinition resources against any Workteam.",
      "CreateDate": "2019-12-03T16:19:36.000Z",
      "UpdateDate": "2019-12-03T16:19:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:*FlowDefinition",
          "sagemaker:*FlowDefinitions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonAugmentedAIHumanLoopFullAccess": {
    "policy": {
      "PolicyName": "AmazonAugmentedAIHumanLoopFullAccess",
      "PolicyId": "ANPAZKAPJZG4DLDNVPZG4",
      "Arn": "arn:aws:iam::aws:policy/AmazonAugmentedAIHumanLoopFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to perform all operations on HumanLoops.",
      "CreateDate": "2019-12-03T16:20:47.000Z",
      "UpdateDate": "2019-12-03T16:20:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:*HumanLoop",
          "sagemaker:*HumanLoops"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonAugmentedAIFullAccess": {
    "policy": {
      "PolicyName": "AmazonAugmentedAIFullAccess",
      "PolicyId": "ANPAZKAPJZG4HJOEBWQWI",
      "Arn": "arn:aws:iam::aws:policy/AmazonAugmentedAIFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to perform all operations Amazon Augmented AI resources, including FlowDefinitions, HumanTaskUis and HumanLoops. Does not allow access for creating FlowDefinitions against the public-crowd Workteam.",
      "CreateDate": "2019-12-03T16:21:56.000Z",
      "UpdateDate": "2019-12-03T16:21:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:*HumanLoop",
          "sagemaker:*HumanLoops",
          "sagemaker:*FlowDefinition",
          "sagemaker:*FlowDefinitions",
          "sagemaker:*HumanTaskUi",
          "sagemaker:*HumanTaskUis"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AWSNetworkManagerReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSNetworkManagerReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4LZFJOS62Z",
      "Arn": "arn:aws:iam::aws:policy/AWSNetworkManagerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon NetworkManager via the AWS Management Console.",
      "CreateDate": "2019-12-03T17:35:05.000Z",
      "UpdateDate": "2019-12-03T17:35:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "networkmanager:Describe*",
          "networkmanager:Get*",
          "networkmanager:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSNetworkManagerFullAccess": {
    "policy": {
      "PolicyName": "AWSNetworkManagerFullAccess",
      "PolicyId": "ANPAZKAPJZG4ARXJ4NU7I",
      "Arn": "arn:aws:iam::aws:policy/AWSNetworkManagerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon NetworkManager via the AWS Management Console.",
      "CreateDate": "2019-12-03T17:37:58.000Z",
      "UpdateDate": "2019-12-03T17:37:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "networkmanager:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonFraudDetectorFullAccessPolicy": {
    "policy": {
      "PolicyName": "AmazonFraudDetectorFullAccessPolicy",
      "PolicyId": "ANPAZKAPJZG4AAPDEABT6",
      "Arn": "arn:aws:iam::aws:policy/AmazonFraudDetectorFullAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Gives access to all actions for Amazon Fraud Detector",
      "CreateDate": "2019-12-03T22:46:26.000Z",
      "UpdateDate": "2019-12-03T22:46:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "frauddetector:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:ListEndpoints",
          "sagemaker:DescribeEndpoint"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSResourceAccessManagerResourceShareParticipantAccess": {
    "policy": {
      "PolicyName": "AWSResourceAccessManagerResourceShareParticipantAccess",
      "PolicyId": "ANPAZKAPJZG4LIFEGGUIU",
      "Arn": "arn:aws:iam::aws:policy/AWSResourceAccessManagerResourceShareParticipantAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS Resource Access Manager APIs needed by a resource share participant.",
      "CreateDate": "2019-12-09T20:41:37.000Z",
      "UpdateDate": "2019-12-09T20:41:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ram:AcceptResourceShareInvitation",
          "ram:GetResourcePolicies",
          "ram:GetResourceShareInvitations",
          "ram:GetResourceShares",
          "ram:ListPendingInvitationResources",
          "ram:ListPrincipals",
          "ram:ListResources",
          "ram:RejectResourceShareInvitation"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSResourceAccessManagerReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSResourceAccessManagerReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4BQV2LHYJY",
      "Arn": "arn:aws:iam::aws:policy/AWSResourceAccessManagerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Resource Access Manager.",
      "CreateDate": "2019-12-09T20:58:37.000Z",
      "UpdateDate": "2019-12-09T20:58:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ram:Get*",
          "ram:List*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudFormationStackSetsOrgMemberServiceRolePolicy": {
    "policy": {
      "PolicyName": "CloudFormationStackSetsOrgMemberServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LHV6H6QDU",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudFormationStackSetsOrgMemberServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Role for CloudFormation StackSets (Organization Member Account)",
      "CreateDate": "2019-12-09T23:52:37.000Z",
      "UpdateDate": "2019-12-09T23:52:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "iam:CreateRole",
          "iam:DeleteRole",
          "iam:GetRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/stacksets-exec-*"
        ]
      },
      {
        "Action": [
          "iam:DetachRolePolicy",
          "iam:AttachRolePolicy"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/stacksets-exec-*"
        ]
      }
    ]
  },
  "CloudFormationStackSetsOrgAdminServiceRolePolicy": {
    "policy": {
      "PolicyName": "CloudFormationStackSetsOrgAdminServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JEQ3CDBDV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudFormationStackSetsOrgAdminServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Role for CloudFormation StackSets (Organization Master Account)",
      "CreateDate": "2019-12-10T00:20:05.000Z",
      "UpdateDate": "2019-12-10T00:20:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowsAWSOrganizationsReadAPIs",
        "Effect": "Allow",
        "Action": [
          "organizations:List*",
          "organizations:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowAssumeRoleInMemberAccounts",
        "Effect": "Allow",
        "Action": [
          "sts:AssumeRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/stacksets-exec-*"
        ]
      }
    ]
  },
  "Health_OrganizationsServiceRolePolicy": {
    "policy": {
      "PolicyName": "Health_OrganizationsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4EZKGOJYHQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/Health_OrganizationsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS Health policy to enable Organizational View feature",
      "CreateDate": "2019-12-16T13:28:21.000Z",
      "UpdateDate": "2024-02-06T16:07:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "HealthAPIOrganizationView0",
        "Effect": "Allow",
        "Action": [
          "organizations:ListAccounts",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListDelegatedAdministrators",
          "organizations:DescribeOrganization",
          "organizations:DescribeAccount"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSImageBuilderReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSImageBuilderReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4OD5TC5BXP",
      "Arn": "arn:aws:iam::aws:policy/AWSImageBuilderReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to all AWS Image Builder actions.",
      "CreateDate": "2019-12-19T22:29:23.000Z",
      "UpdateDate": "2019-12-19T22:29:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "imagebuilder:Get*",
          "imagebuilder:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder"
        ]
      }
    ]
  },
  "AWSImageBuilderFullAccess": {
    "policy": {
      "PolicyName": "AWSImageBuilderFullAccess",
      "PolicyId": "ANPAZKAPJZG4EO4HCSNZH",
      "Arn": "arn:aws:iam::aws:policy/AWSImageBuilderFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all AWS Image Builder actions and resource scoped access to related AWS services.",
      "CreateDate": "2019-12-20T18:25:12.000Z",
      "UpdateDate": "2021-04-13T17:33:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "imagebuilder:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:*imagebuilder*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "license-manager:ListLicenseConfigurations",
          "license-manager:ListLicenseSpecificationsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/*imagebuilder*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListInstanceProfiles",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/*imagebuilder*",
          "arn:aws:iam::*:role/*imagebuilder*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3::*:*imagebuilder*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeSnapshots",
          "ec2:DescribeVpcs",
          "ec2:DescribeRegions",
          "ec2:DescribeVolumes",
          "ec2:DescribeSubnets",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeInstanceTypeOfferings",
          "ec2:DescribeLaunchTemplates"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "EC2FleetTimeShiftableServiceRolePolicy": {
    "policy": {
      "PolicyName": "EC2FleetTimeShiftableServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IU3TFNWBH",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/EC2FleetTimeShiftableServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to EC2 Fleet to launch instances in the future.",
      "CreateDate": "2019-12-23T19:47:15.000Z",
      "UpdateDate": "2019-12-23T19:47:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeSubnets",
          "ec2:DescribeInstances",
          "ec2:RunInstances",
          "ec2:CreateFleet"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:spot-instances-request/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRekognitionCustomLabelsFullAccess": {
    "policy": {
      "PolicyName": "AmazonRekognitionCustomLabelsFullAccess",
      "PolicyId": "ANPAZKAPJZG4OJEQDEQQQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonRekognitionCustomLabelsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy specifies rekognition and s3 permissions required by Amazon Rekognition Custom Labels feature.",
      "CreateDate": "2020-01-08T19:18:34.000Z",
      "UpdateDate": "2022-08-16T20:20:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:GetObjectAcl",
          "s3:GetObjectTagging",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*custom-labels*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rekognition:CreateProject",
          "rekognition:CreateProjectVersion",
          "rekognition:StartProjectVersion",
          "rekognition:StopProjectVersion",
          "rekognition:DescribeProjects",
          "rekognition:DescribeProjectVersions",
          "rekognition:DetectCustomLabels",
          "rekognition:DeleteProject",
          "rekognition:DeleteProjectVersion",
          "rekognition:TagResource",
          "rekognition:UntagResource",
          "rekognition:ListTagsForResource",
          "rekognition:CreateDataset",
          "rekognition:ListDatasetEntries",
          "rekognition:ListDatasetLabels",
          "rekognition:DescribeDataset",
          "rekognition:UpdateDatasetEntries",
          "rekognition:DistributeDatasetEntries",
          "rekognition:DeleteDataset",
          "rekognition:CopyProjectVersion",
          "rekognition:PutProjectPolicy",
          "rekognition:ListProjectPolicies",
          "rekognition:DeleteProjectPolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkDocsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonWorkDocsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4EDG6WGO5A",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkDocsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon WorkDocs via the AWS Management Console",
      "CreateDate": "2020-01-08T23:49:59.000Z",
      "UpdateDate": "2020-01-08T23:49:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "workdocs:Describe*",
          "ds:DescribeDirectories",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticFileSystemClientReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonElasticFileSystemClientReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4LBXR6UPYS",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only client access to an Amazon EFS file system",
      "CreateDate": "2020-01-13T16:24:36.000Z",
      "UpdateDate": "2020-01-13T16:24:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:ClientMount",
          "elasticfilesystem:DescribeMountTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticFileSystemClientFullAccess": {
    "policy": {
      "PolicyName": "AmazonElasticFileSystemClientFullAccess",
      "PolicyId": "ANPAZKAPJZG4KAMR2MLDF",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides root client access to an Amazon EFS file system",
      "CreateDate": "2020-01-13T16:27:00.000Z",
      "UpdateDate": "2020-01-13T16:27:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:ClientMount",
          "elasticfilesystem:ClientRootAccess",
          "elasticfilesystem:ClientWrite",
          "elasticfilesystem:DescribeMountTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticFileSystemClientReadWriteAccess": {
    "policy": {
      "PolicyName": "AmazonElasticFileSystemClientReadWriteAccess",
      "PolicyId": "ANPAZKAPJZG4H74P6RBOF",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read and write client access to an Amazon EFS file system",
      "CreateDate": "2020-01-13T16:21:55.000Z",
      "UpdateDate": "2020-01-13T16:21:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:ClientMount",
          "elasticfilesystem:ClientWrite",
          "elasticfilesystem:DescribeMountTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSQuickSightSageMakerPolicy": {
    "policy": {
      "PolicyName": "AWSQuickSightSageMakerPolicy",
      "PolicyId": "ANPAZKAPJZG4MCLBVDT2I",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSQuickSightSageMakerPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Amazon SageMaker resources from Amazon QuickSight",
      "CreateDate": "2020-01-17T17:18:13.000Z",
      "UpdateDate": "2023-10-30T17:57:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SageMakerTransformJobAccess",
        "Effect": "Allow",
        "Action": [
          "sagemaker:DescribeTransformJob",
          "sagemaker:StopTransformJob",
          "sagemaker:CreateTransformJob"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:transform-job/quicksight-auto-generated-*"
        ]
      },
      {
        "Sid": "SageMakerModelReadAccess",
        "Effect": "Allow",
        "Action": [
          "sagemaker:ListModels",
          "sagemaker:DescribeModel"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3ObjectReadAccess",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::quicksight-ml.*",
          "arn:aws:s3:::sagemaker*"
        ]
      },
      {
        "Sid": "S3ObjectUpdateAccess",
        "Effect": "Allow",
        "Action": [
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker*"
        ]
      },
      {
        "Sid": "S3BucketReadAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker*"
        ]
      }
    ]
  },
  "AmazonManagedBlockchainServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonManagedBlockchainServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4MMO7477QN",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonManagedBlockchainServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by Amazon Managed Blockchain",
      "CreateDate": "2020-01-17T19:51:28.000Z",
      "UpdateDate": "2020-01-17T19:51:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/managedblockchain/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/managedblockchain/*:log-stream:*"
        ]
      }
    ]
  },
  "AWSAppSyncServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSAppSyncServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IKBIQXBOO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSAppSyncServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS services and resources used or managed by AppSync",
      "CreateDate": "2020-01-21T19:56:53.000Z",
      "UpdateDate": "2020-01-21T19:56:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:GetSamplingTargets",
          "xray:GetSamplingRules",
          "xray:GetSamplingStatisticSummaries"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonChimeSDK": {
    "policy": {
      "PolicyName": "AmazonChimeSDK",
      "PolicyId": "ANPAZKAPJZG4ACM6EA4B7",
      "Arn": "arn:aws:iam::aws:policy/AmazonChimeSDK",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Amazon Chime SDK operations",
      "CreateDate": "2020-02-04T21:53:37.000Z",
      "UpdateDate": "2023-01-10T18:05:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "chime:CreateMeeting",
          "chime:CreateMeetingWithAttendees",
          "chime:DeleteMeeting",
          "chime:GetMeeting",
          "chime:ListMeetings",
          "chime:CreateAttendee",
          "chime:BatchCreateAttendee",
          "chime:DeleteAttendee",
          "chime:GetAttendee",
          "chime:ListAttendees",
          "chime:ListAttendeeTags",
          "chime:ListMeetingTags",
          "chime:ListTagsForResource",
          "chime:TagAttendee",
          "chime:TagMeeting",
          "chime:TagResource",
          "chime:UntagAttendee",
          "chime:UntagMeeting",
          "chime:UntagResource",
          "chime:StartMeetingTranscription",
          "chime:StopMeetingTranscription",
          "chime:CreateMediaCapturePipeline",
          "chime:CreateMediaConcatenationPipeline",
          "chime:CreateMediaLiveConnectorPipeline",
          "chime:DeleteMediaCapturePipeline",
          "chime:DeleteMediaPipeline",
          "chime:GetMediaCapturePipeline",
          "chime:GetMediaPipeline",
          "chime:ListMediaCapturePipelines",
          "chime:ListMediaPipelines"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTDeviceTesterForFreeRTOSFullAccess": {
    "policy": {
      "PolicyName": "AWSIoTDeviceTesterForFreeRTOSFullAccess",
      "PolicyId": "ANPAZKAPJZG4ADNJ2YUUH",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTDeviceTesterForFreeRTOSFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS IoT Device Tester to run the FreeRTOS qualification suite by allowing access to services including IoT, S3, and IAM",
      "CreateDate": "2020-02-12T20:33:53.000Z",
      "UpdateDate": "2023-08-10T20:30:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "VisualEditor0",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/idt-*"
        ]
      },
      {
        "Sid": "VisualEditor1",
        "Effect": "Allow",
        "Action": [
          "iot:DeleteThing",
          "iot:AttachThingPrincipal",
          "iot:DeleteCertificate",
          "iot:GetRegistrationCode",
          "iot:CreatePolicy",
          "iot:UpdateCACertificate",
          "s3:ListBucket",
          "iot:DescribeEndpoint",
          "iot:CreateOTAUpdate",
          "iot:CreateStream",
          "signer:ListSigningJobs",
          "acm:ListCertificates",
          "iot:CreateKeysAndCertificate",
          "iot:UpdateCertificate",
          "iot:CreateCertificateFromCsr",
          "iot:DetachThingPrincipal",
          "iot:RegisterCACertificate",
          "iot:CreateThing",
          "iam:ListRoles",
          "iot:RegisterCertificate",
          "iot:DeleteCACertificate",
          "signer:PutSigningProfile",
          "s3:ListAllMyBuckets",
          "signer:ListSigningPlatforms",
          "iot-device-tester:SendMetrics",
          "iot-device-tester:SupportedVersion",
          "iot-device-tester:LatestIdt",
          "iot-device-tester:CheckVersion",
          "iot-device-tester:DownloadTestSuite"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VisualEditor2",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "signer:StartSigningJob",
          "acm:GetCertificate",
          "signer:DescribeSigningJob",
          "s3:CreateBucket",
          "execute-api:Invoke",
          "s3:DeleteBucket",
          "s3:PutBucketVersioning",
          "signer:CancelSigningProfile"
        ],
        "Resource": [
          "arn:aws:execute-api:us-east-1:098862408343:9xpmnvs5h4/prod/POST/metrics",
          "arn:aws:signer:*:*:/signing-profiles/*",
          "arn:aws:signer:*:*:/signing-jobs/*",
          "arn:aws:iam::*:role/idt-*",
          "arn:aws:acm:*:*:certificate/*",
          "arn:aws:s3:::idt-*",
          "arn:aws:s3:::afr-ota*"
        ]
      },
      {
        "Sid": "VisualEditor3",
        "Effect": "Allow",
        "Action": [
          "iot:DeleteStream",
          "iot:DeleteCertificate",
          "iot:AttachPolicy",
          "iot:DetachPolicy",
          "iot:DeletePolicy",
          "s3:ListBucketVersions",
          "iot:UpdateCertificate",
          "iot:GetOTAUpdate",
          "iot:DeleteOTAUpdate",
          "iot:DescribeJobExecution"
        ],
        "Resource": [
          "arn:aws:s3:::afr-ota*",
          "arn:aws:iot:*:*:thinggroup/idt*",
          "arn:aws:iam::*:role/idt-*"
        ]
      },
      {
        "Sid": "VisualEditor4",
        "Effect": "Allow",
        "Action": [
          "iot:DeleteCertificate",
          "iot:AttachPolicy",
          "iot:DetachPolicy",
          "s3:DeleteObjectVersion",
          "iot:DeleteOTAUpdate",
          "s3:PutObject",
          "s3:GetObject",
          "iot:DeleteStream",
          "iot:DeletePolicy",
          "s3:DeleteObject",
          "iot:UpdateCertificate",
          "iot:GetOTAUpdate",
          "s3:GetObjectVersion",
          "iot:DescribeJobExecution"
        ],
        "Resource": [
          "arn:aws:s3:::afr-ota*/*",
          "arn:aws:s3:::idt-*/*",
          "arn:aws:iot:*:*:policy/idt*",
          "arn:aws:iam::*:role/idt-*",
          "arn:aws:iot:*:*:otaupdate/idt*",
          "arn:aws:iot:*:*:thing/idt*",
          "arn:aws:iot:*:*:cert/*",
          "arn:aws:iot:*:*:job/*",
          "arn:aws:iot:*:*:stream/*"
        ]
      },
      {
        "Sid": "VisualEditor5",
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::afr-ota*/*",
          "arn:aws:s3:::idt-*/*"
        ]
      },
      {
        "Sid": "VisualEditor6",
        "Effect": "Allow",
        "Action": [
          "iot:CancelJobExecution"
        ],
        "Resource": [
          "arn:aws:iot:*:*:job/*",
          "arn:aws:iot:*:*:thing/idt*"
        ]
      },
      {
        "Sid": "VisualEditor7",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "VisualEditor8",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "VisualEditor9",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "VisualEditor10",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:key-pair/*",
          "arn:aws:ec2:*:*:placement-group/*",
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Sid": "VisualEditor11",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "VisualEditor12",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeSecurityGroups",
          "ssm:DescribeParameters",
          "ssm:GetParameters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VisualEditor13",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AWSIoTDeviceTesterForGreengrassFullAccess": {
    "policy": {
      "PolicyName": "AWSIoTDeviceTesterForGreengrassFullAccess",
      "PolicyId": "ANPAZKAPJZG4ORKVZSPY7",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTDeviceTesterForGreengrassFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS IoT Device Tester to run the AWS Greengrass qualification suite by allowing access to related services including Lambda, IoT, API Gateway, IAM",
      "CreateDate": "2020-02-20T21:21:27.000Z",
      "UpdateDate": "2020-06-25T17:01:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "VisualEditor1",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/idt-*"
        ]
      },
      {
        "Sid": "VisualEditor2",
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction",
          "iot:DeleteCertificate",
          "lambda:DeleteFunction",
          "execute-api:Invoke",
          "iot:UpdateCertificate"
        ],
        "Resource": [
          "arn:aws:execute-api:us-east-1:098862408343:9xpmnvs5h4/prod/POST/metrics",
          "arn:aws:lambda:*:*:function:idt-*",
          "arn:aws:iot:*:*:cert/*"
        ]
      },
      {
        "Sid": "VisualEditor3",
        "Effect": "Allow",
        "Action": [
          "iot:CreateThing",
          "iot:DeleteThing"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/idt-*",
          "arn:aws:iot:*:*:cert/*"
        ]
      },
      {
        "Sid": "VisualEditor4",
        "Effect": "Allow",
        "Action": [
          "iot:AttachPolicy",
          "iot:DetachPolicy",
          "iot:DeletePolicy"
        ],
        "Resource": [
          "arn:aws:iot:*:*:policy/idt-*",
          "arn:aws:iot:*:*:cert/*"
        ]
      },
      {
        "Sid": "VisualEditor5",
        "Effect": "Allow",
        "Action": [
          "iot:CreateJob",
          "iot:DescribeJob",
          "iot:DescribeJobExecution",
          "iot:DeleteJob"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/idt-*",
          "arn:aws:iot:*:*:job/*"
        ]
      },
      {
        "Sid": "VisualEditor6",
        "Effect": "Allow",
        "Action": [
          "iot:DescribeEndpoint",
          "greengrass:*",
          "iam:ListAttachedRolePolicies",
          "iot:CreatePolicy",
          "iot:GetThingShadow",
          "iot:CreateKeysAndCertificate",
          "iot:ListThings",
          "iot:UpdateThingShadow",
          "iot:CreateCertificateFromCsr",
          "iot-device-tester:SendMetrics",
          "iot-device-tester:SupportedVersion",
          "iot-device-tester:LatestIdt",
          "iot-device-tester:CheckVersion",
          "iot-device-tester:DownloadTestSuite"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VisualEditor7",
        "Effect": "Allow",
        "Action": [
          "iot:DetachThingPrincipal",
          "iot:AttachThingPrincipal"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/idt-*",
          "arn:aws:iot:*:*:cert/*"
        ]
      },
      {
        "Sid": "VisualEditor8",
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:DeleteObjectVersion",
          "s3:ListBucketVersions",
          "s3:CreateBucket",
          "s3:DeleteObject",
          "s3:DeleteBucket"
        ],
        "Resource": [
          "arn:aws:s3:::idt*"
        ]
      }
    ]
  },
  "AmazonEKSServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonEKSServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4KZBLSP26Y",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonEKSServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "A Service-Linked Role required for Amazon EKS to call AWS services on your behalf.",
      "CreateDate": "2020-02-21T20:10:47.000Z",
      "UpdateDate": "2020-05-27T19:30:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DetachNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DescribeInstances",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:CreateNetworkInterfacePermission",
          "iam:ListAttachedRolePolicies",
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSecurityGroup",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupIngress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53:AssociateVPCWithHostedZone"
        ],
        "Resource": [
          "arn:aws:route53:::hostedzone/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/eks/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*"
        ]
      }
    ]
  },
  "ComputeOptimizerReadOnlyAccess": {
    "policy": {
      "PolicyName": "ComputeOptimizerReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4FI27MEARJ",
      "Arn": "arn:aws:iam::aws:policy/ComputeOptimizerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to ComputeOptimizer.",
      "CreateDate": "2020-03-07T00:11:02.000Z",
      "UpdateDate": "2023-08-28T19:22:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "compute-optimizer:DescribeRecommendationExportJobs",
          "compute-optimizer:GetEnrollmentStatus",
          "compute-optimizer:GetEnrollmentStatusesForOrganization",
          "compute-optimizer:GetRecommendationSummaries",
          "compute-optimizer:GetEC2InstanceRecommendations",
          "compute-optimizer:GetEC2RecommendationProjectedMetrics",
          "compute-optimizer:GetAutoScalingGroupRecommendations",
          "compute-optimizer:GetEBSVolumeRecommendations",
          "compute-optimizer:GetLambdaFunctionRecommendations",
          "compute-optimizer:GetRecommendationPreferences",
          "compute-optimizer:GetEffectiveRecommendationPreferences",
          "compute-optimizer:GetECSServiceRecommendations",
          "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
          "compute-optimizer:GetLicenseRecommendations",
          "ec2:DescribeInstances",
          "ec2:DescribeVolumes",
          "ecs:ListServices",
          "ecs:ListClusters",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "lambda:ListFunctions",
          "lambda:ListProvisionedConcurrencyConfigs",
          "cloudwatch:GetMetricData",
          "organizations:ListAccounts",
          "organizations:DescribeOrganization",
          "organizations:DescribeAccount"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingCassandraTablePolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingCassandraTablePolicy",
      "PolicyId": "ANPAZKAPJZG4BOOOZAOTV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingCassandraTablePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access Cassandra and CloudWatch.",
      "CreateDate": "2020-03-18T22:49:23.000Z",
      "UpdateDate": "2020-03-18T22:49:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cassandra:Select"
        ],
        "Resource": [
          "arn:*:cassandra:*:*:/keyspace/system/table/*",
          "arn:*:cassandra:*:*:/keyspace/system_schema/table/*",
          "arn:*:cassandra:*:*:/keyspace/system_schema_mcs/table/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cassandra:Alter",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ElementalAppliancesSoftwareReadOnlyAccess": {
    "policy": {
      "PolicyName": "ElementalAppliancesSoftwareReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4CLKYU5WOM",
      "Arn": "arn:aws:iam::aws:policy/ElementalAppliancesSoftwareReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Read-only access to view Elemental Appliances and Software quotes and orders",
      "CreateDate": "2020-04-01T22:31:09.000Z",
      "UpdateDate": "2020-04-01T22:31:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elemental-appliances-software:List*",
          "elemental-appliances-software:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "GameLiftGameServerGroupPolicy": {
    "policy": {
      "PolicyName": "GameLiftGameServerGroupPolicy",
      "PolicyId": "ANPAZKAPJZG4JTX4JYBF6",
      "Arn": "arn:aws:iam::aws:policy/GameLiftGameServerGroupPolicy",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to allow Gamelift GameServerGroups to manage customer resources",
      "CreateDate": "2020-04-03T23:12:19.000Z",
      "UpdateDate": "2020-05-13T17:27:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:CompleteLifecycleAction",
          "autoscaling:ResumeProcesses",
          "autoscaling:EnterStandby",
          "autoscaling:SetInstanceProtection",
          "autoscaling:UpdateAutoScalingGroup",
          "autoscaling:SuspendProcesses",
          "autoscaling:DetachInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "autoscaling:DescribeAutoScalingGroups",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:*:sns:*:*:ActivatingLifecycleHookTopic-*",
          "arn:*:sns:*:*:TerminatingLifecycleHookTopic-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSWAFConsoleFullAccess": {
    "policy": {
      "PolicyName": "AWSWAFConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4AZOTQ7KAT",
      "Arn": "arn:aws:iam::aws:policy/AWSWAFConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS WAF via the AWS Management Console. Note that this policy also grants permissions to list and update Amazon CloudFront distributions, permissions to view load balancers on AWS Elastic Load Balancing, permissions to view Amazon API Gateway REST APIs and stages, permissions to list and view Amazon CloudWatch metrics, and permissions to view regions enabled within the account.",
      "CreateDate": "2020-04-06T18:38:38.000Z",
      "UpdateDate": "2023-06-05T20:56:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowUseOfAWSWAF",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET",
          "apigateway:SetWebACL",
          "cloudfront:ListDistributions",
          "cloudfront:ListDistributionsByWebACLId",
          "cloudfront:UpdateDistribution",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "ec2:DescribeRegions",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:SetWebACL",
          "appsync:ListGraphqlApis",
          "appsync:SetWebACL",
          "waf-regional:*",
          "waf:*",
          "wafv2:*",
          "s3:ListAllMyBuckets",
          "logs:DescribeResourcePolicies",
          "logs:DescribeLogGroups",
          "cognito-idp:ListUserPools",
          "cognito-idp:AssociateWebACL",
          "cognito-idp:DisassociateWebACL",
          "cognito-idp:ListResourcesForWebACL",
          "cognito-idp:GetWebACLForResource",
          "apprunner:AssociateWebAcl",
          "apprunner:DisassociateWebAcl",
          "apprunner:DescribeWebAclForService",
          "apprunner:ListServices",
          "apprunner:ListAssociatedServicesForWebAcl",
          "ec2:AssociateVerifiedAccessInstanceWebAcl",
          "ec2:DisassociateVerifiedAccessInstanceWebAcl",
          "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
          "ec2:GetVerifiedAccessInstanceWebAcl",
          "ec2:DescribeVerifiedAccessInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowLogDeliverySubscription",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:DeleteLogDelivery"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Sid": "GrantLogDeliveryPermissionForS3Bucket",
        "Action": [
          "s3:PutBucketPolicy",
          "s3:GetBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::aws-waf-logs-*"
        ],
        "Effect": "Allow"
      },
      {
        "Sid": "GrantLogDeliveryPermissionForCloudWatchLogGroup",
        "Action": [
          "logs:PutResourcePolicy"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AWSWAFConsoleReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSWAFConsoleReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4NCJLTIT64",
      "Arn": "arn:aws:iam::aws:policy/AWSWAFConsoleReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to AWS WAF via the AWS Management Console. Note that this policy also grants permissions to list Amazon CloudFront distributions, permissions to view load balancers on AWS Elastic Load Balancing, permissions to view Amazon API Gateway REST APIs and stages, permissions to list and view Amazon CloudWatch metrics, and permissions to view regions enabled within the account.",
      "CreateDate": "2020-04-06T18:43:24.000Z",
      "UpdateDate": "2023-06-05T20:56:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "apigateway:GET",
          "cloudfront:ListDistributions",
          "cloudfront:ListDistributionsByWebACLId",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "ec2:DescribeRegions",
          "elasticloadbalancing:DescribeLoadBalancers",
          "appsync:ListGraphqlApis",
          "waf-regional:Get*",
          "waf-regional:List*",
          "waf:Get*",
          "waf:List*",
          "wafv2:Describe*",
          "wafv2:Get*",
          "wafv2:List*",
          "wafv2:CheckCapacity",
          "cognito-idp:ListUserPools",
          "cognito-idp:ListResourcesForWebACL",
          "cognito-idp:GetWebACLForResource",
          "apprunner:DescribeWebAclForService",
          "apprunner:ListServices",
          "apprunner:ListAssociatedServicesForWebAcl",
          "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
          "ec2:GetVerifiedAccessInstanceWebAcl",
          "ec2:DescribeVerifiedAccessInstances"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkDocsFullAccess": {
    "policy": {
      "PolicyName": "AmazonWorkDocsFullAccess",
      "PolicyId": "ANPAZKAPJZG4GTERAZYCR",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkDocsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon WorkDocs via the AWS Management Console",
      "CreateDate": "2020-04-16T23:05:11.000Z",
      "UpdateDate": "2020-04-16T23:05:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "workdocs:*",
          "ds:DescribeDirectories",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonAugmentedAIIntegratedAPIAccess": {
    "policy": {
      "PolicyName": "AmazonAugmentedAIIntegratedAPIAccess",
      "PolicyId": "ANPAZKAPJZG4A7KC4RFTV",
      "Arn": "arn:aws:iam::aws:policy/AmazonAugmentedAIIntegratedAPIAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to perform all operations Amazon Augmented AI resources, including FlowDefinitions, HumanTaskUis and HumanLoops. Also provides access to those operations of services that are integrated with Amazon Augmented AI. ",
      "CreateDate": "2020-04-22T20:47:32.000Z",
      "UpdateDate": "2020-04-22T20:47:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:*HumanLoop",
          "sagemaker:*HumanLoops",
          "sagemaker:*FlowDefinition",
          "sagemaker:*FlowDefinitions",
          "sagemaker:*HumanTaskUi",
          "sagemaker:*HumanTaskUis"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "textract:AnalyzeDocument"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rekognition:DetectModerationLabels"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AmazonKeyspacesFullAccess": {
    "policy": {
      "PolicyName": "AmazonKeyspacesFullAccess",
      "PolicyId": "ANPAZKAPJZG4HMS72N6JG",
      "Arn": "arn:aws:iam::aws:policy/AmazonKeyspacesFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide full access to Amazon Keyspaces",
      "CreateDate": "2020-04-23T17:06:37.000Z",
      "UpdateDate": "2023-10-03T19:12:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CassandraFullAccess",
        "Effect": "Allow",
        "Action": [
          "cassandra:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ApplicationAutoscalingFullAccess",
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeleteScheduledAction",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:DescribeScheduledActions",
          "application-autoscaling:PutScheduledAction",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:RegisterScalableTarget",
          "kms:DescribeKey",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudwatchAlarmsFullAccess",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:PutMetricAlarm"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ApplicationAutoscalingServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/cassandra.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_CassandraTable"
        ]
      },
      {
        "Sid": "KeyspacesReplicationServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/replication.cassandra.amazonaws.com/AWSServiceRoleForKeyspacesReplication"
        ]
      },
      {
        "Sid": "Ec2VpcReadAccess",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKeyspacesReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonKeyspacesReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4LHLFMFIPN",
      "Arn": "arn:aws:iam::aws:policy/AmazonKeyspacesReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide read only access to Amazon Keyspaces",
      "CreateDate": "2020-04-23T17:07:14.000Z",
      "UpdateDate": "2022-07-07T14:54:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cassandra:Select"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:DescribeScheduledActions",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "kms:DescribeKey",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDetectiveFullAccess": {
    "policy": {
      "PolicyName": "AmazonDetectiveFullAccess",
      "PolicyId": "ANPAZKAPJZG4IRLX3QVOO",
      "Arn": "arn:aws:iam::aws:policy/AmazonDetectiveFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": " Provides full access to Amazon Detective service and scoped access to the console UI dependencies",
      "CreateDate": "2020-04-30T17:57:15.000Z",
      "UpdateDate": "2023-05-17T19:39:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "detective:*",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "guardduty:ArchiveFindings"
        ],
        "Resource": [
          "arn:aws:guardduty:*:*:detector/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "guardduty:GetFindings",
          "guardduty:ListDetectors"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "securityhub:GetFindings"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPurchaseOrdersServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSPurchaseOrdersServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4KQXTYO5FP",
      "Arn": "arn:aws:iam::aws:policy/AWSPurchaseOrdersServiceRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to view and modify purchase orders on billing console",
      "CreateDate": "2020-05-06T18:15:47.000Z",
      "UpdateDate": "2023-07-17T18:59:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "account:GetAccountInformation",
          "account:GetContactInformation",
          "aws-portal:*Billing",
          "consolidatedbilling:GetAccountBillingRole",
          "invoicing:GetInvoicePDF",
          "payments:GetPaymentInstrument",
          "payments:ListPaymentPreferences",
          "purchase-orders:AddPurchaseOrder",
          "purchase-orders:DeletePurchaseOrder",
          "purchase-orders:GetPurchaseOrder",
          "purchase-orders:ListPurchaseOrderInvoices",
          "purchase-orders:ListPurchaseOrders",
          "purchase-orders:ListTagsForResource",
          "purchase-orders:ModifyPurchaseOrders",
          "purchase-orders:TagResource",
          "purchase-orders:UntagResource",
          "purchase-orders:UpdatePurchaseOrder",
          "purchase-orders:UpdatePurchaseOrderStatus",
          "purchase-orders:ViewPurchaseOrders",
          "tax:ListTaxRegistrations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ServerMigrationServiceConsoleFullAccess": {
    "policy": {
      "PolicyName": "ServerMigrationServiceConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4IIEMRGEYB",
      "Arn": "arn:aws:iam::aws:policy/ServerMigrationServiceConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Required permissions to use all features of the Server Migration Service Console",
      "CreateDate": "2020-05-09T17:18:57.000Z",
      "UpdateDate": "2020-07-20T22:00:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "sms:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "cloudformation:ListStacks",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeStackResources"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::sms-app-*/*"
        ]
      },
      {
        "Action": [
          "ec2:DescribeKeyPairs",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:ListRoles"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBackupServiceLinkedRolePolicyForBackupTest": {
    "policy": {
      "PolicyName": "AWSBackupServiceLinkedRolePolicyForBackupTest",
      "PolicyId": "ANPAZKAPJZG4KMHRZD5LV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSBackupServiceLinkedRolePolicyForBackupTest",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Backup permission to create backups on your behalf across AWS services",
      "CreateDate": "2020-05-12T17:37:29.000Z",
      "UpdateDate": "2020-05-12T17:37:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "elasticfilesystem:Backup",
          "elasticfilesystem:DescribeTags"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:file-system/*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonSSMPatchAssociation": {
    "policy": {
      "PolicyName": "AmazonSSMPatchAssociation",
      "PolicyId": "ANPAZKAPJZG4EWLEL5ZX7",
      "Arn": "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide access to child instances for patch association operation.",
      "CreateDate": "2020-05-13T16:00:42.000Z",
      "UpdateDate": "2020-05-13T16:00:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeEffectivePatchesForPatchBaseline"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:patchbaseline/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetPatchBaseline"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:patchbaseline/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribePatchBaselines"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloud9SSMInstanceProfile": {
    "policy": {
      "PolicyName": "AWSCloud9SSMInstanceProfile",
      "PolicyId": "ANPAZKAPJZG4IQOSNAKW6",
      "Arn": "arn:aws:iam::aws:policy/AWSCloud9SSMInstanceProfile",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy will be used to attach a role on a InstanceProfile which will allow Cloud9 to use the SSM Session Manager to connect to the instance",
      "CreateDate": "2020-05-14T11:40:49.000Z",
      "UpdateDate": "2020-05-14T11:40:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssmmessages:CreateControlChannel",
          "ssmmessages:CreateDataChannel",
          "ssmmessages:OpenControlChannel",
          "ssmmessages:OpenDataChannel",
          "ssm:UpdateInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeDeployRoleForCloudFormation": {
    "policy": {
      "PolicyName": "AWSCodeDeployRoleForCloudFormation",
      "PolicyId": "ANPAZKAPJZG4CO24UTMFH",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForCloudFormation",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides CodeDeploy service access to invoke Lambda function on your behalf to perform blue/green deployment through CloudFormation.",
      "CreateDate": "2020-05-19T17:12:52.000Z",
      "UpdateDate": "2020-05-19T17:12:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:CodeDeployHook_*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AWSIoTSiteWiseMonitorPortalAccess": {
    "policy": {
      "PolicyName": "AWSIoTSiteWiseMonitorPortalAccess",
      "PolicyId": "ANPAZKAPJZG4E6CZDALWJ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTSiteWiseMonitorPortalAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions to access AWS IoT SiteWise assets and asset data, create AWS IoT SiteWise Monitor resources, and list AWS SSO users.",
      "CreateDate": "2020-05-19T20:01:21.000Z",
      "UpdateDate": "2020-05-19T20:01:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotsitewise:CreateProject",
          "iotsitewise:DescribeProject",
          "iotsitewise:UpdateProject",
          "iotsitewise:DeleteProject",
          "iotsitewise:ListProjects",
          "iotsitewise:BatchAssociateProjectAssets",
          "iotsitewise:BatchDisassociateProjectAssets",
          "iotsitewise:ListProjectAssets",
          "iotsitewise:CreateDashboard",
          "iotsitewise:DescribeDashboard",
          "iotsitewise:UpdateDashboard",
          "iotsitewise:DeleteDashboard",
          "iotsitewise:ListDashboards",
          "iotsitewise:CreateAccessPolicy",
          "iotsitewise:DescribeAccessPolicy",
          "iotsitewise:UpdateAccessPolicy",
          "iotsitewise:DeleteAccessPolicy",
          "iotsitewise:ListAccessPolicies",
          "iotsitewise:DescribeAsset",
          "iotsitewise:ListAssets",
          "iotsitewise:ListAssociatedAssets",
          "iotsitewise:DescribeAssetProperty",
          "iotsitewise:GetAssetPropertyValue",
          "iotsitewise:GetAssetPropertyValueHistory",
          "iotsitewise:GetAssetPropertyAggregates",
          "sso-directory:DescribeUsers"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSThinkboxAWSPortalGatewayPolicy": {
    "policy": {
      "PolicyName": "AWSThinkboxAWSPortalGatewayPolicy",
      "PolicyId": "ANPAZKAPJZG4FP27FM4BH",
      "Arn": "arn:aws:iam::aws:policy/AWSThinkboxAWSPortalGatewayPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants the AWS Portal Gateway machine the necessary permissions required for normal operation.",
      "CreateDate": "2020-05-27T19:05:00.000Z",
      "UpdateDate": "2020-06-30T16:02:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents",
          "logs:DescribeLogStreams",
          "logs:DescribeLogGroups",
          "logs:CreateLogStream"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/thinkbox*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-portal-cache*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:Scan"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::stack*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::stack*/gateway_certs/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:rcs-tls-pw-stack*"
        ]
      }
    ]
  },
  "AWSThinkboxAWSPortalWorkerPolicy": {
    "policy": {
      "PolicyName": "AWSThinkboxAWSPortalWorkerPolicy",
      "PolicyId": "ANPAZKAPJZG4PI3G53MMS",
      "Arn": "arn:aws:iam::aws:policy/AWSThinkboxAWSPortalWorkerPolicy",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants the Deadline Workers in AWS Portal the necessary permissions required for normal operation.",
      "CreateDate": "2020-05-27T19:15:05.000Z",
      "UpdateDate": "2020-12-07T23:27:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-portal-cache*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::stack*/gateway_certs/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams",
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/thinkbox*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:SendMessage",
          "sqs:GetQueueUrl"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:DeadlineAWS*"
        ]
      }
    ]
  },
  "AWSThinkboxAssetServerPolicy": {
    "policy": {
      "PolicyName": "AWSThinkboxAssetServerPolicy",
      "PolicyId": "ANPAZKAPJZG4KDWZE3HCT",
      "Arn": "arn:aws:iam::aws:policy/AWSThinkboxAssetServerPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants the AWS Portal Asset Server the necessary permissions required for normal operation.",
      "CreateDate": "2020-05-27T19:18:53.000Z",
      "UpdateDate": "2020-05-27T19:18:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/thinkbox*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-portal-cache*"
        ]
      }
    ]
  },
  "AWSThinkboxDeadlineResourceTrackerAccessPolicy": {
    "policy": {
      "PolicyName": "AWSThinkboxDeadlineResourceTrackerAccessPolicy",
      "PolicyId": "ANPAZKAPJZG4OUKJ73IOS",
      "Arn": "arn:aws:iam::aws:policy/AWSThinkboxDeadlineResourceTrackerAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions required for the operation of AWS Thinkbox's Deadline Resource Tracker.  This includes full access to some EC2 actions, including DeleteFleets and CancelSpotFleetRequests.",
      "CreateDate": "2020-05-27T19:25:05.000Z",
      "UpdateDate": "2020-05-27T19:25:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:ListStreams"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:BatchWriteItem",
          "dynamodb:DeleteItem",
          "dynamodb:DescribeStream",
          "dynamodb:DescribeTable",
          "dynamodb:GetItem",
          "dynamodb:GetRecords",
          "dynamodb:GetShardIterator",
          "dynamodb:PutItem",
          "dynamodb:Scan",
          "dynamodb:UpdateItem",
          "dynamodb:UpdateTable"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeHealth*",
          "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeInfo*",
          "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CancelSpotFleetRequests",
          "ec2:DeleteFleets",
          "ec2:DescribeFleetInstances",
          "ec2:DescribeFleets",
          "ec2:DescribeInstances",
          "ec2:DescribeSpotFleetInstances",
          "ec2:DescribeSpotFleetRequests"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RebootInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:PutEvents"
        ],
        "Resource": [
          "arn:aws:events:*:*:event-bus/default"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/lambda/DeadlineResourceTracker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:DeleteMessage",
          "sqs:GetQueueAttributes",
          "sqs:ReceiveMessage"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:DeadlineAWSComputeNodeStateMessageQueue*"
        ]
      }
    ]
  },
  "AWSThinkboxDeadlineResourceTrackerAdminPolicy": {
    "policy": {
      "PolicyName": "AWSThinkboxDeadlineResourceTrackerAdminPolicy",
      "PolicyId": "ANPAZKAPJZG4FKWWNUOP2",
      "Arn": "arn:aws:iam::aws:policy/AWSThinkboxDeadlineResourceTrackerAdminPolicy",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions required to create, destroy, and administer AWS Thinkbox's Deadline Resource Tracker.",
      "CreateDate": "2020-05-27T19:29:09.000Z",
      "UpdateDate": "2024-04-12T20:55:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker1",
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:RegisterScalableTarget"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker2",
        "Effect": "Allow",
        "Action": [
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker3",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:UpdateStack",
          "cloudformation:DescribeStacks",
          "cloudformation:UpdateTerminationProtection",
          "cloudformation:TagResource",
          "cloudformation:UntagResource"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/DeadlineResourceTracker*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker4",
        "Effect": "Allow",
        "Action": [
          "dynamodb:CreateTable",
          "dynamodb:DeleteTable",
          "dynamodb:DescribeTable",
          "dynamodb:ListTagsOfResource",
          "dynamodb:TagResource",
          "dynamodb:UntagResource"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeHealth*",
          "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeInfo*",
          "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker5",
        "Effect": "Allow",
        "Action": [
          "dynamodb:BatchWriteItem",
          "dynamodb:Scan"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker6",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:DescribeRule",
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/DeadlineResourceTracker*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker7",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:ListAttachedRolePolicies"
        ],
        "Resource": [
          "arn:aws:iam::*:role/DeadlineResourceTracker*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker8",
        "Effect": "Allow",
        "Action": [
          "iam:GetUser"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker9",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker10",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/DeadlineResourceTrackerAccess*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker11",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker12",
        "Effect": "Allow",
        "Action": [
          "lambda:GetEventSourceMapping"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker13",
        "Effect": "Allow",
        "Action": [
          "lambda:CreateEventSourceMapping",
          "lambda:DeleteEventSourceMapping"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker14",
        "Effect": "Allow",
        "Action": [
          "lambda:AddPermission",
          "lambda:RemovePermission"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker15",
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction",
          "lambda:DeleteFunction",
          "lambda:DeleteFunctionConcurrency",
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:ListTags",
          "lambda:PutFunctionConcurrency",
          "lambda:TagResource",
          "lambda:UntagResource",
          "lambda:UpdateFunctionCode",
          "lambda:UpdateFunctionConfiguration"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker16",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*/deadline_aws_resource_tracker-*.zip",
          "arn:aws:s3:::*/DeadlineAWSResourceTrackerTemplate-*.yaml"
        ]
      },
      {
        "Sid": "AWSThinkboxDeadlineResourceTracker17",
        "Effect": "Allow",
        "Action": [
          "sqs:CreateQueue",
          "sqs:DeleteQueue",
          "sqs:GetQueueAttributes",
          "sqs:ListQueueTags",
          "sqs:TagQueue",
          "sqs:UntagQueue"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:DeadlineAWSComputeNodeState*",
          "arn:aws:sqs:*:*:DeadlineResourceTracker*"
        ]
      }
    ]
  },
  "AWSThinkboxDeadlineSpotEventPluginWorkerPolicy": {
    "policy": {
      "PolicyName": "AWSThinkboxDeadlineSpotEventPluginWorkerPolicy",
      "PolicyId": "ANPAZKAPJZG4JS2KSV4B2",
      "Arn": "arn:aws:iam::aws:policy/AWSThinkboxDeadlineSpotEventPluginWorkerPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grant permissions required for an EC2 instance running AWS Thinkbox Deadline Spot Event Plugin Worker software.",
      "CreateDate": "2020-05-27T19:35:00.000Z",
      "UpdateDate": "2020-12-07T23:31:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:GetQueueUrl",
          "sqs:SendMessage"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:DeadlineAWSComputeNodeState*"
        ]
      }
    ]
  },
  "AWSThinkboxDeadlineSpotEventPluginAdminPolicy": {
    "policy": {
      "PolicyName": "AWSThinkboxDeadlineSpotEventPluginAdminPolicy",
      "PolicyId": "ANPAZKAPJZG4MNSGMZZZZ",
      "Arn": "arn:aws:iam::aws:policy/AWSThinkboxDeadlineSpotEventPluginAdminPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions required for AWS Thinkbox's Deadline Spot Event Plugin.  This includes permission to request, modify, and cancel a spot fleet, as well as limited PassRole permission.",
      "CreateDate": "2020-05-27T19:38:34.000Z",
      "UpdateDate": "2020-05-27T19:38:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CancelSpotFleetRequests",
          "ec2:DescribeSpotFleetInstances",
          "ec2:DescribeSpotFleetRequests",
          "ec2:ModifySpotFleetRequest",
          "ec2:RequestSpotFleet"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-ec2-spot-fleet-tagging-role",
          "arn:aws:iam::*:role/DeadlineSpot*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetUser"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-ec2-spot-fleet-tagging-role",
          "arn:aws:iam::*:role/DeadlineSpot*"
        ]
      }
    ]
  },
  "AWSThinkboxAWSPortalAdminPolicy": {
    "policy": {
      "PolicyName": "AWSThinkboxAWSPortalAdminPolicy",
      "PolicyId": "ANPAZKAPJZG4BVM3T5TP2",
      "Arn": "arn:aws:iam::aws:policy/AWSThinkboxAWSPortalAdminPolicy",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants AWS Thinkbox's Deadline software full access to multiple AWS services as required for AWS Portal administration. This includes access to create arbitrary tags on several EC2 resource types.",
      "CreateDate": "2020-05-27T19:41:02.000Z",
      "UpdateDate": "2024-04-12T20:07:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSThinkboxAWSPortal1",
        "Effect": "Allow",
        "Action": [
          "ec2:AttachInternetGateway",
          "ec2:AssociateAddress",
          "ec2:AssociateRouteTable",
          "ec2:AllocateAddress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateFleet",
          "ec2:CreateLaunchTemplate",
          "ec2:CreateInternetGateway",
          "ec2:CreateNatGateway",
          "ec2:CreatePlacementGroup",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSubnet",
          "ec2:CreateVpc",
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeAddresses",
          "ec2:DescribeFleets",
          "ec2:DescribeFleetHistory",
          "ec2:DescribeFleetInstances",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeRouteTables",
          "ec2:DescribeNatGateways",
          "ec2:DescribeTags",
          "ec2:DescribeKeyPairs",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeInstanceTypeOfferings",
          "ec2:DescribeRegions",
          "ec2:DescribeSpotFleetRequestHistory",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSpotFleetInstances",
          "ec2:DescribeSpotFleetRequests",
          "ec2:DescribeSpotPriceHistory",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcEndpoints",
          "ec2:GetConsoleOutput",
          "ec2:ImportKeyPair",
          "ec2:ReleaseAddress",
          "ec2:RequestSpotFleet",
          "ec2:CancelSpotFleetRequests",
          "ec2:DisassociateAddress",
          "ec2:DeleteFleets",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteVpc",
          "ec2:DeletePlacementGroup",
          "ec2:DeleteVpcEndpoints",
          "ec2:DeleteInternetGateway",
          "ec2:DeleteSecurityGroup",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:DeleteRoute",
          "ec2:DeleteRouteTable",
          "ec2:DisassociateRouteTable",
          "ec2:DeleteSubnet",
          "ec2:DeleteNatGateway",
          "ec2:DetachInternetGateway",
          "ec2:ModifyInstanceAttribute",
          "ec2:ModifyFleet",
          "ec2:ModifySpotFleetRequest",
          "ec2:ModifyVpcAttribute"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal2",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:key-pair/*",
          "arn:aws:ec2:*::snapshot/*",
          "arn:aws:ec2:*:*:launch-template/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:placement-group/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*::image/*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal3",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal4",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal5",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal6",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal7",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal8",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal9",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:internet-gateway/*",
          "arn:aws:ec2:*:*:route-table/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:natgateway/*",
          "arn:aws:ec2:*:*:elastic-ip/*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal10",
        "Effect": "Allow",
        "Action": [
          "iam:GetUser"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal11",
        "Effect": "Allow",
        "Action": [
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/AWSPortal*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal12",
        "Effect": "Allow",
        "Action": [
          "iam:GetPolicy",
          "iam:ListEntitiesForPolicy",
          "iam:ListPolicyVersions"
        ],
        "Resource": [
          "arn:aws:iam::*:policy/AWSPortal*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal13",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:GetRolePolicy"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSPortal*",
          "arn:aws:iam::*:role/DeadlineSpot*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal14",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSPortal*",
          "arn:aws:iam::*:role/DeadlineSpot*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal15",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal16",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:GetBucketLocation",
          "s3:GetBucketLogging",
          "s3:GetBucketVersioning",
          "s3:PutBucketAcl",
          "s3:PutBucketCORS",
          "s3:PutBucketVersioning",
          "s3:GetBucketAcl",
          "s3:GetObject",
          "s3:PutBucketLogging",
          "s3:PutBucketTagging",
          "s3:PutObject",
          "s3:ListBucket",
          "s3:ListBucketVersions",
          "s3:PutEncryptionConfiguration",
          "s3:PutLifecycleConfiguration",
          "s3:DeleteBucket",
          "s3:DeleteObject",
          "s3:DeleteBucketPolicy",
          "s3:DeleteObjectVersion"
        ],
        "Resource": [
          "arn:aws:s3::*:awsportal*",
          "arn:aws:s3::*:stack*",
          "arn:aws:s3::*:aws-portal-cache*",
          "arn:aws:s3::*:logs-for-aws-portal-cache*",
          "arn:aws:s3::*:logs-for-stack*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal17",
        "Effect": "Allow",
        "Action": [
          "s3:PutBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3::*:logs-for-aws-portal-cache*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal18",
        "Effect": "Allow",
        "Action": [
          "s3:PutBucketOwnershipControls"
        ],
        "Resource": [
          "arn:aws:s3::*:logs-for-stack*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal19",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal20",
        "Effect": "Allow",
        "Action": [
          "dynamodb:Scan"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal21",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResources",
          "cloudformation:DeleteStack",
          "cloudformation:DeleteChangeSet",
          "cloudformation:ListStackResources",
          "cloudformation:CreateChangeSet",
          "cloudformation:DescribeChangeSet",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:UpdateTerminationProtection",
          "cloudformation:TagResource",
          "cloudformation:UntagResource"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/stack*/*",
          "arn:aws:cloudformation:*:*:stack/Deadline*/*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal22",
        "Effect": "Allow",
        "Action": [
          "cloudformation:EstimateTemplateCost",
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal23",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "logs:PutRetentionPolicy",
          "logs:DeleteRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/thinkbox*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal24",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal25",
        "Effect": "Allow",
        "Action": [
          "kms:Encrypt",
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal26",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSThinkboxAWSPortal27",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DeleteSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:DescribeSecret",
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:rcs-tls-pw*"
        ]
      }
    ]
  },
  "AWSBackupServiceLinkedRolePolicyForBackup": {
    "policy": {
      "PolicyName": "AWSBackupServiceLinkedRolePolicyForBackup",
      "PolicyId": "ANPAZKAPJZG4ONJBD4ZY2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSBackupServiceLinkedRolePolicyForBackup",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v15",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Backup permission to create backups on your behalf across AWS services",
      "CreateDate": "2020-06-02T23:08:40.000Z",
      "UpdateDate": "2023-12-15T22:06:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EFSResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:Backup",
          "elasticfilesystem:DescribeTags"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:file-system/*"
        ]
      },
      {
        "Sid": "DescribePermissions",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources",
          "elasticfilesystem:DescribeFileSystems",
          "dynamodb:ListTables",
          "storagegateway:ListVolumes",
          "ec2:DescribeVolumes",
          "ec2:DescribeInstances",
          "rds:DescribeDBInstances",
          "rds:DescribeDBClusters",
          "fsx:DescribeFileSystems",
          "fsx:DescribeVolumes",
          "s3:ListAllMyBuckets",
          "s3:GetBucketTagging"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SnapshotCopyTagPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "EC2CreateBackupTagPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "EC2CreateTagsPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "EC2RDSDescribePermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSnapshots",
          "ec2:DescribeSnapshotTierStatus",
          "ec2:DescribeImages",
          "rds:DescribeDBSnapshots",
          "rds:DescribeDBClusterSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EBSCopyPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CopySnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "EC2CopyPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CopyImage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2ModifyPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DeregisterImage",
          "ec2:DeleteSnapshot",
          "ec2:ModifySnapshotTier"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RDSInstanceAndSnashotPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:AddTagsToResource",
          "rds:CopyDBSnapshot",
          "rds:DeleteDBSnapshot",
          "rds:DeleteDBInstanceAutomatedBackup"
        ],
        "Resource": [
          "arn:aws:rds:*:*:snapshot:awsbackup:*"
        ]
      },
      {
        "Sid": "RDSClusterPermissions",
        "Effect": "Allow",
        "Action": [
          "rds:AddTagsToResource",
          "rds:CopyDBClusterSnapshot",
          "rds:DeleteDBClusterSnapshot"
        ],
        "Resource": [
          "arn:aws:rds:*:*:cluster-snapshot:awsbackup:*"
        ]
      },
      {
        "Sid": "KMSDescribePermissions",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSGrantPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:ListGrants",
          "kms:ReEncryptFrom",
          "kms:GenerateDataKeyWithoutPlaintext"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSCreateGrantPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FsxPermissions",
        "Effect": "Allow",
        "Action": [
          "fsx:CopyBackup",
          "fsx:TagResource",
          "fsx:DescribeBackups",
          "fsx:DeleteBackup"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:backup/*"
        ]
      },
      {
        "Sid": "DynamoDBDeletePermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:DeleteBackup"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*/backup/*"
        ]
      },
      {
        "Sid": "BackupGateway",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:ListVirtualMachines"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListTagsForBackupGateway",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:vm/*"
        ]
      },
      {
        "Sid": "DynamoDBPermissions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:ListTagsOfResource",
          "dynamodb:DescribeTable"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*"
        ]
      },
      {
        "Sid": "StorageGatewayPermissions",
        "Effect": "Allow",
        "Action": [
          "storagegateway:DescribeCachediSCSIVolumes",
          "storagegateway:DescribeStorediSCSIVolumes"
        ],
        "Resource": [
          "arn:aws:storagegateway:*:*:gateway/*/volume/*"
        ]
      },
      {
        "Sid": "EventBridgePermissions",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:PutTargets",
          "events:DescribeRule",
          "events:EnableRule",
          "events:PutRule",
          "events:RemoveTargets",
          "events:ListTargetsByRule",
          "events:DisableRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AwsBackupManagedRule*"
        ]
      },
      {
        "Sid": "EventBridgeRulesPermissions",
        "Effect": "Allow",
        "Action": [
          "events:ListRules"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMSAPPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-sap:GetOperation",
          "ssm-sap:UpdateHANABackupSettings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TimestreamResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "timestream:ListDatabases",
          "timestream:ListTables",
          "timestream:ListTagsForResource",
          "timestream:DescribeDatabase",
          "timestream:DescribeTable",
          "timestream:GetAwsBackupStatus",
          "timestream:GetAwsRestoreStatus"
        ],
        "Resource": [
          "arn:aws:timestream:*:*:database/*"
        ]
      },
      {
        "Sid": "TimestreamPermissions",
        "Effect": "Allow",
        "Action": [
          "timestream:DescribeEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RedshiftDescribePermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusterSnapshots",
          "redshift:DescribeTags"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:snapshot:*/*",
          "arn:aws:redshift:*:*:cluster:*"
        ]
      },
      {
        "Sid": "RedshiftClusterSnapshotPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DeleteClusterSnapshot"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:snapshot:*/*"
        ]
      },
      {
        "Sid": "RedshiftClusterPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:cluster:*"
        ]
      },
      {
        "Sid": "CloudformationStackPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/*"
        ]
      }
    ]
  },
  "AmazonAppFlowReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonAppFlowReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4CCGEQPIQI",
      "Arn": "arn:aws:iam::aws:policy/AmazonAppFlowReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Appflow flows",
      "CreateDate": "2020-06-02T23:26:51.000Z",
      "UpdateDate": "2022-02-28T20:42:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appflow:DescribeConnector",
          "appflow:DescribeConnectors",
          "appflow:DescribeConnectorProfiles",
          "appflow:DescribeFlows",
          "appflow:DescribeFlowExecution",
          "appflow:DescribeConnectorFields",
          "appflow:ListConnectors",
          "appflow:ListConnectorFields",
          "appflow:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonAppFlowFullAccess": {
    "policy": {
      "PolicyName": "AmazonAppFlowFullAccess",
      "PolicyId": "ANPAZKAPJZG4PGBU2ALC4",
      "Arn": "arn:aws:iam::aws:policy/AmazonAppFlowFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon AppFlow and access to AWS services supported as flow source or destination (S3 and Redshift). Also provides access to KMS for encryption",
      "CreateDate": "2020-06-02T23:30:14.000Z",
      "UpdateDate": "2022-02-28T23:11:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appflow:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListRolesForRedshift",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSListAccess",
        "Effect": "Allow",
        "Action": [
          "kms:ListKeys",
          "kms:DescribeKey",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSGrantAccess",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSListGrantAccess",
        "Effect": "Allow",
        "Action": [
          "kms:ListGrants"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3ReadAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "s3:GetBucketPolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3PutBucketPolicyAccess",
        "Effect": "Allow",
        "Action": [
          "s3:PutBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::appflow-*"
        ]
      },
      {
        "Sid": "SecretsManagerCreateSecretAccess",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerPutResourcePolicyAccess",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:PutResourcePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LambdaListFunctions",
        "Effect": "Allow",
        "Action": [
          "lambda:ListFunctions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AlexaForBusinessLifesizeDelegatedAccessPolicy": {
    "policy": {
      "PolicyName": "AlexaForBusinessLifesizeDelegatedAccessPolicy",
      "PolicyId": "ANPAZKAPJZG4HXQBRRIQV",
      "Arn": "arn:aws:iam::aws:policy/AlexaForBusinessLifesizeDelegatedAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide access to Lifesize AVS devices",
      "CreateDate": "2020-06-04T19:46:56.000Z",
      "UpdateDate": "2020-06-12T20:31:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "a4b:DisassociateDeviceFromRoom",
          "a4b:DeleteDevice",
          "a4b:UpdateDevice",
          "a4b:GetDevice"
        ],
        "Resource": [
          "arn:aws:a4b:us-east-1:*:device/*/*:A2IWO7UEGWV4TL"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "a4b:RegisterAVSDevice"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "a4b:SearchDevices"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "a4b:AssociateDeviceWithRoom"
        ],
        "Resource": [
          "arn:aws:a4b:us-east-1:*:device/*/*:A2IWO7UEGWV4TL",
          "arn:aws:a4b:us-east-1:*:room/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "a4b:GetRoom",
          "a4b:GetAddressBook",
          "a4b:SearchRooms",
          "a4b:CreateContact",
          "a4b:CreateRoom",
          "a4b:UpdateContact",
          "a4b:ListConferenceProviders",
          "a4b:DeleteRoom",
          "a4b:CreateAddressBook",
          "a4b:DisassociateContactFromAddressBook",
          "a4b:CreateConferenceProvider",
          "a4b:PutConferencePreference",
          "a4b:DeleteAddressBook",
          "a4b:AssociateContactWithAddressBook",
          "a4b:DeleteContact",
          "a4b:SearchProfiles",
          "a4b:UpdateProfile",
          "a4b:GetContact"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "kms:DescribeKey"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      }
    ]
  },
  "ElementalActivationsFullAccess": {
    "policy": {
      "PolicyName": "ElementalActivationsFullAccess",
      "PolicyId": "ANPAZKAPJZG4IYX6A6CKJ",
      "Arn": "arn:aws:iam::aws:policy/ElementalActivationsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Full access to view and take action on Elemental Appliances and Software purchased assets",
      "CreateDate": "2020-06-04T21:00:13.000Z",
      "UpdateDate": "2020-06-04T21:00:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elemental-activations:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkRoleWorkerTier": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkRoleWorkerTier",
      "PolicyId": "ANPAZKAPJZG4LTO4NS2Z5",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkRoleWorkerTier",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "(Elastic Beanstalk operations role) Allows a worker environment tier to create an Amazon DynamoDB table and an Amazon SQS queue.",
      "CreateDate": "2020-06-05T21:43:37.000Z",
      "UpdateDate": "2020-06-05T21:43:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowSQS",
        "Effect": "Allow",
        "Action": [
          "sqs:TagQueue",
          "sqs:DeleteQueue",
          "sqs:GetQueueAttributes",
          "sqs:CreateQueue"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:awseb-e-*"
        ]
      },
      {
        "Sid": "AllowDDB",
        "Effect": "Allow",
        "Action": [
          "dynamodb:CreateTable",
          "dynamodb:TagResource",
          "dynamodb:DescribeTable",
          "dynamodb:DeleteTable"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/awseb-e-*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkRoleSNS": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkRoleSNS",
      "PolicyId": "ANPAZKAPJZG4PARPZJ2UZ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkRoleSNS",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "(Elastic Beanstalk operations role) Allows an environment to enable Amazon SNS topic integration.",
      "CreateDate": "2020-06-05T21:46:22.000Z",
      "UpdateDate": "2020-06-05T21:46:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowBeanstalkManageSNS",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:SetTopicAttributes",
          "sns:DeleteTopic"
        ],
        "Resource": [
          "arn:aws:sns:*:*:ElasticBeanstalkNotifications-*"
        ]
      },
      {
        "Sid": "AllowSNSPublish",
        "Effect": "Allow",
        "Action": [
          "sns:GetTopicAttributes",
          "sns:Subscribe",
          "sns:Unsubscribe",
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkRoleRDS": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkRoleRDS",
      "PolicyId": "ANPAZKAPJZG4G5JWEESE4",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkRoleRDS",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "(Elastic Beanstalk operations role) Allows an environment to integrate an Amazon RDS instance.",
      "CreateDate": "2020-06-05T21:46:55.000Z",
      "UpdateDate": "2020-06-05T21:46:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowRDS",
        "Effect": "Allow",
        "Action": [
          "rds:CreateDBSecurityGroup",
          "rds:DeleteDBSecurityGroup",
          "rds:AuthorizeDBSecurityGroupIngress",
          "rds:CreateDBInstance",
          "rds:ModifyDBInstance",
          "rds:DeleteDBInstance"
        ],
        "Resource": [
          "arn:aws:rds:*:*:secgrp:awseb-e-*",
          "arn:aws:rds:*:*:db:*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkRoleECS": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkRoleECS",
      "PolicyId": "ANPAZKAPJZG4ORP4E3ZEZ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkRoleECS",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "(Elastic Beanstalk operations role) Allows a multicontainer Docker environment to manage Amazon ECS clusters.",
      "CreateDate": "2020-06-05T21:47:27.000Z",
      "UpdateDate": "2023-03-23T22:43:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowECS",
        "Effect": "Allow",
        "Action": [
          "ecs:CreateCluster",
          "ecs:DeleteCluster",
          "ecs:RegisterTaskDefinition",
          "ecs:DeRegisterTaskDefinition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowECSTagResource",
        "Effect": "Allow",
        "Action": [
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkRoleCore": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkRoleCore",
      "PolicyId": "ANPAZKAPJZG4OXQ5DMW6K",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkRoleCore",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWSElasticBeanstalkRoleCore (Elastic Beanstalk operations role) Allows core operation of a web service environment.",
      "CreateDate": "2020-06-05T21:48:24.000Z",
      "UpdateDate": "2020-09-09T20:31:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "TerminateInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "EC2",
        "Effect": "Allow",
        "Action": [
          "ec2:ReleaseAddress",
          "ec2:AllocateAddress",
          "ec2:DisassociateAddress",
          "ec2:AssociateAddress",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteSecurityGroup",
          "ec2:AuthorizeSecurityGroup*",
          "ec2:RevokeSecurityGroup*",
          "ec2:CreateLaunchTemplate*",
          "ec2:DeleteLaunchTemplate*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LTRunInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ASG",
        "Effect": "Allow",
        "Action": [
          "autoscaling:AttachInstances",
          "autoscaling:*LoadBalancer*",
          "autoscaling:*AutoScalingGroup",
          "autoscaling:*LaunchConfiguration",
          "autoscaling:DeleteScheduledAction",
          "autoscaling:DetachInstances",
          "autoscaling:PutNotificationConfiguration",
          "autoscaling:PutScalingPolicy",
          "autoscaling:PutScheduledUpdateGroupAction",
          "autoscaling:ResumeProcesses",
          "autoscaling:SuspendProcesses",
          "autoscaling:*Tags"
        ],
        "Resource": [
          "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
          "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*"
        ]
      },
      {
        "Sid": "ASGPolicy",
        "Effect": "Allow",
        "Action": [
          "autoscaling:DeletePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EBSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
        ]
      },
      {
        "Sid": "S3Obj",
        "Effect": "Allow",
        "Action": [
          "s3:Delete*",
          "s3:Get*",
          "s3:Put*"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*/*",
          "arn:aws:s3:::elasticbeanstalk-env-resources-*/*"
        ]
      },
      {
        "Sid": "S3Bucket",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucket*",
          "s3:ListBucket",
          "s3:PutBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*"
        ]
      },
      {
        "Sid": "CFN",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:GetTemplate",
          "cloudformation:ListStackResources",
          "cloudformation:UpdateStack",
          "cloudformation:ContinueUpdateRollback",
          "cloudformation:CancelUpdateStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awseb-e-*"
        ]
      },
      {
        "Sid": "CloudWatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:awseb-*"
        ]
      },
      {
        "Sid": "ELB",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:Create*",
          "elasticloadbalancing:Delete*",
          "elasticloadbalancing:Modify*",
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:DeRegisterTargets",
          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
          "elasticloadbalancing:*Tags",
          "elasticloadbalancing:ConfigureHealthCheck",
          "elasticloadbalancing:SetRulePriorities",
          "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/awseb-*/*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/awseb-*/*",
          "arn:aws:elasticloadbalancing:*:*:listener/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:listener/app/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:listener/net/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:listener-rule/app/awseb-*/*/*/*"
        ]
      },
      {
        "Sid": "ListAPIs",
        "Effect": "Allow",
        "Action": [
          "autoscaling:Describe*",
          "cloudformation:Describe*",
          "logs:Describe*",
          "ec2:Describe*",
          "ecs:Describe*",
          "ecs:List*",
          "elasticloadbalancing:Describe*",
          "rds:Describe*",
          "sns:List*",
          "iam:List*",
          "acm:Describe*",
          "acm:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowPassRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-elasticbeanstalk-*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkRoleCWL": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkRoleCWL",
      "PolicyId": "ANPAZKAPJZG4G4S2QMTW3",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkRoleCWL",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "(Elastic Beanstalk operations role) Allows an environment to manage Amazon CloudWatch Logs log groups.",
      "CreateDate": "2020-06-05T21:49:06.000Z",
      "UpdateDate": "2020-06-05T21:49:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowCWL",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:DeleteLogGroup",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        ]
      }
    ]
  },
  "AWSCodeArtifactAdminAccess": {
    "policy": {
      "PolicyName": "AWSCodeArtifactAdminAccess",
      "PolicyId": "ANPAZKAPJZG4MBONPJNI5",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeArtifactAdminAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS CodeArtifact via the AWS Management Console.",
      "CreateDate": "2020-06-16T23:53:23.000Z",
      "UpdateDate": "2020-06-16T23:53:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codeartifact:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sts:GetServiceBearerToken"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBackupOrganizationAdminAccess": {
    "policy": {
      "PolicyName": "AWSBackupOrganizationAdminAccess",
      "PolicyId": "ANPAZKAPJZG4E5BC3XLFS",
      "Arn": "arn:aws:iam::aws:policy/AWSBackupOrganizationAdminAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is for backup administators who use cross-account backup management to manage backups for the organization.",
      "CreateDate": "2020-06-24T16:23:14.000Z",
      "UpdateDate": "2022-11-18T18:26:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DisableAWSServiceAccess",
          "organizations:EnableAWSServiceAccess",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:RegisterDelegatedAdministrator",
          "organizations:DeregisterDelegatedAdministrator"
        ],
        "Resource": [
          "arn:aws:organizations::*:account/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:AttachPolicy",
          "organizations:ListPoliciesForTarget",
          "organizations:ListTargetsForPolicy",
          "organizations:DetachPolicy",
          "organizations:DisablePolicyType",
          "organizations:DescribePolicy",
          "organizations:DescribeEffectivePolicy",
          "organizations:ListPolicies",
          "organizations:EnablePolicyType",
          "organizations:CreatePolicy",
          "organizations:UpdatePolicy",
          "organizations:DeletePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListRoots",
          "organizations:ListParents",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListAccountsForParent",
          "organizations:ListAccounts",
          "organizations:DescribeOrganization",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListChildren",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganizationalUnit"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMachineLearningRoleforRedshiftDataSourceV3": {
    "policy": {
      "PolicyName": "AmazonMachineLearningRoleforRedshiftDataSourceV3",
      "PolicyId": "ANPAZKAPJZG4DIXIZO4E2",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonMachineLearningRoleforRedshiftDataSourceV3",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Machine Learning to configure and use your Redshift Clusters and S3 Staging Locations for Redshift Data Source.",
      "CreateDate": "2020-06-24T18:00:09.000Z",
      "UpdateDate": "2020-06-24T18:00:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateSecurityGroup",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeSecurityGroups",
          "ec2:RevokeSecurityGroupIngress",
          "redshift:AuthorizeClusterSecurityGroupIngress",
          "redshift:CreateClusterSecurityGroup",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSecurityGroups",
          "redshift:ModifyCluster",
          "redshift:RevokeClusterSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutBucketPolicy",
          "s3:GetBucketLocation",
          "s3:GetBucketPolicy",
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::amazon-machine-learning*"
        ]
      }
    ]
  },
  "AmazonHoneycodeTeamAssociationReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonHoneycodeTeamAssociationReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4KRI4FOLPG",
      "Arn": "arn:aws:iam::aws:policy/AmazonHoneycodeTeamAssociationReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Honeycode Team Association via the AWS Management Console and the SDK.",
      "CreateDate": "2020-06-24T20:27:46.000Z",
      "UpdateDate": "2020-06-24T20:27:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "honeycode:ListTeamAssociations"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonHoneycodeWorkbookReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonHoneycodeWorkbookReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4GUHKYOSNH",
      "Arn": "arn:aws:iam::aws:policy/AmazonHoneycodeWorkbookReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Honeycode Workbook via the AWS Management Console and the SDK.",
      "CreateDate": "2020-06-24T20:28:07.000Z",
      "UpdateDate": "2020-12-01T17:32:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "honeycode:GetScreenData",
          "honeycode:DescribeTableDataImportJob",
          "honeycode:ListTableColumns",
          "honeycode:ListTableRows",
          "honeycode:ListTables",
          "honeycode:QueryTableRows"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonHoneycodeFullAccess": {
    "policy": {
      "PolicyName": "AmazonHoneycodeFullAccess",
      "PolicyId": "ANPAZKAPJZG4ECUH6WAX6",
      "Arn": "arn:aws:iam::aws:policy/AmazonHoneycodeFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Honeycode via the AWS Management Console and the SDK.",
      "CreateDate": "2020-06-24T20:28:11.000Z",
      "UpdateDate": "2020-06-24T20:28:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "honeycode:*"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonHoneycodeReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonHoneycodeReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4CRFGMHZ3B",
      "Arn": "arn:aws:iam::aws:policy/AmazonHoneycodeReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Honeycode via the AWS Management Console and the SDK.",
      "CreateDate": "2020-06-24T20:28:16.000Z",
      "UpdateDate": "2020-12-01T17:27:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "honeycode:List*",
          "honeycode:Get*",
          "honeycode:Describe*",
          "honeycode:Query*"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonHoneycodeTeamAssociationFullAccess": {
    "policy": {
      "PolicyName": "AmazonHoneycodeTeamAssociationFullAccess",
      "PolicyId": "ANPAZKAPJZG4JH4KLR35J",
      "Arn": "arn:aws:iam::aws:policy/AmazonHoneycodeTeamAssociationFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Honeycode Team Association via the AWS Management Console and the SDK. ",
      "CreateDate": "2020-06-24T20:28:27.000Z",
      "UpdateDate": "2020-06-24T20:28:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "honeycode:ListTeamAssociations",
          "honeycode:ApproveTeamAssociation",
          "honeycode:RejectTeamAssociation"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonHoneycodeWorkbookFullAccess": {
    "policy": {
      "PolicyName": "AmazonHoneycodeWorkbookFullAccess",
      "PolicyId": "ANPAZKAPJZG4OQLA2WKSW",
      "Arn": "arn:aws:iam::aws:policy/AmazonHoneycodeWorkbookFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Honeycode Workbook via the AWS Management Console and the SDK.",
      "CreateDate": "2020-06-24T20:28:46.000Z",
      "UpdateDate": "2020-12-01T17:30:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "honeycode:GetScreenData",
          "honeycode:InvokeScreenAutomation",
          "honeycode:BatchCreateTableRows",
          "honeycode:BatchDeleteTableRows",
          "honeycode:BatchUpdateTableRows",
          "honeycode:BatchUpsertTableRows",
          "honeycode:DescribeTableDataImportJob",
          "honeycode:ListTableColumns",
          "honeycode:ListTableRows",
          "honeycode:ListTables",
          "honeycode:QueryTableRows",
          "honeycode:StartTableDataImportJob"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "CertificateManagerServiceRolePolicy": {
    "policy": {
      "PolicyName": "CertificateManagerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4G2T4BX7CL",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CertificateManagerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Amazon Certificate Manager Service Role Policy",
      "CreateDate": "2020-06-25T17:56:49.000Z",
      "UpdateDate": "2020-06-25T17:56:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:IssueCertificate",
          "acm-pca:GetCertificate"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodeArtifactReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCodeArtifactReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4PVTKOJHFB",
      "Arn": "arn:aws:iam::aws:policy/AWSCodeArtifactReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS CodeArtifact via the AWS Management Console.",
      "CreateDate": "2020-06-25T21:23:52.000Z",
      "UpdateDate": "2020-06-25T21:23:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codeartifact:Describe*",
          "codeartifact:Get*",
          "codeartifact:List*",
          "codeartifact:ReadFromRepository"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sts:GetServiceBearerToken"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRoleForCodeGuru-Profiler": {
    "policy": {
      "PolicyName": "AWSServiceRoleForCodeGuru-Profiler",
      "PolicyId": "ANPAZKAPJZG4GNVXVLNQT",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForCodeGuru-Profiler",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "A service-linked role required for Amazon CodeGuru Profiler to send notifications on your behalf.",
      "CreateDate": "2020-06-26T22:04:26.000Z",
      "UpdateDate": "2020-06-26T22:04:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowSNSPublishToSendNotifications",
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCognitoIdpServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonCognitoIdpServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LEUDXVZDR",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonCognitoIdpServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by Amazon Cognito User Pools",
      "CreateDate": "2020-06-26T22:30:20.000Z",
      "UpdateDate": "2020-06-26T22:30:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cognito-idp:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaLiveReadOnly": {
    "policy": {
      "PolicyName": "AWSElementalMediaLiveReadOnly",
      "PolicyId": "ANPAZKAPJZG4L7DTGZPRO",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaLiveReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Elemental MediaLive resources",
      "CreateDate": "2020-07-08T16:38:07.000Z",
      "UpdateDate": "2020-07-08T16:38:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "medialive:List*",
          "medialive:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaLiveFullAccess": {
    "policy": {
      "PolicyName": "AWSElementalMediaLiveFullAccess",
      "PolicyId": "ANPAZKAPJZG4K5KSJBKUE",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaLiveFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Elemental MediaLive resources",
      "CreateDate": "2020-07-08T17:07:14.000Z",
      "UpdateDate": "2020-07-08T17:07:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "medialive:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerGroundTruthExecution": {
    "policy": {
      "PolicyName": "AmazonSageMakerGroundTruthExecution",
      "PolicyId": "ANPAZKAPJZG4FYNFSJXO3",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerGroundTruthExecution",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS services that are required to run SageMaker GroundTruth Labeling job",
      "CreateDate": "2020-07-09T19:30:20.000Z",
      "UpdateDate": "2022-04-29T20:49:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CustomLabelingJobs",
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*GtRecipe*",
          "arn:aws:lambda:*:*:function:*LabelingFunction*",
          "arn:aws:lambda:*:*:function:*SageMaker*",
          "arn:aws:lambda:*:*:function:*sagemaker*",
          "arn:aws:lambda:*:*:function:*Sagemaker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*GroundTruth*",
          "arn:aws:s3:::*Groundtruth*",
          "arn:aws:s3:::*groundtruth*",
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData",
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "StreamingQueue",
        "Effect": "Allow",
        "Action": [
          "sqs:CreateQueue",
          "sqs:DeleteMessage",
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "sqs:ReceiveMessage",
          "sqs:SendMessage",
          "sqs:SetQueueAttributes"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:*GroundTruth*"
        ]
      },
      {
        "Sid": "StreamingTopicSubscribe",
        "Effect": "Allow",
        "Action": [
          "sns:Subscribe"
        ],
        "Resource": [
          "arn:aws:sns:*:*:*GroundTruth*",
          "arn:aws:sns:*:*:*Groundtruth*",
          "arn:aws:sns:*:*:*groundTruth*",
          "arn:aws:sns:*:*:*groundtruth*",
          "arn:aws:sns:*:*:*SageMaker*",
          "arn:aws:sns:*:*:*Sagemaker*",
          "arn:aws:sns:*:*:*sageMaker*",
          "arn:aws:sns:*:*:*sagemaker*"
        ]
      },
      {
        "Sid": "StreamingTopic",
        "Effect": "Allow",
        "Action": [
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:*GroundTruth*",
          "arn:aws:sns:*:*:*Groundtruth*",
          "arn:aws:sns:*:*:*groundTruth*",
          "arn:aws:sns:*:*:*groundtruth*",
          "arn:aws:sns:*:*:*SageMaker*",
          "arn:aws:sns:*:*:*Sagemaker*",
          "arn:aws:sns:*:*:*sageMaker*",
          "arn:aws:sns:*:*:*sagemaker*"
        ]
      },
      {
        "Sid": "StreamingTopicUnsubscribe",
        "Effect": "Allow",
        "Action": [
          "sns:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "WorkforceVPC",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeVpcEndpoints",
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodePipeline_ReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCodePipeline_ReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4IGBTPGT6W",
      "Arn": "arn:aws:iam::aws:policy/AWSCodePipeline_ReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS CodePipeline via the AWS Management Console.",
      "CreateDate": "2020-08-03T22:25:17.000Z",
      "UpdateDate": "2020-08-03T22:25:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codepipeline:GetPipeline",
          "codepipeline:GetPipelineState",
          "codepipeline:GetPipelineExecution",
          "codepipeline:ListPipelineExecutions",
          "codepipeline:ListActionExecutions",
          "codepipeline:ListActionTypes",
          "codepipeline:ListPipelines",
          "codepipeline:ListTagsForResource",
          "s3:ListAllMyBuckets",
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListEventTypes",
          "codestar-notifications:ListTargets"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Action": [
          "s3:GetObject",
          "s3:ListBucket",
          "s3:GetBucketPolicy"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3::*:codepipeline-*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:DescribeNotificationRule"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ServerMigrationServiceRoleForInstanceValidation": {
    "policy": {
      "PolicyName": "ServerMigrationServiceRoleForInstanceValidation",
      "PolicyId": "ANPAZKAPJZG4LJMOLEWUV",
      "Arn": "arn:aws:iam::aws:policy/service-role/ServerMigrationServiceRoleForInstanceValidation",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions to allow the AWS SMS to run used data validation script and send script success/failure back to SMS",
      "CreateDate": "2020-07-20T22:25:07.000Z",
      "UpdateDate": "2020-07-20T22:25:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::sms-app-*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sms:NotifyAppValidationOutput"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCodePipeline_FullAccess": {
    "policy": {
      "PolicyName": "AWSCodePipeline_FullAccess",
      "PolicyId": "ANPAZKAPJZG4A6ZKP3LKA",
      "Arn": "arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS CodePipeline via the AWS Management Console.",
      "CreateDate": "2020-08-03T22:38:28.000Z",
      "UpdateDate": "2024-03-14T17:06:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "codepipeline:*",
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks",
          "cloudformation:ListChangeSets",
          "cloudtrail:DescribeTrails",
          "codebuild:BatchGetProjects",
          "codebuild:CreateProject",
          "codebuild:ListCuratedEnvironmentImages",
          "codebuild:ListProjects",
          "codecommit:ListBranches",
          "codecommit:GetReferences",
          "codecommit:ListRepositories",
          "codedeploy:BatchGetDeploymentGroups",
          "codedeploy:ListApplications",
          "codedeploy:ListDeploymentGroups",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ecr:DescribeRepositories",
          "ecr:ListImages",
          "ecs:ListClusters",
          "ecs:ListServices",
          "elasticbeanstalk:DescribeApplications",
          "elasticbeanstalk:DescribeEnvironments",
          "iam:ListRoles",
          "iam:GetRole",
          "lambda:ListFunctions",
          "events:ListRules",
          "events:ListTargetsByRule",
          "events:DescribeRule",
          "opsworks:DescribeApps",
          "opsworks:DescribeLayers",
          "opsworks:DescribeStacks",
          "s3:ListAllMyBuckets",
          "sns:ListTopics",
          "codestar-notifications:ListNotificationRules",
          "codestar-notifications:ListTargets",
          "codestar-notifications:ListTagsforResource",
          "codestar-notifications:ListEventTypes",
          "states:ListStateMachines"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Sid": "CodePipelineAuthoringAccess"
      },
      {
        "Action": [
          "s3:GetObject",
          "s3:ListBucket",
          "s3:GetBucketPolicy",
          "s3:GetBucketVersioning",
          "s3:GetObjectVersion",
          "s3:CreateBucket",
          "s3:PutBucketPolicy"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3::*:codepipeline-*"
        ],
        "Sid": "CodePipelineArtifactsReadWriteAccess"
      },
      {
        "Action": [
          "cloudtrail:PutEventSelectors",
          "cloudtrail:CreateTrail",
          "cloudtrail:GetEventSelectors",
          "cloudtrail:StartLogging"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:cloudtrail:*:*:trail/codepipeline-source-trail"
        ],
        "Sid": "CodePipelineSourceTrailReadWriteAccess"
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/service-role/cwe-role-*"
        ],
        "Sid": "EventsIAMPassRole"
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Sid": "CodePipelineIAMPassRole"
      },
      {
        "Action": [
          "events:PutRule",
          "events:PutTargets",
          "events:DeleteRule",
          "events:DisableRule",
          "events:RemoveTargets"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:events:*:*:rule/codepipeline-*"
        ],
        "Sid": "CodePipelineEventsReadWriteAccess"
      },
      {
        "Sid": "CodeStarNotificationsReadWriteAccess",
        "Effect": "Allow",
        "Action": [
          "codestar-notifications:CreateNotificationRule",
          "codestar-notifications:DescribeNotificationRule",
          "codestar-notifications:UpdateNotificationRule",
          "codestar-notifications:DeleteNotificationRule",
          "codestar-notifications:Subscribe",
          "codestar-notifications:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:SetTopicAttributes"
        ],
        "Resource": [
          "arn:aws:sns:*:*:codestar-notifications*"
        ]
      },
      {
        "Sid": "CodeStarNotificationsChatbotAccess",
        "Effect": "Allow",
        "Action": [
          "chatbot:DescribeSlackChannelConfigurations",
          "chatbot:ListMicrosoftTeamsChannelConfigurations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonBraketServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonBraketServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NIYU42I3S",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonBraketServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Braket to create and manage AWS resources on your behalf",
      "CreateDate": "2020-08-04T17:12:23.000Z",
      "UpdateDate": "2020-08-06T20:10:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::amazon-braket-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents",
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/braket:*"
        ]
      }
    ]
  },
  "AWSLakeFormationCrossAccountManager": {
    "policy": {
      "PolicyName": "AWSLakeFormationCrossAccountManager",
      "PolicyId": "ANPAZKAPJZG4HPT7Y7QL3",
      "Arn": "arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides cross account access to Glue resources via Lake Formation. Also grants read access to other required services such as organizations and resource access manager",
      "CreateDate": "2020-08-04T20:59:46.000Z",
      "UpdateDate": "2024-03-22T18:51:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowCreateResourceShare",
        "Effect": "Allow",
        "Action": [
          "ram:CreateResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowManageResourceShare",
        "Effect": "Allow",
        "Action": [
          "ram:UpdateResourceShare",
          "ram:DeleteResourceShare",
          "ram:AssociateResourceShare",
          "ram:DisassociateResourceShare",
          "ram:GetResourceShares"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowManageResourceSharePermissions",
        "Effect": "Allow",
        "Action": [
          "ram:AssociateResourceSharePermission"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowXAcctManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "glue:PutResourcePolicy",
          "glue:DeleteResourcePolicy",
          "organizations:DescribeOrganization",
          "organizations:DescribeAccount",
          "ram:Get*",
          "ram:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowOrganizationsPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:ListRoots",
          "organizations:ListAccountsForParent",
          "organizations:ListOrganizationalUnitsForParent"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonBraketFullAccess": {
    "policy": {
      "PolicyName": "AmazonBraketFullAccess",
      "PolicyId": "ANPAZKAPJZG4HUAKO7NZO",
      "Arn": "arn:aws:iam::aws:policy/AmazonBraketFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Braket via the AWS Management Console and SDK. Also provides access to related services (e.g., S3, logs).",
      "CreateDate": "2020-08-06T20:12:37.000Z",
      "UpdateDate": "2023-04-19T16:25:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket",
          "s3:CreateBucket",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::amazon-braket-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "servicequotas:GetServiceQuota",
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetDownloadUrlForLayer",
          "ecr:BatchGetImage",
          "ecr:BatchCheckLayerAvailability"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/amazon-braket*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetAuthorizationToken"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:Describe*",
          "logs:Get*",
          "logs:List*",
          "logs:StartQuery",
          "logs:StopQuery",
          "logs:TestMetricFilter",
          "logs:FilterLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/braket*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles",
          "iam:ListRolePolicies",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:ListAttachedRolePolicies"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:ListNotebookInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreatePresignedNotebookInstanceUrl",
          "sagemaker:CreateNotebookInstance",
          "sagemaker:DeleteNotebookInstance",
          "sagemaker:DescribeNotebookInstance",
          "sagemaker:StartNotebookInstance",
          "sagemaker:StopNotebookInstance",
          "sagemaker:UpdateNotebookInstance",
          "sagemaker:ListTags",
          "sagemaker:AddTags",
          "sagemaker:DeleteTags"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:notebook-instance/amazon-braket-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:DescribeNotebookInstanceLifecycleConfig",
          "sagemaker:CreateNotebookInstanceLifecycleConfig",
          "sagemaker:DeleteNotebookInstanceLifecycleConfig",
          "sagemaker:ListNotebookInstanceLifecycleConfigs",
          "sagemaker:UpdateNotebookInstanceLifecycleConfig"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/amazon-braket-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "braket:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/braket.amazonaws.com/AWSServiceRoleForAmazonBraket*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonBraketServiceSageMakerNotebookRole*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonBraketJobsExecutionRole*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:GetQueryResults"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents",
          "logs:CreateLogStream",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/braket*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambdaMSKExecutionRole": {
    "policy": {
      "PolicyName": "AWSLambdaMSKExecutionRole",
      "PolicyId": "ANPAZKAPJZG4FHMXOHIS5",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaMSKExecutionRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions required to access MSK Cluster within a VPC, manage ENIs (create, describe, delete) in the VPC and write permissions to CloudWatch Logs.",
      "CreateDate": "2020-08-11T17:35:05.000Z",
      "UpdateDate": "2022-08-02T20:08:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kafka:DescribeCluster",
          "kafka:DescribeClusterV2",
          "kafka:GetBootstrapBrokers",
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcs",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCompromisedKeyQuarantine": {
    "policy": {
      "PolicyName": "AWSCompromisedKeyQuarantine",
      "PolicyId": "ANPAZKAPJZG4PLD3NKX4L",
      "Arn": "arn:aws:iam::aws:policy/AWSCompromisedKeyQuarantine",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Denies access to certain actions, applied by the AWS team in the event that an IAM user's credentials have been compromised or exposed publicly.  Do NOT remove this policy.  Instead, please follow the instructions specified in the email sent to you regarding this event.",
      "CreateDate": "2020-08-11T18:04:13.000Z",
      "UpdateDate": "2020-08-11T18:04:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Deny",
        "Action": [
          "iam:AttachGroupPolicy",
          "iam:AttachRolePolicy",
          "iam:AttachUserPolicy",
          "iam:ChangePassword",
          "iam:CreateAccessKey",
          "iam:CreateInstanceProfile",
          "iam:CreateLoginProfile",
          "iam:CreateRole",
          "iam:CreateUser",
          "iam:DetachUserPolicy",
          "iam:PutUserPermissionsBoundary",
          "iam:PutUserPolicy",
          "iam:UpdateAccessKey",
          "iam:UpdateAccountPasswordPolicy",
          "iam:UpdateUser",
          "ec2:RequestSpotInstances",
          "ec2:RunInstances",
          "ec2:StartInstances",
          "organizations:CreateAccount",
          "organizations:CreateOrganization",
          "organizations:InviteAccountToOrganization",
          "lambda:CreateFunction",
          "lightsail:Create*",
          "lightsail:Start*",
          "lightsail:Delete*",
          "lightsail:Update*",
          "lightsail:GetInstanceAccessDetails",
          "lightsail:DownloadDefaultKeyPair"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ServerMigration_ServiceRole": {
    "policy": {
      "PolicyName": "ServerMigration_ServiceRole",
      "PolicyId": "ANPAZKAPJZG4NKLZNDFDI",
      "Arn": "arn:aws:iam::aws:policy/service-role/ServerMigration_ServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions to allow the AWS Server Migration Service to migrate VMs to EC2: allows the Server Migration Service to place the migrated resources into the customer's EC2 account.",
      "CreateDate": "2020-08-11T20:41:44.000Z",
      "UpdateDate": "2020-10-15T17:26:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateChangeSet",
          "cloudformation:CreateStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DeleteStack",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:DeleteChangeSet",
          "cloudformation:DescribeChangeSet",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStackResources",
          "cloudformation:GetTemplate"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:ValidateTemplate",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:DeleteObject",
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:PutLifecycleConfiguration"
        ],
        "Resource": [
          "arn:aws:s3:::sms-app-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sms:CreateReplicationJob",
          "sms:DeleteReplicationJob",
          "sms:GetReplicationJobs",
          "sms:GetReplicationRuns",
          "sms:GetServers",
          "sms:ImportServerCatalog",
          "sms:StartOnDemandReplicationRun",
          "sms:UpdateReplicationJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*::document/AWS-RunRemoteScript",
          "arn:aws:s3:::sms-app-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:CancelCommand",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CopySnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifySnapshotAttribute",
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CopyImage",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSnapshotAttribute",
          "ec2:DeregisterImage",
          "ec2:ImportImage",
          "ec2:DescribeImportImageTasks",
          "ec2:GetEbsEncryptionByDefault"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DisassociateIamInstanceProfile",
          "ec2:AssociateIamInstanceProfile",
          "ec2:ReplaceIamInstanceProfileAssociation"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEKSVPCResourceController": {
    "policy": {
      "PolicyName": "AmazonEKSVPCResourceController",
      "PolicyId": "ANPAZKAPJZG4PBOFT2NNA",
      "Arn": "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy used by VPC Resource Controller to manage ENI and IPs for worker nodes.",
      "CreateDate": "2020-08-12T00:55:34.000Z",
      "UpdateDate": "2020-08-12T00:55:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterfacePermission"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DetachNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DeleteNetworkInterface",
          "ec2:AttachNetworkInterface",
          "ec2:UnassignPrivateIpAddresses",
          "ec2:AssignPrivateIpAddresses"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "Route53ResolverServiceRolePolicy": {
    "policy": {
      "PolicyName": "Route53ResolverServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4AEMJZANMJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/Route53ResolverServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by Route53 Resolver",
      "CreateDate": "2020-08-12T17:47:24.000Z",
      "UpdateDate": "2020-08-12T17:47:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "logs:CreateLogDelivery",
          "logs:GetLogDelivery",
          "logs:UpdateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:ListLogDeliveries",
          "logs:DescribeResourcePolicies",
          "logs:DescribeLogGroups",
          "s3:GetBucketPolicy"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ClientVPNServiceConnectionsRolePolicy": {
    "policy": {
      "PolicyName": "ClientVPNServiceConnectionsRolePolicy",
      "PolicyId": "ANPAZKAPJZG4PG4VWZTEZ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/ClientVPNServiceConnectionsRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable AWS Client VPN to manage your Client VPN endpoint connections.",
      "CreateDate": "2020-08-12T19:48:06.000Z",
      "UpdateDate": "2020-08-12T19:48:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:AWSClientVPN-*"
        ]
      }
    ]
  },
  "AWSCodeDeployRoleForLambdaLimited": {
    "policy": {
      "PolicyName": "AWSCodeDeployRoleForLambdaLimited",
      "PolicyId": "ANPAZKAPJZG4C55RUFGEB",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambdaLimited",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides CodeDeploy service limited access to perform a Lambda deployment on your behalf.",
      "CreateDate": "2020-08-17T17:14:14.000Z",
      "UpdateDate": "2020-08-17T17:14:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudwatch:DescribeAlarms",
          "lambda:UpdateAlias",
          "lambda:GetAlias",
          "lambda:GetProvisionedConcurrencyConfig"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "arn:aws:s3:::*/CodeDeploy/*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:CodeDeployHook_*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonEC2RoleforAWSCodeDeployLimited": {
    "policy": {
      "PolicyName": "AmazonEC2RoleforAWSCodeDeployLimited",
      "PolicyId": "ANPAZKAPJZG4NN2A7WC6C",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeployLimited",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides EC2 limited access to S3 bucket to download revision. This role is needed by the CodeDeploy agent on EC2 instances. ",
      "CreateDate": "2020-08-24T17:55:18.000Z",
      "UpdateDate": "2022-01-20T21:37:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::*/CodeDeploy/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingKafkaClusterPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingKafkaClusterPolicy",
      "PolicyId": "ANPAZKAPJZG4FTCIZBJA2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingKafkaClusterPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access Managed Streaming for Apache Kafka and CloudWatch.",
      "CreateDate": "2020-08-24T18:36:01.000Z",
      "UpdateDate": "2020-08-24T18:36:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kafka:DescribeCluster",
          "kafka:DescribeClusterOperation",
          "kafka:UpdateBrokerStorage",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSTransferReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSTransferReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4ITRAALBSI",
      "Arn": "arn:aws:iam::aws:policy/AWSTransferReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide readonly access to AWS Transfer services.",
      "CreateDate": "2020-08-27T17:54:51.000Z",
      "UpdateDate": "2020-08-27T17:54:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "transfer:DescribeUser",
          "transfer:DescribeServer",
          "transfer:ListUsers",
          "transfer:ListServers",
          "transfer:TestIdentityProvider",
          "transfer:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBillingReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSBillingReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4LJ3OSZ5SX",
      "Arn": "arn:aws:iam::aws:policy/AWSBillingReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows users to view bills on the Billing Console.",
      "CreateDate": "2020-08-27T20:08:51.000Z",
      "UpdateDate": "2024-01-17T18:15:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "VisualEditor0",
        "Effect": "Allow",
        "Action": [
          "account:GetAccountInformation",
          "aws-portal:ViewBilling",
          "billing:GetBillingData",
          "billing:GetBillingDetails",
          "billing:GetBillingNotifications",
          "billing:GetBillingPreferences",
          "billing:GetCredits",
          "billing:GetContractInformation",
          "billing:GetIAMAccessPreference",
          "billing:GetSellerOfRecord",
          "billing:ListBillingViews",
          "budgets:ViewBudget",
          "budgets:DescribeBudgetActionsForBudget",
          "budgets:DescribeBudgetAction",
          "budgets:DescribeBudgetActionsForAccount",
          "budgets:DescribeBudgetActionHistories",
          "ce:DescribeCostCategoryDefinition",
          "ce:GetCostAndUsage",
          "ce:ListCostCategoryDefinitions",
          "ce:ListTagsForResource",
          "ce:ListCostAllocationTags",
          "consolidatedbilling:ListLinkedAccounts",
          "consolidatedbilling:GetAccountBillingRole",
          "cur:GetClassicReport",
          "cur:GetClassicReportPreferences",
          "cur:GetUsageReport",
          "cur:DescribeReportDefinitions",
          "freetier:GetFreeTierAlertPreference",
          "freetier:GetFreeTierUsage",
          "invoicing:GetInvoiceEmailDeliveryPreferences",
          "invoicing:GetInvoicePDF",
          "invoicing:ListInvoiceSummaries",
          "payments:GetPaymentInstrument",
          "payments:GetPaymentStatus",
          "payments:ListPaymentPreferences",
          "purchase-orders:GetPurchaseOrder",
          "purchase-orders:ViewPurchaseOrders",
          "purchase-orders:ListPurchaseOrderInvoices",
          "purchase-orders:ListPurchaseOrders",
          "purchase-orders:ListTagsForResource",
          "sustainability:GetCarbonFootprintSummary",
          "tax:GetTaxRegistrationDocument",
          "tax:GetTaxInheritance",
          "tax:ListTaxRegistrations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ElementalActivationsReadOnlyAccess": {
    "policy": {
      "PolicyName": "ElementalActivationsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4JBRIPMTYG",
      "Arn": "arn:aws:iam::aws:policy/ElementalActivationsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Read-only access to the detailed list of purchased assets associated to the AWS account of the user",
      "CreateDate": "2020-08-28T16:51:01.000Z",
      "UpdateDate": "2020-08-28T16:51:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elemental-activations:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ElementalActivationsGenerateLicenses": {
    "policy": {
      "PolicyName": "ElementalActivationsGenerateLicenses",
      "PolicyId": "ANPAZKAPJZG4LVMPXPYYJ",
      "Arn": "arn:aws:iam::aws:policy/ElementalActivationsGenerateLicenses",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Access to view purchased assets and generate software licenses for pending activations",
      "CreateDate": "2020-08-28T18:28:58.000Z",
      "UpdateDate": "2020-08-28T18:28:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elemental-activations:Get*",
          "elemental-activations:GenerateLicenses",
          "elemental-activations:StartFileUpload",
          "elemental-activations:CompleteFileUpload"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ElementalActivationsDownloadSoftwareAccess": {
    "policy": {
      "PolicyName": "ElementalActivationsDownloadSoftwareAccess",
      "PolicyId": "ANPAZKAPJZG4IQVGBB6WY",
      "Arn": "arn:aws:iam::aws:policy/ElementalActivationsDownloadSoftwareAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Access to view purchased assets and download related software and kickstart files",
      "CreateDate": "2020-09-08T17:26:09.000Z",
      "UpdateDate": "2020-09-08T17:26:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elemental-activations:Get*",
          "elemental-activations:Download*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSQuickSightElasticsearchPolicy": {
    "policy": {
      "PolicyName": "AWSQuickSightElasticsearchPolicy",
      "PolicyId": "ANPAZKAPJZG4BLUM3JVIN",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSQuickSightElasticsearchPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Amazon Elasticsearch resources from Amazon QuickSight",
      "CreateDate": "2020-09-09T17:27:19.000Z",
      "UpdateDate": "2021-09-07T23:25:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "es:ESHttpGet"
        ],
        "Resource": [
          "arn:aws:es:*:*:domain/*/",
          "arn:aws:es:*:*:domain/*/_cluster/settings",
          "arn:aws:es:*:*:domain/*/_cat/indices"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "es:ListDomainNames"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "es:DescribeElasticsearchDomain",
          "es:DescribeDomain"
        ],
        "Resource": [
          "arn:aws:es:*:*:domain/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "es:ESHttpPost",
          "es:ESHttpGet"
        ],
        "Resource": [
          "arn:aws:es:*:*:domain/*/_opendistro/_sql",
          "arn:aws:es:*:*:domain/*/_plugin/_sql"
        ]
      }
    ]
  },
  "AmazonRedshiftDataFullAccess": {
    "policy": {
      "PolicyName": "AmazonRedshiftDataFullAccess",
      "PolicyId": "ANPAZKAPJZG4PX5LA5SG6",
      "Arn": "arn:aws:iam::aws:policy/AmazonRedshiftDataFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides full access to Amazon Redshift Data APIs. This policy also grants scoped access to other required services.",
      "CreateDate": "2020-09-09T19:23:55.000Z",
      "UpdateDate": "2023-04-07T18:18:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DataAPIPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift-data:BatchExecuteStatement",
          "redshift-data:ExecuteStatement",
          "redshift-data:CancelStatement",
          "redshift-data:ListStatements",
          "redshift-data:GetStatementResult",
          "redshift-data:DescribeStatement",
          "redshift-data:ListDatabases",
          "redshift-data:ListSchemas",
          "redshift-data:ListTables",
          "redshift-data:DescribeTable"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:*"
        ]
      },
      {
        "Sid": "GetCredentialsForAPIUser",
        "Effect": "Allow",
        "Action": [
          "redshift:GetClusterCredentials"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:dbname:*/*",
          "arn:aws:redshift:*:*:dbuser:*/redshift_data_api_user"
        ]
      },
      {
        "Sid": "GetCredentialsWithFederatedIAMCredentials",
        "Effect": "Allow",
        "Action": [
          "redshift:GetClusterCredentialsWithIAM"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:dbname:*/*"
        ]
      },
      {
        "Sid": "GetCredentialsForServerless",
        "Effect": "Allow",
        "Action": [
          "redshift-serverless:GetCredentials"
        ],
        "Resource": [
          "arn:aws:redshift-serverless:*:*:workgroup/*"
        ]
      },
      {
        "Sid": "DenyCreateAPIUser",
        "Effect": "Deny",
        "Action": [
          "redshift:CreateClusterUser"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:dbuser:*/redshift_data_api_user"
        ]
      },
      {
        "Sid": "ServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/redshift-data.amazonaws.com/AWSServiceRoleForRedshift"
        ]
      }
    ]
  },
  "AWSRoboMaker_FullAccess": {
    "policy": {
      "PolicyName": "AWSRoboMaker_FullAccess",
      "PolicyId": "ANPAZKAPJZG4FACURHLCA",
      "Arn": "arn:aws:iam::aws:policy/AWSRoboMaker_FullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS RoboMaker via the AWS Management Console and SDK. Also provides select access to related services (e.g., S3, IAM).",
      "CreateDate": "2020-09-10T18:34:18.000Z",
      "UpdateDate": "2021-09-16T21:06:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "robomaker:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:BatchGetImage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr-public:DescribeImages"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "MediaPackageServiceRolePolicy": {
    "policy": {
      "PolicyName": "MediaPackageServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GXH4HDK6N",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/MediaPackageServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows MediaPackage to publish logs to CloudWatch",
      "CreateDate": "2020-09-18T17:45:47.000Z",
      "UpdateDate": "2020-09-18T17:45:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/MediaPackage/*:log-stream:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/MediaPackage/*"
        ]
      }
    ]
  },
  "AWS_ConfigRole": {
    "policy": {
      "PolicyName": "AWS_ConfigRole",
      "PolicyId": "ANPAZKAPJZG4PP7QZ4FBG",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWS_ConfigRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v30",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for AWS Config service role. Provides permissions required for AWS Config to track changes to your AWS resources.",
      "CreateDate": "2020-09-15T20:30:30.000Z",
      "UpdateDate": "2024-02-22T21:19:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSConfigRoleStatementID",
        "Effect": "Allow",
        "Action": [
          "access-analyzer:GetAnalyzer",
          "access-analyzer:GetArchiveRule",
          "access-analyzer:ListAnalyzers",
          "access-analyzer:ListArchiveRules",
          "access-analyzer:ListTagsForResource",
          "account:GetAlternateContact",
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:GetCertificateAuthorityCsr",
          "acm-pca:ListCertificateAuthorities",
          "acm-pca:ListTags",
          "acm:DescribeCertificate",
          "acm:ListCertificates",
          "acm:ListTagsForCertificate",
          "airflow:GetEnvironment",
          "airflow:ListEnvironments",
          "airflow:ListTagsForResource",
          "amplify:GetApp",
          "amplify:GetBranch",
          "amplify:ListApps",
          "amplify:ListBranches",
          "amplifyuibuilder:ExportThemes",
          "amplifyuibuilder:GetTheme",
          "amplifyuibuilder:ListThemes",
          "apigateway:GET",
          "app-integrations:GetEventIntegration",
          "app-integrations:ListEventIntegrationAssociations",
          "app-integrations:ListEventIntegrations",
          "appconfig:GetApplication",
          "appconfig:GetConfigurationProfile",
          "appconfig:GetDeployment",
          "appconfig:GetDeploymentStrategy",
          "appconfig:GetEnvironment",
          "appconfig:GetExtensionAssociation",
          "appconfig:GetHostedConfigurationVersion",
          "appconfig:ListApplications",
          "appconfig:ListConfigurationProfiles",
          "appconfig:ListDeployments",
          "appconfig:ListDeploymentStrategies",
          "appconfig:ListEnvironments",
          "appconfig:ListExtensionAssociations",
          "appconfig:ListHostedConfigurationVersions",
          "appconfig:ListTagsForResource",
          "appflow:DescribeConnectorProfiles",
          "appflow:DescribeFlow",
          "appflow:ListFlows",
          "appflow:ListTagsForResource",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingPolicies",
          "appmesh:DescribeGatewayRoute",
          "appmesh:DescribeMesh",
          "appmesh:DescribeRoute",
          "appmesh:DescribeVirtualGateway",
          "appmesh:DescribeVirtualNode",
          "appmesh:DescribeVirtualRouter",
          "appmesh:DescribeVirtualService",
          "appmesh:ListGatewayRoutes",
          "appmesh:ListMeshes",
          "appmesh:ListRoutes",
          "appmesh:ListTagsForResource",
          "appmesh:ListVirtualGateways",
          "appmesh:ListVirtualNodes",
          "appmesh:ListVirtualRouters",
          "appmesh:ListVirtualServices",
          "apprunner:DescribeService",
          "apprunner:DescribeVpcConnector",
          "apprunner:ListServices",
          "apprunner:ListTagsForResource",
          "apprunner:ListVpcConnectors",
          "appstream:DescribeApplications",
          "appstream:DescribeDirectoryConfigs",
          "appstream:DescribeFleets",
          "appstream:DescribeStacks",
          "appstream:ListTagsForResource",
          "appsync:GetApiCache",
          "appsync:GetGraphqlApi",
          "appsync:ListGraphqlApis",
          "aps:DescribeAlertManagerDefinition",
          "aps:DescribeLoggingConfiguration",
          "aps:DescribeRuleGroupsNamespace",
          "aps:DescribeWorkspace",
          "aps:ListRuleGroupsNamespaces",
          "aps:ListTagsForResource",
          "aps:ListWorkspaces",
          "athena:GetDataCatalog",
          "athena:GetPreparedStatement",
          "athena:GetWorkGroup",
          "athena:ListDataCatalogs",
          "athena:ListPreparedStatements",
          "athena:ListTagsForResource",
          "athena:ListWorkGroups",
          "auditmanager:GetAccountStatus",
          "auditmanager:GetAssessment",
          "auditmanager:ListAssessments",
          "autoscaling-plans:DescribeScalingPlanResources",
          "autoscaling-plans:DescribeScalingPlans",
          "autoscaling-plans:GetScalingPlanResourceForecastData",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:DescribeLifecycleHooks",
          "autoscaling:DescribePolicies",
          "autoscaling:DescribeScheduledActions",
          "autoscaling:DescribeTags",
          "autoscaling:DescribeWarmPool",
          "backup-gateway:ListTagsForResource",
          "backup-gateway:ListVirtualMachines",
          "backup:DescribeBackupVault",
          "backup:DescribeFramework",
          "backup:DescribeProtectedResource",
          "backup:DescribeRecoveryPoint",
          "backup:DescribeReportPlan",
          "backup:GetBackupPlan",
          "backup:GetBackupSelection",
          "backup:GetBackupVaultAccessPolicy",
          "backup:GetBackupVaultNotifications",
          "backup:ListBackupPlans",
          "backup:ListBackupSelections",
          "backup:ListBackupVaults",
          "backup:ListFrameworks",
          "backup:ListRecoveryPointsByBackupVault",
          "backup:ListReportPlans",
          "backup:ListTags",
          "batch:DescribeComputeEnvironments",
          "batch:DescribeJobQueues",
          "batch:DescribeSchedulingPolicies",
          "batch:ListSchedulingPolicies",
          "batch:ListTagsForResource",
          "billingconductor:ListAccountAssociations",
          "billingconductor:ListBillingGroups",
          "billingconductor:ListCustomLineItems",
          "billingconductor:ListPricingPlans",
          "billingconductor:ListPricingRules",
          "billingconductor:ListPricingRulesAssociatedToPricingPlan",
          "billingconductor:ListTagsForResource",
          "budgets:DescribeBudgetAction",
          "budgets:DescribeBudgetActionsForAccount",
          "budgets:DescribeBudgetActionsForBudget",
          "budgets:ViewBudget",
          "cassandra:Select",
          "ce:GetAnomalyMonitors",
          "ce:GetAnomalySubscriptions",
          "cloud9:DescribeEnvironmentMemberships",
          "cloud9:DescribeEnvironments",
          "cloud9:ListEnvironments",
          "cloud9:ListTagsForResource",
          "cloudformation:DescribeType",
          "cloudformation:GetResource",
          "cloudformation:ListResources",
          "cloudformation:ListStackResources",
          "cloudformation:ListStacks",
          "cloudformation:ListTypes",
          "cloudfront:GetFunction",
          "cloudfront:GetOriginAccessControl",
          "cloudfront:GetResponseHeadersPolicy",
          "cloudfront:ListDistributions",
          "cloudfront:ListFunctions",
          "cloudfront:ListOriginAccessControls",
          "cloudfront:ListResponseHeadersPolicies",
          "cloudfront:ListTagsForResource",
          "cloudtrail:DescribeTrails",
          "cloudtrail:GetEventDataStore",
          "cloudtrail:GetEventSelectors",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:ListEventDataStores",
          "cloudtrail:ListTags",
          "cloudtrail:ListTrails",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:DescribeAnomalyDetectors",
          "cloudwatch:GetDashboard",
          "cloudwatch:GetMetricStream",
          "cloudwatch:ListDashboards",
          "cloudwatch:ListMetricStreams",
          "cloudwatch:ListTagsForResource",
          "codeartifact:DescribeRepository",
          "codeartifact:GetRepositoryPermissionsPolicy",
          "codeartifact:ListDomains",
          "codeartifact:ListPackages",
          "codeartifact:ListPackageVersions",
          "codeartifact:ListRepositories",
          "codeartifact:ListTagsForResource",
          "codebuild:BatchGetReportGroups",
          "codebuild:ListReportGroups",
          "codecommit:GetRepository",
          "codecommit:GetRepositoryTriggers",
          "codecommit:ListRepositories",
          "codecommit:ListTagsForResource",
          "codedeploy:GetDeploymentConfig",
          "codeguru-profiler:DescribeProfilingGroup",
          "codeguru-profiler:GetNotificationConfiguration",
          "codeguru-profiler:GetPolicy",
          "codeguru-profiler:ListProfilingGroups",
          "codeguru-reviewer:DescribeRepositoryAssociation",
          "codeguru-reviewer:ListRepositoryAssociations",
          "codepipeline:GetPipeline",
          "codepipeline:GetPipelineState",
          "codepipeline:ListPipelines",
          "cognito-identity:DescribeIdentityPool",
          "cognito-identity:GetIdentityPoolRoles",
          "cognito-identity:GetPrincipalTagAttributeMap",
          "cognito-identity:ListIdentityPools",
          "cognito-identity:ListTagsForResource",
          "cognito-idp:DescribeIdentityProvider",
          "cognito-idp:DescribeResourceServer",
          "cognito-idp:DescribeUserPool",
          "cognito-idp:DescribeUserPoolClient",
          "cognito-idp:DescribeUserPoolDomain",
          "cognito-idp:GetGroup",
          "cognito-idp:GetUserPoolMfaConfig",
          "cognito-idp:ListGroups",
          "cognito-idp:ListIdentityProviders",
          "cognito-idp:ListResourceServers",
          "cognito-idp:ListTagsForResource",
          "cognito-idp:ListUserPoolClients",
          "cognito-idp:ListUserPools",
          "config:BatchGet*",
          "config:Describe*",
          "config:Get*",
          "config:List*",
          "config:Put*",
          "config:Select*",
          "connect:DescribeEvaluationForm",
          "connect:DescribeInstance",
          "connect:DescribeInstanceStorageConfig",
          "connect:DescribePhoneNumber",
          "connect:DescribePrompt",
          "connect:DescribeQuickConnect",
          "connect:DescribeRule",
          "connect:DescribeUser",
          "connect:GetTaskTemplate",
          "connect:ListApprovedOrigins",
          "connect:ListEvaluationForms",
          "connect:ListInstanceAttributes",
          "connect:ListInstances",
          "connect:ListInstanceStorageConfigs",
          "connect:ListIntegrationAssociations",
          "connect:ListPhoneNumbers",
          "connect:ListPhoneNumbersV2",
          "connect:ListPrompts",
          "connect:ListQuickConnects",
          "connect:ListRules",
          "connect:ListSecurityKeys",
          "connect:ListTagsForResource",
          "connect:ListTaskTemplates",
          "connect:ListUsers",
          "connect:SearchAvailablePhoneNumbers",
          "databrew:DescribeDataset",
          "databrew:DescribeJob",
          "databrew:DescribeProject",
          "databrew:DescribeRecipe",
          "databrew:DescribeRuleset",
          "databrew:DescribeSchedule",
          "databrew:ListDatasets",
          "databrew:ListJobs",
          "databrew:ListProjects",
          "databrew:ListRecipes",
          "databrew:ListRecipeVersions",
          "databrew:ListRulesets",
          "databrew:ListSchedules",
          "datasync:DescribeAgent",
          "datasync:DescribeLocationEfs",
          "datasync:DescribeLocationFsxLustre",
          "datasync:DescribeLocationFsxWindows",
          "datasync:DescribeLocationHdfs",
          "datasync:DescribeLocationNfs",
          "datasync:DescribeLocationObjectStorage",
          "datasync:DescribeLocationS3",
          "datasync:DescribeLocationSmb",
          "datasync:DescribeTask",
          "datasync:ListAgents",
          "datasync:ListLocations",
          "datasync:ListTagsForResource",
          "datasync:ListTasks",
          "dax:DescribeClusters",
          "dax:DescribeParameterGroups",
          "dax:DescribeParameters",
          "dax:DescribeSubnetGroups",
          "dax:ListTags",
          "detective:ListGraphs",
          "detective:ListTagsForResource",
          "devicefarm:GetInstanceProfile",
          "devicefarm:GetNetworkProfile",
          "devicefarm:GetProject",
          "devicefarm:GetTestGridProject",
          "devicefarm:ListInstanceProfiles",
          "devicefarm:ListNetworkProfiles",
          "devicefarm:ListProjects",
          "devicefarm:ListTagsForResource",
          "devicefarm:ListTestGridProjects",
          "devops-guru:GetResourceCollection",
          "dms:DescribeCertificates",
          "dms:DescribeEndpoints",
          "dms:DescribeEventSubscriptions",
          "dms:DescribeReplicationInstances",
          "dms:DescribeReplicationSubnetGroups",
          "dms:DescribeReplicationTaskAssessmentRuns",
          "dms:DescribeReplicationTasks",
          "dms:ListTagsForResource",
          "ds:DescribeDirectories",
          "ds:DescribeDomainControllers",
          "ds:DescribeEventTopics",
          "ds:ListLogSubscriptions",
          "ds:ListTagsForResource",
          "dynamodb:DescribeContinuousBackups",
          "dynamodb:DescribeGlobalTable",
          "dynamodb:DescribeGlobalTableSettings",
          "dynamodb:DescribeLimits",
          "dynamodb:DescribeTable",
          "dynamodb:DescribeTableReplicaAutoScaling",
          "dynamodb:DescribeTimeToLive",
          "dynamodb:ListTables",
          "dynamodb:ListTagsOfResource",
          "ec2:Describe*",
          "ec2:DescribeClientVpnAuthorizationRules",
          "ec2:DescribeClientVpnEndpoints",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeFleets",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSpotFleetRequests",
          "ec2:DescribeTags",
          "ec2:DescribeTrafficMirrorFilters",
          "ec2:DescribeTrafficMirrorSessions",
          "ec2:DescribeTrafficMirrorTargets",
          "ec2:DescribeVolumeAttribute",
          "ec2:DescribeVolumes",
          "ec2:GetEbsEncryptionByDefault",
          "ec2:GetInstanceTypesFromInstanceRequirements",
          "ec2:GetIpamPoolAllocations",
          "ec2:GetIpamPoolCidrs",
          "ec2:GetManagedPrefixListEntries",
          "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
          "ec2:GetNetworkInsightsAccessScopeContent",
          "ecr-public:DescribeRepositories",
          "ecr-public:GetRepositoryCatalogData",
          "ecr-public:GetRepositoryPolicy",
          "ecr-public:ListTagsForResource",
          "ecr:BatchGetRepositoryScanningConfiguration",
          "ecr:DescribePullThroughCacheRules",
          "ecr:DescribeRegistry",
          "ecr:DescribeRepositories",
          "ecr:GetLifecyclePolicy",
          "ecr:GetRegistryPolicy",
          "ecr:GetRepositoryPolicy",
          "ecr:ListTagsForResource",
          "ecs:DescribeCapacityProviders",
          "ecs:DescribeClusters",
          "ecs:DescribeServices",
          "ecs:DescribeTaskDefinition",
          "ecs:DescribeTaskSets",
          "ecs:ListClusters",
          "ecs:ListServices",
          "ecs:ListTagsForResource",
          "ecs:ListTaskDefinitionFamilies",
          "ecs:ListTaskDefinitions",
          "eks:DescribeAddon",
          "eks:DescribeCluster",
          "eks:DescribeFargateProfile",
          "eks:DescribeIdentityProviderConfig",
          "eks:DescribeNodegroup",
          "eks:ListAddons",
          "eks:ListClusters",
          "eks:ListFargateProfiles",
          "eks:ListIdentityProviderConfigs",
          "eks:ListNodegroups",
          "eks:ListTagsForResource",
          "elasticache:DescribeCacheClusters",
          "elasticache:DescribeCacheParameterGroups",
          "elasticache:DescribeCacheParameters",
          "elasticache:DescribeCacheSecurityGroups",
          "elasticache:DescribeCacheSubnetGroups",
          "elasticache:DescribeGlobalReplicationGroups",
          "elasticache:DescribeReplicationGroups",
          "elasticache:DescribeSnapshots",
          "elasticache:DescribeUserGroups",
          "elasticache:DescribeUsers",
          "elasticache:ListTagsForResource",
          "elasticbeanstalk:DescribeConfigurationSettings",
          "elasticbeanstalk:DescribeEnvironments",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeBackupPolicy",
          "elasticfilesystem:DescribeFileSystemPolicy",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeLifecycleConfiguration",
          "elasticfilesystem:DescribeMountTargets",
          "elasticfilesystem:DescribeMountTargetSecurityGroups",
          "elasticloadbalancing:DescribeListenerCertificates",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancerPolicies",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetGroupAttributes",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:DescribeSecurityConfiguration",
          "elasticmapreduce:DescribeStep",
          "elasticmapreduce:DescribeStudio",
          "elasticmapreduce:GetBlockPublicAccessConfiguration",
          "elasticmapreduce:GetManagedScalingPolicy",
          "elasticmapreduce:GetStudioSessionMapping",
          "elasticmapreduce:ListClusters",
          "elasticmapreduce:ListInstanceFleets",
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ListInstances",
          "elasticmapreduce:ListSecurityConfigurations",
          "elasticmapreduce:ListSteps",
          "elasticmapreduce:ListStudios",
          "elasticmapreduce:ListStudioSessionMappings",
          "emr-containers:DescribeVirtualCluster",
          "emr-containers:ListVirtualClusters",
          "emr-serverless:GetApplication",
          "emr-serverless:ListApplications",
          "es:DescribeDomain",
          "es:DescribeDomains",
          "es:DescribeElasticsearchDomain",
          "es:DescribeElasticsearchDomains",
          "es:GetCompatibleElasticsearchVersions",
          "es:GetCompatibleVersions",
          "es:ListDomainNames",
          "es:ListTags",
          "events:DescribeApiDestination",
          "events:DescribeArchive",
          "events:DescribeConnection",
          "events:DescribeEndpoint",
          "events:DescribeEventBus",
          "events:DescribeRule",
          "events:ListApiDestinations",
          "events:ListArchives",
          "events:ListConnections",
          "events:ListEndpoints",
          "events:ListEventBuses",
          "events:ListRules",
          "events:ListTagsForResource",
          "events:ListTargetsByRule",
          "evidently:GetLaunch",
          "evidently:GetProject",
          "evidently:GetSegment",
          "evidently:ListLaunches",
          "evidently:ListProjects",
          "evidently:ListSegments",
          "evidently:ListTagsForResource",
          "finspace:GetEnvironment",
          "finspace:ListEnvironments",
          "firehose:DescribeDeliveryStream",
          "firehose:ListDeliveryStreams",
          "firehose:ListTagsForDeliveryStream",
          "fis:GetExperimentTemplate",
          "fis:ListExperimentTemplates",
          "fms:GetNotificationChannel",
          "fms:GetPolicy",
          "fms:ListPolicies",
          "fms:ListTagsForResource",
          "forecast:DescribeDataset",
          "forecast:DescribeDatasetGroup",
          "forecast:ListDatasetGroups",
          "forecast:ListDatasets",
          "forecast:ListTagsForResource",
          "frauddetector:GetDetectors",
          "frauddetector:GetDetectorVersion",
          "frauddetector:GetEntityTypes",
          "frauddetector:GetEventTypes",
          "frauddetector:GetExternalModels",
          "frauddetector:GetLabels",
          "frauddetector:GetModels",
          "frauddetector:GetOutcomes",
          "frauddetector:GetRules",
          "frauddetector:GetVariables",
          "frauddetector:ListTagsForResource",
          "fsx:DescribeBackups",
          "fsx:DescribeDataRepositoryAssociations",
          "fsx:DescribeFileSystems",
          "fsx:DescribeSnapshots",
          "fsx:DescribeStorageVirtualMachines",
          "fsx:DescribeVolumes",
          "fsx:ListTagsForResource",
          "gamelift:DescribeAlias",
          "gamelift:DescribeBuild",
          "gamelift:DescribeFleetAttributes",
          "gamelift:DescribeFleetCapacity",
          "gamelift:DescribeFleetLocationAttributes",
          "gamelift:DescribeFleetLocationCapacity",
          "gamelift:DescribeFleetPortSettings",
          "gamelift:DescribeGameServerGroup",
          "gamelift:DescribeGameSessionQueues",
          "gamelift:DescribeMatchmakingConfigurations",
          "gamelift:DescribeMatchmakingRuleSets",
          "gamelift:DescribeRuntimeConfiguration",
          "gamelift:DescribeScript",
          "gamelift:DescribeVpcPeeringAuthorizations",
          "gamelift:DescribeVpcPeeringConnections",
          "gamelift:ListAliases",
          "gamelift:ListBuilds",
          "gamelift:ListFleets",
          "gamelift:ListGameServerGroups",
          "gamelift:ListScripts",
          "gamelift:ListTagsForResource",
          "geo:DescribeGeofenceCollection",
          "geo:DescribeMap",
          "geo:DescribePlaceIndex",
          "geo:DescribeRouteCalculator",
          "geo:DescribeTracker",
          "geo:ListGeofenceCollections",
          "geo:ListMaps",
          "geo:ListPlaceIndexes",
          "geo:ListRouteCalculators",
          "geo:ListTrackerConsumers",
          "geo:ListTrackers",
          "globalaccelerator:DescribeAccelerator",
          "globalaccelerator:DescribeEndpointGroup",
          "globalaccelerator:DescribeListener",
          "globalaccelerator:ListAccelerators",
          "globalaccelerator:ListEndpointGroups",
          "globalaccelerator:ListListeners",
          "globalaccelerator:ListTagsForResource",
          "glue:BatchGetDevEndpoints",
          "glue:BatchGetJobs",
          "glue:BatchGetWorkflows",
          "glue:GetClassifier",
          "glue:GetClassifiers",
          "glue:GetCrawler",
          "glue:GetCrawlers",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetDevEndpoint",
          "glue:GetDevEndpoints",
          "glue:GetJob",
          "glue:GetJobs",
          "glue:GetMLTransform",
          "glue:GetMLTransforms",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:GetSecurityConfiguration",
          "glue:GetSecurityConfigurations",
          "glue:GetTable",
          "glue:GetTags",
          "glue:GetWorkflow",
          "glue:ListCrawlers",
          "glue:ListDevEndpoints",
          "glue:ListJobs",
          "glue:ListMLTransforms",
          "glue:ListWorkflows",
          "grafana:DescribeWorkspace",
          "grafana:DescribeWorkspaceAuthentication",
          "grafana:DescribeWorkspaceConfiguration",
          "grafana:ListWorkspaces",
          "greengrass:DescribeComponent",
          "greengrass:GetComponent",
          "greengrass:ListComponents",
          "greengrass:ListComponentVersions",
          "groundstation:GetConfig",
          "groundstation:GetDataflowEndpointGroup",
          "groundstation:GetMissionProfile",
          "groundstation:ListConfigs",
          "groundstation:ListDataflowEndpointGroups",
          "groundstation:ListMissionProfiles",
          "groundstation:ListTagsForResource",
          "guardduty:DescribePublishingDestination",
          "guardduty:GetAdministratorAccount",
          "guardduty:GetDetector",
          "guardduty:GetFilter",
          "guardduty:GetFindings",
          "guardduty:GetIPSet",
          "guardduty:GetMasterAccount",
          "guardduty:GetMemberDetectors",
          "guardduty:GetMembers",
          "guardduty:GetThreatIntelSet",
          "guardduty:ListDetectors",
          "guardduty:ListFilters",
          "guardduty:ListFindings",
          "guardduty:ListIPSets",
          "guardduty:ListMembers",
          "guardduty:ListOrganizationAdminAccounts",
          "guardduty:ListPublishingDestinations",
          "guardduty:ListTagsForResource",
          "guardduty:ListThreatIntelSets",
          "healthlake:DescribeFHIRDatastore",
          "healthlake:ListFHIRDatastores",
          "healthlake:ListTagsForResource",
          "iam:GenerateCredentialReport",
          "iam:GetAccountAuthorizationDetails",
          "iam:GetAccountPasswordPolicy",
          "iam:GetAccountSummary",
          "iam:GetCredentialReport",
          "iam:GetGroup",
          "iam:GetGroupPolicy",
          "iam:GetInstanceProfile",
          "iam:GetOpenIDConnectProvider",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:GetSAMLProvider",
          "iam:GetServerCertificate",
          "iam:GetUser",
          "iam:GetUserPolicy",
          "iam:ListAccessKeys",
          "iam:ListAttachedGroupPolicies",
          "iam:ListAttachedRolePolicies",
          "iam:ListAttachedUserPolicies",
          "iam:ListEntitiesForPolicy",
          "iam:ListGroupPolicies",
          "iam:ListGroups",
          "iam:ListGroupsForUser",
          "iam:ListInstanceProfiles",
          "iam:ListInstanceProfilesForRole",
          "iam:ListInstanceProfileTags",
          "iam:ListMFADevices",
          "iam:ListMFADeviceTags",
          "iam:ListOpenIDConnectProviders",
          "iam:ListPolicyVersions",
          "iam:ListRolePolicies",
          "iam:ListRoles",
          "iam:ListSAMLProviders",
          "iam:ListServerCertificates",
          "iam:ListUserPolicies",
          "iam:ListUsers",
          "iam:ListVirtualMFADevices",
          "imagebuilder:GetComponent",
          "imagebuilder:GetContainerRecipe",
          "imagebuilder:GetDistributionConfiguration",
          "imagebuilder:GetImage",
          "imagebuilder:GetImagePipeline",
          "imagebuilder:GetImageRecipe",
          "imagebuilder:GetInfrastructureConfiguration",
          "imagebuilder:ListComponentBuildVersions",
          "imagebuilder:ListComponents",
          "imagebuilder:ListContainerRecipes",
          "imagebuilder:ListDistributionConfigurations",
          "imagebuilder:ListImageBuildVersions",
          "imagebuilder:ListImagePipelines",
          "imagebuilder:ListImageRecipes",
          "imagebuilder:ListImages",
          "imagebuilder:ListInfrastructureConfigurations",
          "inspector2:BatchGetAccountStatus",
          "inspector2:GetDelegatedAdminAccount",
          "inspector2:ListFilters",
          "inspector2:ListMembers",
          "iot:DescribeAccountAuditConfiguration",
          "iot:DescribeAuthorizer",
          "iot:DescribeCACertificate",
          "iot:DescribeCertificate",
          "iot:DescribeCustomMetric",
          "iot:DescribeDimension",
          "iot:DescribeDomainConfiguration",
          "iot:DescribeFleetMetric",
          "iot:DescribeJobTemplate",
          "iot:DescribeMitigationAction",
          "iot:DescribeProvisioningTemplate",
          "iot:DescribeRoleAlias",
          "iot:DescribeScheduledAudit",
          "iot:DescribeSecurityProfile",
          "iot:GetPolicy",
          "iot:GetTopicRule",
          "iot:GetTopicRuleDestination",
          "iot:ListAuthorizers",
          "iot:ListCACertificates",
          "iot:ListCertificates",
          "iot:ListCustomMetrics",
          "iot:ListDimensions",
          "iot:ListDomainConfigurations",
          "iot:ListFleetMetrics",
          "iot:ListJobTemplates",
          "iot:ListMitigationActions",
          "iot:ListPolicies",
          "iot:ListProvisioningTemplates",
          "iot:ListRoleAliases",
          "iot:ListScheduledAudits",
          "iot:ListSecurityProfiles",
          "iot:ListSecurityProfilesForTarget",
          "iot:ListTagsForResource",
          "iot:ListTargetsForSecurityProfile",
          "iot:ListTopicRuleDestinations",
          "iot:ListTopicRules",
          "iot:ListV2LoggingLevels",
          "iot:ValidateSecurityProfileBehaviors",
          "iotanalytics:DescribeChannel",
          "iotanalytics:DescribeDataset",
          "iotanalytics:DescribeDatastore",
          "iotanalytics:DescribePipeline",
          "iotanalytics:ListChannels",
          "iotanalytics:ListDatasets",
          "iotanalytics:ListDatastores",
          "iotanalytics:ListPipelines",
          "iotanalytics:ListTagsForResource",
          "iotevents:DescribeAlarmModel",
          "iotevents:DescribeDetectorModel",
          "iotevents:DescribeInput",
          "iotevents:ListAlarmModels",
          "iotevents:ListDetectorModels",
          "iotevents:ListInputs",
          "iotevents:ListTagsForResource",
          "iotsitewise:DescribeAccessPolicy",
          "iotsitewise:DescribeAsset",
          "iotsitewise:DescribeAssetModel",
          "iotsitewise:DescribeDashboard",
          "iotsitewise:DescribeGateway",
          "iotsitewise:DescribePortal",
          "iotsitewise:DescribeProject",
          "iotsitewise:ListAccessPolicies",
          "iotsitewise:ListAssetModels",
          "iotsitewise:ListAssets",
          "iotsitewise:ListDashboards",
          "iotsitewise:ListGateways",
          "iotsitewise:ListPortals",
          "iotsitewise:ListProjectAssets",
          "iotsitewise:ListProjects",
          "iotsitewise:ListTagsForResource",
          "iottwinmaker:GetComponentType",
          "iottwinmaker:GetEntity",
          "iottwinmaker:GetScene",
          "iottwinmaker:GetSyncJob",
          "iottwinmaker:GetWorkspace",
          "iottwinmaker:ListComponentTypes",
          "iottwinmaker:ListEntities",
          "iottwinmaker:ListScenes",
          "iottwinmaker:ListSyncJobs",
          "iottwinmaker:ListTagsForResource",
          "iottwinmaker:ListWorkspaces",
          "iotwireless:GetFuotaTask",
          "iotwireless:GetMulticastGroup",
          "iotwireless:GetServiceProfile",
          "iotwireless:GetWirelessDevice",
          "iotwireless:GetWirelessGatewayTaskDefinition",
          "iotwireless:ListFuotaTasks",
          "iotwireless:ListMulticastGroups",
          "iotwireless:ListServiceProfiles",
          "iotwireless:ListTagsForResource",
          "iotwireless:ListWirelessDevices",
          "iotwireless:ListWirelessGatewayTaskDefinitions",
          "ivs:GetChannel",
          "ivs:GetPlaybackKeyPair",
          "ivs:GetRecordingConfiguration",
          "ivs:GetStreamKey",
          "ivs:ListChannels",
          "ivs:ListPlaybackKeyPairs",
          "ivs:ListRecordingConfigurations",
          "ivs:ListStreamKeys",
          "ivs:ListTagsForResource",
          "kafka:DescribeCluster",
          "kafka:DescribeClusterV2",
          "kafka:DescribeConfiguration",
          "kafka:DescribeConfigurationRevision",
          "kafka:DescribeVpcConnection",
          "kafka:GetClusterPolicy",
          "kafka:ListClusters",
          "kafka:ListClustersV2",
          "kafka:ListConfigurations",
          "kafka:ListScramSecrets",
          "kafka:ListTagsForResource",
          "kafka:ListVpcConnections",
          "kafkaconnect:DescribeConnector",
          "kafkaconnect:ListConnectors",
          "kendra:DescribeIndex",
          "kendra:ListIndices",
          "kendra:ListTagsForResource",
          "kinesis:DescribeStreamConsumer",
          "kinesis:DescribeStreamSummary",
          "kinesis:ListStreamConsumers",
          "kinesis:ListStreams",
          "kinesis:ListTagsForStream",
          "kinesisanalytics:DescribeApplication",
          "kinesisanalytics:ListApplications",
          "kinesisanalytics:ListTagsForResource",
          "kinesisvideo:DescribeSignalingChannel",
          "kinesisvideo:DescribeStream",
          "kinesisvideo:ListSignalingChannels",
          "kinesisvideo:ListStreams",
          "kinesisvideo:ListTagsForResource",
          "kinesisvideo:ListTagsForStream",
          "kms:DescribeKey",
          "kms:GetKeyPolicy",
          "kms:GetKeyRotationStatus",
          "kms:ListAliases",
          "kms:ListKeys",
          "kms:ListResourceTags",
          "lakeformation:DescribeResource",
          "lakeformation:GetDataLakeSettings",
          "lakeformation:ListPermissions",
          "lakeformation:ListResources",
          "lambda:GetAlias",
          "lambda:GetCodeSigningConfig",
          "lambda:GetFunction",
          "lambda:GetFunctionCodeSigningConfig",
          "lambda:GetLayerVersion",
          "lambda:GetPolicy",
          "lambda:ListAliases",
          "lambda:ListCodeSigningConfigs",
          "lambda:ListFunctions",
          "lambda:ListLayers",
          "lambda:ListLayerVersions",
          "lambda:ListTags",
          "lambda:ListVersionsByFunction",
          "lex:DescribeBot",
          "lex:DescribeBotAlias",
          "lex:DescribeBotVersion",
          "lex:DescribeResourcePolicy",
          "lex:ListBotAliases",
          "lex:ListBotLocales",
          "lex:ListBots",
          "lex:ListBotVersions",
          "lex:ListTagsForResource",
          "license-manager:GetGrant",
          "license-manager:GetLicense",
          "license-manager:ListDistributedGrants",
          "license-manager:ListLicenses",
          "license-manager:ListReceivedGrants",
          "lightsail:GetAlarms",
          "lightsail:GetBuckets",
          "lightsail:GetCertificates",
          "lightsail:GetContainerServices",
          "lightsail:GetDisk",
          "lightsail:GetDisks",
          "lightsail:GetDistributions",
          "lightsail:GetInstance",
          "lightsail:GetInstances",
          "lightsail:GetKeyPair",
          "lightsail:GetLoadBalancer",
          "lightsail:GetLoadBalancers",
          "lightsail:GetLoadBalancerTlsCertificates",
          "lightsail:GetRelationalDatabase",
          "lightsail:GetRelationalDatabaseParameters",
          "lightsail:GetRelationalDatabases",
          "lightsail:GetStaticIp",
          "lightsail:GetStaticIps",
          "logs:DescribeDestinations",
          "logs:DescribeLogGroups",
          "logs:DescribeMetricFilters",
          "logs:GetDataProtectionPolicy",
          "logs:GetLogDelivery",
          "logs:ListLogDeliveries",
          "logs:ListTagsLogGroup",
          "lookoutequipment:DescribeInferenceScheduler",
          "lookoutequipment:ListTagsForResource",
          "lookoutmetrics:DescribeAlert",
          "lookoutmetrics:DescribeAnomalyDetector",
          "lookoutmetrics:ListAlerts",
          "lookoutmetrics:ListAnomalyDetectors",
          "lookoutmetrics:ListMetricSets",
          "lookoutmetrics:ListTagsForResource",
          "lookoutvision:DescribeProject",
          "lookoutvision:ListProjects",
          "m2:GetEnvironment",
          "m2:ListEnvironments",
          "m2:ListTagsForResource",
          "macie2:DescribeOrganizationConfiguration",
          "macie2:GetAutomatedDiscoveryConfiguration",
          "macie2:GetClassificationExportConfiguration",
          "macie2:GetCustomDataIdentifier",
          "macie2:GetFindingsPublicationConfiguration",
          "macie2:GetMacieSession",
          "macie2:ListCustomDataIdentifiers",
          "macie2:ListTagsForResource",
          "managedblockchain:GetMember",
          "managedblockchain:GetNetwork",
          "managedblockchain:GetNode",
          "managedblockchain:ListInvitations",
          "managedblockchain:ListMembers",
          "managedblockchain:ListNodes",
          "mediaconnect:DescribeFlow",
          "mediaconnect:ListFlows",
          "mediaconnect:ListTagsForResource",
          "mediapackage-vod:DescribePackagingConfiguration",
          "mediapackage-vod:DescribePackagingGroup",
          "mediapackage-vod:ListPackagingConfigurations",
          "mediapackage-vod:ListPackagingGroups",
          "mediapackage-vod:ListTagsForResource",
          "mediatailor:GetPlaybackConfiguration",
          "mediatailor:ListPlaybackConfigurations",
          "memorydb:DescribeAcls",
          "memorydb:DescribeClusters",
          "memorydb:DescribeParameterGroups",
          "memorydb:DescribeParameters",
          "memorydb:DescribeSubnetGroups",
          "memorydb:DescribeUsers",
          "memorydb:ListTags",
          "mobiletargeting:GetApp",
          "mobiletargeting:GetApplicationSettings",
          "mobiletargeting:GetApps",
          "mobiletargeting:GetCampaign",
          "mobiletargeting:GetCampaigns",
          "mobiletargeting:GetEmailChannel",
          "mobiletargeting:GetEmailTemplate",
          "mobiletargeting:GetEventStream",
          "mobiletargeting:GetInAppTemplate",
          "mobiletargeting:GetSegment",
          "mobiletargeting:GetSegments",
          "mobiletargeting:ListTagsForResource",
          "mobiletargeting:ListTemplates",
          "mq:DescribeBroker",
          "mq:ListBrokers",
          "network-firewall:DescribeLoggingConfiguration",
          "network-firewall:ListFirewalls",
          "networkmanager:DescribeGlobalNetworks",
          "networkmanager:GetConnectPeer",
          "networkmanager:GetCustomerGatewayAssociations",
          "networkmanager:GetDevices",
          "networkmanager:GetLinkAssociations",
          "networkmanager:GetLinks",
          "networkmanager:GetSites",
          "networkmanager:GetTransitGatewayRegistrations",
          "networkmanager:ListConnectPeers",
          "networkmanager:ListTagsForResource",
          "nimble:GetLaunchProfile",
          "nimble:GetLaunchProfileDetails",
          "nimble:GetStreamingImage",
          "nimble:GetStudio",
          "nimble:GetStudioComponent",
          "nimble:ListLaunchProfiles",
          "nimble:ListStreamingImages",
          "nimble:ListStudioComponents",
          "nimble:ListStudios",
          "opsworks:DescribeInstances",
          "opsworks:DescribeLayers",
          "opsworks:DescribeTimeBasedAutoScaling",
          "opsworks:DescribeVolumes",
          "opsworks:ListTags",
          "organizations:DescribeAccount",
          "organizations:DescribeEffectivePolicy",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribePolicy",
          "organizations:DescribeResourcePolicy",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListParents",
          "organizations:ListPolicies",
          "organizations:ListPoliciesForTarget",
          "organizations:ListRoots",
          "organizations:ListTagsForResource",
          "organizations:ListTargetsForPolicy",
          "panorama:DescribeApplicationInstance",
          "panorama:DescribeApplicationInstanceDetails",
          "panorama:DescribePackage",
          "panorama:DescribePackageVersion",
          "panorama:ListApplicationInstances",
          "panorama:ListNodes",
          "panorama:ListPackages",
          "personalize:DescribeDataset",
          "personalize:DescribeDatasetGroup",
          "personalize:DescribeSchema",
          "personalize:DescribeSolution",
          "personalize:ListDatasetGroups",
          "personalize:ListDatasetImportJobs",
          "personalize:ListDatasets",
          "personalize:ListSchemas",
          "personalize:ListSolutions",
          "personalize:ListTagsForResource",
          "profile:GetDomain",
          "profile:GetIntegration",
          "profile:GetProfileObjectType",
          "profile:ListDomains",
          "profile:ListIntegrations",
          "profile:ListProfileObjectTypes",
          "profile:ListTagsForResource",
          "quicksight:DescribeAccountSubscription",
          "quicksight:DescribeAnalysis",
          "quicksight:DescribeAnalysisPermissions",
          "quicksight:DescribeDashboard",
          "quicksight:DescribeDashboardPermissions",
          "quicksight:DescribeDataSet",
          "quicksight:DescribeDataSetPermissions",
          "quicksight:DescribeDataSetRefreshProperties",
          "quicksight:DescribeDataSource",
          "quicksight:DescribeDataSourcePermissions",
          "quicksight:DescribeTemplate",
          "quicksight:DescribeTemplatePermissions",
          "quicksight:DescribeTheme",
          "quicksight:DescribeThemePermissions",
          "quicksight:ListAnalyses",
          "quicksight:ListDashboards",
          "quicksight:ListDataSets",
          "quicksight:ListDataSources",
          "quicksight:ListTagsForResource",
          "quicksight:ListTemplates",
          "quicksight:ListThemes",
          "ram:GetPermission",
          "ram:GetResourceShareAssociations",
          "ram:GetResourceShares",
          "ram:ListPermissionAssociations",
          "ram:ListPermissions",
          "ram:ListPermissionVersions",
          "ram:ListResources",
          "ram:ListResourceSharePermissions",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBClusterParameters",
          "rds:DescribeDBClusters",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBProxies",
          "rds:DescribeDBProxyEndpoints",
          "rds:DescribeDBSecurityGroups",
          "rds:DescribeDBSnapshotAttributes",
          "rds:DescribeDBSnapshots",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEngineDefaultClusterParameters",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeGlobalClusters",
          "rds:DescribeOptionGroups",
          "rds:ListTagsForResource",
          "redshift-serverless:GetNamespace",
          "redshift-serverless:GetWorkgroup",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListTagsForResource",
          "redshift-serverless:ListWorkgroups",
          "redshift:DescribeClusterParameterGroups",
          "redshift:DescribeClusterParameters",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSecurityGroups",
          "redshift:DescribeClusterSnapshots",
          "redshift:DescribeClusterSubnetGroups",
          "redshift:DescribeEndpointAccess",
          "redshift:DescribeEndpointAuthorization",
          "redshift:DescribeEventSubscriptions",
          "redshift:DescribeLoggingStatus",
          "redshift:DescribeScheduledActions",
          "refactor-spaces:GetEnvironment",
          "refactor-spaces:GetService",
          "refactor-spaces:ListApplications",
          "refactor-spaces:ListEnvironments",
          "refactor-spaces:ListServices",
          "rekognition:DescribeStreamProcessor",
          "rekognition:ListStreamProcessors",
          "rekognition:ListTagsForResource",
          "resiliencehub:DescribeApp",
          "resiliencehub:DescribeAppVersionTemplate",
          "resiliencehub:DescribeResiliencyPolicy",
          "resiliencehub:ListApps",
          "resiliencehub:ListAppVersionResourceMappings",
          "resiliencehub:ListResiliencyPolicies",
          "resiliencehub:ListTagsForResource",
          "resource-explorer-2:GetIndex",
          "resource-explorer-2:ListIndexes",
          "resource-explorer-2:ListTagsForResource",
          "resource-groups:GetGroup",
          "resource-groups:GetGroupConfiguration",
          "resource-groups:GetGroupQuery",
          "resource-groups:GetTags",
          "resource-groups:ListGroupResources",
          "resource-groups:ListGroups",
          "robomaker:DescribeRobotApplication",
          "robomaker:DescribeSimulationApplication",
          "robomaker:ListRobotApplications",
          "robomaker:ListSimulationApplications",
          "route53-recovery-control-config:DescribeCluster",
          "route53-recovery-control-config:DescribeControlPanel",
          "route53-recovery-control-config:DescribeRoutingControl",
          "route53-recovery-control-config:DescribeSafetyRule",
          "route53-recovery-control-config:ListClusters",
          "route53-recovery-control-config:ListControlPanels",
          "route53-recovery-control-config:ListRoutingControls",
          "route53-recovery-control-config:ListSafetyRules",
          "route53-recovery-control-config:ListTagsForResource",
          "route53-recovery-readiness:GetCell",
          "route53-recovery-readiness:GetReadinessCheck",
          "route53-recovery-readiness:GetRecoveryGroup",
          "route53-recovery-readiness:GetResourceSet",
          "route53-recovery-readiness:ListCells",
          "route53-recovery-readiness:ListReadinessChecks",
          "route53-recovery-readiness:ListRecoveryGroups",
          "route53-recovery-readiness:ListResourceSets",
          "route53:GetChange",
          "route53:GetDNSSEC",
          "route53:GetHealthCheck",
          "route53:GetHostedZone",
          "route53:ListCidrBlocks",
          "route53:ListCidrCollections",
          "route53:ListCidrLocations",
          "route53:ListHealthChecks",
          "route53:ListHostedZones",
          "route53:ListHostedZonesByName",
          "route53:ListQueryLoggingConfigs",
          "route53:ListResourceRecordSets",
          "route53:ListTagsForResource",
          "route53resolver:GetFirewallDomainList",
          "route53resolver:GetFirewallRuleGroup",
          "route53resolver:GetFirewallRuleGroupAssociation",
          "route53resolver:GetResolverDnssecConfig",
          "route53resolver:GetResolverEndpoint",
          "route53resolver:GetResolverQueryLogConfig",
          "route53resolver:GetResolverQueryLogConfigAssociation",
          "route53resolver:GetResolverRule",
          "route53resolver:GetResolverRuleAssociation",
          "route53resolver:ListFirewallDomainLists",
          "route53resolver:ListFirewallDomains",
          "route53resolver:ListFirewallRuleGroupAssociations",
          "route53resolver:ListFirewallRuleGroups",
          "route53resolver:ListFirewallRules",
          "route53resolver:ListResolverDnssecConfigs",
          "route53resolver:ListResolverEndpointIpAddresses",
          "route53resolver:ListResolverEndpoints",
          "route53resolver:ListResolverQueryLogConfigAssociations",
          "route53resolver:ListResolverQueryLogConfigs",
          "route53resolver:ListResolverRuleAssociations",
          "route53resolver:ListResolverRules",
          "route53resolver:ListTagsForResource",
          "rum:GetAppMonitor",
          "rum:GetAppMonitorData",
          "rum:ListAppMonitors",
          "rum:ListTagsForResource",
          "s3-outposts:GetAccessPoint",
          "s3-outposts:GetAccessPointPolicy",
          "s3-outposts:GetBucket",
          "s3-outposts:GetBucketPolicy",
          "s3-outposts:GetBucketTagging",
          "s3-outposts:GetLifecycleConfiguration",
          "s3-outposts:ListAccessPoints",
          "s3-outposts:ListEndpoints",
          "s3-outposts:ListRegionalBuckets",
          "s3:GetAccelerateConfiguration",
          "s3:GetAccessPoint",
          "s3:GetAccessPointForObjectLambda",
          "s3:GetAccessPointPolicy",
          "s3:GetAccessPointPolicyForObjectLambda",
          "s3:GetAccessPointPolicyStatus",
          "s3:GetAccessPointPolicyStatusForObjectLambda",
          "s3:GetAccountPublicAccessBlock",
          "s3:GetBucketAcl",
          "s3:GetBucketCORS",
          "s3:GetBucketLocation",
          "s3:GetBucketLogging",
          "s3:GetBucketNotification",
          "s3:GetBucketObjectLockConfiguration",
          "s3:GetBucketPolicy",
          "s3:GetBucketPolicyStatus",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetBucketRequestPayment",
          "s3:GetBucketTagging",
          "s3:GetBucketVersioning",
          "s3:GetBucketWebsite",
          "s3:GetEncryptionConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:GetMultiRegionAccessPoint",
          "s3:GetMultiRegionAccessPointPolicy",
          "s3:GetMultiRegionAccessPointPolicyStatus",
          "s3:GetReplicationConfiguration",
          "s3:GetStorageLensConfiguration",
          "s3:GetStorageLensConfigurationTagging",
          "s3:ListAccessPoints",
          "s3:ListAccessPointsForObjectLambda",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListMultiRegionAccessPoints",
          "s3:ListStorageLensConfigurations",
          "s3express:GetBucketPolicy",
          "s3express:ListAllMyDirectoryBuckets",
          "sagemaker:DescribeAppImageConfig",
          "sagemaker:DescribeCodeRepository",
          "sagemaker:DescribeDataQualityJobDefinition",
          "sagemaker:DescribeDeviceFleet",
          "sagemaker:DescribeDomain",
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:DescribeFeatureGroup",
          "sagemaker:DescribeImage",
          "sagemaker:DescribeImageVersion",
          "sagemaker:DescribeInferenceExperiment",
          "sagemaker:DescribeModel",
          "sagemaker:DescribeModelBiasJobDefinition",
          "sagemaker:DescribeModelExplainabilityJobDefinition",
          "sagemaker:DescribeModelQualityJobDefinition",
          "sagemaker:DescribeMonitoringSchedule",
          "sagemaker:DescribeNotebookInstance",
          "sagemaker:DescribeNotebookInstanceLifecycleConfig",
          "sagemaker:DescribePipeline",
          "sagemaker:DescribeProject",
          "sagemaker:DescribeWorkteam",
          "sagemaker:ListAppImageConfigs",
          "sagemaker:ListCodeRepositories",
          "sagemaker:ListDataQualityJobDefinitions",
          "sagemaker:ListDeviceFleets",
          "sagemaker:ListDomains",
          "sagemaker:ListEndpointConfigs",
          "sagemaker:ListEndpoints",
          "sagemaker:ListFeatureGroups",
          "sagemaker:ListImages",
          "sagemaker:ListImageVersions",
          "sagemaker:ListInferenceExperiments",
          "sagemaker:ListModelBiasJobDefinitions",
          "sagemaker:ListModelExplainabilityJobDefinitions",
          "sagemaker:ListModelQualityJobDefinitions",
          "sagemaker:ListModels",
          "sagemaker:ListMonitoringSchedules",
          "sagemaker:ListNotebookInstanceLifecycleConfigs",
          "sagemaker:ListNotebookInstances",
          "sagemaker:ListPipelines",
          "sagemaker:ListProjects",
          "sagemaker:ListTags",
          "sagemaker:ListWorkteams",
          "schemas:DescribeDiscoverer",
          "schemas:DescribeRegistry",
          "schemas:DescribeSchema",
          "schemas:GetResourcePolicy",
          "schemas:ListDiscoverers",
          "schemas:ListRegistries",
          "schemas:ListSchemas",
          "sdb:GetAttributes",
          "sdb:ListDomains",
          "secretsmanager:ListSecrets",
          "secretsmanager:ListSecretVersionIds",
          "securityhub:DescribeHub",
          "servicecatalog:DescribePortfolioShares",
          "servicediscovery:GetInstance",
          "servicediscovery:GetNamespace",
          "servicediscovery:GetService",
          "servicediscovery:ListInstances",
          "servicediscovery:ListNamespaces",
          "servicediscovery:ListServices",
          "servicediscovery:ListTagsForResource",
          "ses:DescribeReceiptRule",
          "ses:DescribeReceiptRuleSet",
          "ses:GetConfigurationSet",
          "ses:GetConfigurationSetEventDestinations",
          "ses:GetContactList",
          "ses:GetEmailTemplate",
          "ses:GetTemplate",
          "ses:ListConfigurationSets",
          "ses:ListContactLists",
          "ses:ListEmailTemplates",
          "ses:ListReceiptFilters",
          "ses:ListReceiptRuleSets",
          "ses:ListTemplates",
          "shield:DescribeDRTAccess",
          "shield:DescribeProtection",
          "shield:DescribeSubscription",
          "signer:GetSigningProfile",
          "signer:ListProfilePermissions",
          "signer:ListSigningProfiles",
          "sns:GetDataProtectionPolicy",
          "sns:GetSMSSandboxAccountStatus",
          "sns:GetSubscriptionAttributes",
          "sns:GetTopicAttributes",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTagsForResource",
          "sns:ListTopics",
          "sqs:GetQueueAttributes",
          "sqs:ListQueues",
          "sqs:ListQueueTags",
          "ssm:DescribeAutomationExecutions",
          "ssm:DescribeDocument",
          "ssm:DescribeDocumentPermission",
          "ssm:DescribeParameters",
          "ssm:GetAutomationExecution",
          "ssm:GetDocument",
          "ssm:ListDocuments",
          "ssm:ListTagsForResource",
          "sso:DescribeInstanceAccessControlAttributeConfiguration",
          "sso:DescribePermissionSet",
          "sso:GetInlinePolicyForPermissionSet",
          "sso:ListManagedPoliciesInPermissionSet",
          "sso:ListPermissionSets",
          "sso:ListTagsForResource",
          "states:DescribeActivity",
          "states:DescribeStateMachine",
          "states:ListActivities",
          "states:ListStateMachines",
          "states:ListTagsForResource",
          "storagegateway:ListGateways",
          "storagegateway:ListTagsForResource",
          "storagegateway:ListVolumes",
          "sts:GetCallerIdentity",
          "support:DescribeCases",
          "synthetics:DescribeCanaries",
          "synthetics:DescribeCanariesLastRun",
          "synthetics:DescribeRuntimeVersions",
          "synthetics:GetCanary",
          "synthetics:GetCanaryRuns",
          "synthetics:GetGroup",
          "synthetics:ListAssociatedGroups",
          "synthetics:ListGroupResources",
          "synthetics:ListGroups",
          "synthetics:ListTagsForResource",
          "tag:GetResources",
          "timestream:DescribeDatabase",
          "timestream:DescribeEndpoints",
          "timestream:DescribeTable",
          "timestream:ListDatabases",
          "timestream:ListTables",
          "timestream:ListTagsForResource",
          "transfer:DescribeAgreement",
          "transfer:DescribeCertificate",
          "transfer:DescribeConnector",
          "transfer:DescribeProfile",
          "transfer:DescribeServer",
          "transfer:DescribeUser",
          "transfer:DescribeWorkflow",
          "transfer:ListAgreements",
          "transfer:ListCertificates",
          "transfer:ListConnectors",
          "transfer:ListProfiles",
          "transfer:ListServers",
          "transfer:ListTagsForResource",
          "transfer:ListUsers",
          "transfer:ListWorkflows",
          "voiceid:DescribeDomain",
          "voiceid:ListTagsForResource",
          "waf-regional:GetLoggingConfiguration",
          "waf-regional:GetWebACL",
          "waf-regional:GetWebACLForResource",
          "waf-regional:ListLoggingConfigurations",
          "waf:GetLoggingConfiguration",
          "waf:GetWebACL",
          "wafv2:GetLoggingConfiguration",
          "wafv2:GetRuleGroup",
          "wafv2:ListRuleGroups",
          "wafv2:ListTagsForResource",
          "workspaces:DescribeConnectionAliases",
          "workspaces:DescribeTags",
          "workspaces:DescribeWorkspaces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConfigLogStreamStatementID",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/config/*"
        ]
      },
      {
        "Sid": "ConfigLogEventsStatementID",
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/config/*:log-stream:config-rule-evaluation/*"
        ]
      }
    ]
  },
  "AWSMarketplaceAmiIngestion": {
    "policy": {
      "PolicyName": "AWSMarketplaceAmiIngestion",
      "PolicyId": "ANPAZKAPJZG4AV3OZYWEM",
      "Arn": "arn:aws:iam::aws:policy/AWSMarketplaceAmiIngestion",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Marketplace to copy your Amazon Machine Images (AMIs) in order to list them on AWS Marketplace",
      "CreateDate": "2020-09-25T20:55:10.000Z",
      "UpdateDate": "2020-09-25T20:55:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ec2:ModifySnapshotAttribute"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:ec2:us-east-1::snapshot/snap-*"
        ]
      },
      {
        "Action": [
          "ec2:DescribeImageAttribute",
          "ec2:DescribeImages",
          "ec2:DescribeSnapshotAttribute",
          "ec2:ModifyImageAttribute"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticMapReducePlacementGroupPolicy": {
    "policy": {
      "PolicyName": "AmazonElasticMapReducePlacementGroupPolicy",
      "PolicyId": "ANPAZKAPJZG4LC2KU77YD",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticMapReducePlacementGroupPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to allow EMR to create, describe and delete EC2 placement groups.",
      "CreateDate": "2020-09-29T00:37:08.000Z",
      "UpdateDate": "2020-09-29T00:37:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Resource": [
          "*"
        ],
        "Effect": "Allow",
        "Action": [
          "ec2:DeletePlacementGroup",
          "ec2:DescribePlacementGroups"
        ]
      },
      {
        "Resource": [
          "arn:aws:ec2:*:*:placement-group/EMR_*"
        ],
        "Effect": "Allow",
        "Action": [
          "ec2:CreatePlacementGroup"
        ]
      }
    ]
  },
  "AmazonElasticFileSystemsUtils": {
    "policy": {
      "PolicyName": "AmazonElasticFileSystemsUtils",
      "PolicyId": "ANPAZKAPJZG4KVOAQRKXW",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticFileSystemsUtils",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows customers to use AWS Systems Manager to automatically manage Amazon EFS utilities (amazon-efs-utils) package on their EC2 instances, and use CloudWatchLog to get EFS file system mount success/failure notifications.",
      "CreateDate": "2020-09-29T15:16:47.000Z",
      "UpdateDate": "2020-09-29T15:16:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeAssociation",
          "ssm:GetDeployablePatchSnapshotForInstance",
          "ssm:GetDocument",
          "ssm:DescribeDocument",
          "ssm:GetManifest",
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:ListAssociations",
          "ssm:ListInstanceAssociations",
          "ssm:PutInventory",
          "ssm:PutComplianceItems",
          "ssm:PutConfigurePackageResult",
          "ssm:UpdateAssociationStatus",
          "ssm:UpdateInstanceAssociationStatus",
          "ssm:UpdateInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssmmessages:CreateControlChannel",
          "ssmmessages:CreateDataChannel",
          "ssmmessages:OpenControlChannel",
          "ssmmessages:OpenDataChannel"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2messages:AcknowledgeMessage",
          "ec2messages:DeleteMessage",
          "ec2messages:FailMessage",
          "ec2messages:GetEndpoint",
          "ec2messages:GetMessages",
          "ec2messages:SendReply"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DescribeMountTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAvailabilityZones"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents",
          "logs:DescribeLogStreams",
          "logs:DescribeLogGroups",
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "Ec2ImageBuilderCrossAccountDistributionAccess": {
    "policy": {
      "PolicyName": "Ec2ImageBuilderCrossAccountDistributionAccess",
      "PolicyId": "ANPAZKAPJZG4PHZOLIXKT",
      "Arn": "arn:aws:iam::aws:policy/Ec2ImageBuilderCrossAccountDistributionAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions need by EC2 Image Builder to perform a cross account distribution.",
      "CreateDate": "2020-09-30T19:22:54.000Z",
      "UpdateDate": "2020-09-30T19:22:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:CopyImage",
          "ec2:ModifyImageAttribute"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSQuickSightTimestreamPolicy": {
    "policy": {
      "PolicyName": "AWSQuickSightTimestreamPolicy",
      "PolicyId": "ANPAZKAPJZG4CFKVDHQJH",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSQuickSightTimestreamPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS QuickSight access to AWS Timestream APIs. Customers can attach this policy to AWS QuickSight role to allow retrieval of data and metadata.",
      "CreateDate": "2020-09-30T21:47:03.000Z",
      "UpdateDate": "2020-09-30T21:47:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "timestream:Select",
          "timestream:CancelQuery",
          "timestream:ListTables",
          "timestream:ListDatabases",
          "timestream:ListMeasures",
          "timestream:DescribeTable",
          "timestream:DescribeDatabase",
          "timestream:SelectValues",
          "timestream:DescribeEndpoints"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonTimestreamReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonTimestreamReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4I7VUQXAEJ",
      "Arn": "arn:aws:iam::aws:policy/AmazonTimestreamReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Timestream. Policy also provides permission to cancel any running query. If using Customer managed CMK, please refer to documentation for additional permissions needed.",
      "CreateDate": "2020-09-30T21:47:08.000Z",
      "UpdateDate": "2023-02-28T18:22:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "timestream:CancelQuery",
          "timestream:DescribeDatabase",
          "timestream:DescribeEndpoints",
          "timestream:DescribeTable",
          "timestream:ListDatabases",
          "timestream:ListMeasures",
          "timestream:ListTables",
          "timestream:ListTagsForResource",
          "timestream:Select",
          "timestream:SelectValues",
          "timestream:DescribeScheduledQuery",
          "timestream:ListScheduledQueries",
          "timestream:DescribeBatchLoadTask",
          "timestream:ListBatchLoadTasks"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonTimestreamFullAccess": {
    "policy": {
      "PolicyName": "AmazonTimestreamFullAccess",
      "PolicyId": "ANPAZKAPJZG4CGYUJBH4V",
      "Arn": "arn:aws:iam::aws:policy/AmazonTimestreamFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Timestream. Note that this policy also grants certain KMS operation access. If using Customer managed CMK, please refer to documentation for additional permissions needed.",
      "CreateDate": "2020-09-30T21:47:14.000Z",
      "UpdateDate": "2021-11-26T23:42:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "timestream:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonTimestreamConsoleFullAccess": {
    "policy": {
      "PolicyName": "AmazonTimestreamConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4AZJLUKMAZ",
      "Arn": "arn:aws:iam::aws:policy/AmazonTimestreamConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to manage Amazon Timestream using the AWS Management Console. Note that this policy also grants permissions for certain KMS operations, and operations to manage your saved queries. If using Customer managed CMK, please refer to documentation for additional permissions needed.",
      "CreateDate": "2020-09-30T21:47:18.000Z",
      "UpdateDate": "2022-02-01T21:37:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "timestream:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListKeys",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dbqms:CreateFavoriteQuery",
          "dbqms:DescribeFavoriteQueries",
          "dbqms:UpdateFavoriteQuery",
          "dbqms:DeleteFavoriteQueries",
          "dbqms:GetQueryString",
          "dbqms:CreateQueryHistory",
          "dbqms:DescribeQueryHistory",
          "dbqms:UpdateQueryHistory",
          "dbqms:DeleteQueryHistory"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRoleForCloudWatchAlarmsActionSSMServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSServiceRoleForCloudWatchAlarmsActionSSMServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4M4BX2KX5V",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForCloudWatchAlarmsActionSSMServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Systems Manager resources used by CloudWatch Alarms",
      "CreateDate": "2020-10-01T09:49:01.000Z",
      "UpdateDate": "2020-10-01T09:49:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ssm:CreateOpsItem"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonS3OutpostsFullAccess": {
    "policy": {
      "PolicyName": "AmazonS3OutpostsFullAccess",
      "PolicyId": "ANPAZKAPJZG4BKMLUXKOR",
      "Arn": "arn:aws:iam::aws:policy/AmazonS3OutpostsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon S3 on Outposts via the AWS Management Console.",
      "CreateDate": "2020-10-02T17:26:30.000Z",
      "UpdateDate": "2020-10-02T17:26:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3-outposts:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "datasync:ListTasks",
          "datasync:ListLocations",
          "datasync:DescribeTask",
          "datasync:DescribeLocation*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeNetworkInterfaces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "outposts:ListOutposts",
          "outposts:GetOutpost"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonS3OutpostsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonS3OutpostsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4PJ2AX4CUB",
      "Arn": "arn:aws:iam::aws:policy/AmazonS3OutpostsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon S3 on Outposts via the AWS Management Console.",
      "CreateDate": "2020-10-02T18:55:58.000Z",
      "UpdateDate": "2020-10-02T18:55:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3-outposts:Get*",
          "s3-outposts:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "datasync:ListTasks",
          "datasync:ListLocations",
          "datasync:DescribeTask",
          "datasync:DescribeLocation*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeNetworkInterfaces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "outposts:ListOutposts",
          "outposts:GetOutpost"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeepRacerFullAccess": {
    "policy": {
      "PolicyName": "AWSDeepRacerFullAccess",
      "PolicyId": "ANPAZKAPJZG4JFTOPTVBM",
      "Arn": "arn:aws:iam::aws:policy/AWSDeepRacerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS DeepRacer. Also provides select access to related services (e.g., S3).",
      "CreateDate": "2020-10-05T22:03:10.000Z",
      "UpdateDate": "2020-10-05T22:03:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:DeleteObject",
          "s3:DeleteObjectVersion",
          "s3:GetBucketPolicy",
          "s3:PutBucketPolicy",
          "s3:ListBucket",
          "s3:GetBucketAcl",
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:GetObjectAcl",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "arn:aws:s3:::*DeepRacer*",
          "arn:aws:s3:::*Deepracer*",
          "arn:aws:s3:::*deepracer*",
          "arn:aws:s3:::dr-*",
          "arn:aws:s3:::*DeepRacer*/*",
          "arn:aws:s3:::*Deepracer*/*",
          "arn:aws:s3:::*deepracer*/*",
          "arn:aws:s3:::dr-*/*"
        ]
      }
    ]
  },
  "AWSCloudTrail_FullAccess": {
    "policy": {
      "PolicyName": "AWSCloudTrail_FullAccess",
      "PolicyId": "ANPAZKAPJZG4CA4SIJQAM",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudTrail_FullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS CloudTrail.",
      "CreateDate": "2020-10-08T23:41:15.000Z",
      "UpdateDate": "2021-02-22T19:01:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sns:AddPermission",
          "sns:CreateTopic",
          "sns:SetTopicAttributes",
          "sns:GetTopicAttributes"
        ],
        "Resource": [
          "arn:aws:sns:*:*:aws-cloudtrail-logs*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:PutBucketPolicy",
          "s3:PutBucketPublicAccessBlock"
        ],
        "Resource": [
          "arn:aws:s3:::aws-cloudtrail-logs*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "s3:GetBucketLocation",
          "s3:GetBucketPolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudtrail:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:aws-cloudtrail-logs*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles",
          "iam:GetRolePolicy",
          "iam:GetUser"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:CreateKey",
          "kms:CreateAlias",
          "kms:ListKeys",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:ListFunctions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:ListGlobalTables",
          "dynamodb:ListTables"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchLambdaInsightsExecutionRolePolicy": {
    "policy": {
      "PolicyName": "CloudWatchLambdaInsightsExecutionRolePolicy",
      "PolicyId": "ANPAZKAPJZG4EDWWYYDS6",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy required for the Lambda Insights Extension",
      "CreateDate": "2020-10-07T19:27:06.000Z",
      "UpdateDate": "2020-10-07T19:27:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/lambda-insights:*"
        ]
      }
    ]
  },
  "AWSSupportServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSSupportServiceRolePolicy",
      "PolicyId": "ANPAJ7W6266ELXF5MISDS",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSSupportServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v35",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Support to access AWS resources to provide billing, administrative, and support services.",
      "CreateDate": "2018-04-19T18:04:44.000Z",
      "UpdateDate": "2024-03-25T16:28:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSSupportAPIGatewayAccess",
        "Action": [
          "apigateway:GET"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:apigateway:*::/account",
          "arn:aws:apigateway:*::/apis",
          "arn:aws:apigateway:*::/apis/*",
          "arn:aws:apigateway:*::/apis/*/authorizers",
          "arn:aws:apigateway:*::/apis/*/authorizers/*",
          "arn:aws:apigateway:*::/apis/*/deployments",
          "arn:aws:apigateway:*::/apis/*/deployments/*",
          "arn:aws:apigateway:*::/apis/*/integrations",
          "arn:aws:apigateway:*::/apis/*/integrations/*",
          "arn:aws:apigateway:*::/apis/*/integrations/*/integrationresponses",
          "arn:aws:apigateway:*::/apis/*/integrations/*/integrationresponses/*",
          "arn:aws:apigateway:*::/apis/*/models",
          "arn:aws:apigateway:*::/apis/*/models/*",
          "arn:aws:apigateway:*::/apis/*/routes",
          "arn:aws:apigateway:*::/apis/*/routes/*",
          "arn:aws:apigateway:*::/apis/*/routes/*/routeresponses",
          "arn:aws:apigateway:*::/apis/*/routes/*/routeresponses/*",
          "arn:aws:apigateway:*::/apis/*/stages",
          "arn:aws:apigateway:*::/apis/*/stages/*",
          "arn:aws:apigateway:*::/clientcertificates",
          "arn:aws:apigateway:*::/clientcertificates/*",
          "arn:aws:apigateway:*::/domainnames",
          "arn:aws:apigateway:*::/domainnames/*",
          "arn:aws:apigateway:*::/domainnames/*/apimappings",
          "arn:aws:apigateway:*::/domainnames/*/apimappings/*",
          "arn:aws:apigateway:*::/domainnames/*/basepathmappings",
          "arn:aws:apigateway:*::/domainnames/*/basepathmappings/*",
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/restapis/*",
          "arn:aws:apigateway:*::/restapis/*/authorizers",
          "arn:aws:apigateway:*::/restapis/*/authorizers/*",
          "arn:aws:apigateway:*::/restapis/*/deployments",
          "arn:aws:apigateway:*::/restapis/*/deployments/*",
          "arn:aws:apigateway:*::/restapis/*/models",
          "arn:aws:apigateway:*::/restapis/*/models/*",
          "arn:aws:apigateway:*::/restapis/*/models/*/default_template",
          "arn:aws:apigateway:*::/restapis/*/resources",
          "arn:aws:apigateway:*::/restapis/*/resources/*",
          "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration/responses/*",
          "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/responses/*",
          "arn:aws:apigateway:*::/restapis/*/stages/*/sdks/*",
          "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
          "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration",
          "arn:aws:apigateway:*::/restapis/*/stages",
          "arn:aws:apigateway:*::/restapis/*/stages/*",
          "arn:aws:apigateway:*::/usageplans",
          "arn:aws:apigateway:*::/usageplans/*",
          "arn:aws:apigateway:*::/vpclinks",
          "arn:aws:apigateway:*::/vpclinks/*"
        ]
      },
      {
        "Sid": "AWSSupportDeleteRoleAccess",
        "Action": [
          "iam:DeleteRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"
        ]
      },
      {
        "Sid": "AWSSupportActions",
        "Action": [
          "access-analyzer:getAccessPreview",
          "access-analyzer:getAnalyzedResource",
          "access-analyzer:getAnalyzer",
          "access-analyzer:getArchiveRule",
          "access-analyzer:getFinding",
          "access-analyzer:getGeneratedPolicy",
          "access-analyzer:listAccessPreviewFindings",
          "access-analyzer:listAccessPreviews",
          "access-analyzer:listAnalyzedResources",
          "access-analyzer:listAnalyzers",
          "access-analyzer:listArchiveRules",
          "access-analyzer:listFindings",
          "access-analyzer:listPolicyGenerations",
          "acm-pca:describeCertificateAuthority",
          "acm-pca:describeCertificateAuthorityAuditReport",
          "acm-pca:getCertificate",
          "acm-pca:getCertificateAuthorityCertificate",
          "acm-pca:getCertificateAuthorityCsr",
          "acm-pca:listCertificateAuthorities",
          "acm-pca:listTags",
          "acm:describeCertificate",
          "acm:getAccountConfiguration",
          "acm:getCertificate",
          "acm:listCertificates",
          "acm:listTagsForCertificate",
          "airflow:getEnvironment",
          "airflow:listEnvironments",
          "airflow:listTagsForResource",
          "amplify:getApp",
          "amplify:getBackendEnvironment",
          "amplify:getBranch",
          "amplify:getDomainAssociation",
          "amplify:getJob",
          "amplify:getWebhook",
          "amplify:listApps",
          "amplify:listBackendEnvironments",
          "amplify:listBranches",
          "amplify:listDomainAssociations",
          "amplify:listWebhooks",
          "amplifyuibuilder:exportComponents",
          "amplifyuibuilder:exportThemes",
          "appflow:describeConnectorEntity",
          "appflow:describeConnectorProfiles",
          "appflow:describeConnectors",
          "appflow:describeFlow",
          "appflow:describeFlowExecutionRecords",
          "appflow:listConnectorEntities",
          "appflow:listFlows",
          "application-autoscaling:describeScalableTargets",
          "application-autoscaling:describeScalingActivities",
          "application-autoscaling:describeScalingPolicies",
          "application-autoscaling:describeScheduledActions",
          "applicationinsights:describeApplication",
          "applicationinsights:describeComponent",
          "applicationinsights:describeComponentConfiguration",
          "applicationinsights:describeComponentConfigurationRecommendation",
          "applicationinsights:describeLogPattern",
          "applicationinsights:describeObservation",
          "applicationinsights:describeProblem",
          "applicationinsights:describeProblemObservations",
          "applicationinsights:listApplications",
          "applicationinsights:listComponents",
          "applicationinsights:listConfigurationHistory",
          "applicationinsights:listLogPatterns",
          "applicationinsights:listLogPatternSets",
          "applicationinsights:listProblems",
          "appmesh:describeGatewayRoute",
          "appmesh:describeMesh",
          "appmesh:describeRoute",
          "appmesh:describeVirtualGateway",
          "appmesh:describeVirtualNode",
          "appmesh:describeVirtualRouter",
          "appmesh:describeVirtualService",
          "appmesh:listGatewayRoutes",
          "appmesh:listMeshes",
          "appmesh:listRoutes",
          "appmesh:listTagsForResource",
          "appmesh:listVirtualGateways",
          "appmesh:listVirtualNodes",
          "appmesh:listVirtualRouters",
          "appmesh:listVirtualServices",
          "apprunner:describeAutoScalingConfiguration",
          "apprunner:describeCustomDomains",
          "apprunner:describeOperation",
          "apprunner:describeService",
          "apprunner:listAutoScalingConfigurations",
          "apprunner:listConnections",
          "apprunner:listOperations",
          "apprunner:listServices",
          "apprunner:listTagsForResource",
          "appstream:describeAppBlockBuilderAppBlockAssociations",
          "appstream:describeAppBlockBuilders",
          "appstream:describeAppBlocks",
          "appstream:describeApplicationFleetAssociations",
          "appstream:describeApplications",
          "appstream:describeDirectoryConfigs",
          "appstream:describeEntitlements",
          "appstream:describeFleets",
          "appstream:describeImageBuilders",
          "appstream:describeImagePermissions",
          "appstream:describeImages",
          "appstream:describeSessions",
          "appstream:describeStacks",
          "appstream:describeUsageReportSubscriptions",
          "appstream:describeUsers",
          "appstream:describeUserStackAssociations",
          "appstream:listAssociatedFleets",
          "appstream:listAssociatedStacks",
          "appstream:listEntitledApplications",
          "appstream:listTagsForResource",
          "appsync:getApiAssociation",
          "appsync:getApiCache",
          "appsync:getDomainName",
          "appsync:getFunction",
          "appsync:getGraphqlApi",
          "appsync:getIntrospectionSchema",
          "appsync:getResolver",
          "appsync:getSchemaCreationStatus",
          "appsync:getSourceApiAssociation",
          "appsync:getType",
          "appsync:listDataSources",
          "appsync:listDomainNames",
          "appsync:listFunctions",
          "appsync:listGraphqlApis",
          "appsync:listResolvers",
          "appsync:listResolversByFunction",
          "appsync:listSourceApiAssociations",
          "appsync:listTypes",
          "appsync:listTypesByAssociation",
          "aps:describeAlertManagerDefinition",
          "aps:describeRuleGroupsNamespace",
          "aps:describeScraper",
          "aps:describeWorkspace",
          "aps:listRuleGroupsNamespaces",
          "aps:listScrapers",
          "aps:listWorkspaces",
          "athena:batchGetNamedQuery",
          "athena:batchGetQueryExecution",
          "athena:getCalculationExecution",
          "athena:getCalculationExecutionStatus",
          "athena:getDataCatalog",
          "athena:getNamedQuery",
          "athena:getNotebookMetadata",
          "athena:getQueryExecution",
          "athena:getQueryRuntimeStatistics",
          "athena:getSession",
          "athena:getSessionStatus",
          "athena:getWorkGroup",
          "athena:listApplicationDPUSizes",
          "athena:listCalculationExecutions",
          "athena:listDataCatalogs",
          "athena:listEngineVersions",
          "athena:listExecutors",
          "athena:listNamedQueries",
          "athena:listNotebookMetadata",
          "athena:listNotebookSessions",
          "athena:listQueryExecutions",
          "athena:listSessions",
          "athena:listTagsForResource",
          "athena:listWorkGroups",
          "auditmanager:getAccountStatus",
          "auditmanager:getDelegations",
          "auditmanager:listAssessmentFrameworks",
          "auditmanager:listAssessmentReports",
          "auditmanager:listAssessments",
          "auditmanager:listControls",
          "auditmanager:listKeywordsForDataSource",
          "auditmanager:listNotifications",
          "autoscaling-plans:describeScalingPlanResources",
          "autoscaling-plans:describeScalingPlans",
          "autoscaling-plans:getScalingPlanResourceForecastData",
          "autoscaling:describeAccountLimits",
          "autoscaling:describeAdjustmentTypes",
          "autoscaling:describeAutoScalingGroups",
          "autoscaling:describeAutoScalingInstances",
          "autoscaling:describeAutoScalingNotificationTypes",
          "autoscaling:describeInstanceRefreshes",
          "autoscaling:describeLaunchConfigurations",
          "autoscaling:describeLifecycleHooks",
          "autoscaling:describeLifecycleHookTypes",
          "autoscaling:describeLoadBalancers",
          "autoscaling:describeLoadBalancerTargetGroups",
          "autoscaling:describeMetricCollectionTypes",
          "autoscaling:describeNotificationConfigurations",
          "autoscaling:describePolicies",
          "autoscaling:describeScalingActivities",
          "autoscaling:describeScalingProcessTypes",
          "autoscaling:describeScheduledActions",
          "autoscaling:describeTags",
          "autoscaling:describeTerminationPolicyTypes",
          "autoscaling:describeWarmPool",
          "backup:describeBackupJob",
          "backup:describeBackupVault",
          "backup:describeCopyJob",
          "backup:describeFramework",
          "backup:describeGlobalSettings",
          "backup:describeProtectedResource",
          "backup:describeRecoveryPoint",
          "backup:describeRegionSettings",
          "backup:describeReportJob",
          "backup:describeReportPlan",
          "backup:describeRestoreJob",
          "backup:getBackupPlan",
          "backup:getBackupPlanFromJSON",
          "backup:getBackupPlanFromTemplate",
          "backup:getBackupSelection",
          "backup:getBackupVaultAccessPolicy",
          "backup:getBackupVaultNotifications",
          "backup:getLegalHold",
          "backup:getRecoveryPointRestoreMetadata",
          "backup:getSupportedResourceTypes",
          "backup:listBackupJobs",
          "backup:listBackupPlans",
          "backup:listBackupPlanTemplates",
          "backup:listBackupPlanVersions",
          "backup:listBackupSelections",
          "backup:listBackupVaults",
          "backup:listCopyJobs",
          "backup:listFrameworks",
          "backup:listLegalHolds",
          "backup:listProtectedResources",
          "backup:listRecoveryPointsByBackupVault",
          "backup:listRecoveryPointsByLegalHold",
          "backup:listRecoveryPointsByResource",
          "backup:listReportJobs",
          "backup:listReportPlans",
          "backup:listRestoreJobs",
          "backup:listTags",
          "backup-gateway:getGateway",
          "backup-gateway:getHypervisor",
          "backup-gateway:getHypervisorPropertyMappings",
          "backup-gateway:getVirtualMachine",
          "backup-gateway:listGateways",
          "backup-gateway:listHypervisors",
          "backup-gateway:listVirtualMachines",
          "batch:describeComputeEnvironments",
          "batch:describeJobDefinitions",
          "batch:describeJobQueues",
          "batch:describeJobs",
          "batch:listJobs",
          "braket:getDevice",
          "braket:getQuantumTask",
          "braket:searchDevices",
          "braket:searchQuantumTasks",
          "budgets:viewBudget",
          "ce:getCostAndUsage",
          "ce:getCostAndUsageWithResources",
          "ce:getCostForecast",
          "ce:getDimensionValues",
          "ce:getReservationCoverage",
          "ce:getReservationPurchaseRecommendation",
          "ce:getReservationUtilization",
          "ce:getRightsizingRecommendation",
          "ce:getSavingsPlansCoverage",
          "ce:getSavingsPlansPurchaseRecommendation",
          "ce:getSavingsPlansUtilization",
          "ce:getSavingsPlansUtilizationDetails",
          "ce:getTags",
          "chime:describeAppInstance",
          "chime:getAttendee",
          "chime:getGlobalSettings",
          "chime:getMediaCapturePipeline",
          "chime:getMediaPipeline",
          "chime:getMeeting",
          "chime:getProxySession",
          "chime:getSipMediaApplication",
          "chime:getSipRule",
          "chime:getVoiceConnector",
          "chime:getVoiceConnectorGroup",
          "chime:getVoiceConnectorLoggingConfiguration",
          "chime:listAppInstances",
          "chime:listAttendees",
          "chime:listChannelBans",
          "chime:listChannels",
          "chime:listChannelsModeratedByAppInstanceUser",
          "chime:listMediaCapturePipelines",
          "chime:listMediaPipelines",
          "chime:listMeetings",
          "chime:listSipMediaApplications",
          "chime:listSipRules",
          "chime:listVoiceConnectorGroups",
          "chime:listVoiceConnectors",
          "cleanrooms:batchGetCollaborationAnalysisTemplate",
          "cleanrooms:batchGetSchema",
          "cleanrooms:getAnalysisTemplate",
          "cleanrooms:getCollaboration",
          "cleanrooms:getCollaborationAnalysisTemplate",
          "cleanrooms:getConfiguredTable",
          "cleanrooms:getConfiguredTableAssociation",
          "cleanrooms:getMembership",
          "cleanrooms:getSchema",
          "cleanrooms:listAnalysisTemplates",
          "cleanrooms:listCollaborationAnalysisTemplates",
          "cleanrooms:listCollaborations",
          "cleanrooms:listConfiguredTableAssociations",
          "cleanrooms:listConfiguredTables",
          "cleanrooms:listMembers",
          "cleanrooms:listMemberships",
          "cleanrooms:listSchemas",
          "cloud9:describeEnvironmentMemberships",
          "cloud9:describeEnvironments",
          "cloud9:listEnvironments",
          "clouddirectory:getDirectory",
          "clouddirectory:listDirectories",
          "cloudformation:batchDescribeTypeConfigurations",
          "cloudformation:describeAccountLimits",
          "cloudformation:describeChangeSet",
          "cloudformation:describeChangeSetHooks",
          "cloudformation:describePublisher",
          "cloudformation:describeStackEvents",
          "cloudformation:describeStackInstance",
          "cloudformation:describeStackResource",
          "cloudformation:describeStackResources",
          "cloudformation:describeStacks",
          "cloudformation:describeStackSet",
          "cloudformation:describeStackSetOperation",
          "cloudformation:describeType",
          "cloudformation:describeTypeRegistration",
          "cloudformation:estimateTemplateCost",
          "cloudformation:getStackPolicy",
          "cloudformation:getTemplate",
          "cloudformation:getTemplateSummary",
          "cloudformation:listChangeSets",
          "cloudformation:listExports",
          "cloudformation:listImports",
          "cloudformation:listStackInstances",
          "cloudformation:listStackResources",
          "cloudformation:listStacks",
          "cloudformation:listStackSetOperationResults",
          "cloudformation:listStackSetOperations",
          "cloudformation:listStackSets",
          "cloudformation:listTypeRegistrations",
          "cloudformation:listTypes",
          "cloudformation:listTypeVersions",
          "cloudfront:describeFunction",
          "cloudfront:getCachePolicy",
          "cloudfront:getCachePolicyConfig",
          "cloudfront:getCloudFrontOriginAccessIdentity",
          "cloudfront:getCloudFrontOriginAccessIdentityConfig",
          "cloudfront:getContinuousDeploymentPolicy",
          "cloudfront:getContinuousDeploymentPolicyConfig",
          "cloudfront:getDistribution",
          "cloudfront:getDistributionConfig",
          "cloudfront:getInvalidation",
          "cloudfront:getKeyGroup",
          "cloudfront:getKeyGroupConfig",
          "cloudfront:getMonitoringSubscription",
          "cloudfront:getOriginAccessControl",
          "cloudfront:getOriginAccessControlConfig",
          "cloudfront:getOriginRequestPolicy",
          "cloudfront:getOriginRequestPolicyConfig",
          "cloudfront:getPublicKey",
          "cloudfront:getPublicKeyConfig",
          "cloudfront:getRealtimeLogConfig",
          "cloudfront:getStreamingDistribution",
          "cloudfront:getStreamingDistributionConfig",
          "cloudfront:listCachePolicies",
          "cloudfront:listCloudFrontOriginAccessIdentities",
          "cloudfront:listContinuousDeploymentPolicies",
          "cloudfront:listDistributions",
          "cloudfront:listDistributionsByCachePolicyId",
          "cloudfront:listDistributionsByKeyGroup",
          "cloudfront:listDistributionsByOriginRequestPolicyId",
          "cloudfront:listDistributionsByRealtimeLogConfig",
          "cloudfront:listDistributionsByResponseHeadersPolicyId",
          "cloudfront:listDistributionsByWebACLId",
          "cloudfront:listFunctions",
          "cloudfront:listInvalidations",
          "cloudfront:listKeyGroups",
          "cloudfront:listOriginAccessControls",
          "cloudfront:listOriginRequestPolicies",
          "cloudfront:listPublicKeys",
          "cloudfront:listRealtimeLogConfigs",
          "cloudfront:listStreamingDistributions",
          "cloudhsm:describeBackups",
          "cloudhsm:describeClusters",
          "cloudsearch:describeAnalysisSchemes",
          "cloudsearch:describeAvailabilityOptions",
          "cloudsearch:describeDomains",
          "cloudsearch:describeExpressions",
          "cloudsearch:describeIndexFields",
          "cloudsearch:describeScalingParameters",
          "cloudsearch:describeServiceAccessPolicies",
          "cloudsearch:describeSuggesters",
          "cloudsearch:listDomainNames",
          "cloudtrail:describeTrails",
          "cloudtrail:getEventSelectors",
          "cloudtrail:getInsightSelectors",
          "cloudtrail:getTrail",
          "cloudtrail:getTrailStatus",
          "cloudtrail:listPublicKeys",
          "cloudtrail:listTags",
          "cloudtrail:listTrails",
          "cloudtrail:lookupEvents",
          "cloudwatch:describeAlarmHistory",
          "cloudwatch:describeAlarms",
          "cloudwatch:describeAlarmsForMetric",
          "cloudwatch:describeAnomalyDetectors",
          "cloudwatch:describeInsightRules",
          "cloudwatch:getDashboard",
          "cloudwatch:getInsightRuleReport",
          "cloudwatch:getMetricData",
          "cloudwatch:getMetricStatistics",
          "cloudwatch:getMetricStream",
          "cloudwatch:listDashboards",
          "cloudwatch:listManagedInsightRules",
          "cloudwatch:listMetrics",
          "cloudwatch:listMetricStreams",
          "codeartifact:describeDomain",
          "codeartifact:describePackageVersion",
          "codeartifact:describeRepository",
          "codeartifact:getDomainPermissionsPolicy",
          "codeartifact:getRepositoryEndpoint",
          "codeartifact:getRepositoryPermissionsPolicy",
          "codeartifact:listDomains",
          "codeartifact:listPackages",
          "codeartifact:listPackageVersionAssets",
          "codeartifact:listPackageVersions",
          "codeartifact:listRepositories",
          "codeartifact:listRepositoriesInDomain",
          "codebuild:batchGetBuildBatches",
          "codebuild:batchGetBuilds",
          "codebuild:batchGetProjects",
          "codebuild:listBuildBatches",
          "codebuild:listBuildBatchesForProject",
          "codebuild:listBuilds",
          "codebuild:listBuildsForProject",
          "codebuild:listCuratedEnvironmentImages",
          "codebuild:listProjects",
          "codebuild:listSourceCredentials",
          "codecommit:batchGetRepositories",
          "codecommit:getBranch",
          "codecommit:getRepository",
          "codecommit:getRepositoryTriggers",
          "codecommit:listBranches",
          "codecommit:listRepositories",
          "codedeploy:batchGetApplicationRevisions",
          "codedeploy:batchGetApplications",
          "codedeploy:batchGetDeploymentGroups",
          "codedeploy:batchGetDeploymentInstances",
          "codedeploy:batchGetDeployments",
          "codedeploy:batchGetDeploymentTargets",
          "codedeploy:batchGetOnPremisesInstances",
          "codedeploy:getApplication",
          "codedeploy:getApplicationRevision",
          "codedeploy:getDeployment",
          "codedeploy:getDeploymentConfig",
          "codedeploy:getDeploymentGroup",
          "codedeploy:getDeploymentInstance",
          "codedeploy:getDeploymentTarget",
          "codedeploy:getOnPremisesInstance",
          "codedeploy:listApplicationRevisions",
          "codedeploy:listApplications",
          "codedeploy:listDeploymentConfigs",
          "codedeploy:listDeploymentGroups",
          "codedeploy:listDeploymentInstances",
          "codedeploy:listDeployments",
          "codedeploy:listDeploymentTargets",
          "codedeploy:listGitHubAccountTokenNames",
          "codedeploy:listOnPremisesInstances",
          "codepipeline:getJobDetails",
          "codepipeline:getPipeline",
          "codepipeline:getPipelineExecution",
          "codepipeline:getPipelineState",
          "codepipeline:listActionExecutions",
          "codepipeline:listActionTypes",
          "codepipeline:listPipelineExecutions",
          "codepipeline:listPipelines",
          "codepipeline:listWebhooks",
          "codestar:describeProject",
          "codestar:listProjects",
          "codestar:listResources",
          "codestar:listTeamMembers",
          "codestar:listUserProfiles",
          "codestar-connections:getConnection",
          "codestar-connections:getHost",
          "codestar-connections:listConnections",
          "codestar-connections:listHosts",
          "cognito-identity:describeIdentityPool",
          "cognito-identity:getIdentityPoolRoles",
          "cognito-identity:listIdentities",
          "cognito-identity:listIdentityPools",
          "cognito-idp:describeIdentityProvider",
          "cognito-idp:describeResourceServer",
          "cognito-idp:describeRiskConfiguration",
          "cognito-idp:describeUserImportJob",
          "cognito-idp:describeUserPool",
          "cognito-idp:describeUserPoolClient",
          "cognito-idp:describeUserPoolDomain",
          "cognito-idp:getGroup",
          "cognito-idp:getUICustomization",
          "cognito-idp:getUserPoolMfaConfig",
          "cognito-idp:listGroups",
          "cognito-idp:listIdentityProviders",
          "cognito-idp:listResourceServers",
          "cognito-idp:listUserImportJobs",
          "cognito-idp:listUserPoolClients",
          "cognito-idp:listUserPools",
          "cognito-sync:describeDataset",
          "cognito-sync:describeIdentityPoolUsage",
          "cognito-sync:describeIdentityUsage",
          "cognito-sync:getCognitoEvents",
          "cognito-sync:getIdentityPoolConfiguration",
          "cognito-sync:listDatasets",
          "cognito-sync:listIdentityPoolUsage",
          "comprehend:describeDocumentClassificationJob",
          "comprehend:describeDocumentClassifier",
          "comprehend:describeDominantLanguageDetectionJob",
          "comprehend:describeEndpoint",
          "comprehend:describeEntitiesDetectionJob",
          "comprehend:describeEntityRecognizer",
          "comprehend:describeEventsDetectionJob",
          "comprehend:describeFlywheel",
          "comprehend:describeFlywheelIteration",
          "comprehend:describeKeyPhrasesDetectionJob",
          "comprehend:describePiiEntitiesDetectionJob",
          "comprehend:describeSentimentDetectionJob",
          "comprehend:describeTargetedSentimentDetectionJob",
          "comprehend:describeTopicsDetectionJob",
          "comprehend:listDocumentClassificationJobs",
          "comprehend:listDocumentClassifiers",
          "comprehend:listDominantLanguageDetectionJobs",
          "comprehend:listEndpoints",
          "comprehend:listEntitiesDetectionJobs",
          "comprehend:listEntityRecognizers",
          "comprehend:listEventsDetectionJobs",
          "comprehend:listFlywheelIterationHistory",
          "comprehend:listFlywheels",
          "comprehend:listKeyPhrasesDetectionJobs",
          "comprehend:listPiiEntitiesDetectionJobs",
          "comprehend:listSentimentDetectionJobs",
          "comprehend:listTargetedSentimentDetectionJobs",
          "comprehend:listTopicsDetectionJobs",
          "compute-optimizer:getAutoScalingGroupRecommendations",
          "compute-optimizer:getEBSVolumeRecommendations",
          "compute-optimizer:getEC2InstanceRecommendations",
          "compute-optimizer:getEC2RecommendationProjectedMetrics",
          "compute-optimizer:getECSServiceRecommendations",
          "compute-optimizer:getECSServiceRecommendationProjectedMetrics",
          "compute-optimizer:getEnrollmentStatus",
          "compute-optimizer:getRecommendationSummaries",
          "config:batchGetAggregateResourceConfig",
          "config:batchGetResourceConfig",
          "config:describeAggregateComplianceByConfigRules",
          "config:describeAggregationAuthorizations",
          "config:describeComplianceByConfigRule",
          "config:describeComplianceByResource",
          "config:describeConfigRuleEvaluationStatus",
          "config:describeConfigRules",
          "config:describeConfigurationAggregators",
          "config:describeConfigurationAggregatorSourcesStatus",
          "config:describeConfigurationRecorders",
          "config:describeConfigurationRecorderStatus",
          "config:describeConformancePackCompliance",
          "config:describeConformancePacks",
          "config:describeConformancePackStatus",
          "config:describeDeliveryChannels",
          "config:describeDeliveryChannelStatus",
          "config:describeOrganizationConfigRules",
          "config:describeOrganizationConfigRuleStatuses",
          "config:describeOrganizationConformancePacks",
          "config:describeOrganizationConformancePackStatuses",
          "config:describePendingAggregationRequests",
          "config:describeRemediationConfigurations",
          "config:describeRemediationExceptions",
          "config:describeRemediationExecutionStatus",
          "config:describeRetentionConfigurations",
          "config:getAggregateComplianceDetailsByConfigRule",
          "config:getAggregateConfigRuleComplianceSummary",
          "config:getAggregateDiscoveredResourceCounts",
          "config:getAggregateResourceConfig",
          "config:getComplianceDetailsByConfigRule",
          "config:getComplianceDetailsByResource",
          "config:getComplianceSummaryByConfigRule",
          "config:getComplianceSummaryByResourceType",
          "config:getConformancePackComplianceDetails",
          "config:getConformancePackComplianceSummary",
          "config:getDiscoveredResourceCounts",
          "config:getOrganizationConfigRuleDetailedStatus",
          "config:getOrganizationConformancePackDetailedStatus",
          "config:getResourceConfigHistory",
          "config:listAggregateDiscoveredResources",
          "config:listDiscoveredResources",
          "config:listTagsForResource",
          "connect:describeContact",
          "connect:describePhoneNumber",
          "connect:describeQuickConnect",
          "connect:describeUser",
          "connect:getCurrentMetricData",
          "connect:getMetricData",
          "connect:listContactEvaluations",
          "connect:listEvaluationForms",
          "connect:listEvaluationFormVersions",
          "connect:listPhoneNumbersV2",
          "connect:listQuickConnects",
          "connect:listRoutingProfiles",
          "connect:listSecurityProfiles",
          "connect:listUsers",
          "connect:listViews",
          "connect:listViewVersions",
          "controltower:describeAccountFactoryConfig",
          "controltower:describeCoreService",
          "controltower:describeGuardrail",
          "controltower:describeGuardrailForTarget",
          "controltower:describeManagedAccount",
          "controltower:describeSingleSignOn",
          "controltower:getAvailableUpdates",
          "controltower:getHomeRegion",
          "controltower:getLandingZoneStatus",
          "controltower:listDirectoryGroups",
          "controltower:listGuardrailsForTarget",
          "controltower:listGuardrailViolations",
          "controltower:listManagedAccounts",
          "controltower:listManagedAccountsForGuardrail",
          "controltower:listManagedAccountsForParent",
          "controltower:listManagedOrganizationalUnits",
          "controltower:listManagedOrganizationalUnitsForGuardrail",
          "databrew:describeDataset",
          "databrew:describeJob",
          "databrew:describeProject",
          "databrew:describeRecipe",
          "databrew:listDatasets",
          "databrew:listJobRuns",
          "databrew:listJobs",
          "databrew:listProjects",
          "databrew:listRecipes",
          "databrew:listRecipeVersions",
          "databrew:listTagsForResource",
          "datapipeline:describeObjects",
          "datapipeline:describePipelines",
          "datapipeline:getPipelineDefinition",
          "datapipeline:listPipelines",
          "datapipeline:queryObjects",
          "datasync:describeAgent",
          "datasync:describeLocationEfs",
          "datasync:describeLocationFsxLustre",
          "datasync:describeLocationFsxOpenZfs",
          "datasync:describeLocationFsxWindows",
          "datasync:describeLocationHdfs",
          "datasync:describeLocationNfs",
          "datasync:describeLocationObjectStorage",
          "datasync:describeLocationS3",
          "datasync:describeLocationSmb",
          "datasync:describeTask",
          "datasync:describeTaskExecution",
          "datasync:listAgents",
          "datasync:listLocations",
          "datasync:listTaskExecutions",
          "datasync:listTasks",
          "dax:describeClusters",
          "dax:describeDefaultParameters",
          "dax:describeEvents",
          "dax:describeParameterGroups",
          "dax:describeParameters",
          "dax:describeSubnetGroups",
          "detective:getMembers",
          "detective:listGraphs",
          "detective:listInvitations",
          "detective:listMembers",
          "devicefarm:getAccountSettings",
          "devicefarm:getDevice",
          "devicefarm:getDevicePool",
          "devicefarm:getDevicePoolCompatibility",
          "devicefarm:getJob",
          "devicefarm:getProject",
          "devicefarm:getRemoteAccessSession",
          "devicefarm:getRun",
          "devicefarm:getSuite",
          "devicefarm:getTest",
          "devicefarm:getTestGridProject",
          "devicefarm:getTestGridSession",
          "devicefarm:getUpload",
          "devicefarm:listArtifacts",
          "devicefarm:listDevicePools",
          "devicefarm:listDevices",
          "devicefarm:listJobs",
          "devicefarm:listProjects",
          "devicefarm:listRemoteAccessSessions",
          "devicefarm:listRuns",
          "devicefarm:listSamples",
          "devicefarm:listSuites",
          "devicefarm:listTestGridProjects",
          "devicefarm:listTestGridSessionActions",
          "devicefarm:listTestGridSessionArtifacts",
          "devicefarm:listTestGridSessions",
          "devicefarm:listTests",
          "devicefarm:listUniqueProblems",
          "devicefarm:listUploads",
          "directconnect:describeConnectionLoa",
          "directconnect:describeConnections",
          "directconnect:describeConnectionsOnInterconnect",
          "directconnect:describeCustomerMetadata",
          "directconnect:describeDirectConnectGatewayAssociationProposals",
          "directconnect:describeDirectConnectGatewayAssociations",
          "directconnect:describeDirectConnectGatewayAttachments",
          "directconnect:describeDirectConnectGateways",
          "directconnect:describeHostedConnections",
          "directconnect:describeInterconnectLoa",
          "directconnect:describeInterconnects",
          "directconnect:describeLags",
          "directconnect:describeLoa",
          "directconnect:describeLocations",
          "directconnect:describeRouterConfiguration",
          "directconnect:describeVirtualGateways",
          "directconnect:describeVirtualInterfaces",
          "dlm:getLifecyclePolicies",
          "dlm:getLifecyclePolicy",
          "dms:describeAccountAttributes",
          "dms:describeApplicableIndividualAssessments",
          "dms:describeConnections",
          "dms:describeEndpoints",
          "dms:describeEndpointSettings",
          "dms:describeEndpointTypes",
          "dms:describeEventCategories",
          "dms:describeEvents",
          "dms:describeEventSubscriptions",
          "dms:describeFleetAdvisorCollectors",
          "dms:describeFleetAdvisorDatabases",
          "dms:describeFleetAdvisorLsaAnalysis",
          "dms:describeFleetAdvisorSchemaObjectSummary",
          "dms:describeFleetAdvisorSchemas",
          "dms:describeOrderableReplicationInstances",
          "dms:describePendingMaintenanceActions",
          "dms:describeRefreshSchemasStatus",
          "dms:describeReplicationInstances",
          "dms:describeReplicationInstanceTaskLogs",
          "dms:describeReplicationSubnetGroups",
          "dms:describeReplicationTaskAssessmentResults",
          "dms:describeReplicationTaskAssessmentRuns",
          "dms:describeReplicationTaskIndividualAssessments",
          "dms:describeReplicationTasks",
          "dms:describeSchemas",
          "dms:describeTableStatistics",
          "docdb-elastic:getCluster",
          "docdb-elastic:getClusterSnapshot",
          "docdb-elastic:listClusters",
          "docdb-elastic:listClusterSnapshots",
          "drs:describeJobLogItems",
          "drs:describeJobs",
          "drs:describeLaunchConfigurationTemplates",
          "drs:describeRecoveryInstances",
          "drs:describeRecoverySnapshots",
          "drs:describeReplicationConfigurationTemplates",
          "drs:describeSourceNetworks",
          "drs:describeSourceServers",
          "drs:getLaunchConfiguration",
          "drs:getReplicationConfiguration",
          "drs:listExtensibleSourceServers",
          "drs:listLaunchActions",
          "drs:listStagingAccounts",
          "ds:describeClientAuthenticationSettings",
          "ds:describeConditionalForwarders",
          "ds:describeDirectories",
          "ds:describeDomainControllers",
          "ds:describeEventTopics",
          "ds:describeLDAPSSettings",
          "ds:describeSharedDirectories",
          "ds:describeSnapshots",
          "ds:describeTrusts",
          "ds:getDirectoryLimits",
          "ds:getSnapshotLimits",
          "ds:listIpRoutes",
          "ds:listSchemaExtensions",
          "ds:listTagsForResource",
          "dynamodb:describeBackup",
          "dynamodb:describeContinuousBackups",
          "dynamodb:describeContributorInsights",
          "dynamodb:describeExport",
          "dynamodb:describeGlobalTable",
          "dynamodb:describeImport",
          "dynamodb:describeKinesisStreamingDestination",
          "dynamodb:describeLimits",
          "dynamodb:describeStream",
          "dynamodb:describeTable",
          "dynamodb:describeTimeToLive",
          "dynamodb:listBackups",
          "dynamodb:listContributorInsights",
          "dynamodb:listExports",
          "dynamodb:listGlobalTables",
          "dynamodb:listImports",
          "dynamodb:listStreams",
          "dynamodb:listTables",
          "dynamodb:listTagsOfResource",
          "ec2:describeAccountAttributes",
          "ec2:describeAddresses",
          "ec2:describeAddressesAttribute",
          "ec2:describeAddressTransfers",
          "ec2:describeAggregateIdFormat",
          "ec2:describeAvailabilityZones",
          "ec2:describeBundleTasks",
          "ec2:describeByoipCidrs",
          "ec2:describeCapacityReservationFleets",
          "ec2:describeCapacityReservations",
          "ec2:describeCarrierGateways",
          "ec2:describeClassicLinkInstances",
          "ec2:describeClientVpnAuthorizationRules",
          "ec2:describeClientVpnConnections",
          "ec2:describeClientVpnEndpoints",
          "ec2:describeClientVpnRoutes",
          "ec2:describeClientVpnTargetNetworks",
          "ec2:describeCoipPools",
          "ec2:describeConversionTasks",
          "ec2:describeCustomerGateways",
          "ec2:describeDhcpOptions",
          "ec2:describeEgressOnlyInternetGateways",
          "ec2:describeExportImageTasks",
          "ec2:describeExportTasks",
          "ec2:describeFastLaunchImages",
          "ec2:describeFastSnapshotRestores",
          "ec2:describeFleetHistory",
          "ec2:describeFleetInstances",
          "ec2:describeFleets",
          "ec2:describeFlowLogs",
          "ec2:describeFpgaImageAttribute",
          "ec2:describeFpgaImages",
          "ec2:describeHostReservationOfferings",
          "ec2:describeHostReservations",
          "ec2:describeHosts",
          "ec2:describeIamInstanceProfileAssociations",
          "ec2:describeIdentityIdFormat",
          "ec2:describeIdFormat",
          "ec2:describeImageAttribute",
          "ec2:describeImages",
          "ec2:describeImportImageTasks",
          "ec2:describeImportSnapshotTasks",
          "ec2:describeInstanceAttribute",
          "ec2:describeInstanceCreditSpecifications",
          "ec2:describeInstanceEventNotificationAttributes",
          "ec2:describeInstanceEventWindows",
          "ec2:describeInstances",
          "ec2:describeInstanceStatus",
          "ec2:describeInstanceTypeOfferings",
          "ec2:describeInstanceTypes",
          "ec2:describeInternetGateways",
          "ec2:describeIpamPools",
          "ec2:describeIpams",
          "ec2:describeIpamScopes",
          "ec2:describeIpv6Pools",
          "ec2:describeKeyPairs",
          "ec2:describeLaunchTemplates",
          "ec2:describeLaunchTemplateVersions",
          "ec2:describeLocalGatewayRouteTables",
          "ec2:describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
          "ec2:describeLocalGatewayRouteTableVpcAssociations",
          "ec2:describeLocalGateways",
          "ec2:describeLocalGatewayVirtualInterfaceGroups",
          "ec2:describeLocalGatewayVirtualInterfaces",
          "ec2:describeManagedPrefixLists",
          "ec2:describeMovingAddresses",
          "ec2:describeNatGateways",
          "ec2:describeNetworkAcls",
          "ec2:describeNetworkInterfaceAttribute",
          "ec2:describeNetworkInterfaces",
          "ec2:describePlacementGroups",
          "ec2:describePrefixLists",
          "ec2:describePrincipalIdFormat",
          "ec2:describePublicIpv4Pools",
          "ec2:describeRegions",
          "ec2:describeReservedInstances",
          "ec2:describeReservedInstancesListings",
          "ec2:describeReservedInstancesModifications",
          "ec2:describeReservedInstancesOfferings",
          "ec2:describeRouteTables",
          "ec2:describeScheduledInstanceAvailability",
          "ec2:describeScheduledInstances",
          "ec2:describeSecurityGroupReferences",
          "ec2:describeSecurityGroupRules",
          "ec2:describeSecurityGroups",
          "ec2:describeSnapshotAttribute",
          "ec2:describeSnapshots",
          "ec2:describeSpotDatafeedSubscription",
          "ec2:describeSpotFleetInstances",
          "ec2:describeSpotFleetRequestHistory",
          "ec2:describeSpotFleetRequests",
          "ec2:describeSpotInstanceRequests",
          "ec2:describeSpotPriceHistory",
          "ec2:describeStaleSecurityGroups",
          "ec2:describeStoreImageTasks",
          "ec2:describeSubnets",
          "ec2:describeTags",
          "ec2:describeTrafficMirrorFilters",
          "ec2:describeTrafficMirrorSessions",
          "ec2:describeTrafficMirrorTargets",
          "ec2:describeTransitGatewayAttachments",
          "ec2:describeTransitGatewayConnectPeers",
          "ec2:describeTransitGatewayMulticastDomains",
          "ec2:describeTransitGatewayPeeringAttachments",
          "ec2:describeTransitGatewayPolicyTables",
          "ec2:describeTransitGatewayRouteTableAnnouncements",
          "ec2:describeTransitGatewayRouteTables",
          "ec2:describeTransitGateways",
          "ec2:describeTransitGatewayVpcAttachments",
          "ec2:describeVerifiedAccessEndpoints",
          "ec2:describeVerifiedAccessGroups",
          "ec2:describeVerifiedAccessInstances",
          "ec2:describeVerifiedAccessTrustProviders",
          "ec2:describeVolumeAttribute",
          "ec2:describeVolumes",
          "ec2:describeVolumesModifications",
          "ec2:describeVolumeStatus",
          "ec2:describeVpcAttribute",
          "ec2:describeVpcClassicLink",
          "ec2:describeVpcClassicLinkDnsSupport",
          "ec2:describeVpcEndpointConnectionNotifications",
          "ec2:describeVpcEndpointConnections",
          "ec2:describeVpcEndpoints",
          "ec2:describeVpcEndpointServiceConfigurations",
          "ec2:describeVpcEndpointServicePermissions",
          "ec2:describeVpcEndpointServices",
          "ec2:describeVpcPeeringConnections",
          "ec2:describeVpcs",
          "ec2:describeVpnConnections",
          "ec2:describeVpnGateways",
          "ec2:getAssociatedIpv6PoolCidrs",
          "ec2:getCapacityReservationUsage",
          "ec2:getCoipPoolUsage",
          "ec2:getConsoleOutput",
          "ec2:getConsoleScreenshot",
          "ec2:getDefaultCreditSpecification",
          "ec2:getEbsDefaultKmsKeyId",
          "ec2:getEbsEncryptionByDefault",
          "ec2:getGroupsForCapacityReservation",
          "ec2:getHostReservationPurchasePreview",
          "ec2:getInstanceTypesFromInstanceRequirements",
          "ec2:getIpamAddressHistory",
          "ec2:getIpamPoolAllocations",
          "ec2:getIpamPoolCidrs",
          "ec2:getIpamResourceCidrs",
          "ec2:getLaunchTemplateData",
          "ec2:getManagedPrefixListAssociations",
          "ec2:getManagedPrefixListEntries",
          "ec2:getReservedInstancesExchangeQuote",
          "ec2:getSerialConsoleAccessStatus",
          "ec2:getSpotPlacementScores",
          "ec2:getTransitGatewayMulticastDomainAssociations",
          "ec2:getTransitGatewayPrefixListReferences",
          "ec2:getVerifiedAccessEndpointPolicy",
          "ec2:getVerifiedAccessGroupPolicy",
          "ec2:listImagesInRecycleBin",
          "ec2:listSnapshotsInRecycleBin",
          "ec2:searchLocalGatewayRoutes",
          "ec2:searchTransitGatewayMulticastGroups",
          "ec2:searchTransitGatewayRoutes",
          "ecr-public:describeImages",
          "ecr-public:describeImageTags",
          "ecr-public:describeRegistries",
          "ecr-public:describeRepositories",
          "ecr-public:getRegistryCatalogData",
          "ecr-public:getRepositoryCatalogData",
          "ecr-public:getRepositoryPolicy",
          "ecr-public:listTagsForResource",
          "ecr:batchCheckLayerAvailability",
          "ecr:batchGetRepositoryScanningConfiguration",
          "ecr:describeImages",
          "ecr:describeImageReplicationStatus",
          "ecr:describeImageScanFindings",
          "ecr:describePullThroughCacheRules",
          "ecr:describeRegistry",
          "ecr:describeRepositories",
          "ecr:getLifecyclePolicy",
          "ecr:getLifecyclePolicyPreview",
          "ecr:getRegistryPolicy",
          "ecr:getRegistryScanningConfiguration",
          "ecr:getRepositoryPolicy",
          "ecr:listImages",
          "ecr:listTagsForResource",
          "ecs:describeCapacityProviders",
          "ecs:describeClusters",
          "ecs:describeContainerInstances",
          "ecs:describeServices",
          "ecs:describeTaskDefinition",
          "ecs:describeTasks",
          "ecs:describeTaskSets",
          "ecs:getTaskProtection",
          "ecs:listAccountSettings",
          "ecs:listAttributes",
          "ecs:listClusters",
          "ecs:listContainerInstances",
          "ecs:listServices",
          "ecs:listServicesByNamespace",
          "ecs:listTagsForResource",
          "ecs:listTaskDefinitionFamilies",
          "ecs:listTaskDefinitions",
          "ecs:listTasks",
          "eks:describeAccessEntry",
          "eks:describeAddon",
          "eks:describeAddonConfiguration",
          "eks:describeAddonVersions",
          "eks:describeCluster",
          "eks:describeEksAnywhereSubscription",
          "eks:describeFargateProfile",
          "eks:describeIdentityProviderConfig",
          "eks:describeNodegroup",
          "eks:describeUpdate",
          "eks:listAccessEntries",
          "eks:listAccessPolicies",
          "eks:listAddons",
          "eks:listAssociatedAccessPolicies",
          "eks:listClusters",
          "eks:listEksAnywhereSubscriptions",
          "eks:listFargateProfiles",
          "eks:listIdentityProviderConfigs",
          "eks:listNodegroups",
          "eks:listUpdates",
          "elasticache:describeCacheClusters",
          "elasticache:describeCacheEngineVersions",
          "elasticache:describeCacheParameterGroups",
          "elasticache:describeCacheParameters",
          "elasticache:describeCacheSecurityGroups",
          "elasticache:describeCacheSubnetGroups",
          "elasticache:describeEngineDefaultParameters",
          "elasticache:describeEvents",
          "elasticache:describeGlobalReplicationGroups",
          "elasticache:describeReplicationGroups",
          "elasticache:describeReservedCacheNodes",
          "elasticache:describeReservedCacheNodesOfferings",
          "elasticache:describeServerlessCaches",
          "elasticache:describeServerlessCacheSnapshots",
          "elasticache:describeServiceUpdates",
          "elasticache:describeSnapshots",
          "elasticache:describeUpdateActions",
          "elasticache:describeUserGroups",
          "elasticache:describeUsers",
          "elasticache:listAllowedNodeTypeModifications",
          "elasticache:listTagsForResource",
          "elasticbeanstalk:checkDNSAvailability",
          "elasticbeanstalk:describeAccountAttributes",
          "elasticbeanstalk:describeApplicationVersions",
          "elasticbeanstalk:describeApplications",
          "elasticbeanstalk:describeConfigurationOptions",
          "elasticbeanstalk:describeEnvironmentHealth",
          "elasticbeanstalk:describeEnvironmentManagedActionHistory",
          "elasticbeanstalk:describeEnvironmentManagedActions",
          "elasticbeanstalk:describeEnvironmentResources",
          "elasticbeanstalk:describeEnvironments",
          "elasticbeanstalk:describeEvents",
          "elasticbeanstalk:describeInstancesHealth",
          "elasticbeanstalk:describePlatformVersion",
          "elasticbeanstalk:listAvailableSolutionStacks",
          "elasticbeanstalk:listPlatformBranches",
          "elasticbeanstalk:listPlatformVersions",
          "elasticbeanstalk:validateConfigurationSettings",
          "elasticfilesystem:describeAccessPoints",
          "elasticfilesystem:describeFileSystemPolicy",
          "elasticfilesystem:describeFileSystems",
          "elasticfilesystem:describeLifecycleConfiguration",
          "elasticfilesystem:describeMountTargets",
          "elasticfilesystem:describeMountTargetSecurityGroups",
          "elasticfilesystem:describeTags",
          "elasticfilesystem:listTagsForResource",
          "elasticloadbalancing:describeAccountLimits",
          "elasticloadbalancing:describeInstanceHealth",
          "elasticloadbalancing:describeListenerCertificates",
          "elasticloadbalancing:describeListeners",
          "elasticloadbalancing:describeLoadBalancerAttributes",
          "elasticloadbalancing:describeLoadBalancerPolicies",
          "elasticloadbalancing:describeLoadBalancerPolicyTypes",
          "elasticloadbalancing:describeLoadBalancers",
          "elasticloadbalancing:describeRules",
          "elasticloadbalancing:describeSSLPolicies",
          "elasticloadbalancing:describeTags",
          "elasticloadbalancing:describeTargetGroupAttributes",
          "elasticloadbalancing:describeTargetGroups",
          "elasticloadbalancing:describeTargetHealth",
          "elasticmapreduce:describeCluster",
          "elasticmapreduce:describeNotebookExecution",
          "elasticmapreduce:describeReleaseLabel",
          "elasticmapreduce:describeSecurityConfiguration",
          "elasticmapreduce:describeStep",
          "elasticmapreduce:describeStudio",
          "elasticmapreduce:getAutoTerminationPolicy",
          "elasticmapreduce:getBlockPublicAccessConfiguration",
          "elasticmapreduce:getManagedScalingPolicy",
          "elasticmapreduce:getStudioSessionMapping",
          "elasticmapreduce:listBootstrapActions",
          "elasticmapreduce:listClusters",
          "elasticmapreduce:listInstanceFleets",
          "elasticmapreduce:listInstanceGroups",
          "elasticmapreduce:listInstances",
          "elasticmapreduce:listNotebookExecutions",
          "elasticmapreduce:listReleaseLabels",
          "elasticmapreduce:listSecurityConfigurations",
          "elasticmapreduce:listSteps",
          "elasticmapreduce:listStudios",
          "elasticmapreduce:listStudioSessionMappings",
          "elastictranscoder:listJobsByPipeline",
          "elastictranscoder:listJobsByStatus",
          "elastictranscoder:listPipelines",
          "elastictranscoder:listPresets",
          "elastictranscoder:readPipeline",
          "elastictranscoder:readPreset",
          "emr-containers:describeJobRun",
          "emr-containers:describeJobTemplate",
          "emr-containers:describeManagedEndpoint",
          "emr-containers:describeVirtualCluster",
          "emr-containers:listJobRuns",
          "emr-containers:listJobTemplates",
          "emr-containers:listManagedEndpoints",
          "emr-containers:listVirtualClusters",
          "emr-serverless:getApplication",
          "emr-serverless:getJobRun",
          "emr-serverless:listApplications",
          "es:describeDomain",
          "es:describeDomainAutoTunes",
          "es:describeDomainChangeProgress",
          "es:describeDomainConfig",
          "es:describeDomains",
          "es:describeDryRunProgress",
          "es:describeElasticsearchDomain",
          "es:describeElasticsearchDomainConfig",
          "es:describeElasticsearchDomains",
          "es:describeInboundConnections",
          "es:describeInstanceTypeLimits",
          "es:describeOutboundConnections",
          "es:describePackages",
          "es:describeReservedInstanceOfferings",
          "es:describeReservedInstances",
          "es:describeVpcEndpoints",
          "es:getCompatibleVersions",
          "es:getPackageVersionHistory",
          "es:getUpgradeHistory",
          "es:getUpgradeStatus",
          "es:listDomainNames",
          "es:listDomainsForPackage",
          "es:listInstanceTypeDetails",
          "es:listPackagesForDomain",
          "es:listScheduledActions",
          "es:listTags",
          "es:listVersions",
          "es:listVpcEndpointAccess",
          "es:listVpcEndpoints",
          "es:listVpcEndpointsForDomain",
          "evidently:getExperiment",
          "evidently:getFeature",
          "evidently:getLaunch",
          "evidently:getProject",
          "evidently:getSegment",
          "evidently:listExperiments",
          "evidently:listFeatures",
          "evidently:listLaunches",
          "evidently:listProjects",
          "evidently:listSegments",
          "evidently:listSegmentReferences",
          "events:describeApiDestination",
          "events:describeArchive",
          "events:describeConnection",
          "events:describeEndpoint",
          "events:describeEventBus",
          "events:describeEventSource",
          "events:describePartnerEventSource",
          "events:describeReplay",
          "events:describeRule",
          "events:listArchives",
          "events:listApiDestinations",
          "events:listConnections",
          "events:listEndpoints",
          "events:listEventBuses",
          "events:listEventSources",
          "events:listPartnerEventSourceAccounts",
          "events:listPartnerEventSources",
          "events:listReplays",
          "events:listRuleNamesByTarget",
          "events:listRules",
          "events:listTargetsByRule",
          "events:testEventPattern",
          "firehose:describeDeliveryStream",
          "firehose:listDeliveryStreams",
          "fms:getAdminAccount",
          "fms:getComplianceDetail",
          "fms:getNotificationChannel",
          "fms:getPolicy",
          "fms:getProtectionStatus",
          "fms:listComplianceStatus",
          "fms:listMemberAccounts",
          "fms:listPolicies",
          "forecast:describeDataset",
          "forecast:describeDatasetGroup",
          "forecast:describeDatasetImportJob",
          "forecast:describeForecast",
          "forecast:describeForecastExportJob",
          "forecast:describePredictor",
          "forecast:getAccuracyMetrics",
          "forecast:listDatasetGroups",
          "forecast:listDatasetImportJobs",
          "forecast:listDatasets",
          "forecast:listForecastExportJobs",
          "forecast:listForecasts",
          "forecast:listPredictors",
          "fsx:describeBackups",
          "fsx:describeDataRepositoryAssociations",
          "fsx:describeDataRepositoryTasks",
          "fsx:describeFileCaches",
          "fsx:describeFileSystems",
          "fsx:describeSnapshots",
          "fsx:describeStorageVirtualMachines",
          "fsx:describeVolumes",
          "fsx:listTagsForResource",
          "gamelift:describeAlias",
          "gamelift:describeBuild",
          "gamelift:describeEC2InstanceLimits",
          "gamelift:describeFleetAttributes",
          "gamelift:describeFleetCapacity",
          "gamelift:describeFleetEvents",
          "gamelift:describeFleetLocationAttributes",
          "gamelift:describeFleetLocationCapacity",
          "gamelift:describeFleetLocationUtilization",
          "gamelift:describeFleetPortSettings",
          "gamelift:describeFleetUtilization",
          "gamelift:describeGameServer",
          "gamelift:describeGameServerGroup",
          "gamelift:describeGameSessionDetails",
          "gamelift:describeGameSessionPlacement",
          "gamelift:describeGameSessionQueues",
          "gamelift:describeGameSessions",
          "gamelift:describeInstances",
          "gamelift:describeMatchmaking",
          "gamelift:describeMatchmakingConfigurations",
          "gamelift:describeMatchmakingRuleSets",
          "gamelift:describePlayerSessions",
          "gamelift:describeRuntimeConfiguration",
          "gamelift:describeScalingPolicies",
          "gamelift:describeScript",
          "gamelift:listAliases",
          "gamelift:listBuilds",
          "gamelift:listFleets",
          "gamelift:listGameServerGroups",
          "gamelift:listGameServers",
          "gamelift:listScripts",
          "gamelift:resolveAlias",
          "glacier:describeJob",
          "glacier:describeVault",
          "glacier:getDataRetrievalPolicy",
          "glacier:getVaultAccessPolicy",
          "glacier:getVaultLock",
          "glacier:getVaultNotifications",
          "glacier:listJobs",
          "glacier:listTagsForVault",
          "glacier:listVaults",
          "globalaccelerator:describeAccelerator",
          "globalaccelerator:describeAcceleratorAttributes",
          "globalaccelerator:describeEndpointGroup",
          "globalaccelerator:describeListener",
          "globalaccelerator:listAccelerators",
          "globalaccelerator:listEndpointGroups",
          "globalaccelerator:listListeners",
          "glue:batchGetBlueprints",
          "glue:batchGetCrawlers",
          "glue:batchGetDevEndpoints",
          "glue:batchGetJobs",
          "glue:batchGetPartition",
          "glue:batchGetTriggers",
          "glue:batchGetWorkflows",
          "glue:checkSchemaVersionValidity",
          "glue:getBlueprint",
          "glue:getBlueprintRun",
          "glue:getBlueprintRuns",
          "glue:getCatalogImportStatus",
          "glue:getClassifier",
          "glue:getClassifiers",
          "glue:getColumnStatisticsForPartition",
          "glue:getColumnStatisticsForTable",
          "glue:getCrawler",
          "glue:getCrawlerMetrics",
          "glue:getCrawlers",
          "glue:getCustomEntityType",
          "glue:getDatabase",
          "glue:getDatabases",
          "glue:getDataflowGraph",
          "glue:getDataQualityResult",
          "glue:getDataQualityRuleRecommendationRun",
          "glue:getDataQualityRuleset",
          "glue:getDataQualityRulesetEvaluationRun",
          "glue:getDevEndpoint",
          "glue:getDevEndpoints",
          "glue:getJob",
          "glue:getJobRun",
          "glue:getJobRuns",
          "glue:getJobs",
          "glue:getMapping",
          "glue:getMLTaskRun",
          "glue:getMLTaskRuns",
          "glue:getMLTransform",
          "glue:getMLTransforms",
          "glue:getPartition",
          "glue:getPartitionIndexes",
          "glue:getPartitions",
          "glue:getRegistry",
          "glue:getResourcePolicies",
          "glue:getResourcePolicy",
          "glue:getSchema",
          "glue:getSchemaByDefinition",
          "glue:getSchemaVersion",
          "glue:getSchemaVersionsDiff",
          "glue:getSession",
          "glue:getStatement",
          "glue:getTable",
          "glue:getTables",
          "glue:getTableVersions",
          "glue:getTrigger",
          "glue:getTriggers",
          "glue:getUserDefinedFunction",
          "glue:getUserDefinedFunctions",
          "glue:getWorkflow",
          "glue:getWorkflowRun",
          "glue:getWorkflowRuns",
          "glue:listCrawlers",
          "glue:listCrawls",
          "glue:listDataQualityResults",
          "glue:listDataQualityRuleRecommendationRuns",
          "glue:listDataQualityRulesetEvaluationRuns",
          "glue:listDataQualityRulesets",
          "glue:listDevEndpoints",
          "glue:listMLTransforms",
          "glue:listRegistries",
          "glue:listSchemas",
          "glue:listSchemaVersions",
          "glue:listSessions",
          "glue:listStatements",
          "glue:querySchemaVersionMetadata",
          "greengrass:getConnectivityInfo",
          "greengrass:getCoreDefinition",
          "greengrass:getCoreDefinitionVersion",
          "greengrass:getDeploymentStatus",
          "greengrass:getDeviceDefinition",
          "greengrass:getDeviceDefinitionVersion",
          "greengrass:getFunctionDefinition",
          "greengrass:getFunctionDefinitionVersion",
          "greengrass:getGroup",
          "greengrass:getGroupCertificateAuthority",
          "greengrass:getGroupVersion",
          "greengrass:getLoggerDefinition",
          "greengrass:getLoggerDefinitionVersion",
          "greengrass:getResourceDefinitionVersion",
          "greengrass:getServiceRoleForAccount",
          "greengrass:getSubscriptionDefinition",
          "greengrass:getSubscriptionDefinitionVersion",
          "greengrass:listCoreDefinitions",
          "greengrass:listCoreDefinitionVersions",
          "greengrass:listDeployments",
          "greengrass:listDeviceDefinitions",
          "greengrass:listDeviceDefinitionVersions",
          "greengrass:listFunctionDefinitions",
          "greengrass:listFunctionDefinitionVersions",
          "greengrass:listGroups",
          "greengrass:listGroupVersions",
          "greengrass:listLoggerDefinitions",
          "greengrass:listLoggerDefinitionVersions",
          "greengrass:listResourceDefinitions",
          "greengrass:listResourceDefinitionVersions",
          "greengrass:listSubscriptionDefinitions",
          "greengrass:listSubscriptionDefinitionVersions",
          "guardduty:getDetector",
          "guardduty:getFindings",
          "guardduty:getFindingsStatistics",
          "guardduty:getInvitationsCount",
          "guardduty:getIPSet",
          "guardduty:getMasterAccount",
          "guardduty:getMembers",
          "guardduty:getThreatIntelSet",
          "guardduty:listDetectors",
          "guardduty:listFindings",
          "guardduty:listInvitations",
          "guardduty:listIPSets",
          "guardduty:listMembers",
          "guardduty:listThreatIntelSets",
          "health:describeAffectedAccountsForOrganization",
          "health:describeAffectedEntities",
          "health:describeAffectedEntitiesForOrganization",
          "health:describeEntityAggregates",
          "health:describeEntityAggregatesForOrganization",
          "health:describeEventAggregates",
          "health:describeEventDetails",
          "health:describeEventDetailsForOrganization",
          "health:describeEvents",
          "health:describeEventsForOrganization",
          "health:describeEventTypes",
          "health:describeHealthServiceStatusForOrganization",
          "iam:getAccessKeyLastUsed",
          "iam:getAccountAuthorizationDetails",
          "iam:getAccountPasswordPolicy",
          "iam:getAccountSummary",
          "iam:getContextKeysForCustomPolicy",
          "iam:getContextKeysForPrincipalPolicy",
          "iam:getCredentialReport",
          "iam:getGroup",
          "iam:getGroupPolicy",
          "iam:getInstanceProfile",
          "iam:getLoginProfile",
          "iam:getOpenIDConnectProvider",
          "iam:getPolicy",
          "iam:getPolicyVersion",
          "iam:getRole",
          "iam:getRolePolicy",
          "iam:getSAMLProvider",
          "iam:getServerCertificate",
          "iam:getServiceLinkedRoleDeletionStatus",
          "iam:getSSHPublicKey",
          "iam:getUser",
          "iam:getUserPolicy",
          "iam:listAccessKeys",
          "iam:listAccountAliases",
          "iam:listAttachedGroupPolicies",
          "iam:listAttachedRolePolicies",
          "iam:listAttachedUserPolicies",
          "iam:listEntitiesForPolicy",
          "iam:listGroupPolicies",
          "iam:listGroups",
          "iam:listGroupsForUser",
          "iam:listInstanceProfiles",
          "iam:listInstanceProfilesForRole",
          "iam:listMFADevices",
          "iam:listOpenIDConnectProviders",
          "iam:listPolicies",
          "iam:listPolicyVersions",
          "iam:listRolePolicies",
          "iam:listRoles",
          "iam:listSAMLProviders",
          "iam:listServerCertificates",
          "iam:listSigningCertificates",
          "iam:listSSHPublicKeys",
          "iam:listUserPolicies",
          "iam:listUsers",
          "iam:listVirtualMFADevices",
          "iam:simulateCustomPolicy",
          "iam:simulatePrincipalPolicy",
          "imagebuilder:getComponent",
          "imagebuilder:getComponentPolicy",
          "imagebuilder:getContainerRecipe",
          "imagebuilder:getDistributionConfiguration",
          "imagebuilder:getImage",
          "imagebuilder:getImagePipeline",
          "imagebuilder:getImagePolicy",
          "imagebuilder:getImageRecipe",
          "imagebuilder:getImageRecipePolicy",
          "imagebuilder:getInfrastructureConfiguration",
          "imagebuilder:getLifecycleExecution",
          "imagebuilder:getLifecyclePolicy",
          "imagebuilder:getWorkflowExecution",
          "imagebuilder:getWorkflowStepExecution",
          "imagebuilder:listComponentBuildVersions",
          "imagebuilder:listComponents",
          "imagebuilder:listContainerRecipes",
          "imagebuilder:listDistributionConfigurations",
          "imagebuilder:listImageBuildVersions",
          "imagebuilder:listImagePipelineImages",
          "imagebuilder:listImagePipelines",
          "imagebuilder:listImageRecipes",
          "imagebuilder:listImages",
          "imagebuilder:listImageScanFindingAggregations",
          "imagebuilder:listInfrastructureConfigurations",
          "imagebuilder:listLifecycleExecutions",
          "imagebuilder:listLifecycleExecutionResources",
          "imagebuilder:listLifecyclePolicies",
          "imagebuilder:listWorkflowExecutions",
          "imagebuilder:listWorkflowStepExecutions",
          "imagebuilder:listTagsForResource",
          "inspector:describeAssessmentRuns",
          "inspector:describeAssessmentTargets",
          "inspector:describeAssessmentTemplates",
          "inspector:describeCrossAccountAccessRole",
          "inspector:describeResourceGroups",
          "inspector:describeRulesPackages",
          "inspector:getTelemetryMetadata",
          "inspector:listAssessmentRunAgents",
          "inspector:listAssessmentRuns",
          "inspector:listAssessmentTargets",
          "inspector:listAssessmentTemplates",
          "inspector:listEventSubscriptions",
          "inspector:listRulesPackages",
          "inspector:listTagsForResource",
          "inspector2:batchGetAccountStatus",
          "inspector2:batchGetFreeTrialInfo",
          "inspector2:describeOrganizationConfiguration",
          "inspector2:getDelegatedAdminAccount",
          "inspector2:getMember",
          "inspector2:getSbomExport",
          "inspector2:listCoverage",
          "inspector2:listDelegatedAdminAccounts",
          "inspector2:listFilters",
          "inspector2:listFindings",
          "inspector2:listMembers",
          "inspector2:listUsageTotals",
          "inspector-scan:scanSbom",
          "internetmonitor:getMonitor",
          "internetmonitor:listMonitors",
          "internetmonitor:getHealthEvent",
          "internetmonitor:listHealthEvents",
          "iot:describeAuthorizer",
          "iot:describeCACertificate",
          "iot:describeCertificate",
          "iot:describeDefaultAuthorizer",
          "iot:describeDomainConfiguration",
          "iot:describeEndpoint",
          "iot:describeIndex",
          "iot:describeJobExecution",
          "iot:describeThing",
          "iot:describeThingGroup",
          "iot:describeTunnel",
          "iot:getEffectivePolicies",
          "iot:getIndexingConfiguration",
          "iot:getLoggingOptions",
          "iot:getPolicy",
          "iot:getPolicyVersion",
          "iot:getTopicRule",
          "iot:getV2LoggingOptions",
          "iot:listAttachedPolicies",
          "iot:listAuthorizers",
          "iot:listCACertificates",
          "iot:listCertificates",
          "iot:listCertificatesByCA",
          "iot:listDomainConfigurations",
          "iot:listJobExecutionsForJob",
          "iot:listJobExecutionsForThing",
          "iot:listJobs",
          "iot:listNamedShadowsForThing",
          "iot:listOutgoingCertificates",
          "iot:listPackages",
          "iot:listPackageVersions",
          "iot:listPolicies",
          "iot:listPolicyPrincipals",
          "iot:listPolicyVersions",
          "iot:listPrincipalPolicies",
          "iot:listPrincipalThings",
          "iot:listRoleAliases",
          "iot:listTargetsForPolicy",
          "iot:listThingGroups",
          "iot:listThingGroupsForThing",
          "iot:listThingPrincipals",
          "iot:listThingRegistrationTasks",
          "iot:listThings",
          "iot:listThingsInThingGroup",
          "iot:listThingTypes",
          "iot:listTopicRules",
          "iot:listTunnels",
          "iot:listV2LoggingLevels",
          "iotevents:describeDetector",
          "iotevents:describeDetectorModel",
          "iotevents:describeInput",
          "iotevents:describeLoggingOptions",
          "iotevents:listDetectorModels",
          "iotevents:listDetectorModelVersions",
          "iotevents:listDetectors",
          "iotevents:listInputs",
          "iotfleetwise:getCampaign",
          "iotfleetwise:getDecoderManifest",
          "iotfleetwise:getFleet",
          "iotfleetwise:getModelManifest",
          "iotfleetwise:getSignalCatalog",
          "iotfleetwise:getVehicle",
          "iotfleetwise:getVehicleStatus",
          "iotfleetwise:listCampaigns",
          "iotfleetwise:listDecoderManifests",
          "iotfleetwise:listDecoderManifestNetworkInterfaces",
          "iotfleetwise:listDecoderManifestSignals",
          "iotfleetwise:listFleets",
          "iotfleetwise:listFleetsForVehicle",
          "iotfleetwise:listModelManifests",
          "iotfleetwise:listModelManifestNodes",
          "iotfleetwise:listSignalCatalogs",
          "iotfleetwise:listSignalCatalogNodes",
          "iotfleetwise:listVehicles",
          "iotsitewise:describeAccessPolicy",
          "iotsitewise:describeAsset",
          "iotsitewise:describeAssetModel",
          "iotsitewise:describeAssetProperty",
          "iotsitewise:describeDashboard",
          "iotsitewise:describeGateway",
          "iotsitewise:describeGatewayCapabilityConfiguration",
          "iotsitewise:describeLoggingOptions",
          "iotsitewise:describePortal",
          "iotsitewise:describeProject",
          "iotsitewise:listAccessPolicies",
          "iotsitewise:listAssetModels",
          "iotsitewise:listAssets",
          "iotsitewise:listAssociatedAssets",
          "iotsitewise:listDashboards",
          "iotsitewise:listGateways",
          "iotsitewise:listPortals",
          "iotsitewise:listProjectAssets",
          "iotsitewise:listProjects",
          "iottwinmaker:getComponentType",
          "iottwinmaker:getEntity",
          "iottwinmaker:getPricingPlan",
          "iottwinmaker:getScene",
          "iottwinmaker:getWorkspace",
          "iottwinmaker:listComponentTypes",
          "iottwinmaker:listEntities",
          "iottwinmaker:listScenes",
          "iottwinmaker:getSyncJob",
          "iottwinmaker:listSyncJobs",
          "iottwinmaker:listSyncResources",
          "iottwinmaker:listWorkspaces",
          "iotwireless:getDestination",
          "iotwireless:getDeviceProfile",
          "iotwireless:getPartnerAccount",
          "iotwireless:getServiceEndpoint",
          "iotwireless:getServiceProfile",
          "iotwireless:getWirelessDevice",
          "iotwireless:getWirelessDeviceStatistics",
          "iotwireless:getWirelessGateway",
          "iotwireless:getWirelessGatewayCertificate",
          "iotwireless:getWirelessGatewayFirmwareInformation",
          "iotwireless:getWirelessGatewayStatistics",
          "iotwireless:getWirelessGatewayTask",
          "iotwireless:getWirelessGatewayTaskDefinition",
          "iotwireless:listDestinations",
          "iotwireless:listDeviceProfiles",
          "iotwireless:listPartnerAccounts",
          "iotwireless:listServiceProfiles",
          "iotwireless:listTagsForResource",
          "iotwireless:listWirelessDevices",
          "iotwireless:listWirelessGateways",
          "iotwireless:listWirelessGatewayTaskDefinitions",
          "ivs:getChannel",
          "ivs:getRecordingConfiguration",
          "ivs:getStream",
          "ivs:getStreamSession",
          "ivs:listChannels",
          "ivs:listPlaybackKeyPairs",
          "ivs:listRecordingConfigurations",
          "ivs:listStreamKeys",
          "ivs:listStreams",
          "ivs:listStreamSessions",
          "kafka:describeCluster",
          "kafka:describeClusterOperation",
          "kafka:describeClusterOperationV2",
          "kafka:describeClusterV2",
          "kafka:describeConfiguration",
          "kafka:describeConfigurationRevision",
          "kafka:describeReplicator",
          "kafka:describeVpcConnection",
          "kafka:getBootstrapBrokers",
          "kafka:getClusterPolicy",
          "kafka:listConfigurations",
          "kafka:listConfigurationRevisions",
          "kafka:listClientVpcConnections",
          "kafka:listClusterOperations",
          "kafka:listClusterOperationsV2",
          "kafka:listClusters",
          "kafka:listClustersV2",
          "kafka:listNodes",
          "kafka:listReplicators",
          "kafka:listScramSecrets",
          "kafka:listVpcConnections",
          "kafkaconnect:describeConnector",
          "kafkaconnect:describeCustomPlugin",
          "kafkaconnect:describeWorkerConfiguration",
          "kafkaconnect:listConnectors",
          "kafkaconnect:listCustomPlugins",
          "kafkaconnect:listWorkerConfigurations",
          "kendra:describeDataSource",
          "kendra:describeFaq",
          "kendra:describeIndex",
          "kendra:listDataSources",
          "kendra:listFaqs",
          "kendra:listIndices",
          "kinesis:describeStream",
          "kinesis:describeStreamConsumer",
          "kinesis:describeStreamSummary",
          "kinesis:listShards",
          "kinesis:listStreams",
          "kinesis:listStreamConsumers",
          "kinesis:listTagsForStream",
          "kinesisanalytics:describeApplication",
          "kinesisanalytics:describeApplicationSnapshot",
          "kinesisanalytics:listApplications",
          "kinesisanalytics:listApplicationSnapshots",
          "kinesisvideo:describeImageGenerationConfiguration",
          "kinesisvideo:describeNotificationConfiguration",
          "kinesisvideo:describeSignalingChannel",
          "kinesisvideo:describeStream",
          "kinesisvideo:getDataEndpoint",
          "kinesisvideo:getIceServerConfig",
          "kinesisvideo:getSignalingChannelEndpoint",
          "kinesisvideo:listSignalingChannels",
          "kinesisvideo:listStreams",
          "kms:describeKey",
          "kms:getKeyPolicy",
          "kms:getKeyRotationStatus",
          "kms:listAliases",
          "kms:listGrants",
          "kms:listKeyPolicies",
          "kms:listKeys",
          "kms:listResourceTags",
          "kms:listRetirableGrants",
          "lambda:getAccountSettings",
          "lambda:getAlias",
          "lambda:getCodeSigningConfig",
          "lambda:getEventSourceMapping",
          "lambda:getFunction",
          "lambda:getFunctionCodeSigningConfig",
          "lambda:getFunctionConcurrency",
          "lambda:getFunctionConfiguration",
          "lambda:getFunctionEventInvokeConfig",
          "lambda:getFunctionUrlConfig",
          "lambda:getLayerVersion",
          "lambda:getLayerVersionPolicy",
          "lambda:getPolicy",
          "lambda:getProvisionedConcurrencyConfig",
          "lambda:getRuntimeManagementConfig",
          "lambda:listAliases",
          "lambda:listCodeSigningConfigs",
          "lambda:listEventSourceMappings",
          "lambda:listFunctionEventInvokeConfigs",
          "lambda:listFunctions",
          "lambda:listFunctionsByCodeSigningConfig",
          "lambda:listFunctionUrlConfigs",
          "lambda:listLayers",
          "lambda:listLayerVersions",
          "lambda:listProvisionedConcurrencyConfigs",
          "lambda:listVersionsByFunction",
          "launchwizard:describeProvisionedApp",
          "launchwizard:describeProvisioningEvents",
          "launchwizard:listProvisionedApps",
          "lex:describeBot",
          "lex:describeBotAlias",
          "lex:describeBotLocale",
          "lex:describeBotRecommendation",
          "lex:describeBotVersion",
          "lex:describeCustomVocabularyMetadata",
          "lex:describeExport",
          "lex:describeImport",
          "lex:describeIntent",
          "lex:describeResourcePolicy",
          "lex:describeSlot",
          "lex:describeSlotType",
          "lex:getBot",
          "lex:getBotAlias",
          "lex:getBotAliases",
          "lex:getBotChannelAssociation",
          "lex:getBotChannelAssociations",
          "lex:getBots",
          "lex:getBotVersions",
          "lex:getBuiltinIntent",
          "lex:getBuiltinIntents",
          "lex:getBuiltinSlotTypes",
          "lex:getIntent",
          "lex:getIntents",
          "lex:getIntentVersions",
          "lex:getSlotType",
          "lex:getSlotTypes",
          "lex:getSlotTypeVersions",
          "lex:listBotAliases",
          "lex:listBotLocales",
          "lex:listBotRecommendations",
          "lex:listBots",
          "lex:listBotVersions",
          "lex:listExports",
          "lex:listImports",
          "lex:listIntents",
          "lex:listRecommendedIntents",
          "lex:listSlots",
          "lex:listSlotTypes",
          "license-manager:getLicenseConfiguration",
          "license-manager:getServiceSettings",
          "license-manager:listAssociationsForLicenseConfiguration",
          "license-manager:listFailuresForLicenseConfigurationOperations",
          "license-manager:listLicenseConfigurations",
          "license-manager:listLicenseSpecificationsForResource",
          "license-manager:listResourceInventory",
          "license-manager:listUsageForLicenseConfiguration",
          "lightsail:getActiveNames",
          "lightsail:getAlarms",
          "lightsail:getAutoSnapshots",
          "lightsail:getBlueprints",
          "lightsail:getBucketBundles",
          "lightsail:getBucketMetricData",
          "lightsail:getBuckets",
          "lightsail:getBundles",
          "lightsail:getCertificates",
          "lightsail:getContainerImages",
          "lightsail:getContainerServiceDeployments",
          "lightsail:getContainerServiceMetricData",
          "lightsail:getContainerServicePowers",
          "lightsail:getContainerServices",
          "lightsail:getDisk",
          "lightsail:getDisks",
          "lightsail:getDiskSnapshot",
          "lightsail:getDiskSnapshots",
          "lightsail:getDistributionBundles",
          "lightsail:getDistributionMetricData",
          "lightsail:getDistributions",
          "lightsail:getDomain",
          "lightsail:getDomains",
          "lightsail:getExportSnapshotRecords",
          "lightsail:getInstance",
          "lightsail:getInstanceMetricData",
          "lightsail:getInstancePortStates",
          "lightsail:getInstances",
          "lightsail:getInstanceSnapshot",
          "lightsail:getInstanceSnapshots",
          "lightsail:getInstanceState",
          "lightsail:getKeyPair",
          "lightsail:getKeyPairs",
          "lightsail:getLoadBalancer",
          "lightsail:getLoadBalancerMetricData",
          "lightsail:getLoadBalancers",
          "lightsail:getLoadBalancerTlsCertificates",
          "lightsail:getOperation",
          "lightsail:getOperations",
          "lightsail:getOperationsForResource",
          "lightsail:getRegions",
          "lightsail:getRelationalDatabase",
          "lightsail:getRelationalDatabaseMetricData",
          "lightsail:getRelationalDatabases",
          "lightsail:getRelationalDatabaseSnapshot",
          "lightsail:getRelationalDatabaseSnapshots",
          "lightsail:getStaticIp",
          "lightsail:getStaticIps",
          "lightsail:isVpcPeered",
          "logs:describeAccountPolicies",
          "logs:describeDeliveries",
          "logs:describeDeliveryDestinations",
          "logs:describeDeliverySources",
          "logs:describeDestinations",
          "logs:describeExportTasks",
          "logs:describeLogGroups",
          "logs:describeLogStreams",
          "logs:describeMetricFilters",
          "logs:describeQueries",
          "logs:describeQueryDefinitions",
          "logs:describeResourcePolicies",
          "logs:describeSubscriptionFilters",
          "logs:getDataProtectionPolicy",
          "logs:getDelivery",
          "logs:getDeliveryDestination",
          "logs:getDeliveryDestinationPolicy",
          "logs:getDeliverySource",
          "logs:getLogAnomalyDetector",
          "logs:getLogDelivery",
          "logs:getLogGroupFields",
          "logs:listAnomalies",
          "logs:listLogAnomalyDetectors",
          "logs:listLogDeliveries",
          "logs:testMetricFilter",
          "lookoutequipment:describeDataIngestionJob",
          "lookoutequipment:describeDataset",
          "lookoutequipment:describeInferenceScheduler",
          "lookoutequipment:describeModel",
          "lookoutequipment:listDataIngestionJobs",
          "lookoutequipment:listDatasets",
          "lookoutequipment:listInferenceExecutions",
          "lookoutequipment:listInferenceSchedulers",
          "lookoutequipment:listModels",
          "lookoutmetrics:describeAlert",
          "lookoutmetrics:describeAnomalyDetectionExecutions",
          "lookoutmetrics:describeAnomalyDetector",
          "lookoutmetrics:describeMetricSet",
          "lookoutmetrics:getAnomalyGroup",
          "lookoutmetrics:getDataQualityMetrics",
          "lookoutmetrics:getFeedback",
          "lookoutmetrics:getSampleData",
          "lookoutmetrics:listAlerts",
          "lookoutmetrics:listAnomalyDetectors",
          "lookoutmetrics:listAnomalyGroupSummaries",
          "lookoutmetrics:listAnomalyGroupTimeSeries",
          "lookoutmetrics:listMetricSets",
          "lookoutmetrics:listTagsForResource",
          "machinelearning:describeBatchPredictions",
          "machinelearning:describeDataSources",
          "machinelearning:describeEvaluations",
          "machinelearning:describeMLModels",
          "machinelearning:getBatchPrediction",
          "machinelearning:getDataSource",
          "machinelearning:getEvaluation",
          "machinelearning:getMLModel",
          "macie2:getClassificationExportConfiguration",
          "macie2:getCustomDataIdentifier",
          "macie2:getFindings",
          "macie2:getFindingStatistics",
          "macie2:listClassificationJobs",
          "macie2:listCustomDataIdentifiers",
          "macie2:listFindings",
          "managedblockchain:getMember",
          "managedblockchain:getNetwork",
          "managedblockchain:getNode",
          "managedblockchain:listMembers",
          "managedblockchain:listNetworks",
          "managedblockchain:listNodes",
          "mediaconnect:describeFlow",
          "mediaconnect:listEntitlements",
          "mediaconnect:listFlows",
          "mediaconvert:describeEndpoints",
          "mediaconvert:getJob",
          "mediaconvert:getJobTemplate",
          "mediaconvert:getPreset",
          "mediaconvert:getQueue",
          "mediaconvert:listJobs",
          "mediaconvert:listJobTemplates",
          "medialive:describeChannel",
          "medialive:describeInput",
          "medialive:describeInputDevice",
          "medialive:describeInputSecurityGroup",
          "medialive:describeMultiplex",
          "medialive:describeOffering",
          "medialive:describeReservation",
          "medialive:describeSchedule",
          "medialive:listChannels",
          "medialive:listInputDevices",
          "medialive:listInputs",
          "medialive:listInputSecurityGroups",
          "medialive:listMultiplexes",
          "medialive:listOfferings",
          "medialive:listReservations",
          "mediapackage:describeChannel",
          "mediapackage:describeOriginEndpoint",
          "mediapackage:listChannels",
          "mediapackage:listOriginEndpoints",
          "mediastore:describeContainer",
          "mediastore:getContainerPolicy",
          "mediastore:getCorsPolicy",
          "mediastore:listContainers",
          "mediatailor:getPlaybackConfiguration",
          "mediatailor:listPlaybackConfigurations",
          "medical-imaging:getDatastore",
          "medical-imaging:listDatastores",
          "mgn:describeJobLogItems",
          "mgn:describeJobs",
          "mgn:describeLaunchConfigurationTemplates",
          "mgn:describeReplicationConfigurationTemplates",
          "mgn:describeSourceServers",
          "mgn:describeVcenterClients",
          "mgn:getLaunchConfiguration",
          "mgn:getReplicationConfiguration",
          "mgn:listApplications",
          "mgn:listSourceServerActions",
          "mgn:listTemplateActions",
          "mgn:listWaves",
          "mobiletargeting:getAdmChannel",
          "mobiletargeting:getApnsChannel",
          "mobiletargeting:getApnsSandboxChannel",
          "mobiletargeting:getApnsVoipChannel",
          "mobiletargeting:getApnsVoipSandboxChannel",
          "mobiletargeting:getApp",
          "mobiletargeting:getApplicationSettings",
          "mobiletargeting:getApps",
          "mobiletargeting:getBaiduChannel",
          "mobiletargeting:getCampaign",
          "mobiletargeting:getCampaignActivities",
          "mobiletargeting:getCampaigns",
          "mobiletargeting:getCampaignVersion",
          "mobiletargeting:getCampaignVersions",
          "mobiletargeting:getEmailChannel",
          "mobiletargeting:getEndpoint",
          "mobiletargeting:getEventStream",
          "mobiletargeting:getExportJob",
          "mobiletargeting:getExportJobs",
          "mobiletargeting:getGcmChannel",
          "mobiletargeting:getImportJob",
          "mobiletargeting:getImportJobs",
          "mobiletargeting:getJourney",
          "mobiletargeting:getJourneyExecutionMetrics",
          "mobiletargeting:getJourneyExecutionActivityMetrics",
          "mobiletargeting:getJourneyRunExecutionActivityMetrics",
          "mobiletargeting:getJourneyRunExecutionMetrics",
          "mobiletargeting:getJourneyRuns",
          "mobiletargeting:getSegment",
          "mobiletargeting:getSegmentImportJobs",
          "mobiletargeting:getSegments",
          "mobiletargeting:getSegmentVersion",
          "mobiletargeting:getSegmentVersions",
          "mobiletargeting:getSmsChannel",
          "mobiletargeting:listJourneys",
          "mq:describeBroker",
          "mq:describeConfiguration",
          "mq:describeConfigurationRevision",
          "mq:describeUser",
          "mq:listBrokers",
          "mq:listConfigurationRevisions",
          "mq:listConfigurations",
          "mq:listUsers",
          "m2:getApplication",
          "m2:getApplicationVersion",
          "m2:getBatchJobExecution",
          "m2:getDataSetDetails",
          "m2:getDataSetImportTask",
          "m2:getDeployment",
          "m2:getEnvironment",
          "m2:listApplications",
          "m2:listApplicationVersions",
          "m2:listBatchJobDefinitions",
          "m2:listBatchJobExecutions",
          "m2:listDataSetImportHistory",
          "m2:listDataSets",
          "m2:listDeployments",
          "m2:listEngineVersions",
          "m2:listEnvironments",
          "network-firewall:describeFirewall",
          "network-firewall:describeFirewallPolicy",
          "network-firewall:describeLoggingConfiguration",
          "network-firewall:describeRuleGroup",
          "network-firewall:describeTlsInspectionConfiguration",
          "network-firewall:listFirewallPolicies",
          "network-firewall:listFirewalls",
          "network-firewall:listRuleGroups",
          "network-firewall:listTlsInspectionConfigurations",
          "networkmanager:describeGlobalNetworks",
          "networkmanager:getConnectAttachment",
          "networkmanager:getConnections",
          "networkmanager:getConnectPeer",
          "networkmanager:getConnectPeerAssociations",
          "networkmanager:getCoreNetwork",
          "networkmanager:getCoreNetworkChangeEvents",
          "networkmanager:getCoreNetworkChangeSet",
          "networkmanager:getCoreNetworkPolicy",
          "networkmanager:getCustomerGatewayAssociations",
          "networkmanager:getDevices",
          "networkmanager:getLinkAssociations",
          "networkmanager:getLinks",
          "networkmanager:getNetworkResourceCounts",
          "networkmanager:getNetworkResourceRelationships",
          "networkmanager:getNetworkResources",
          "networkmanager:getNetworkRoutes",
          "networkmanager:getNetworkTelemetry",
          "networkmanager:getResourcePolicy",
          "networkmanager:getRouteAnalysis",
          "networkmanager:getSites",
          "networkmanager:getSiteToSiteVpnAttachment",
          "networkmanager:getTransitGatewayConnectPeerAssociations",
          "networkmanager:getTransitGatewayPeering",
          "networkmanager:getTransitGatewayRegistrations",
          "networkmanager:getTransitGatewayRouteTableAttachment",
          "networkmanager:getVpcAttachment",
          "networkmanager:listAttachments",
          "networkmanager:listConnectPeers",
          "networkmanager:listCoreNetworkPolicyVersions",
          "networkmanager:listCoreNetworks",
          "networkmanager:listOrganizationServiceAccessStatus",
          "networkmanager:listPeerings",
          "networkmanager:listTagsForResource",
          "networkmonitor:getMonitor",
          "networkmonitor:getProbe",
          "networkmonitor:listMonitors",
          "nimble:getEula",
          "nimble:getLaunchProfile",
          "nimble:getLaunchProfileDetails",
          "nimble:getLaunchProfileInitialization",
          "nimble:getLaunchProfileMember",
          "nimble:getStreamingImage",
          "nimble:getStreamingSession",
          "nimble:getStreamingSessionStream",
          "nimble:getStudio",
          "nimble:getStudioComponent",
          "nimble:listEulaAcceptances",
          "nimble:listEulas",
          "nimble:listLaunchProfiles",
          "nimble:listStreamingImages",
          "nimble:listStreamingSessions",
          "nimble:listStudioComponents",
          "nimble:listStudios",
          "notifications:getEventRule",
          "notifications:getNotificationConfiguration",
          "notifications:getNotificationEvent",
          "notifications:listChannels",
          "notifications:listEventRules",
          "notifications:listNotificationConfigurations",
          "notifications:listNotificationEvents",
          "notifications:listNotificationHubs",
          "notifications-contacts:getEmailContact",
          "notifications-contacts:listEmailContacts",
          "oam:getLink",
          "oam:getSink",
          "oam:getSinkPolicy",
          "oam:listAttachedLinks",
          "oam:listLinks",
          "oam:listSinks",
          "omics:getAnnotationImportJob",
          "omics:getAnnotationStore",
          "omics:getReadSetImportJob",
          "omics:getReadSetMetadata",
          "omics:getReference",
          "omics:getReferenceImportJob",
          "omics:getReferenceMetadata",
          "omics:getReferenceStore",
          "omics:getRun",
          "omics:getRunGroup",
          "omics:getSequenceStore",
          "omics:getVariantImportJob",
          "omics:getVariantStore",
          "omics:getWorkflow",
          "omics:listAnnotationImportJobs",
          "omics:listAnnotationStores",
          "omics:listMultipartReadSetUploads",
          "omics:listReadSetImportJobs",
          "omics:listReadSets",
          "omics:listReadSetUploadParts",
          "omics:listReferenceImportJobs",
          "omics:listReferenceStores",
          "omics:listReferences",
          "omics:listRunGroups",
          "omics:listRunTasks",
          "omics:listRuns",
          "omics:listSequenceStores",
          "omics:listVariantImportJobs",
          "omics:listVariantStores",
          "omics:listWorkflows",
          "opsworks-cm:describeAccountAttributes",
          "opsworks-cm:describeBackups",
          "opsworks-cm:describeEvents",
          "opsworks-cm:describeNodeAssociationStatus",
          "opsworks-cm:describeServers",
          "opsworks:describeAgentVersions",
          "opsworks:describeApps",
          "opsworks:describeCommands",
          "opsworks:describeDeployments",
          "opsworks:describeEcsClusters",
          "opsworks:describeElasticIps",
          "opsworks:describeElasticLoadBalancers",
          "opsworks:describeInstances",
          "opsworks:describeLayers",
          "opsworks:describeLoadBasedAutoScaling",
          "opsworks:describeMyUserProfile",
          "opsworks:describePermissions",
          "opsworks:describeRaidArrays",
          "opsworks:describeRdsDbInstances",
          "opsworks:describeServiceErrors",
          "opsworks:describeStackProvisioningParameters",
          "opsworks:describeStacks",
          "opsworks:describeStackSummary",
          "opsworks:describeTimeBasedAutoScaling",
          "opsworks:describeUserProfiles",
          "opsworks:describeVolumes",
          "opsworks:getHostnameSuggestion",
          "organizations:listAccounts",
          "organizations:listTagsForResource",
          "outposts:getCatalogItem",
          "outposts:getConnection",
          "outposts:getOrder",
          "outposts:getOutpost",
          "outposts:getOutpostInstanceTypes",
          "outposts:getSite",
          "outposts:listAssets",
          "outposts:listCatalogItems",
          "outposts:listOrders",
          "outposts:listOutposts",
          "outposts:listSites",
          "personalize:describeAlgorithm",
          "personalize:describeBatchInferenceJob",
          "personalize:describeBatchSegmentJob",
          "personalize:describeCampaign",
          "personalize:describeDataset",
          "personalize:describeDatasetExportJob",
          "personalize:describeDatasetGroup",
          "personalize:describeDatasetImportJob",
          "personalize:describeEventTracker",
          "personalize:describeFeatureTransformation",
          "personalize:describeFilter",
          "personalize:describeRecipe",
          "personalize:describeRecommender",
          "personalize:describeSchema",
          "personalize:describeSolution",
          "personalize:describeSolutionVersion",
          "personalize:getPersonalizedRanking",
          "personalize:getRecommendations",
          "personalize:getSolutionMetrics",
          "personalize:listBatchInferenceJobs",
          "personalize:listBatchSegmentJobs",
          "personalize:listCampaigns",
          "personalize:listDatasetExportJobs",
          "personalize:listDatasetGroups",
          "personalize:listDatasetImportJobs",
          "personalize:listDatasets",
          "personalize:listEventTrackers",
          "personalize:listRecipes",
          "personalize:listRecommenders",
          "personalize:listSchemas",
          "personalize:listSolutions",
          "personalize:listSolutionVersions",
          "pipes:describePipe",
          "pipes:listPipes",
          "pipes:listTagsForResource",
          "polly:describeVoices",
          "polly:getLexicon",
          "polly:listLexicons",
          "pricing:describeServices",
          "pricing:getAttributeValues",
          "pricing:getProducts",
          "private-networks:getDeviceIdentifier",
          "private-networks:getNetwork",
          "private-networks:getNetworkResource",
          "private-networks:listDeviceIdentifiers",
          "private-networks:listNetworks",
          "private-networks:listNetworkResources",
          "quicksight:describeAccountCustomization",
          "quicksight:describeAccountSettings",
          "quicksight:describeAccountSubscription",
          "quicksight:describeAnalysis",
          "quicksight:describeAnalysisPermissions",
          "quicksight:describeDashboard",
          "quicksight:describeDashboardPermissions",
          "quicksight:describeDataSet",
          "quicksight:describeDataSetPermissions",
          "quicksight:describeDataSetRefreshProperties",
          "quicksight:describeDataSource",
          "quicksight:describeDataSourcePermissions",
          "quicksight:describeFolder",
          "quicksight:describeFolderPermissions",
          "quicksight:describeFolderResolvedPermissions",
          "quicksight:describeGroup",
          "quicksight:describeGroupMembership",
          "quicksight:describeIAMPolicyAssignment",
          "quicksight:describeIngestion",
          "quicksight:describeIpRestriction",
          "quicksight:describeNamespace",
          "quicksight:describeRefreshSchedule",
          "quicksight:describeTemplate",
          "quicksight:describeTemplateAlias",
          "quicksight:describeTemplatePermissions",
          "quicksight:describeTheme",
          "quicksight:describeThemeAlias",
          "quicksight:describeThemePermissions",
          "quicksight:describeTopic",
          "quicksight:describeTopicPermissions",
          "quicksight:describeTopicRefresh",
          "quicksight:describeTopicRefreshSchedule",
          "quicksight:describeUser",
          "quicksight:describeVPCConnection",
          "quicksight:listAnalyses",
          "quicksight:listDashboards",
          "quicksight:listDashboardVersions",
          "quicksight:listDataSets",
          "quicksight:listDataSources",
          "quicksight:listFolderMembers",
          "quicksight:listFolders",
          "quicksight:listGroupMemberships",
          "quicksight:listGroups",
          "quicksight:listIAMPolicyAssignments",
          "quicksight:listIAMPolicyAssignmentsForUser",
          "quicksight:listIngestions",
          "quicksight:listNamespaces",
          "quicksight:listRefreshSchedules",
          "quicksight:listTemplateAliases",
          "quicksight:listTemplates",
          "quicksight:listTemplateVersions",
          "quicksight:listThemeAliases",
          "quicksight:listThemes",
          "quicksight:listThemeVersions",
          "quicksight:listTopicRefreshSchedules",
          "quicksight:listTopics",
          "quicksight:listUserGroups",
          "quicksight:listUsers",
          "quicksight:listVPCConnections",
          "quicksight:searchAnalyses",
          "quicksight:searchDashboards",
          "quicksight:searchDataSets",
          "quicksight:searchDataSources",
          "quicksight:searchFolders",
          "quicksight:searchGroups",
          "ram:getPermission",
          "ram:getResourceShareAssociations",
          "ram:getResourceShareInvitations",
          "ram:getResourceShares",
          "ram:listPendingInvitationResources",
          "ram:listPrincipals",
          "ram:listResources",
          "ram:listResourceSharePermissions",
          "rbin:getRule",
          "rbin:listRules",
          "rds:describeAccountAttributes",
          "rds:describeBlueGreenDeployments",
          "rds:describeCertificates",
          "rds:describeDBClusterEndpoints",
          "rds:describeDBClusterParameterGroups",
          "rds:describeDBClusterParameters",
          "rds:describeDBClusters",
          "rds:describeDBClusterSnapshots",
          "rds:describeDBEngineVersions",
          "rds:describeDBInstanceAutomatedBackups",
          "rds:describeDBInstances",
          "rds:describeDBLogFiles",
          "rds:describeDBParameterGroups",
          "rds:describeDBParameters",
          "rds:describeDBSecurityGroups",
          "rds:describeDBSnapshotAttributes",
          "rds:describeDBSnapshots",
          "rds:describeDBSubnetGroups",
          "rds:describeEngineDefaultClusterParameters",
          "rds:describeEngineDefaultParameters",
          "rds:describeEventCategories",
          "rds:describeEvents",
          "rds:describeEventSubscriptions",
          "rds:describeExportTasks",
          "rds:describeGlobalClusters",
          "rds:describeIntegrations",
          "rds:describeOptionGroupOptions",
          "rds:describeOptionGroups",
          "rds:describeOrderableDBInstanceOptions",
          "rds:describePendingMaintenanceActions",
          "rds:describeReservedDBInstances",
          "rds:describeReservedDBInstancesOfferings",
          "rds:describeSourceRegions",
          "rds:describeValidDBInstanceModifications",
          "rds:listTagsForResource",
          "redshift-data:describeStatement",
          "redshift-data:listStatements",
          "redshift:describeClusterParameterGroups",
          "redshift:describeClusterParameters",
          "redshift:describeClusters",
          "redshift:describeClusterSecurityGroups",
          "redshift:describeClusterSnapshots",
          "redshift:describeClusterSubnetGroups",
          "redshift:describeClusterVersions",
          "redshift:describeDataShares",
          "redshift:describeDataSharesForConsumer",
          "redshift:describeDataSharesForProducer",
          "redshift:describeDefaultClusterParameters",
          "redshift:describeEventCategories",
          "redshift:describeEvents",
          "redshift:describeEventSubscriptions",
          "redshift:describeHsmClientCertificates",
          "redshift:describeHsmConfigurations",
          "redshift:describeLoggingStatus",
          "redshift:describeOrderableClusterOptions",
          "redshift:describeReservedNodeOfferings",
          "redshift:describeReservedNodes",
          "redshift:describeResize",
          "redshift:describeSnapshotCopyGrants",
          "redshift:describeStorage",
          "redshift:describeTableRestoreStatus",
          "redshift:describeTags",
          "redshift-serverless:getEndpointAccess",
          "redshift-serverless:getNamespace",
          "redshift-serverless:getRecoveryPoint",
          "redshift-serverless:getSnapshot",
          "redshift-serverless:getTableRestoreStatus",
          "redshift-serverless:getUsageLimit",
          "redshift-serverless:getWorkgroup",
          "redshift-serverless:listEndpointAccess",
          "redshift-serverless:listNamespaces",
          "redshift-serverless:listRecoveryPoints",
          "redshift-serverless:listSnapshots",
          "redshift-serverless:listTableRestoreStatus",
          "redshift-serverless:listUsageLimits",
          "redshift-serverless:listWorkgroups",
          "rekognition:listCollections",
          "rekognition:listFaces",
          "resource-explorer-2:getAccountLevelServiceConfiguration",
          "resource-explorer-2:getIndex",
          "resource-explorer-2:getView",
          "resource-explorer-2:listIndexes",
          "resource-explorer-2:listViews",
          "resource-explorer-2:search",
          "resource-groups:getGroup",
          "resource-groups:getGroupQuery",
          "resource-groups:getTags",
          "resource-groups:listGroupResources",
          "resource-groups:listGroups",
          "resource-groups:searchResources",
          "robomaker:batchDescribeSimulationJob",
          "robomaker:describeDeploymentJob",
          "robomaker:describeFleet",
          "robomaker:describeRobot",
          "robomaker:describeRobotApplication",
          "robomaker:describeSimulationApplication",
          "robomaker:describeSimulationJob",
          "robomaker:listDeploymentJobs",
          "robomaker:listFleets",
          "robomaker:listRobotApplications",
          "robomaker:listRobots",
          "robomaker:listSimulationApplications",
          "robomaker:listSimulationJobs",
          "route53-recovery-cluster:getRoutingControlState",
          "route53-recovery-cluster:listRoutingControls",
          "route53-recovery-control-config:describeControlPanel",
          "route53-recovery-control-config:describeRoutingControl",
          "route53-recovery-control-config:describeSafetyRule",
          "route53-recovery-control-config:listControlPanels",
          "route53-recovery-control-config:listRoutingControls",
          "route53-recovery-control-config:listSafetyRules",
          "route53-recovery-readiness:getCell",
          "route53-recovery-readiness:getCellReadinessSummary",
          "route53-recovery-readiness:getReadinessCheck",
          "route53-recovery-readiness:getReadinessCheckResourceStatus",
          "route53-recovery-readiness:getReadinessCheckStatus",
          "route53-recovery-readiness:getRecoveryGroup",
          "route53-recovery-readiness:getRecoveryGroupReadinessSummary",
          "route53-recovery-readiness:listCells",
          "route53-recovery-readiness:listReadinessChecks",
          "route53-recovery-readiness:listRecoveryGroups",
          "route53-recovery-readiness:listResourceSets",
          "route53:getAccountLimit",
          "route53:getChange",
          "route53:getCheckerIpRanges",
          "route53:getDNSSEC",
          "route53:getGeoLocation",
          "route53:getHealthCheck",
          "route53:getHealthCheckCount",
          "route53:getHealthCheckLastFailureReason",
          "route53:getHealthCheckStatus",
          "route53:getHostedZone",
          "route53:getHostedZoneCount",
          "route53:getHostedZoneLimit",
          "route53:getQueryLoggingConfig",
          "route53:getReusableDelegationSet",
          "route53:getTrafficPolicy",
          "route53:getTrafficPolicyInstance",
          "route53:getTrafficPolicyInstanceCount",
          "route53:listCidrBlocks",
          "route53:listCidrCollections",
          "route53:listCidrLocations",
          "route53:listGeoLocations",
          "route53:listHealthChecks",
          "route53:listHostedZones",
          "route53:listHostedZonesByName",
          "route53:listHostedZonesByVpc",
          "route53:listQueryLoggingConfigs",
          "route53:listResourceRecordSets",
          "route53:listReusableDelegationSets",
          "route53:listTrafficPolicies",
          "route53:listTrafficPolicyInstances",
          "route53:listTrafficPolicyInstancesByHostedZone",
          "route53:listTrafficPolicyInstancesByPolicy",
          "route53:listTrafficPolicyVersions",
          "route53:listVPCAssociationAuthorizations",
          "route53domains:checkDomainAvailability",
          "route53domains:getContactReachabilityStatus",
          "route53domains:getDomainDetail",
          "route53domains:getOperationDetail",
          "route53domains:listDomains",
          "route53domains:listOperations",
          "route53domains:listPrices",
          "route53domains:listTagsForDomain",
          "route53domains:viewBilling",
          "route53resolver:getFirewallConfig",
          "route53resolver:getFirewallDomainList",
          "route53resolver:getFirewallRuleGroup",
          "route53resolver:getFirewallRuleGroupAssociation",
          "route53resolver:getFirewallRuleGroupPolicy",
          "route53resolver:getOutpostResolver",
          "route53resolver:getResolverDnssecConfig",
          "route53resolver:getResolverQueryLogConfig",
          "route53resolver:getResolverQueryLogConfigAssociation",
          "route53resolver:getResolverQueryLogConfigPolicy",
          "route53resolver:getResolverRule",
          "route53resolver:getResolverRuleAssociation",
          "route53resolver:getResolverRulePolicy",
          "route53resolver:listFirewallConfigs",
          "route53resolver:listFirewallDomainLists",
          "route53resolver:listFirewallDomains",
          "route53resolver:listFirewallRuleGroupAssociations",
          "route53resolver:listFirewallRuleGroups",
          "route53resolver:listFirewallRules",
          "route53resolver:listOutpostResolvers",
          "route53resolver:listResolverConfigs",
          "route53resolver:listResolverDnssecConfigs",
          "route53resolver:listResolverEndpointIpAddresses",
          "route53resolver:listResolverEndpoints",
          "route53resolver:listResolverQueryLogConfigAssociations",
          "route53resolver:listResolverQueryLogConfigs",
          "route53resolver:listResolverRuleAssociations",
          "route53resolver:listResolverRules",
          "route53resolver:listTagsForResource",
          "rum:batchGetRumMetricDefinitions",
          "rum:getAppMonitor",
          "rum:listAppMonitors",
          "rum:listRumMetricsDestinations",
          "s3:describeJob",
          "s3:describeMultiRegionAccessPointOperation",
          "s3:getAccelerateConfiguration",
          "s3:getAccessPoint",
          "s3:getAccessPointConfigurationForObjectLambda",
          "s3:getAccessPointForObjectLambda",
          "s3:getAccessPointPolicy",
          "s3:getAccessPointPolicyForObjectLambda",
          "s3:getAccessPointPolicyStatus",
          "s3:getAccessPointPolicyStatusForObjectLambda",
          "s3:getAccountPublicAccessBlock",
          "s3:getAnalyticsConfiguration",
          "s3:getBucketAcl",
          "s3:getBucketCORS",
          "s3:getBucketLocation",
          "s3:getBucketLogging",
          "s3:getBucketNotification",
          "s3:getBucketObjectLockConfiguration",
          "s3:getBucketOwnershipControls",
          "s3:getBucketPolicy",
          "s3:getBucketPolicyStatus",
          "s3:getBucketPublicAccessBlock",
          "s3:getBucketRequestPayment",
          "s3:getBucketVersioning",
          "s3:getBucketWebsite",
          "s3:getEncryptionConfiguration",
          "s3:getIntelligentTieringConfiguration",
          "s3:getInventoryConfiguration",
          "s3:getLifecycleConfiguration",
          "s3:getMetricsConfiguration",
          "s3:getMultiRegionAccessPoint",
          "s3:getMultiRegionAccessPointPolicy",
          "s3:getMultiRegionAccessPointPolicyStatus",
          "s3:getMultiRegionAccessPointRoutes",
          "s3:getObjectLegalHold",
          "s3:getObjectRetention",
          "s3:getReplicationConfiguration",
          "s3:getStorageLensConfiguration",
          "s3:listAccessPoints",
          "s3:listAccessPointsForObjectLambda",
          "s3:listAllMyBuckets",
          "s3:listBucket",
          "s3:listBucketMultipartUploads",
          "s3:listBucketVersions",
          "s3:listJobs",
          "s3:listMultipartUploadParts",
          "s3:listMultiRegionAccessPoints",
          "s3:listStorageLensConfigurations",
          "s3express:listAllMyDirectoryBuckets",
          "sagemaker:describeAction",
          "sagemaker:describeAlgorithm",
          "sagemaker:describeApp",
          "sagemaker:describeAppImageConfig",
          "sagemaker:describeArtifact",
          "sagemaker:describeAutoMLJob",
          "sagemaker:describeCodeRepository",
          "sagemaker:describeCompilationJob",
          "sagemaker:describeContext",
          "sagemaker:describeDataQualityJobDefinition",
          "sagemaker:describeDevice",
          "sagemaker:describeDeviceFleet",
          "sagemaker:describeDomain",
          "sagemaker:describeEdgeDeploymentPlan",
          "sagemaker:describeEdgePackagingJob",
          "sagemaker:describeEndpoint",
          "sagemaker:describeEndpointConfig",
          "sagemaker:describeExperiment",
          "sagemaker:describeFeatureGroup",
          "sagemaker:describeFeatureMetadata",
          "sagemaker:describeFlowDefinition",
          "sagemaker:describeHub",
          "sagemaker:describeHubContent",
          "sagemaker:describeHumanTaskUi",
          "sagemaker:describeHyperParameterTuningJob",
          "sagemaker:describeImage",
          "sagemaker:describeImageVersion",
          "sagemaker:describeInferenceExperiment",
          "sagemaker:describeInferenceRecommendationsJob",
          "sagemaker:describeLabelingJob",
          "sagemaker:describeModel",
          "sagemaker:describeModelBiasJobDefinition",
          "sagemaker:describeModelCard",
          "sagemaker:describeModelCardExportJob",
          "sagemaker:describeModelExplainabilityJobDefinition",
          "sagemaker:describeModelPackage",
          "sagemaker:describeModelPackageGroup",
          "sagemaker:describeModelQualityJobDefinition",
          "sagemaker:describeMonitoringSchedule",
          "sagemaker:describeNotebookInstance",
          "sagemaker:describeNotebookInstanceLifecycleConfig",
          "sagemaker:describePipeline",
          "sagemaker:describePipelineDefinitionForExecution",
          "sagemaker:describePipelineExecution",
          "sagemaker:describeProcessingJob",
          "sagemaker:describeProject",
          "sagemaker:describeSpace",
          "sagemaker:describeStudioLifecycleConfig",
          "sagemaker:describeSubscribedWorkteam",
          "sagemaker:describeTrainingJob",
          "sagemaker:describeTransformJob",
          "sagemaker:describeTrial",
          "sagemaker:describeTrialComponent",
          "sagemaker:describeUserProfile",
          "sagemaker:describeWorkforce",
          "sagemaker:describeWorkteam",
          "sagemaker:getDeviceFleetReport",
          "sagemaker:getModelPackageGroupPolicy",
          "sagemaker:getSagemakerServicecatalogPortfolioStatus",
          "sagemaker:listActions",
          "sagemaker:listAlgorithms",
          "sagemaker:listAliases",
          "sagemaker:listAppImageConfigs",
          "sagemaker:listApps",
          "sagemaker:listArtifacts",
          "sagemaker:listAssociations",
          "sagemaker:listAutoMLJobs",
          "sagemaker:listCandidatesForAutoMLJob",
          "sagemaker:listCodeRepositories",
          "sagemaker:listCompilationJobs",
          "sagemaker:listContexts",
          "sagemaker:listDataQualityJobDefinitions",
          "sagemaker:listDeviceFleets",
          "sagemaker:listDevices",
          "sagemaker:listDomains",
          "sagemaker:listEdgeDeploymentPlans",
          "sagemaker:listEdgePackagingJobs",
          "sagemaker:listEndpointConfigs",
          "sagemaker:listEndpoints",
          "sagemaker:listExperiments",
          "sagemaker:listFeatureGroups",
          "sagemaker:listFlowDefinitions",
          "sagemaker:listHubContents",
          "sagemaker:listHubContentVersions",
          "sagemaker:listHubs",
          "sagemaker:listHumanTaskUis",
          "sagemaker:listHyperParameterTuningJobs",
          "sagemaker:listImages",
          "sagemaker:listImageVersions",
          "sagemaker:listInferenceExperiments",
          "sagemaker:listInferenceRecommendationsJobs",
          "sagemaker:listInferenceRecommendationsJobSteps",
          "sagemaker:listLabelingJobs",
          "sagemaker:listLabelingJobsForWorkteam",
          "sagemaker:listLineageGroups",
          "sagemaker:listModelBiasJobDefinitions",
          "sagemaker:listModelCardExportJobs",
          "sagemaker:listModelCards",
          "sagemaker:listModelCardVersions",
          "sagemaker:listModelExplainabilityJobDefinitions",
          "sagemaker:listModelMetadata",
          "sagemaker:listModelPackageGroups",
          "sagemaker:listModelPackages",
          "sagemaker:listModelQualityJobDefinitions",
          "sagemaker:listModels",
          "sagemaker:listMonitoringAlertHistory",
          "sagemaker:listMonitoringAlerts",
          "sagemaker:listMonitoringExecutions",
          "sagemaker:listMonitoringSchedules",
          "sagemaker:listNotebookInstanceLifecycleConfigs",
          "sagemaker:listNotebookInstances",
          "sagemaker:listPipelineExecutions",
          "sagemaker:listPipelineExecutionSteps",
          "sagemaker:listPipelineParametersForExecution",
          "sagemaker:listPipelines",
          "sagemaker:listProcessingJobs",
          "sagemaker:listProjects",
          "sagemaker:listSpaces",
          "sagemaker:listStageDevices",
          "sagemaker:listStudioLifecycleConfigs",
          "sagemaker:listSubscribedWorkteams",
          "sagemaker:listTags",
          "sagemaker:listTrainingJobs",
          "sagemaker:listTrainingJobsForHyperParameterTuningJob",
          "sagemaker:listTransformJobs",
          "sagemaker:listTrialComponents",
          "sagemaker:listTrials",
          "sagemaker:listUserProfiles",
          "sagemaker:listWorkforces",
          "sagemaker:listWorkteams",
          "savingsplans:describeSavingsPlans",
          "scheduler:getSchedule",
          "scheduler:getScheduleGroup",
          "scheduler:listScheduleGroups",
          "scheduler:listSchedules",
          "schemas:describeCodeBinding",
          "schemas:describeDiscoverer",
          "schemas:describeRegistry",
          "schemas:describeSchema",
          "schemas:getCodeBindingSource",
          "schemas:getDiscoveredSchema",
          "schemas:getResourcePolicy",
          "schemas:listDiscoverers",
          "schemas:listRegistries",
          "schemas:listSchemas",
          "schemas:listSchemaVersions",
          "sdb:domainMetadata",
          "sdb:listDomains",
          "secretsmanager:describeSecret",
          "secretsmanager:getResourcePolicy",
          "secretsmanager:listSecrets",
          "secretsmanager:listSecretVersionIds",
          "securityhub:getEnabledStandards",
          "securityhub:getFindings",
          "securityhub:getInsightResults",
          "securityhub:getInsights",
          "securityhub:getMasterAccount",
          "securityhub:getMembers",
          "securityhub:listEnabledProductsForImport",
          "securityhub:listInvitations",
          "securityhub:listMembers",
          "securitylake:getDataLakeExceptionSubscription",
          "securitylake:getDataLakeOrganizationConfiguration",
          "securitylake:getDataLakeSources",
          "securitylake:getSubscriber",
          "securitylake:listDataLakeExceptions",
          "securitylake:listDataLakes",
          "securitylake:listLogSources",
          "securitylake:listSubscribers",
          "serverlessrepo:getApplication",
          "serverlessrepo:getApplicationPolicy",
          "serverlessrepo:getCloudFormationTemplate",
          "serverlessrepo:listApplicationDependencies",
          "serverlessrepo:listApplications",
          "serverlessrepo:listApplicationVersions",
          "servicecatalog:describeConstraint",
          "servicecatalog:describePortfolio",
          "servicecatalog:describeProduct",
          "servicecatalog:describeProductAsAdmin",
          "servicecatalog:describeProductView",
          "servicecatalog:describeProvisioningArtifact",
          "servicecatalog:describeProvisioningParameters",
          "servicecatalog:describeRecord",
          "servicecatalog:listAcceptedPortfolioShares",
          "servicecatalog:listConstraintsForPortfolio",
          "servicecatalog:listLaunchPaths",
          "servicecatalog:listPortfolioAccess",
          "servicecatalog:listPortfolios",
          "servicecatalog:listPortfoliosForProduct",
          "servicecatalog:listPrincipalsForPortfolio",
          "servicecatalog:listProvisioningArtifacts",
          "servicecatalog:listRecordHistory",
          "servicecatalog:scanProvisionedProducts",
          "servicecatalog:searchProducts",
          "servicequotas:getAssociationForServiceQuotaTemplate",
          "servicequotas:getAWSDefaultServiceQuota",
          "servicequotas:getRequestedServiceQuotaChange",
          "servicequotas:getServiceQuota",
          "servicequotas:getServiceQuotaIncreaseRequestFromTemplate",
          "servicequotas:listAWSDefaultServiceQuotas",
          "servicequotas:listRequestedServiceQuotaChangeHistory",
          "servicequotas:listRequestedServiceQuotaChangeHistoryByQuota",
          "servicequotas:listServiceQuotaIncreaseRequestsInTemplate",
          "servicequotas:listServiceQuotas",
          "servicequotas:listServices",
          "ses:describeActiveReceiptRuleSet",
          "ses:describeConfigurationSet",
          "ses:describeReceiptRule",
          "ses:describeReceiptRuleSet",
          "ses:getAccount",
          "ses:getAccountSendingEnabled",
          "ses:getBlacklistReports",
          "ses:getConfigurationSet",
          "ses:getConfigurationSetEventDestinations",
          "ses:getContactList",
          "ses:getDedicatedIp",
          "ses:getDedicatedIpPool",
          "ses:getDedicatedIps",
          "ses:getDeliverabilityDashboardOptions",
          "ses:getDeliverabilityTestReport",
          "ses:getDomainDeliverabilityCampaign",
          "ses:getDomainStatisticsReport",
          "ses:getEmailIdentity",
          "ses:getIdentityDkimAttributes",
          "ses:getIdentityMailFromDomainAttributes",
          "ses:getIdentityNotificationAttributes",
          "ses:getIdentityPolicies",
          "ses:getIdentityVerificationAttributes",
          "ses:getImportJob",
          "ses:getSendQuota",
          "ses:getSendStatistics",
          "ses:listConfigurationSets",
          "ses:listContactLists",
          "ses:listContacts",
          "ses:listCustomVerificationEmailTemplates",
          "ses:listDedicatedIpPools",
          "ses:listDeliverabilityTestReports",
          "ses:listDomainDeliverabilityCampaigns",
          "ses:listEmailIdentities",
          "ses:listEmailTemplates",
          "ses:listIdentities",
          "ses:listIdentityPolicies",
          "ses:listImportJobs",
          "ses:listReceiptFilters",
          "ses:listReceiptRuleSets",
          "ses:listRecommendations",
          "ses:listTagsForResource",
          "ses:listTemplates",
          "ses:listVerifiedEmailAddresses",
          "shield:describeAttack",
          "shield:describeProtection",
          "shield:describeSubscription",
          "shield:listAttacks",
          "shield:listProtections",
          "sms-voice:getConfigurationSetEventDestinations",
          "sms:getConnectors",
          "sms:getReplicationJobs",
          "sms:getReplicationRuns",
          "sms:getServers",
          "snowball:describeAddress",
          "snowball:describeAddresses",
          "snowball:describeJob",
          "snowball:getSnowballUsage",
          "snowball:listJobs",
          "snowball:listServiceVersions",
          "sns:checkIfPhoneNumberIsOptedOut",
          "sns:getDataProtectionPolicy",
          "sns:getEndpointAttributes",
          "sns:getPlatformApplicationAttributes",
          "sns:getSMSAttributes",
          "sns:getSMSSandboxAccountStatus",
          "sns:getSubscriptionAttributes",
          "sns:getTopicAttributes",
          "sns:listEndpointsByPlatformApplication",
          "sns:listOriginationNumbers",
          "sns:listPhoneNumbersOptedOut",
          "sns:listPlatformApplications",
          "sns:listSMSSandboxPhoneNumbers",
          "sns:listSubscriptions",
          "sns:listSubscriptionsByTopic",
          "sns:listTopics",
          "sqs:getQueueAttributes",
          "sqs:getQueueUrl",
          "sqs:listDeadLetterSourceQueues",
          "sqs:listQueues",
          "ssm-contacts:describeEngagement",
          "ssm-contacts:describePage",
          "ssm-contacts:getContact",
          "ssm-contacts:getContactChannel",
          "ssm-contacts:getContactPolicy",
          "ssm-contacts:getRotation",
          "ssm-contacts:getRotationOverride",
          "ssm-contacts:listContactChannels",
          "ssm-contacts:listContacts",
          "ssm-contacts:listEngagements",
          "ssm-contacts:listPageReceipts",
          "ssm-contacts:listPageResolutions",
          "ssm-contacts:listPagesByContact",
          "ssm-contacts:listPagesByEngagement",
          "ssm-contacts:listPreviewRotationShifts",
          "ssm-contacts:listRotationOverrides",
          "ssm-contacts:listRotations",
          "ssm-contacts:listRotationShifts",
          "ssm-incidents:getIncidentRecord",
          "ssm-incidents:getReplicationSet",
          "ssm-incidents:getResourcePolicies",
          "ssm-incidents:getResponsePlan",
          "ssm-incidents:getTimelineEvent",
          "ssm-incidents:listIncidentRecords",
          "ssm-incidents:listRelatedItems",
          "ssm-incidents:listReplicationSets",
          "ssm-incidents:listResponsePlans",
          "ssm-incidents:listTimelineEvents",
          "ssm-sap:getApplication",
          "ssm-sap:getComponent",
          "ssm-sap:getDatabase",
          "ssm-sap:getOperation",
          "ssm-sap:getResourcePermission",
          "ssm-sap:listApplications",
          "ssm-sap:listComponents",
          "ssm-sap:listDatabases",
          "ssm-sap:listOperations",
          "ssm:describeActivations",
          "ssm:describeAssociation",
          "ssm:describeAssociationExecutions",
          "ssm:describeAssociationExecutionTargets",
          "ssm:describeAutomationExecutions",
          "ssm:describeAutomationStepExecutions",
          "ssm:describeAvailablePatches",
          "ssm:describeDocument",
          "ssm:describeDocumentPermission",
          "ssm:describeEffectiveInstanceAssociations",
          "ssm:describeEffectivePatchesForPatchBaseline",
          "ssm:describeInstanceAssociationsStatus",
          "ssm:describeInstanceInformation",
          "ssm:describeInstancePatches",
          "ssm:describeInstancePatchStates",
          "ssm:describeInstancePatchStatesForPatchGroup",
          "ssm:describeInventoryDeletions",
          "ssm:describeMaintenanceWindowExecutions",
          "ssm:describeMaintenanceWindowExecutionTaskInvocations",
          "ssm:describeMaintenanceWindowExecutionTasks",
          "ssm:describeMaintenanceWindows",
          "ssm:describeMaintenanceWindowSchedule",
          "ssm:describeMaintenanceWindowsForTarget",
          "ssm:describeMaintenanceWindowTargets",
          "ssm:describeMaintenanceWindowTasks",
          "ssm:describeOpsItems",
          "ssm:describeParameters",
          "ssm:describePatchBaselines",
          "ssm:describePatchGroups",
          "ssm:describePatchGroupState",
          "ssm:describePatchProperties",
          "ssm:describeSessions",
          "ssm:getAutomationExecution",
          "ssm:getCalendarState",
          "ssm:getCommandInvocation",
          "ssm:getConnectionStatus",
          "ssm:getDefaultPatchBaseline",
          "ssm:getDeployablePatchSnapshotForInstance",
          "ssm:getInventorySchema",
          "ssm:getMaintenanceWindow",
          "ssm:getMaintenanceWindowExecution",
          "ssm:getMaintenanceWindowExecutionTask",
          "ssm:getMaintenanceWindowExecutionTaskInvocation",
          "ssm:getMaintenanceWindowTask",
          "ssm:getOpsItem",
          "ssm:getOpsMetadata",
          "ssm:getOpsSummary",
          "ssm:getPatchBaseline",
          "ssm:getPatchBaselineForPatchGroup",
          "ssm:getResourcePolicies",
          "ssm:getServiceSetting",
          "ssm:listAssociations",
          "ssm:listAssociationVersions",
          "ssm:listCommandInvocations",
          "ssm:listCommands",
          "ssm:listComplianceItems",
          "ssm:listComplianceSummaries",
          "ssm:listDocuments",
          "ssm:listDocumentMetadataHistory",
          "ssm:listDocumentVersions",
          "ssm:listOpsItemEvents",
          "ssm:listOpsItemRelatedItems",
          "ssm:listOpsMetadata",
          "ssm:listResourceComplianceSummaries",
          "ssm:listResourceDataSync",
          "ssm:listTagsForResource",
          "sso:describeApplicationAssignment",
          "sso:describeApplicationProvider",
          "sso:describeApplication",
          "sso:describeInstance",
          "sso:describeTrustedTokenIssuer",
          "sso:getApplicationAccessScope",
          "sso:getApplicationAssignmentConfiguration",
          "sso:getApplicationAuthenticationMethod",
          "sso:getApplicationGrant",
          "sso:getApplicationInstance",
          "sso:getApplicationTemplate",
          "sso:getManagedApplicationInstance",
          "sso:getSharedSsoConfiguration",
          "sso:listApplicationAccessScopes",
          "sso:listApplicationAssignments",
          "sso:listApplicationAuthenticationMethods",
          "sso:listApplicationGrants",
          "sso:listApplicationInstances",
          "sso:listApplicationProviders",
          "sso:listApplications",
          "sso:listApplicationTemplates",
          "sso:listDirectoryAssociations",
          "sso:listInstances",
          "sso:listProfileAssociations",
          "sso:listTrustedTokenIssuers",
          "states:describeActivity",
          "states:describeExecution",
          "states:describeMapRun",
          "states:describeStateMachine",
          "states:describeStateMachineAlias",
          "states:describeStateMachineForExecution",
          "states:getExecutionHistory",
          "states:listActivities",
          "states:listExecutions",
          "states:listMapRuns",
          "states:listStateMachineAliases",
          "states:listStateMachines",
          "states:listStateMachineVersions",
          "storagegateway:describeBandwidthRateLimit",
          "storagegateway:describeCache",
          "storagegateway:describeCachediSCSIVolumes",
          "storagegateway:describeFileSystemAssociations",
          "storagegateway:describeGatewayInformation",
          "storagegateway:describeMaintenanceStartTime",
          "storagegateway:describeNFSFileShares",
          "storagegateway:describeSMBFileShares",
          "storagegateway:describeSMBSettings",
          "storagegateway:describeSnapshotSchedule",
          "storagegateway:describeStorediSCSIVolumes",
          "storagegateway:describeTapeArchives",
          "storagegateway:describeTapeRecoveryPoints",
          "storagegateway:describeTapes",
          "storagegateway:describeUploadBuffer",
          "storagegateway:describeVTLDevices",
          "storagegateway:describeWorkingStorage",
          "storagegateway:listAutomaticTapeCreationPolicies",
          "storagegateway:listFileShares",
          "storagegateway:listFileSystemAssociations",
          "storagegateway:listGateways",
          "storagegateway:listLocalDisks",
          "storagegateway:listTagsForResource",
          "storagegateway:listTapes",
          "storagegateway:listVolumeInitiators",
          "storagegateway:listVolumeRecoveryPoints",
          "storagegateway:listVolumes",
          "swf:countClosedWorkflowExecutions",
          "swf:countOpenWorkflowExecutions",
          "swf:countPendingActivityTasks",
          "swf:countPendingDecisionTasks",
          "swf:describeActivityType",
          "swf:describeDomain",
          "swf:describeWorkflowExecution",
          "swf:describeWorkflowType",
          "swf:getWorkflowExecutionHistory",
          "swf:listActivityTypes",
          "swf:listClosedWorkflowExecutions",
          "swf:listDomains",
          "swf:listOpenWorkflowExecutions",
          "swf:listWorkflowTypes",
          "synthetics:describeCanaries",
          "synthetics:describeCanariesLastRun",
          "synthetics:describeRuntimeVersions",
          "synthetics:getCanary",
          "synthetics:getCanaryRuns",
          "synthetics:getGroup",
          "synthetics:listAssociatedGroups",
          "synthetics:listGroupResources",
          "synthetics:listGroups",
          "tiros:createQuery",
          "tiros:getQueryAnswer",
          "tiros:getQueryExplanation",
          "transcribe:describeLanguageModel",
          "transcribe:getCallAnalyticsCategory",
          "transcribe:getCallAnalyticsJob",
          "transcribe:getMedicalTranscriptionJob",
          "transcribe:getMedicalVocabulary",
          "transcribe:getTranscriptionJob",
          "transcribe:getVocabulary",
          "transcribe:getVocabularyFilter",
          "transcribe:listCallAnalyticsCategories",
          "transcribe:listCallAnalyticsJobs",
          "transcribe:listLanguageModels",
          "transcribe:listMedicalTranscriptionJobs",
          "transcribe:listMedicalVocabularies",
          "transcribe:listTranscriptionJobs",
          "transcribe:listVocabularies",
          "transcribe:listVocabularyFilters",
          "transfer:describeAccess",
          "transfer:describeAgreement",
          "transfer:describeConnector",
          "transfer:describeExecution",
          "transfer:describeProfile",
          "transfer:describeServer",
          "transfer:describeUser",
          "transfer:describeWorkflow",
          "transfer:listAccesses",
          "transfer:listAgreements",
          "transfer:listConnectors",
          "transfer:listExecutions",
          "transfer:listHostKeys",
          "transfer:listProfiles",
          "transfer:listServers",
          "transfer:listTagsForResource",
          "transfer:listUsers",
          "transfer:listWorkflows",
          "transfer:sendWorkflowStepState",
          "trustedadvisor:getOrganizationRecommendation",
          "trustedadvisor:getRecommendation",
          "trustedadvisor:listChecks",
          "trustedadvisor:listOrganizationRecommendationAccounts",
          "trustedadvisor:listOrganizationRecommendationResources",
          "trustedadvisor:listOrganizationRecommendations",
          "trustedadvisor:listRecommendationResources",
          "trustedadvisor:listRecommendations",
          "verifiedpermissions:getIdentitySource",
          "verifiedpermissions:getPolicy",
          "verifiedpermissions:getPolicyStore",
          "verifiedpermissions:getPolicyTemplate",
          "verifiedpermissions:getSchema",
          "verifiedpermissions:listIdentitySources",
          "verifiedpermissions:listPolicies",
          "verifiedpermissions:listPolicyStores",
          "verifiedpermissions:listPolicyTemplates",
          "vpc-lattice:getAccessLogSubscription",
          "vpc-lattice:getAuthPolicy",
          "vpc-lattice:getListener",
          "vpc-lattice:getResourcePolicy",
          "vpc-lattice:getRule",
          "vpc-lattice:getService",
          "vpc-lattice:getServiceNetwork",
          "vpc-lattice:getServiceNetworkServiceAssociation",
          "vpc-lattice:getServiceNetworkVpcAssociation",
          "vpc-lattice:getTargetGroup",
          "vpc-lattice:listAccessLogSubscriptions",
          "vpc-lattice:listListeners",
          "vpc-lattice:listRules",
          "vpc-lattice:listServiceNetworks",
          "vpc-lattice:listServiceNetworkServiceAssociations",
          "vpc-lattice:listServiceNetworkVpcAssociations",
          "vpc-lattice:listServices",
          "vpc-lattice:listTargetGroups",
          "vpc-lattice:listTargets",
          "waf-regional:getByteMatchSet",
          "waf-regional:getChangeTokenStatus",
          "waf-regional:getGeoMatchSet",
          "waf-regional:getIPSet",
          "waf-regional:getLoggingConfiguration",
          "waf-regional:getRateBasedRule",
          "waf-regional:getRegexMatchSet",
          "waf-regional:getRegexPatternSet",
          "waf-regional:getRule",
          "waf-regional:getRuleGroup",
          "waf-regional:getSqlInjectionMatchSet",
          "waf-regional:getWebACL",
          "waf-regional:getWebACLForResource",
          "waf-regional:listActivatedRulesInRuleGroup",
          "waf-regional:listByteMatchSets",
          "waf-regional:listGeoMatchSets",
          "waf-regional:listIPSets",
          "waf-regional:listLoggingConfigurations",
          "waf-regional:listRateBasedRules",
          "waf-regional:listRegexMatchSets",
          "waf-regional:listRegexPatternSets",
          "waf-regional:listResourcesForWebACL",
          "waf-regional:listRuleGroups",
          "waf-regional:listRules",
          "waf-regional:listSqlInjectionMatchSets",
          "waf-regional:listWebACLs",
          "waf:getByteMatchSet",
          "waf:getChangeTokenStatus",
          "waf:getGeoMatchSet",
          "waf:getIPSet",
          "waf:getLoggingConfiguration",
          "waf:getRateBasedRule",
          "waf:getRegexMatchSet",
          "waf:getRegexPatternSet",
          "waf:getRule",
          "waf:getRuleGroup",
          "waf:getSampledRequests",
          "waf:getSizeConstraintSet",
          "waf:getSqlInjectionMatchSet",
          "waf:getWebACL",
          "waf:getXssMatchSet",
          "waf:listActivatedRulesInRuleGroup",
          "waf:listByteMatchSets",
          "waf:listGeoMatchSets",
          "waf:listIPSets",
          "waf:listLoggingConfigurations",
          "waf:listRateBasedRules",
          "waf:listRegexMatchSets",
          "waf:listRegexPatternSets",
          "waf:listRuleGroups",
          "waf:listRules",
          "waf:listSizeConstraintSets",
          "waf:listSqlInjectionMatchSets",
          "waf:listWebACLs",
          "waf:listXssMatchSets",
          "wafv2:checkCapacity",
          "wafv2:describeManagedRuleGroup",
          "wafv2:getIPSet",
          "wafv2:getLoggingConfiguration",
          "wafv2:getPermissionPolicy",
          "wafv2:getRateBasedStatementManagedKeys",
          "wafv2:getRegexPatternSet",
          "wafv2:getRuleGroup",
          "wafv2:getSampledRequests",
          "wafv2:getWebACL",
          "wafv2:getWebACLForResource",
          "wafv2:listAvailableManagedRuleGroups",
          "wafv2:listIPSets",
          "wafv2:listLoggingConfigurations",
          "wafv2:listRegexPatternSets",
          "wafv2:listResourcesForWebACL",
          "wafv2:listRuleGroups",
          "wafv2:listTagsForResource",
          "wafv2:listWebACLs",
          "workdocs:checkAlias",
          "workdocs:describeAvailableDirectories",
          "workdocs:describeInstances",
          "workmail:describeGroup",
          "workmail:describeOrganization",
          "workmail:describeResource",
          "workmail:describeUser",
          "workmail:listAliases",
          "workmail:listGroupMembers",
          "workmail:listGroups",
          "workmail:listMailboxPermissions",
          "workmail:listOrganizations",
          "workmail:listResourceDelegates",
          "workmail:listResources",
          "workmail:listUsers",
          "workspaces-web:getBrowserSettings",
          "workspaces-web:getIdentityProvider",
          "workspaces-web:getNetworkSettings",
          "workspaces-web:getPortal",
          "workspaces-web:getPortalServiceProviderMetadata",
          "workspaces-web:getTrustStoreCertificate",
          "workspaces-web:getUserSettings",
          "workspaces-web:listBrowserSettings",
          "workspaces-web:listIdentityProviders",
          "workspaces-web:listNetworkSettings",
          "workspaces-web:listPortals",
          "workspaces-web:listTagsForResource",
          "workspaces-web:listTrustStoreCertificates",
          "workspaces-web:listTrustStores",
          "workspaces-web:listUserSettings",
          "workspaces:describeAccount",
          "workspaces:describeAccountModifications",
          "workspaces:describeIpGroups",
          "workspaces:describeTags",
          "workspaces:describeWorkspaceBundles",
          "workspaces:describeWorkspaceDirectories",
          "workspaces:describeWorkspaceImages",
          "workspaces:describeWorkspaces",
          "workspaces:describeWorkspacesConnectionStatus"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBudgetsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSBudgetsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4EZCFS6BHW",
      "Arn": "arn:aws:iam::aws:policy/AWSBudgetsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Budgets Console via the AWS Management Console.",
      "CreateDate": "2020-10-15T17:18:28.000Z",
      "UpdateDate": "2020-10-15T17:18:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-portal:ViewBilling",
          "budgets:ViewBudget",
          "budgets:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBudgetsActionsWithAWSResourceControlAccess": {
    "policy": {
      "PolicyName": "AWSBudgetsActionsWithAWSResourceControlAccess",
      "PolicyId": "ANPAZKAPJZG4AHTKKGHHS",
      "Arn": "arn:aws:iam::aws:policy/AWSBudgetsActionsWithAWSResourceControlAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Budgets Actions including using Budgets Actions to control states of running AWS resources via AWS Management Console",
      "CreateDate": "2020-10-15T17:19:12.000Z",
      "UpdateDate": "2020-10-15T17:19:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "budgets:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-portal:ViewBilling"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-portal:ModifyBilling",
          "ec2:DescribeInstances",
          "iam:ListGroups",
          "iam:ListPolicies",
          "iam:ListRoles",
          "iam:ListUsers",
          "organizations:ListAccounts",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListPolicies",
          "organizations:ListRoots",
          "rds:DescribeDBInstances",
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDataLifecycleManagerServiceRoleForAMIManagement": {
    "policy": {
      "PolicyName": "AWSDataLifecycleManagerServiceRoleForAMIManagement",
      "PolicyId": "ANPAZKAPJZG4MG6O7FWSP",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSDataLifecycleManagerServiceRoleForAMIManagement",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides appropriate permissions to AWS Data Lifecycle Manager to take actions on AWS resources for AMI Management ",
      "CreateDate": "2020-10-21T19:39:41.000Z",
      "UpdateDate": "2021-08-19T17:03:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*",
          "arn:aws:ec2:*::image/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeImageAttribute",
          "ec2:DescribeVolumes",
          "ec2:DescribeSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ResetImageAttribute",
          "ec2:DeregisterImage",
          "ec2:CreateImage",
          "ec2:CopyImage",
          "ec2:ModifyImageAttribute"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:EnableImageDeprecation",
          "ec2:DisableImageDeprecation"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*"
        ]
      }
    ]
  },
  "AmazonMQServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonMQServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LFY3JJDI6",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonMQServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Linked Role Policy for AWS Amazon MQ",
      "CreateDate": "2020-11-04T16:07:17.000Z",
      "UpdateDate": "2020-11-04T16:07:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents",
          "logs:DescribeLogStreams",
          "logs:DescribeLogGroups",
          "logs:CreateLogStream",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
        ]
      }
    ]
  },
  "AWSOutpostsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSOutpostsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NM7FW2RO7",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSOutpostsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Linked Role policy to enable access to AWS resources managed by AWS Outposts",
      "CreateDate": "2020-11-09T22:55:56.000Z",
      "UpdateDate": "2020-11-09T22:55:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:CreateNetworkInterface",
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AwsGlueDataBrewFullAccessPolicy": {
    "policy": {
      "PolicyName": "AwsGlueDataBrewFullAccessPolicy",
      "PolicyId": "ANPAZKAPJZG4ACNRIK7M3",
      "Arn": "arn:aws:iam::aws:policy/AwsGlueDataBrewFullAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Glue DataBrew via the AWS Management Console. Also provides select access to related services (e.g., S3, KMS, Glue).",
      "CreateDate": "2020-11-11T16:51:39.000Z",
      "UpdateDate": "2022-02-04T18:28:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "databrew:CreateDataset",
          "databrew:DescribeDataset",
          "databrew:ListDatasets",
          "databrew:UpdateDataset",
          "databrew:DeleteDataset",
          "databrew:CreateProject",
          "databrew:DescribeProject",
          "databrew:ListProjects",
          "databrew:StartProjectSession",
          "databrew:SendProjectSessionAction",
          "databrew:UpdateProject",
          "databrew:DeleteProject",
          "databrew:CreateRecipe",
          "databrew:DescribeRecipe",
          "databrew:ListRecipes",
          "databrew:ListRecipeVersions",
          "databrew:PublishRecipe",
          "databrew:UpdateRecipe",
          "databrew:BatchDeleteRecipeVersion",
          "databrew:DeleteRecipeVersion",
          "databrew:CreateRecipeJob",
          "databrew:CreateProfileJob",
          "databrew:DescribeJob",
          "databrew:DescribeJobRun",
          "databrew:ListJobRuns",
          "databrew:ListJobs",
          "databrew:StartJobRun",
          "databrew:StopJobRun",
          "databrew:UpdateProfileJob",
          "databrew:UpdateRecipeJob",
          "databrew:DeleteJob",
          "databrew:CreateSchedule",
          "databrew:DescribeSchedule",
          "databrew:ListSchedules",
          "databrew:UpdateSchedule",
          "databrew:DeleteSchedule",
          "databrew:CreateRuleset",
          "databrew:DeleteRuleset",
          "databrew:DescribeRuleset",
          "databrew:ListRulesets",
          "databrew:UpdateRuleset",
          "databrew:ListTagsForResource",
          "databrew:TagResource",
          "databrew:UntagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "appflow:DescribeFlow",
          "appflow:DescribeFlowExecutionRecords",
          "appflow:ListFlows",
          "glue:GetConnection",
          "glue:GetConnections",
          "glue:GetDatabases",
          "glue:GetPartitions",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetDataCatalogEncryptionSettings",
          "dataexchange:ListDataSets",
          "dataexchange:ListDataSetRevisions",
          "dataexchange:ListRevisionAssets",
          "dataexchange:CreateJob",
          "dataexchange:StartJob",
          "dataexchange:GetJob",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "kms:DescribeKey",
          "kms:ListKeys",
          "kms:ListAliases",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSubnetGroups",
          "redshift-data:DescribeStatement",
          "redshift-data:ListDatabases",
          "redshift-data:ListSchemas",
          "redshift-data:ListTables",
          "s3:ListAllMyBuckets",
          "s3:GetBucketCORS",
          "s3:GetBucketLocation",
          "s3:GetEncryptionConfiguration",
          "s3:GetLifecycleConfiguration",
          "secretsmanager:ListSecrets",
          "secretsmanager:DescribeSecret",
          "sts:GetCallerIdentity",
          "cloudtrail:LookupEvents",
          "iam:ListRoles",
          "iam:GetRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateConnection"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:connection/AwsGlueDataBrew-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabases"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateTable"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/*",
          "arn:aws:glue:*:*:table/*/awsgluedatabrew*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::databrew-public-datasets-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AwsGlueDataBrew-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:GenerateRandom"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:databrew!default-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:databrew!default-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "DynamoDBKinesisReplicationServiceRolePolicy": {
    "policy": {
      "PolicyName": "DynamoDBKinesisReplicationServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4A745YPIYL",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/DynamoDBKinesisReplicationServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide AWS DynamoDB access to KinesisDataStreams",
      "CreateDate": "2020-11-12T00:43:25.000Z",
      "UpdateDate": "2020-11-12T00:43:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:PutRecord",
          "kinesis:PutRecords",
          "kinesis:DescribeStream"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceCatalogAppRegistryFullAccess": {
    "policy": {
      "PolicyName": "AWSServiceCatalogAppRegistryFullAccess",
      "PolicyId": "ANPAZKAPJZG4N2G3EPAYN",
      "Arn": "arn:aws:iam::aws:policy/AWSServiceCatalogAppRegistryFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Service Catalog App Registry capabilities",
      "CreateDate": "2020-11-12T22:25:58.000Z",
      "UpdateDate": "2023-12-07T21:50:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AppRegistryUpdateStackAndResourceGroupTagging",
        "Effect": "Allow",
        "Action": [
          "cloudformation:UpdateStack",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AppRegistryResourceGroupsIntegration",
        "Effect": "Allow",
        "Action": [
          "resource-groups:CreateGroup",
          "resource-groups:DeleteGroup",
          "resource-groups:GetGroup",
          "resource-groups:GetTags",
          "resource-groups:Tag",
          "resource-groups:Untag",
          "resource-groups:GetGroupConfiguration",
          "resource-groups:AssociateResource",
          "resource-groups:DisassociateResource"
        ],
        "Resource": [
          "arn:aws:resource-groups:*:*:group/AWS_*"
        ]
      },
      {
        "Sid": "AppRegistryServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/servicecatalog-appregistry.amazonaws.com/AWSServiceRoleForAWSServiceCatalogAppRegistry*"
        ]
      },
      {
        "Sid": "AppRegistryOperations",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "servicecatalog:CreateApplication",
          "servicecatalog:GetApplication",
          "servicecatalog:UpdateApplication",
          "servicecatalog:DeleteApplication",
          "servicecatalog:ListApplications",
          "servicecatalog:AssociateResource",
          "servicecatalog:DisassociateResource",
          "servicecatalog:GetAssociatedResource",
          "servicecatalog:ListAssociatedResources",
          "servicecatalog:AssociateAttributeGroup",
          "servicecatalog:DisassociateAttributeGroup",
          "servicecatalog:ListAssociatedAttributeGroups",
          "servicecatalog:CreateAttributeGroup",
          "servicecatalog:UpdateAttributeGroup",
          "servicecatalog:DeleteAttributeGroup",
          "servicecatalog:GetAttributeGroup",
          "servicecatalog:ListAttributeGroups",
          "servicecatalog:SyncResource",
          "servicecatalog:ListAttributeGroupsForApplication",
          "servicecatalog:GetConfiguration",
          "servicecatalog:PutConfiguration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AppRegistryResourceTagging",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:ListTagsForResource",
          "servicecatalog:UntagResource",
          "servicecatalog:TagResource"
        ],
        "Resource": [
          "arn:aws:servicecatalog:*:*:*"
        ]
      }
    ]
  },
  "AWSServiceCatalogAppRegistryReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSServiceCatalogAppRegistryReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4M3SSCJCST",
      "Arn": "arn:aws:iam::aws:policy/AWSServiceCatalogAppRegistryReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Service Catalog App Registry capabilites",
      "CreateDate": "2020-11-12T22:34:32.000Z",
      "UpdateDate": "2022-11-17T18:16:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "servicecatalog:GetApplication",
          "servicecatalog:ListApplications",
          "servicecatalog:GetAssociatedResource",
          "servicecatalog:ListAssociatedResources",
          "servicecatalog:ListAssociatedAttributeGroups",
          "servicecatalog:GetAttributeGroup",
          "servicecatalog:ListAttributeGroups",
          "servicecatalog:ListTagsForResource",
          "servicecatalog:ListAttributeGroupsForApplication",
          "servicecatalog:GetConfiguration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSNetworkFirewallServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSNetworkFirewallServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4DF6QQZAL3",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSNetworkFirewallServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow AWSNetworkFirewall to create and manage necessary resources for your Firewalls.",
      "CreateDate": "2020-11-17T17:17:26.000Z",
      "UpdateDate": "2023-03-30T17:19:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeInstances",
          "ec2:DescribeNetworkInterfaces"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm:DescribeCertificate"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:ListGroupResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambda_ReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSLambda_ReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4IERNVMNPE",
      "Arn": "arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants read-only access to AWS Lambda service, AWS Lambda console features, and other related AWS services.",
      "CreateDate": "2020-11-17T21:10:32.000Z",
      "UpdateDate": "2023-07-27T17:32:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks",
          "cloudformation:ListStackResources",
          "cloudwatch:GetMetricData",
          "cloudwatch:ListMetrics",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "kms:ListAliases",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:ListAttachedRolePolicies",
          "iam:ListRolePolicies",
          "iam:ListRoles",
          "logs:DescribeLogGroups",
          "lambda:Get*",
          "lambda:List*",
          "states:DescribeStateMachine",
          "states:ListStateMachines",
          "tag:GetResources",
          "xray:GetTraceSummaries",
          "xray:BatchGetTraces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "logs:FilterLogEvents",
          "logs:StartQuery",
          "logs:StopQuery",
          "logs:DescribeQueries",
          "logs:GetLogGroupFields",
          "logs:GetLogRecord",
          "logs:GetQueryResults"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/lambda/*"
        ]
      }
    ]
  },
  "AWSLambda_FullAccess": {
    "policy": {
      "PolicyName": "AWSLambda_FullAccess",
      "PolicyId": "ANPAZKAPJZG4OXQPYWZ5D",
      "Arn": "arn:aws:iam::aws:policy/AWSLambda_FullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to AWS Lambda service, AWS Lambda console features, and other related AWS services.",
      "CreateDate": "2020-11-17T21:14:08.000Z",
      "UpdateDate": "2020-11-17T21:14:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources",
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricData",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "kms:ListAliases",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:ListAttachedRolePolicies",
          "iam:ListRolePolicies",
          "iam:ListRoles",
          "lambda:*",
          "logs:DescribeLogGroups",
          "states:DescribeStateMachine",
          "states:ListStateMachines",
          "tag:GetResources",
          "xray:GetTraceSummaries",
          "xray:BatchGetTraces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "logs:FilterLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/lambda/*"
        ]
      }
    ]
  },
  "AmazonHoneycodeServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonHoneycodeServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4COQCKOKUQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonHoneycodeServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "A service-linked role required for Amazon Honeycode to access your resources.",
      "CreateDate": "2020-11-18T18:03:08.000Z",
      "UpdateDate": "2020-11-18T18:03:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "sso:GetManagedApplicationInstance"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "S3StorageLensServiceRolePolicy": {
    "policy": {
      "PolicyName": "S3StorageLensServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IHOVJESMS",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/S3StorageLensServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by S3 Storage Lens",
      "CreateDate": "2020-11-18T18:15:40.000Z",
      "UpdateDate": "2020-11-18T18:15:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AwsOrgsAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGlueSchemaRegistryFullAccess": {
    "policy": {
      "PolicyName": "AWSGlueSchemaRegistryFullAccess",
      "PolicyId": "ANPAZKAPJZG4H2OHGXA4A",
      "Arn": "arn:aws:iam::aws:policy/AWSGlueSchemaRegistryFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the AWS Glue Schema Registry Service",
      "CreateDate": "2020-11-20T00:19:00.000Z",
      "UpdateDate": "2020-11-20T00:19:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSGlueSchemaRegistryFullAccess",
        "Effect": "Allow",
        "Action": [
          "glue:CreateRegistry",
          "glue:UpdateRegistry",
          "glue:DeleteRegistry",
          "glue:GetRegistry",
          "glue:ListRegistries",
          "glue:CreateSchema",
          "glue:UpdateSchema",
          "glue:DeleteSchema",
          "glue:GetSchema",
          "glue:ListSchemas",
          "glue:RegisterSchemaVersion",
          "glue:DeleteSchemaVersions",
          "glue:GetSchemaByDefinition",
          "glue:GetSchemaVersion",
          "glue:GetSchemaVersionsDiff",
          "glue:ListSchemaVersions",
          "glue:CheckSchemaVersionValidity",
          "glue:PutSchemaVersionMetadata",
          "glue:RemoveSchemaVersionMetadata",
          "glue:QuerySchemaVersionMetadata"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSGlueSchemaRegistryTagsFullAccess",
        "Effect": "Allow",
        "Action": [
          "glue:GetTags",
          "glue:TagResource",
          "glue:UnTagResource"
        ],
        "Resource": [
          "arn:aws:glue:*:*:schema/*",
          "arn:aws:glue:*:*:registry/*"
        ]
      }
    ]
  },
  "AWSGlueSchemaRegistryReadonlyAccess": {
    "policy": {
      "PolicyName": "AWSGlueSchemaRegistryReadonlyAccess",
      "PolicyId": "ANPAZKAPJZG4B2SFYL4LZ",
      "Arn": "arn:aws:iam::aws:policy/AWSGlueSchemaRegistryReadonlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides readonly access to the AWS Glue Schema Registry Service",
      "CreateDate": "2020-11-20T00:20:06.000Z",
      "UpdateDate": "2020-11-20T00:20:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSGlueSchemaRegistryReadonlyAccess",
        "Effect": "Allow",
        "Action": [
          "glue:GetRegistry",
          "glue:ListRegistries",
          "glue:GetSchema",
          "glue:ListSchemas",
          "glue:GetSchemaByDefinition",
          "glue:GetSchemaVersion",
          "glue:ListSchemaVersions",
          "glue:GetSchemaVersionsDiff",
          "glue:CheckSchemaVersionValidity",
          "glue:QuerySchemaVersionMetadata",
          "glue:GetTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonConnect_FullAccess": {
    "policy": {
      "PolicyName": "AmazonConnect_FullAccess",
      "PolicyId": "ANPAZKAPJZG4JXAE7KLRO",
      "Arn": "arn:aws:iam::aws:policy/AmazonConnect_FullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The purpose of this policy is to grant permissions to AWS Connect users required to use Connect resources. This policy provides full access to AWS Connect resources via the Connect Console and public APIs",
      "CreateDate": "2020-11-20T19:54:21.000Z",
      "UpdateDate": "2023-03-07T14:49:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "connect:*",
          "ds:CreateAlias",
          "ds:AuthorizeApplication",
          "ds:CreateIdentityPoolDirectory",
          "ds:DeleteDirectory",
          "ds:DescribeDirectories",
          "ds:UnauthorizeApplication",
          "firehose:DescribeDeliveryStream",
          "firehose:ListDeliveryStreams",
          "kinesis:DescribeStream",
          "kinesis:ListStreams",
          "kms:DescribeKey",
          "kms:ListAliases",
          "lex:GetBots",
          "lex:ListBots",
          "lex:ListBotAliases",
          "logs:CreateLogGroup",
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets",
          "lambda:ListFunctions",
          "ds:CheckAlias",
          "profile:ListAccountIntegrations",
          "profile:GetDomain",
          "profile:ListDomains",
          "profile:GetProfileObjectType",
          "profile:ListProfileObjectTypeTemplates"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "profile:AddProfileKey",
          "profile:CreateDomain",
          "profile:CreateProfile",
          "profile:DeleteDomain",
          "profile:DeleteIntegration",
          "profile:DeleteProfile",
          "profile:DeleteProfileKey",
          "profile:DeleteProfileObject",
          "profile:DeleteProfileObjectType",
          "profile:GetIntegration",
          "profile:GetMatches",
          "profile:GetProfileObjectType",
          "profile:ListIntegrations",
          "profile:ListProfileObjects",
          "profile:ListProfileObjectTypes",
          "profile:ListTagsForResource",
          "profile:MergeProfiles",
          "profile:PutIntegration",
          "profile:PutProfileObject",
          "profile:PutProfileObjectType",
          "profile:SearchProfiles",
          "profile:TagResource",
          "profile:UntagResource",
          "profile:UpdateDomain",
          "profile:UpdateProfile"
        ],
        "Resource": [
          "arn:aws:profile:*:*:domains/amazon-connect-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:GetBucketAcl"
        ],
        "Resource": [
          "arn:aws:s3:::amazon-connect-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicequotas:GetServiceQuota"
        ],
        "Resource": [
          "arn:aws:servicequotas:*:*:connect/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/profile.amazonaws.com/*"
        ]
      }
    ]
  },
  "AmazonMWAAServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonMWAAServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JU5RBMG7W",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonMWAAServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The Service Linked Role used by Amazon Managed Workflows for Apache Airflow.",
      "CreateDate": "2020-11-24T14:13:41.000Z",
      "UpdateDate": "2022-11-17T00:56:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:airflow-*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AttachNetworkInterface",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcs",
          "ec2:DetachNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint",
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint",
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchApplicationInsightsFullAccess": {
    "policy": {
      "PolicyName": "CloudWatchApplicationInsightsFullAccess",
      "PolicyId": "ANPAZKAPJZG4MSQN23AKX",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchApplicationInsightsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to CloudWatch Application Insights and required dependencies. ",
      "CreateDate": "2020-11-24T18:44:14.000Z",
      "UpdateDate": "2022-01-25T17:51:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "applicationinsights:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeVolumes",
          "rds:DescribeDBInstances",
          "rds:DescribeDBClusters",
          "sqs:ListQueues",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "autoscaling:DescribeAutoScalingGroups",
          "lambda:ListFunctions",
          "dynamodb:ListTables",
          "s3:ListAllMyBuckets",
          "sns:ListTopics",
          "states:ListStateMachines",
          "apigateway:GET",
          "ecs:ListClusters",
          "ecs:DescribeTaskDefinition",
          "ecs:ListServices",
          "ecs:ListTasks",
          "eks:ListClusters",
          "eks:ListNodegroups",
          "fsx:DescribeFileSystems",
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/AWSServiceRoleForApplicationInsights"
        ]
      }
    ]
  },
  "CloudWatchApplicationInsightsReadOnlyAccess": {
    "policy": {
      "PolicyName": "CloudWatchApplicationInsightsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4AX4TJYLSI",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchApplicationInsightsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to CloudWatch Application Insights. ",
      "CreateDate": "2020-11-24T18:48:00.000Z",
      "UpdateDate": "2020-11-24T18:48:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "applicationinsights:Describe*",
          "applicationinsights:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ElementalSupportCenterFullAccess": {
    "policy": {
      "PolicyName": "ElementalSupportCenterFullAccess",
      "PolicyId": "ANPAZKAPJZG4ECPR57WVQ",
      "Arn": "arn:aws:iam::aws:policy/ElementalSupportCenterFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Full access to view and take action on Elemental Appliance and Software support cases and product support content",
      "CreateDate": "2020-11-25T18:08:30.000Z",
      "UpdateDate": "2021-02-05T21:02:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elemental-support-cases:*",
          "elemental-support-content:*",
          "elemental-activations:CompleteAccountRegistration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerAdmin-ServiceCatalogProductsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerAdmin-ServiceCatalogProductsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NAOSKQH4V",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerAdmin-ServiceCatalogProductsServiceRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS Service Catalog service to provision products from Amazon SageMaker portfolio of products. Grants permissions to a set of related services including CodePipeline, CodeBuild, CodeCommit, Glue, CloudFormation, etc,.",
      "CreateDate": "2020-11-27T18:48:07.000Z",
      "UpdateDate": "2022-08-02T19:12:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:GET",
          "apigateway:POST",
          "apigateway:PUT",
          "apigateway:PATCH",
          "apigateway:DELETE"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:POST"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:PATCH"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/account"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:UpdateStack",
          "cloudformation:DeleteStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/SC-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStacks"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/SC-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:GetTemplateSummary",
          "cloudformation:ValidateTemplate"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codebuild:CreateProject",
          "codebuild:DeleteProject",
          "codebuild:UpdateProject"
        ],
        "Resource": [
          "arn:aws:codebuild:*:*:project/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codecommit:CreateCommit",
          "codecommit:CreateRepository",
          "codecommit:DeleteRepository",
          "codecommit:GetRepository",
          "codecommit:TagResource"
        ],
        "Resource": [
          "arn:aws:codecommit:*:*:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codecommit:ListRepositories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codepipeline:CreatePipeline",
          "codepipeline:DeletePipeline",
          "codepipeline:GetPipeline",
          "codepipeline:GetPipelineState",
          "codepipeline:StartPipelineExecution",
          "codepipeline:TagResource",
          "codepipeline:UpdatePipeline"
        ],
        "Resource": [
          "arn:aws:codepipeline:*:*:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cognito-idp:CreateUserPool",
          "cognito-idp:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cognito-idp:CreateGroup",
          "cognito-idp:CreateUserPoolDomain",
          "cognito-idp:CreateUserPoolClient",
          "cognito-idp:DeleteGroup",
          "cognito-idp:DeleteUserPool",
          "cognito-idp:DeleteUserPoolClient",
          "cognito-idp:DeleteUserPoolDomain",
          "cognito-idp:DescribeUserPool",
          "cognito-idp:DescribeUserPoolClient",
          "cognito-idp:UpdateUserPool",
          "cognito-idp:UpdateUserPoolClient"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:CreateRepository",
          "ecr:DeleteRepository",
          "ecr:TagResource"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:DeleteRule",
          "events:DisableRule",
          "events:EnableRule",
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "firehose:CreateDeliveryStream",
          "firehose:DeleteDeliveryStream",
          "firehose:DescribeDeliveryStream",
          "firehose:StartDeliveryStreamEncryption",
          "firehose:StopDeliveryStreamEncryption",
          "firehose:UpdateDestination"
        ],
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateDatabase",
          "glue:DeleteDatabase"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/sagemaker-*",
          "arn:aws:glue:*:*:table/sagemaker-*",
          "arn:aws:glue:*:*:userDefinedFunction/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateClassifier",
          "glue:DeleteClassifier",
          "glue:DeleteCrawler",
          "glue:DeleteJob",
          "glue:DeleteTrigger",
          "glue:DeleteWorkflow",
          "glue:StopCrawler"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateWorkflow"
        ],
        "Resource": [
          "arn:aws:glue:*:*:workflow/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateJob"
        ],
        "Resource": [
          "arn:aws:glue:*:*:job/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateCrawler",
          "glue:GetCrawler"
        ],
        "Resource": [
          "arn:aws:glue:*:*:crawler/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateTrigger",
          "glue:GetTrigger"
        ],
        "Resource": [
          "arn:aws:glue:*:*:trigger/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalog*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:AddPermission",
          "lambda:CreateFunction",
          "lambda:DeleteFunction",
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:InvokeFunction",
          "lambda:RemovePermission"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:TagResource"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DeleteLogGroup",
          "logs:DeleteLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/apigateway/AccessLogs/*",
          "arn:aws:logs:*:*:log-group::log-stream:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:DeleteBucketPolicy",
          "s3:GetBucketPolicy",
          "s3:PutBucketAcl",
          "s3:PutBucketNotification",
          "s3:PutBucketPolicy",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketLogging",
          "s3:PutEncryptionConfiguration",
          "s3:PutBucketCORS",
          "s3:PutBucketTagging",
          "s3:PutObjectTagging"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateEndpoint",
          "sagemaker:CreateEndpointConfig",
          "sagemaker:CreateModel",
          "sagemaker:CreateWorkteam",
          "sagemaker:DeleteEndpoint",
          "sagemaker:DeleteEndpointConfig",
          "sagemaker:DeleteModel",
          "sagemaker:DeleteWorkteam",
          "sagemaker:DescribeModel",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeWorkteam",
          "sagemaker:CreateCodeRepository",
          "sagemaker:DescribeCodeRepository",
          "sagemaker:UpdateCodeRepository",
          "sagemaker:DeleteCodeRepository"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:AddTags"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:endpoint/*",
          "arn:aws:sagemaker:*:*:endpoint-config/*",
          "arn:aws:sagemaker:*:*:model/*",
          "arn:aws:sagemaker:*:*:pipeline/*",
          "arn:aws:sagemaker:*:*:project/*",
          "arn:aws:sagemaker:*:*:model-package/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateImage",
          "sagemaker:DeleteImage",
          "sagemaker:DescribeImage",
          "sagemaker:UpdateImage",
          "sagemaker:ListTags"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:image/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "states:CreateStateMachine",
          "states:DeleteStateMachine",
          "states:UpdateStateMachine"
        ],
        "Resource": [
          "arn:aws:states:*:*:stateMachine:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codestar-connections:PassConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      }
    ]
  },
  "AmazonDevOpsGuruServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonDevOpsGuruServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LOGPH224B",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonDevOpsGuruServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "A service-linked role required for Amazon DevOpsGuru to access your resources.",
      "CreateDate": "2020-12-01T10:24:42.000Z",
      "UpdateDate": "2023-01-10T14:36:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:DescribeAutoScalingGroups",
          "cloudtrail:LookupEvents",
          "cloudwatch:GetMetricData",
          "cloudwatch:ListMetrics",
          "cloudwatch:DescribeAnomalyDetectors",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:ListDashboards",
          "cloudwatch:GetDashboard",
          "cloudformation:GetTemplate",
          "cloudformation:ListStacks",
          "cloudformation:ListStackResources",
          "cloudformation:DescribeStacks",
          "cloudformation:ListImports",
          "codedeploy:BatchGetDeployments",
          "codedeploy:GetDeploymentGroup",
          "codedeploy:ListDeployments",
          "config:DescribeConfigurationRecorderStatus",
          "config:GetResourceConfigHistory",
          "events:ListRuleNamesByTarget",
          "xray:GetServiceGraph",
          "organizations:ListRoots",
          "organizations:ListChildren",
          "organizations:ListDelegatedAdministrators",
          "pi:GetResourceMetrics",
          "tag:GetResources",
          "lambda:GetFunction",
          "lambda:GetFunctionConcurrency",
          "lambda:GetAccountSettings",
          "lambda:ListProvisionedConcurrencyConfigs",
          "lambda:ListAliases",
          "lambda:ListEventSourceMappings",
          "lambda:GetPolicy",
          "ec2:DescribeSubnets",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingPolicies",
          "sqs:GetQueueAttributes",
          "kinesis:DescribeStream",
          "kinesis:DescribeLimits",
          "dynamodb:DescribeTable",
          "dynamodb:DescribeLimits",
          "dynamodb:DescribeContinuousBackups",
          "dynamodb:DescribeStream",
          "dynamodb:ListStreams",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "rds:DescribeDBInstances",
          "rds:DescribeDBClusters",
          "rds:DescribeOptionGroups",
          "rds:DescribeDBClusterParameters",
          "rds:DescribeDBInstanceAutomatedBackups",
          "rds:DescribeAccountAttributes",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "s3:GetBucketNotification",
          "s3:GetBucketPolicy",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetBucketTagging",
          "s3:GetBucketWebsite",
          "s3:GetIntelligentTieringConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:GetReplicationConfiguration",
          "s3:ListAllMyBuckets",
          "s3:ListStorageLensConfigurations",
          "servicequotas:GetServiceQuota",
          "servicequotas:ListRequestedServiceQuotaChangeHistory",
          "servicequotas:ListServiceQuotas"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowPutTargetsOnASpecificRule",
        "Effect": "Allow",
        "Action": [
          "events:PutTargets",
          "events:PutRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/DevOps-Guru-managed-*"
        ]
      },
      {
        "Sid": "AllowCreateOpsItem",
        "Effect": "Allow",
        "Action": [
          "ssm:CreateOpsItem"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowAddTagsToOpsItem",
        "Effect": "Allow",
        "Action": [
          "ssm:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:opsitem/*"
        ]
      },
      {
        "Sid": "AllowAccessOpsItem",
        "Effect": "Allow",
        "Action": [
          "ssm:GetOpsItem",
          "ssm:UpdateOpsItem"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowCreateManagedRule",
        "Effect": "Allow",
        "Action": [
          "events:PutRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/DevOpsGuruManagedRule*"
        ]
      },
      {
        "Sid": "AllowAccessManagedRule",
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/DevOpsGuruManagedRule*"
        ]
      },
      {
        "Sid": "AllowOtherOperationsOnManagedRule",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:EnableRule",
          "events:DisableRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/DevOpsGuruManagedRule*"
        ]
      },
      {
        "Sid": "AllowTagBasedFilterLogEvents",
        "Effect": "Allow",
        "Action": [
          "logs:FilterLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*"
        ]
      },
      {
        "Sid": "AllowAPIGatewayGetIntegrations",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/restapis/??????????",
          "arn:aws:apigateway:*::/restapis/*/resources",
          "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration"
        ]
      }
    ]
  },
  "AWSPanoramaGreengrassGroupRolePolicy": {
    "policy": {
      "PolicyName": "AWSPanoramaGreengrassGroupRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IRCPXKCEG",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSPanoramaGreengrassGroupRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows an AWS Lambda function on an AWS Panorama Appliance to manage resources in Panorama, upload logs and metrics to Amazon CloudWatch, and to manage objects in buckets created for use with Panorama.",
      "CreateDate": "2020-12-01T13:10:22.000Z",
      "UpdateDate": "2021-01-06T19:30:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PanoramaS3Access",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetBucket*",
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*aws-panorama*"
        ]
      },
      {
        "Sid": "PanoramaCLoudWatchPutDashboard",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutDashboard"
        ],
        "Resource": [
          "arn:aws:cloudwatch::*:dashboard/panorama*"
        ]
      },
      {
        "Sid": "PanoramaCloudWatchPutMetricData",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PanoramaGreenGrassCloudWatchAccess",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/greengrass/*"
        ]
      },
      {
        "Sid": "PanoramaAccess",
        "Effect": "Allow",
        "Action": [
          "panorama:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPanoramaFullAccess": {
    "policy": {
      "PolicyName": "AWSPanoramaFullAccess",
      "PolicyId": "ANPAZKAPJZG4IAPULBSWQ",
      "Arn": "arn:aws:iam::aws:policy/AWSPanoramaFullAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Panorama",
      "CreateDate": "2020-12-01T13:12:47.000Z",
      "UpdateDate": "2022-01-12T21:21:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "panorama:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret",
          "secretsmanager:ListSecretVersionIds",
          "secretsmanager:PutSecretValue",
          "secretsmanager:UpdateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:panorama*",
          "arn:aws:secretsmanager:*:*:secret:Panorama*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:Describe*",
          "logs:Get*",
          "logs:List*",
          "logs:StartQuery",
          "logs:StopQuery",
          "logs:TestMetricFilter",
          "logs:FilterLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/panorama_device*:log-stream:*",
          "arn:aws:logs:*:*:log-group:/aws/panorama/devices/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPanoramaApplianceRolePolicy": {
    "policy": {
      "PolicyName": "AWSPanoramaApplianceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4CWIHTBB4Y",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSPanoramaApplianceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS IoT software on an AWS Panorama Appliance to upload logs to Amazon CloudWatch.",
      "CreateDate": "2020-12-01T13:13:18.000Z",
      "UpdateDate": "2020-12-01T13:13:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PanoramaDeviceCreateLogStream",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/panorama_device*:log-stream:*"
        ]
      },
      {
        "Sid": "PanoramaDeviceCreateLogGroup",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/panorama_device*"
        ]
      }
    ]
  },
  "AWSPanoramaSageMakerRolePolicy": {
    "policy": {
      "PolicyName": "AWSPanoramaSageMakerRolePolicy",
      "PolicyId": "ANPAZKAPJZG4O23KYQMI2",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSPanoramaSageMakerRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon SageMaker to manage objects in buckets created for use with AWS Panorama.",
      "CreateDate": "2020-12-01T13:13:54.000Z",
      "UpdateDate": "2020-12-01T13:13:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PanoramaSageMakerS3Access",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:GetBucket*"
        ],
        "Resource": [
          "arn:aws:s3:::*aws-panorama*"
        ]
      }
    ]
  },
  "AWSPanoramaServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSPanoramaServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4G7G35B6C5",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSPanoramaServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Panorama to manage resources in Amazon S3, AWS IoT, AWS IoT GreenGrass, AWS Lambda, Amazon SageMaker, and Amazon CloudWatch Logs, and to pass service roles to AWS IoT, AWS IoT GreenGrass, and Amazon SageMaker.",
      "CreateDate": "2020-12-01T13:14:43.000Z",
      "UpdateDate": "2020-12-01T13:14:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PanoramaIoTThingAccess",
        "Effect": "Allow",
        "Action": [
          "iot:CreateThing",
          "iot:DeleteThing",
          "iot:DeleteThingShadow",
          "iot:DescribeThing",
          "iot:GetThingShadow",
          "iot:UpdateThing",
          "iot:UpdateThingShadow"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/panorama*"
        ]
      },
      {
        "Sid": "PanoramaIoTCertificateAccess",
        "Effect": "Allow",
        "Action": [
          "iot:AttachThingPrincipal",
          "iot:DetachThingPrincipal",
          "iot:UpdateCertificate",
          "iot:DeleteCertificate",
          "iot:AttachPrincipalPolicy",
          "iot:DetachPrincipalPolicy"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/panorama*",
          "arn:aws:iot:*:*:cert/*"
        ]
      },
      {
        "Sid": "PanoramaIoTCreateCertificateAndPolicyAccess",
        "Effect": "Allow",
        "Action": [
          "iot:CreateKeysAndCertificate",
          "iot:CreatePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PanoramaIoTCreatePolicyVersionAccess",
        "Effect": "Allow",
        "Action": [
          "iot:CreatePolicyVersion"
        ],
        "Resource": [
          "arn:aws:iot:*:*:policy/panorama*"
        ]
      },
      {
        "Sid": "PanoramaIoTJobAccess",
        "Effect": "Allow",
        "Action": [
          "iot:DescribeJobExecution",
          "iot:CreateJob",
          "iot:DeleteJob"
        ],
        "Resource": [
          "arn:aws:iot:*:*:job/panorama*",
          "arn:aws:iot:*:*:thing/panorama*"
        ]
      },
      {
        "Sid": "PanoramaIoTEndpointAccess",
        "Effect": "Allow",
        "Action": [
          "iot:DescribeEndpoint"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PanoramaAccess",
        "Effect": "Allow",
        "Action": [
          "panorama:Describe*",
          "panorama:List*",
          "panorama:Get*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PanoramaS3Access",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:DeleteBucket",
          "s3:ListBucket",
          "s3:GetBucket*",
          "s3:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3:::*aws-panorama*"
        ]
      },
      {
        "Sid": "PanoramaIAMPassSageMakerRoleAccess",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSPanoramaSageMakerRole",
          "arn:aws:iam::*:role/service-role/AWSPanoramaSageMakerRole"
        ]
      },
      {
        "Sid": "PanoramaIAMPassGreengrassRoleAccess",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSPanoramaGreengrassGroupRole",
          "arn:aws:iam::*:role/service-role/AWSPanoramaGreengrassGroupRole",
          "arn:aws:iam::*:role/AWSPanoramaGreengrassRole",
          "arn:aws:iam::*:role/service-role/AWSPanoramaGreengrassRole"
        ]
      },
      {
        "Sid": "PanoramaIAMPassIoTRoleAccess",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSPanoramaApplianceRole",
          "arn:aws:iam::*:role/service-role/AWSPanoramaApplianceRole"
        ]
      },
      {
        "Sid": "PanoramaGreenGrassAccess",
        "Effect": "Allow",
        "Action": [
          "greengrass:AssociateRoleToGroup",
          "greengrass:AssociateServiceRoleToAccount",
          "greengrass:CreateResourceDefinition",
          "greengrass:CreateResourceDefinitionVersion",
          "greengrass:CreateCoreDefinition",
          "greengrass:CreateCoreDefinitionVersion",
          "greengrass:CreateDeployment",
          "greengrass:CreateFunctionDefinition",
          "greengrass:CreateFunctionDefinitionVersion",
          "greengrass:CreateGroup",
          "greengrass:CreateGroupCertificateAuthority",
          "greengrass:CreateGroupVersion",
          "greengrass:CreateLoggerDefinition",
          "greengrass:CreateLoggerDefinitionVersion",
          "greengrass:CreateSubscriptionDefinition",
          "greengrass:CreateSubscriptionDefinitionVersion",
          "greengrass:DeleteCoreDefinition",
          "greengrass:DeleteFunctionDefinition",
          "greengrass:DeleteResourceDefinition",
          "greengrass:DeleteGroup",
          "greengrass:DeleteLoggerDefinition",
          "greengrass:DeleteSubscriptionDefinition",
          "greengrass:DisassociateRoleFromGroup",
          "greengrass:DisassociateServiceRoleFromAccount",
          "greengrass:GetAssociatedRole",
          "greengrass:GetConnectivityInfo",
          "greengrass:GetCoreDefinition",
          "greengrass:GetCoreDefinitionVersion",
          "greengrass:GetDeploymentStatus",
          "greengrass:GetDeviceDefinition",
          "greengrass:GetDeviceDefinitionVersion",
          "greengrass:GetFunctionDefinition",
          "greengrass:GetFunctionDefinitionVersion",
          "greengrass:GetGroup",
          "greengrass:GetGroupCertificateAuthority",
          "greengrass:GetGroupCertificateConfiguration",
          "greengrass:GetGroupVersion",
          "greengrass:GetLoggerDefinition",
          "greengrass:GetLoggerDefinitionVersion",
          "greengrass:GetResourceDefinition",
          "greengrass:GetServiceRoleForAccount",
          "greengrass:GetSubscriptionDefinition",
          "greengrass:GetSubscriptionDefinitionVersion",
          "greengrass:ListCoreDefinitionVersions",
          "greengrass:ListCoreDefinitions",
          "greengrass:ListDeployments",
          "greengrass:ListDeviceDefinitionVersions",
          "greengrass:ListDeviceDefinitions",
          "greengrass:ListFunctionDefinitionVersions",
          "greengrass:ListFunctionDefinitions",
          "greengrass:ListGroupCertificateAuthorities",
          "greengrass:ListGroupVersions",
          "greengrass:ListGroups",
          "greengrass:ListLoggerDefinitionVersions",
          "greengrass:ListLoggerDefinitions",
          "greengrass:ListSubscriptionDefinitionVersions",
          "greengrass:ListSubscriptionDefinitions",
          "greengrass:ResetDeployments",
          "greengrass:UpdateConnectivityInfo",
          "greengrass:UpdateCoreDefinition",
          "greengrass:UpdateDeviceDefinition",
          "greengrass:UpdateFunctionDefinition",
          "greengrass:UpdateGroup",
          "greengrass:UpdateGroupCertificateConfiguration",
          "greengrass:UpdateLoggerDefinition",
          "greengrass:UpdateSubscriptionDefinition",
          "greengrass:UpdateResourceDefinition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PanoramaLambdaUsersFunctionAccess",
        "Effect": "Allow",
        "Action": [
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:ListFunctions",
          "lambda:ListVersionsByFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*"
        ]
      },
      {
        "Sid": "PanoramaSageMakerWriteAccess",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateTrainingJob",
          "sagemaker:StopTrainingJob",
          "sagemaker:CreateCompilationJob",
          "sagemaker:DescribeCompilationJob",
          "sagemaker:StopCompilationJob"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:training-job/panorama*",
          "arn:aws:sagemaker:*:*:compilation-job/panorama*"
        ]
      },
      {
        "Sid": "PanoramaSageMakerListAccess",
        "Effect": "Allow",
        "Action": [
          "sagemaker:ListCompilationJobs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PanoramaSageMakerReadAccess",
        "Effect": "Allow",
        "Action": [
          "sagemaker:DescribeTrainingJob"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:training-job/*"
        ]
      },
      {
        "Sid": "PanoramaCWLogsAccess",
        "Effect": "Allow",
        "Action": [
          "iot:AttachPolicy",
          "iot:CreateRoleAlias"
        ],
        "Resource": [
          "arn:aws:iot:*:*:policy/panorama*",
          "arn:aws:iot:*:*:rolealias/panorama*"
        ]
      }
    ]
  },
  "AmazonElasticContainerRegistryPublicPowerUser": {
    "policy": {
      "PolicyName": "AmazonElasticContainerRegistryPublicPowerUser",
      "PolicyId": "ANPAZKAPJZG4P6F7N3OP7",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicPowerUser",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon ECR Public repositories, but does not allow repository deletion or policy changes.",
      "CreateDate": "2020-12-01T16:16:54.000Z",
      "UpdateDate": "2020-12-01T16:16:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr-public:GetAuthorizationToken",
          "sts:GetServiceBearerToken",
          "ecr-public:BatchCheckLayerAvailability",
          "ecr-public:GetRepositoryPolicy",
          "ecr-public:DescribeRepositories",
          "ecr-public:DescribeRegistries",
          "ecr-public:DescribeImages",
          "ecr-public:DescribeImageTags",
          "ecr-public:GetRepositoryCatalogData",
          "ecr-public:GetRegistryCatalogData",
          "ecr-public:InitiateLayerUpload",
          "ecr-public:UploadLayerPart",
          "ecr-public:CompleteLayerUpload",
          "ecr-public:PutImage"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerFeatureStoreAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerFeatureStoreAccess",
      "PolicyId": "ANPAZKAPJZG4FO5MQNGJU",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerFeatureStoreAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions required to enable the offline store for an Amazon SageMaker FeatureStore feature group.",
      "CreateDate": "2020-12-01T16:24:05.000Z",
      "UpdateDate": "2022-12-05T14:19:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:GetBucketAcl",
          "s3:PutObjectAcl"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*/metadata/*",
          "arn:aws:s3:::*Sagemaker*/metadata/*",
          "arn:aws:s3:::*sagemaker*/metadata/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:GetTable",
          "glue:UpdateTable"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/sagemaker_featurestore",
          "arn:aws:glue:*:*:table/sagemaker_featurestore/*"
        ]
      }
    ]
  },
  "AmazonDevOpsGuruReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonDevOpsGuruReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4JK4QO3QK6",
      "Arn": "arn:aws:iam::aws:policy/AmazonDevOpsGuruReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon DevOps Guru Console.",
      "CreateDate": "2020-12-01T16:34:40.000Z",
      "UpdateDate": "2022-08-25T18:11:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DevOpsGuruReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "devops-guru:DescribeAccountHealth",
          "devops-guru:DescribeAccountOverview",
          "devops-guru:DescribeAnomaly",
          "devops-guru:DescribeEventSourcesConfig",
          "devops-guru:DescribeFeedback",
          "devops-guru:DescribeInsight",
          "devops-guru:DescribeResourceCollectionHealth",
          "devops-guru:DescribeServiceIntegration",
          "devops-guru:GetCostEstimation",
          "devops-guru:GetResourceCollection",
          "devops-guru:ListAnomaliesForInsight",
          "devops-guru:ListEvents",
          "devops-guru:ListInsights",
          "devops-guru:ListAnomalousLogGroups",
          "devops-guru:ListMonitoredResources",
          "devops-guru:ListNotificationChannels",
          "devops-guru:ListRecommendations",
          "devops-guru:SearchInsights",
          "devops-guru:StartCostEstimation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudFormationListStacksAccess",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
        ]
      },
      {
        "Sid": "CloudWatchGetMetricDataAccess",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RDSDescribeDBInstancesAccess",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchLogsFilterLogEventsAccess",
        "Effect": "Allow",
        "Action": [
          "logs:FilterLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*"
        ]
      }
    ]
  },
  "AmazonDevOpsGuruFullAccess": {
    "policy": {
      "PolicyName": "AmazonDevOpsGuruFullAccess",
      "PolicyId": "ANPAZKAPJZG4BQEAUGTMM",
      "Arn": "arn:aws:iam::aws:policy/AmazonDevOpsGuruFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon DevOps Guru.",
      "CreateDate": "2020-12-01T16:38:12.000Z",
      "UpdateDate": "2022-08-25T18:23:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DevOpsGuruFullAccess",
        "Effect": "Allow",
        "Action": [
          "devops-guru:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudFormationListStacksAccess",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchGetMetricDataAccess",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SnsListTopicsAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SnsTopicOperations",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:GetTopicAttributes",
          "sns:SetTopicAttributes",
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:DevOps-Guru-*"
        ]
      },
      {
        "Sid": "DevOpsGuruSlrCreation",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
        ]
      },
      {
        "Sid": "DevOpsGuruSlrDeletion",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
        ]
      },
      {
        "Sid": "RDSDescribeDBInstancesAccess",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchLogsFilterLogEventsAccess",
        "Effect": "Allow",
        "Action": [
          "logs:FilterLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*"
        ]
      }
    ]
  },
  "AmazonElasticContainerRegistryPublicFullAccess": {
    "policy": {
      "PolicyName": "AmazonElasticContainerRegistryPublicFullAccess",
      "PolicyId": "ANPAZKAPJZG4F2SFMTI3G",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrative access to Amazon ECR Public resources",
      "CreateDate": "2020-12-01T17:25:52.000Z",
      "UpdateDate": "2020-12-01T17:25:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr-public:*",
          "sts:GetServiceBearerToken"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonElasticContainerRegistryPublicReadOnly": {
    "policy": {
      "PolicyName": "AmazonElasticContainerRegistryPublicReadOnly",
      "PolicyId": "ANPAZKAPJZG4AD7UYLF25",
      "Arn": "arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon ECR Public repositories.",
      "CreateDate": "2020-12-01T17:27:04.000Z",
      "UpdateDate": "2020-12-01T17:27:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr-public:GetAuthorizationToken",
          "sts:GetServiceBearerToken",
          "ecr-public:BatchCheckLayerAvailability",
          "ecr-public:GetRepositoryPolicy",
          "ecr-public:DescribeRepositories",
          "ecr-public:DescribeRegistries",
          "ecr-public:DescribeImages",
          "ecr-public:DescribeImageTags",
          "ecr-public:GetRepositoryCatalogData",
          "ecr-public:GetRegistryCatalogData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AdministratorAccess-Amplify": {
    "policy": {
      "PolicyName": "AdministratorAccess-Amplify",
      "PolicyId": "ANPAZKAPJZG4AML23RALR",
      "Arn": "arn:aws:iam::aws:policy/AdministratorAccess-Amplify",
      "Path": "/",
      "DefaultVersionId": "v12",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants account administrative permissions while explicitly allowing direct access to resources needed by Amplify applications.",
      "CreateDate": "2020-12-01T19:03:08.000Z",
      "UpdateDate": "2024-04-04T20:35:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CLICloudformationPolicy",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateChangeSet",
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeChangeSet",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStackResources",
          "cloudformation:DescribeStacks",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:GetTemplate",
          "cloudformation:UpdateStack",
          "cloudformation:ListStacks",
          "cloudformation:ListStackResources",
          "cloudformation:DeleteStackSet",
          "cloudformation:DescribeStackSet",
          "cloudformation:UpdateStackSet",
          "cloudformation:TagResource",
          "cloudformation:UntagResource"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/amplify-*"
        ]
      },
      {
        "Sid": "CLIManageviaCFNPolicy",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoleTags",
          "iam:TagRole",
          "iam:AttachRolePolicy",
          "iam:CreatePolicy",
          "iam:DeletePolicy",
          "iam:DeleteRole",
          "iam:DeleteRolePolicy",
          "iam:DetachRolePolicy",
          "iam:PutRolePolicy",
          "iam:UntagRole",
          "iam:UpdateRole",
          "iam:GetRole",
          "iam:GetPolicy",
          "iam:GetRolePolicy",
          "iam:PassRole",
          "iam:ListPolicyVersions",
          "iam:CreatePolicyVersion",
          "iam:DeletePolicyVersion",
          "iam:CreateRole",
          "iam:ListRolePolicies",
          "iam:PutRolePermissionsBoundary",
          "iam:DeleteRolePermissionsBoundary",
          "appsync:CreateApiKey",
          "appsync:CreateDataSource",
          "appsync:CreateFunction",
          "appsync:CreateResolver",
          "appsync:CreateType",
          "appsync:DeleteApiKey",
          "appsync:DeleteDataSource",
          "appsync:DeleteFunction",
          "appsync:DeleteResolver",
          "appsync:DeleteType",
          "appsync:GetDataSource",
          "appsync:GetFunction",
          "appsync:GetIntrospectionSchema",
          "appsync:GetResolver",
          "appsync:GetSchemaCreationStatus",
          "appsync:GetType",
          "appsync:GraphQL",
          "appsync:ListApiKeys",
          "appsync:ListDataSources",
          "appsync:ListFunctions",
          "appsync:ListGraphqlApis",
          "appsync:ListResolvers",
          "appsync:ListResolversByFunction",
          "appsync:ListTypes",
          "appsync:StartSchemaCreation",
          "appsync:UntagResource",
          "appsync:UpdateApiKey",
          "appsync:UpdateDataSource",
          "appsync:UpdateFunction",
          "appsync:UpdateResolver",
          "appsync:UpdateType",
          "appsync:TagResource",
          "appsync:CreateGraphqlApi",
          "appsync:DeleteGraphqlApi",
          "appsync:GetGraphqlApi",
          "appsync:ListTagsForResource",
          "appsync:UpdateGraphqlApi",
          "apigateway:DELETE",
          "apigateway:GET",
          "apigateway:PATCH",
          "apigateway:POST",
          "apigateway:PUT",
          "cognito-idp:CreateUserPool",
          "cognito-identity:CreateIdentityPool",
          "cognito-identity:DeleteIdentityPool",
          "cognito-identity:DescribeIdentity",
          "cognito-identity:DescribeIdentityPool",
          "cognito-identity:SetIdentityPoolRoles",
          "cognito-identity:GetIdentityPoolRoles",
          "cognito-identity:UpdateIdentityPool",
          "cognito-idp:CreateUserPoolClient",
          "cognito-idp:DeleteUserPool",
          "cognito-idp:DeleteUserPoolClient",
          "cognito-idp:DescribeUserPool",
          "cognito-idp:DescribeUserPoolClient",
          "cognito-idp:ListTagsForResource",
          "cognito-idp:ListUserPoolClients",
          "cognito-idp:UpdateUserPoolClient",
          "cognito-idp:CreateGroup",
          "cognito-idp:DeleteGroup",
          "cognito-identity:TagResource",
          "cognito-idp:TagResource",
          "cognito-idp:UpdateUserPool",
          "cognito-idp:SetUserPoolMfaConfig",
          "lambda:AddPermission",
          "lambda:CreateFunction",
          "lambda:DeleteFunction",
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:InvokeAsync",
          "lambda:InvokeFunction",
          "lambda:RemovePermission",
          "lambda:UpdateFunctionCode",
          "lambda:UpdateFunctionConfiguration",
          "lambda:ListTags",
          "lambda:TagResource",
          "lambda:UntagResource",
          "lambda:AddLayerVersionPermission",
          "lambda:CreateEventSourceMapping",
          "lambda:DeleteEventSourceMapping",
          "lambda:DeleteLayerVersion",
          "lambda:GetEventSourceMapping",
          "lambda:GetLayerVersion",
          "lambda:ListEventSourceMappings",
          "lambda:ListLayerVersions",
          "lambda:PublishLayerVersion",
          "lambda:RemoveLayerVersionPermission",
          "lambda:UpdateEventSourceMapping",
          "dynamodb:CreateTable",
          "dynamodb:DeleteItem",
          "dynamodb:DeleteTable",
          "dynamodb:DescribeContinuousBackups",
          "dynamodb:DescribeTable",
          "dynamodb:DescribeTimeToLive",
          "dynamodb:ListStreams",
          "dynamodb:PutItem",
          "dynamodb:TagResource",
          "dynamodb:ListTagsOfResource",
          "dynamodb:UntagResource",
          "dynamodb:UpdateContinuousBackups",
          "dynamodb:UpdateItem",
          "dynamodb:UpdateTable",
          "dynamodb:UpdateTimeToLive",
          "s3:CreateBucket",
          "s3:ListBucket",
          "s3:PutBucketAcl",
          "s3:PutBucketCORS",
          "s3:PutBucketNotification",
          "s3:PutBucketPolicy",
          "s3:PutBucketWebsite",
          "s3:PutObjectAcl",
          "cloudfront:CreateCloudFrontOriginAccessIdentity",
          "cloudfront:CreateDistribution",
          "cloudfront:DeleteCloudFrontOriginAccessIdentity",
          "cloudfront:DeleteDistribution",
          "cloudfront:GetCloudFrontOriginAccessIdentity",
          "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
          "cloudfront:GetDistribution",
          "cloudfront:GetDistributionConfig",
          "cloudfront:TagResource",
          "cloudfront:UntagResource",
          "cloudfront:UpdateCloudFrontOriginAccessIdentity",
          "cloudfront:UpdateDistribution",
          "events:DeleteRule",
          "events:DescribeRule",
          "events:ListRuleNamesByTarget",
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets",
          "mobiletargeting:GetApp",
          "kinesis:AddTagsToStream",
          "kinesis:CreateStream",
          "kinesis:DeleteStream",
          "kinesis:DescribeStream",
          "kinesis:DescribeStreamSummary",
          "kinesis:ListTagsForStream",
          "kinesis:PutRecords",
          "es:AddTags",
          "es:CreateElasticsearchDomain",
          "es:DeleteElasticsearchDomain",
          "es:DescribeElasticsearchDomain",
          "es:UpdateElasticsearchDomainConfig",
          "s3:PutEncryptionConfiguration",
          "s3:PutBucketPublicAccessBlock"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CLISDKCalls",
        "Effect": "Allow",
        "Action": [
          "appsync:GetIntrospectionSchema",
          "appsync:GraphQL",
          "appsync:UpdateApiKey",
          "appsync:ListApiKeys",
          "amplify:*",
          "amplifybackend:*",
          "amplifyuibuilder:*",
          "sts:AssumeRole",
          "mobiletargeting:*",
          "cognito-idp:AdminAddUserToGroup",
          "cognito-idp:AdminCreateUser",
          "cognito-idp:CreateGroup",
          "cognito-idp:DeleteGroup",
          "cognito-idp:DeleteUser",
          "cognito-idp:ListUsers",
          "cognito-idp:AdminGetUser",
          "cognito-idp:ListUsersInGroup",
          "cognito-idp:AdminDisableUser",
          "cognito-idp:AdminRemoveUserFromGroup",
          "cognito-idp:AdminResetUserPassword",
          "cognito-idp:AdminListGroupsForUser",
          "cognito-idp:ListGroups",
          "cognito-idp:AdminListUserAuthEvents",
          "cognito-idp:AdminDeleteUser",
          "cognito-idp:AdminConfirmSignUp",
          "cognito-idp:AdminEnableUser",
          "cognito-idp:AdminUpdateUserAttributes",
          "cognito-idp:DescribeIdentityProvider",
          "cognito-idp:DescribeUserPool",
          "cognito-idp:DeleteUserPool",
          "cognito-idp:DescribeUserPoolClient",
          "cognito-idp:CreateUserPool",
          "cognito-idp:CreateUserPoolClient",
          "cognito-idp:UpdateUserPool",
          "cognito-idp:AdminSetUserPassword",
          "cognito-idp:ListUserPools",
          "cognito-idp:ListUserPoolClients",
          "cognito-idp:ListIdentityProviders",
          "cognito-idp:GetUserPoolMfaConfig",
          "cognito-identity:GetIdentityPoolRoles",
          "cognito-identity:SetIdentityPoolRoles",
          "cognito-identity:CreateIdentityPool",
          "cognito-identity:DeleteIdentityPool",
          "cognito-identity:ListIdentityPools",
          "cognito-identity:DescribeIdentityPool",
          "dynamodb:DescribeTable",
          "dynamodb:ListTables",
          "lambda:GetFunction",
          "lambda:CreateFunction",
          "lambda:AddPermission",
          "lambda:DeleteFunction",
          "lambda:DeleteLayerVersion",
          "lambda:InvokeFunction",
          "lambda:ListLayerVersions",
          "iam:PutRolePolicy",
          "iam:CreatePolicy",
          "iam:AttachRolePolicy",
          "iam:ListPolicyVersions",
          "iam:ListAttachedRolePolicies",
          "iam:CreateRole",
          "iam:PassRole",
          "iam:ListRolePolicies",
          "iam:DeleteRolePolicy",
          "iam:CreatePolicyVersion",
          "iam:DeletePolicyVersion",
          "iam:DeleteRole",
          "iam:DetachRolePolicy",
          "cloudformation:ListStacks",
          "cloudformation:DescribeStacks",
          "sns:CreateSMSSandboxPhoneNumber",
          "sns:GetSMSSandboxAccountStatus",
          "sns:VerifySMSSandboxPhoneNumber",
          "sns:DeleteSMSSandboxPhoneNumber",
          "sns:ListSMSSandboxPhoneNumbers",
          "sns:ListOriginationNumbers",
          "rekognition:DescribeCollection",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "lex:GetBot",
          "lex:GetBuiltinIntent",
          "lex:GetBuiltinIntents",
          "lex:GetBuiltinSlotTypes",
          "cloudformation:GetTemplateSummary",
          "codecommit:GitPull",
          "cloudfront:GetCloudFrontOriginAccessIdentity",
          "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
          "polly:DescribeVoices"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmplifySSMCalls",
        "Effect": "Allow",
        "Action": [
          "ssm:PutParameter",
          "ssm:DeleteParameter",
          "ssm:GetParametersByPath",
          "ssm:GetParameters",
          "ssm:GetParameter",
          "ssm:DeleteParameters"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/amplify/*"
        ]
      },
      {
        "Sid": "GeoPowerUser",
        "Effect": "Allow",
        "Action": [
          "geo:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmplifyEcrSDKCalls",
        "Effect": "Allow",
        "Action": [
          "ecr:DescribeRepositories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmplifyStorageSDKCalls",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:DeleteBucketPolicy",
          "s3:DeleteBucketWebsite",
          "s3:DeleteObject",
          "s3:DeleteObjectVersion",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListBucketVersions",
          "s3:PutBucketAcl",
          "s3:PutBucketCORS",
          "s3:PutBucketNotification",
          "s3:PutBucketPolicy",
          "s3:PutBucketVersioning",
          "s3:PutBucketWebsite",
          "s3:PutEncryptionConfiguration",
          "s3:PutLifecycleConfiguration",
          "s3:PutObject",
          "s3:PutObjectAcl"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmplifySSRCalls",
        "Effect": "Allow",
        "Action": [
          "cloudfront:CreateCloudFrontOriginAccessIdentity",
          "cloudfront:CreateDistribution",
          "cloudfront:CreateInvalidation",
          "cloudfront:GetDistribution",
          "cloudfront:GetDistributionConfig",
          "cloudfront:ListCloudFrontOriginAccessIdentities",
          "cloudfront:ListDistributions",
          "cloudfront:ListDistributionsByLambdaFunction",
          "cloudfront:ListDistributionsByWebACLId",
          "cloudfront:ListFieldLevelEncryptionConfigs",
          "cloudfront:ListFieldLevelEncryptionProfiles",
          "cloudfront:ListInvalidations",
          "cloudfront:ListPublicKeys",
          "cloudfront:ListStreamingDistributions",
          "cloudfront:UpdateDistribution",
          "cloudfront:TagResource",
          "cloudfront:UntagResource",
          "cloudfront:ListTagsForResource",
          "cloudfront:DeleteDistribution",
          "iam:AttachRolePolicy",
          "iam:CreateRole",
          "iam:CreateServiceLinkedRole",
          "iam:GetRole",
          "iam:PutRolePolicy",
          "iam:PassRole",
          "lambda:CreateFunction",
          "lambda:EnableReplication",
          "lambda:DeleteFunction",
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:PublishVersion",
          "lambda:UpdateFunctionCode",
          "lambda:UpdateFunctionConfiguration",
          "lambda:ListTags",
          "lambda:TagResource",
          "lambda:UntagResource",
          "route53:ChangeResourceRecordSets",
          "route53:ListHostedZonesByName",
          "route53:ListResourceRecordSets",
          "s3:CreateBucket",
          "s3:GetAccelerateConfiguration",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutAccelerateConfiguration",
          "s3:PutBucketPolicy",
          "s3:PutObject",
          "s3:PutBucketTagging",
          "s3:GetBucketTagging",
          "lambda:ListEventSourceMappings",
          "lambda:CreateEventSourceMapping",
          "iam:UpdateAssumeRolePolicy",
          "iam:DeleteRolePolicy",
          "sqs:CreateQueue",
          "sqs:DeleteQueue",
          "sqs:GetQueueAttributes",
          "sqs:SetQueueAttributes",
          "amplify:GetApp",
          "amplify:GetBranch",
          "amplify:UpdateApp",
          "amplify:UpdateBranch"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmplifySSRViewLogGroups",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*"
        ]
      },
      {
        "Sid": "AmplifySSRCreateLogGroup",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/amplify/*"
        ]
      },
      {
        "Sid": "AmplifySSRPushLogs",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/amplify/*:log-stream:*"
        ]
      }
    ]
  },
  "AWSServiceRoleForMonitronPolicy": {
    "policy": {
      "PolicyName": "AWSServiceRoleForMonitronPolicy",
      "PolicyId": "ANPAZKAPJZG4NYRIH2RCH",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForMonitronPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants Amazon Monitron permissions to manage AWS resources, including AWS SSO user assignment on your behalf.",
      "CreateDate": "2020-12-02T19:06:08.000Z",
      "UpdateDate": "2022-09-29T20:38:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sso:GetManagedApplicationInstance",
          "sso:GetProfile",
          "sso:ListProfiles",
          "sso:ListProfileAssociations",
          "sso:AssociateProfile",
          "sso:ListDirectoryAssociations",
          "sso-directory:DescribeUsers",
          "sso-directory:SearchUsers"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMonitronFullAccess": {
    "policy": {
      "PolicyName": "AmazonMonitronFullAccess",
      "PolicyId": "ANPAZKAPJZG4MHDVZEITQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonMonitronFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to manage Amazon Monitron",
      "CreateDate": "2020-12-02T22:40:28.000Z",
      "UpdateDate": "2022-06-08T16:27:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "monitron:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:ListKeys",
          "kms:DescribeKey",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSSSOPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "ds:DescribeDirectories",
          "ds:DescribeTrusts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:DescribeStream",
          "kinesis:ListStreams"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:GetLogEvents",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/monitron/*"
        ]
      }
    ]
  },
  "AWSMarketplaceLicenseManagementServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSMarketplaceLicenseManagementServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4DTCV6FSO7",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSMarketplaceLicenseManagementServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by AWS Marketplace for license management.",
      "CreateDate": "2020-12-03T08:33:40.000Z",
      "UpdateDate": "2020-12-03T08:33:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowLicenseManagerActions",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "license-manager:ListReceivedGrants",
          "license-manager:ListDistributedGrants",
          "license-manager:GetGrant",
          "license-manager:CreateGrant",
          "license-manager:CreateGrantVersion",
          "license-manager:DeleteGrant",
          "license-manager:AcceptGrant"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGlueDataBrewServiceRole": {
    "policy": {
      "PolicyName": "AWSGlueDataBrewServiceRole",
      "PolicyId": "ANPAZKAPJZG4HSXDEANHC",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSGlueDataBrewServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permission to glue to perform action on user's glue data catalog, this policy also provides permission to ec2 actions to allow glue to create ENI to connect to resources in the VPC, also allow glue to access registered data in lakeformation and permission to access user's cloudwatch ",
      "CreateDate": "2020-12-04T21:26:50.000Z",
      "UpdateDate": "2024-03-20T23:28:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "GlueDataPermissions",
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabases",
          "glue:GetPartitions",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetConnection"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GluePIIPermissions",
        "Effect": "Allow",
        "Action": [
          "glue:BatchGetCustomEntityTypes",
          "glue:GetCustomEntityType"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3PublicDatasetAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::databrew-public-datasets-*"
        ]
      },
      {
        "Sid": "EC2NetworkingPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeRouteTables",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2DeleteGlueNetworkInterfacePermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2GlueTaggingPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "GlueDatabrewLogGroupPermissions",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws-glue-databrew/*"
        ]
      },
      {
        "Sid": "LakeFormationPermissions",
        "Effect": "Allow",
        "Action": [
          "lakeformation:GetDataAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:databrew!default-*"
        ]
      }
    ]
  },
  "ECRReplicationServiceRolePolicy": {
    "policy": {
      "PolicyName": "ECRReplicationServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NS3XDKIDR",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/ECRReplicationServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by ECR Replication",
      "CreateDate": "2020-12-04T22:11:28.000Z",
      "UpdateDate": "2020-12-04T22:11:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr:CreateRepository",
          "ecr:ReplicateImage"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "IVSRecordToS3": {
    "policy": {
      "PolicyName": "IVSRecordToS3",
      "PolicyId": "ANPAZKAPJZG4M65NGVKOJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/IVSRecordToS3",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Linked Role to perform S3 PutObject to recording IVS live streams",
      "CreateDate": "2020-12-05T00:10:43.000Z",
      "UpdateDate": "2020-12-05T00:10:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::AWSIVS_*/ivs/*"
        ]
      }
    ]
  },
  "AWSSystemsManagerChangeManagementServicePolicy": {
    "policy": {
      "PolicyName": "AWSSystemsManagerChangeManagementServicePolicy",
      "PolicyId": "ANPAZKAPJZG4MZTL6DXTC",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSSystemsManagerChangeManagementServicePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS resources managed or used by the AWS Systems Manager change management framework.",
      "CreateDate": "2020-12-07T22:21:57.000Z",
      "UpdateDate": "2020-12-07T22:21:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:CreateAssociation",
          "ssm:DeleteAssociation",
          "ssm:CreateOpsItem",
          "ssm:GetOpsItem",
          "ssm:UpdateOpsItem",
          "ssm:StartAutomationExecution",
          "ssm:StopAutomationExecution",
          "ssm:GetAutomationExecution",
          "ssm:GetCalendarState",
          "ssm:GetDocument"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sso:ListDirectoryAssociations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sso-directory:DescribeUsers",
          "sso-directory:IsMemberInGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAuditManagerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSAuditManagerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4C5N52UWST",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSAuditManagerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by AWS Audit Manager",
      "CreateDate": "2020-12-08T15:12:12.000Z",
      "UpdateDate": "2023-12-06T20:39:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm:GetAccountConfiguration",
          "acm:ListCertificates",
          "backup:ListRecoveryPointsByResource",
          "bedrock:GetCustomModel",
          "bedrock:GetFoundationModel",
          "bedrock:GetModelCustomizationJob",
          "bedrock:GetModelInvocationLoggingConfiguration",
          "bedrock:ListCustomModels",
          "bedrock:ListFoundationModels",
          "bedrock:ListModelCustomizationJobs",
          "cloudtrail:DescribeTrails",
          "cloudtrail:LookupEvents",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "cognito-idp:DescribeUserPool",
          "config:DescribeConfigRules",
          "config:DescribeDeliveryChannels",
          "config:ListDiscoveredResources",
          "directconnect:DescribeDirectConnectGateways",
          "directconnect:DescribeVirtualGateways",
          "dynamodb:DescribeTable",
          "dynamodb:ListBackups",
          "dynamodb:ListGlobalTables",
          "dynamodb:ListTables",
          "ec2:DescribeAddresses",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeEgressOnlyInternetGateways",
          "ec2:DescribeFlowLogs",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
          "ec2:DescribeLocalGateways",
          "ec2:DescribeLocalGatewayVirtualInterfaces",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeVolumes",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:GetEbsDefaultKmsKeyId",
          "ec2:GetEbsEncryptionByDefault",
          "ecs:DescribeClusters",
          "eks:DescribeAddonVersions",
          "elasticache:DescribeCacheClusters",
          "elasticache:DescribeServiceUpdates",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeFileSystems",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeSslPolicies",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticmapreduce:ListClusters",
          "elasticmapreduce:ListSecurityConfigurations",
          "events:DescribeRule",
          "events:ListConnections",
          "events:ListEventBuses",
          "events:ListEventSources",
          "events:ListRules",
          "firehose:ListDeliveryStreams",
          "fsx:DescribeFileSystems",
          "guardduty:ListDetectors",
          "iam:GenerateCredentialReport",
          "iam:GetAccountAuthorizationDetails",
          "iam:GetAccountPasswordPolicy",
          "iam:GetAccountSummary",
          "iam:GetCredentialReport",
          "iam:ListEntitiesForPolicy",
          "iam:ListGroupPolicies",
          "iam:ListGroups",
          "iam:ListOpenIdConnectProviders",
          "iam:ListPolicies",
          "iam:ListRolePolicies",
          "iam:ListRoles",
          "iam:ListSamlProviders",
          "iam:ListUserPolicies",
          "iam:ListUsers",
          "iam:ListVirtualMFADevices",
          "kafka:ListClusters",
          "kafka:ListKafkaVersions",
          "kinesis:ListStreams",
          "kms:DescribeKey",
          "kms:GetKeyPolicy",
          "kms:GetKeyRotationStatus",
          "kms:ListGrants",
          "kms:ListKeyPolicies",
          "kms:ListKeys",
          "lambda:ListFunctions",
          "license-manager:ListAssociationsForLicenseConfiguration",
          "license-manager:ListLicenseConfigurations",
          "license-manager:ListUsageForLicenseConfiguration",
          "logs:DescribeDestinations",
          "logs:DescribeExportTasks",
          "logs:DescribeLogGroups",
          "logs:DescribeMetricFilters",
          "logs:DescribeResourcePolicies",
          "logs:FilterLogEvents",
          "organizations:DescribeOrganization",
          "organizations:DescribePolicy",
          "rds:DescribeCertificates",
          "rds:DescribeDbClusterEndpoints",
          "rds:DescribeDbClusterParameterGroups",
          "rds:DescribeDbClusters",
          "rds:DescribeDBInstances",
          "rds:DescribeDbSecurityGroups",
          "redshift:DescribeClusters",
          "route53:GetQueryLoggingConfig",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetBucketVersioning",
          "s3:GetEncryptionConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:ListAllMyBuckets",
          "securityhub:DescribeStandards",
          "sns:ListTopics",
          "sqs:ListQueues",
          "waf-regional:GetLoggingConfiguration",
          "waf-regional:ListRuleGroups",
          "waf-regional:ListSubscribedRuleGroups",
          "waf-regional:ListWebACLs",
          "waf:ListActivatedRulesInRuleGroup"
        ],
        "Resource": [
          "*"
        ],
        "Sid": "AuditManagerAPICallAccess"
      },
      {
        "Sid": "AuditManagerS3GetBucketPolicyAccess",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketPolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateEventsAccess",
        "Effect": "Allow",
        "Action": [
          "events:PutRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AuditManagerSecurityHubFindingsReceiver"
        ]
      },
      {
        "Sid": "EventsAccess",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:DescribeRule",
          "events:EnableRule",
          "events:DisableRule",
          "events:ListTargetsByRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AuditManagerSecurityHubFindingsReceiver"
        ]
      }
    ]
  },
  "AmazonSageMakerEdgeDeviceFleetPolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerEdgeDeviceFleetPolicy",
      "PolicyId": "ANPAZKAPJZG4CPENAJLBT",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerEdgeDeviceFleetPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions necessary for SageMaker Edge to create and manage a device fleet for the customer using the default cloud connection.",
      "CreateDate": "2020-12-08T16:17:22.000Z",
      "UpdateDate": "2020-12-08T16:17:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DeviceS3Access",
        "Effect": "Allow",
        "Action": [
          "s3:PutObject",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Sid": "SageMakerEdgeApis",
        "Effect": "Allow",
        "Action": [
          "sagemaker:SendHeartbeat",
          "sagemaker:GetDeviceRegistration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateIoTRoleAlias",
        "Effect": "Allow",
        "Action": [
          "iot:CreateRoleAlias",
          "iot:DescribeRoleAlias",
          "iot:UpdateRoleAlias",
          "iot:ListTagsForResource",
          "iot:TagResource"
        ],
        "Resource": [
          "arn:aws:iot:*:*:rolealias/SageMakerEdge*"
        ]
      },
      {
        "Sid": "CreateIoTRoleAliasIamPermissionsGetRole",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*SageMaker*",
          "arn:aws:iam::*:role/*Sagemaker*",
          "arn:aws:iam::*:role/*sagemaker*"
        ]
      },
      {
        "Sid": "CreateIoTRoleAliasIamPermissionsPassRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*SageMaker*",
          "arn:aws:iam::*:role/*Sagemaker*",
          "arn:aws:iam::*:role/*sagemaker*"
        ]
      }
    ]
  },
  "AmazonEMRContainersServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonEMRContainersServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4P24YZ52G4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonEMRContainersServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows access to other AWS service resources that are required to run Amazon EMR",
      "CreateDate": "2020-12-09T00:38:19.000Z",
      "UpdateDate": "2023-03-10T22:58:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "eks:DescribeCluster",
          "eks:ListNodeGroups",
          "eks:DescribeNodeGroup",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm:ImportCertificate",
          "acm:AddTagsToCertificate"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm:DeleteCertificate"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "EC2InstanceProfileForImageBuilderECRContainerBuilds": {
    "policy": {
      "PolicyName": "EC2InstanceProfileForImageBuilderECRContainerBuilds",
      "PolicyId": "ANPAZKAPJZG4C32QNC6KD",
      "Arn": "arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "EC2 Instance profile for building container images with EC2 Image Builder. This policy grants the user broad permissions to upload ECR images.",
      "CreateDate": "2020-12-11T19:48:15.000Z",
      "UpdateDate": "2020-12-11T19:48:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "imagebuilder:GetComponent",
          "imagebuilder:GetContainerRecipe",
          "ecr:GetAuthorizationToken",
          "ecr:BatchGetImage",
          "ecr:InitiateLayerUpload",
          "ecr:UploadLayerPart",
          "ecr:CompleteLayerUpload",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer",
          "ecr:PutImage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::ec2imagebuilder*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/imagebuilder/*"
        ]
      }
    ]
  },
  "AWSAuditManagerAdministratorAccess": {
    "policy": {
      "PolicyName": "AWSAuditManagerAdministratorAccess",
      "PolicyId": "ANPAZKAPJZG4EBAFCQQJX",
      "Arn": "arn:aws:iam::aws:policy/AWSAuditManagerAdministratorAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrative access to enable or disable AWS Audit Manager, update settings, and manage assessments, controls, and frameworks",
      "CreateDate": "2020-12-11T20:02:42.000Z",
      "UpdateDate": "2022-04-30T00:02:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AuditManagerAccess",
        "Effect": "Allow",
        "Action": [
          "auditmanager:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OrganizationsAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:ListAccountsForParent",
          "organizations:ListAccounts",
          "organizations:DescribeOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribeAccount",
          "organizations:ListParents",
          "organizations:ListChildren"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowOnlyAuditManagerIntegration",
        "Effect": "Allow",
        "Action": [
          "organizations:RegisterDelegatedAdministrator",
          "organizations:DeregisterDelegatedAdministrator",
          "organizations:EnableAWSServiceAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMAccess",
        "Effect": "Allow",
        "Action": [
          "iam:GetUser",
          "iam:ListUsers",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMAccessCreateSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/auditmanager.amazonaws.com/AWSServiceRoleForAuditManager*"
        ]
      },
      {
        "Sid": "IAMAccessManageSLR",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:UpdateRoleDescription",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/auditmanager.amazonaws.com/AWSServiceRoleForAuditManager*"
        ]
      },
      {
        "Sid": "S3Access",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KmsAccess",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListKeys",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KmsCreateGrantAccess",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SNSAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateEventsAccess",
        "Effect": "Allow",
        "Action": [
          "events:PutRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EventsAccess",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:DescribeRule",
          "events:EnableRule",
          "events:DisableRule",
          "events:ListTargetsByRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AuditManagerSecurityHubFindingsReceiver"
        ]
      },
      {
        "Sid": "TagAccess",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSTransferConsoleFullAccess": {
    "policy": {
      "PolicyName": "AWSTransferConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4KYSTLCO3J",
      "Arn": "arn:aws:iam::aws:policy/AWSTransferConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Transfer via the AWS Management Console",
      "CreateDate": "2020-12-14T19:33:25.000Z",
      "UpdateDate": "2020-12-14T19:33:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm:ListCertificates",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcEndpoints",
          "health:DescribeEventAggregates",
          "iam:GetPolicyVersion",
          "iam:ListPolicies",
          "iam:ListRoles",
          "route53:ListHostedZones",
          "s3:ListAllMyBuckets",
          "transfer:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSTransferFullAccess": {
    "policy": {
      "PolicyName": "AWSTransferFullAccess",
      "PolicyId": "ANPAZKAPJZG4KGELFKPYK",
      "Arn": "arn:aws:iam::aws:policy/AWSTransferFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Transfer Service.",
      "CreateDate": "2020-12-14T19:37:23.000Z",
      "UpdateDate": "2020-12-14T19:37:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "transfer:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeAddresses"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTFleetHubFederationAccess": {
    "policy": {
      "PolicyName": "AWSIoTFleetHubFederationAccess",
      "PolicyId": "ANPAZKAPJZG4H4EGQA254",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSIoTFleetHubFederationAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Federation access for IoT Fleet Hub applications",
      "CreateDate": "2020-12-15T08:08:05.000Z",
      "UpdateDate": "2022-04-04T18:03:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:DescribeIndex",
          "iot:DescribeThingGroup",
          "iot:GetBucketsAggregation",
          "iot:GetCardinality",
          "iot:GetIndexingConfiguration",
          "iot:GetPercentiles",
          "iot:GetStatistics",
          "iot:SearchIndex",
          "iot:CreateFleetMetric",
          "iot:ListFleetMetrics",
          "iot:DeleteFleetMetric",
          "iot:DescribeFleetMetric",
          "iot:UpdateFleetMetric",
          "iot:DescribeCustomMetric",
          "iot:ListCustomMetrics",
          "iot:ListDimensions",
          "iot:ListMetricValues",
          "iot:ListThingGroups",
          "iot:ListThingsInThingGroup",
          "iot:ListJobTemplates",
          "iot:DescribeJobTemplate",
          "iot:ListJobs",
          "iot:CreateJob",
          "iot:CancelJob",
          "iot:DescribeJob",
          "iot:ListJobExecutionsForJob",
          "iot:ListJobExecutionsForThing",
          "iot:DescribeJobExecution",
          "iot:ListSecurityProfiles",
          "iot:DescribeSecurityProfile",
          "iot:ListActiveViolations",
          "iot:GetThingShadow",
          "iot:ListNamedShadowsForThing",
          "iot:CancelJobExecution",
          "iot:DescribeEndpoint",
          "iotfleethub:DescribeApplication",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:ListMetrics",
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:DeleteTopic",
          "sns:ListSubscriptionsByTopic",
          "sns:Subscribe",
          "sns:Unsubscribe"
        ],
        "Resource": [
          "arn:aws:sns:*:*:iotfleethub*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarmHistory"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:iotfleethub*"
        ]
      }
    ]
  },
  "AWSIoTWirelessFullAccess": {
    "policy": {
      "PolicyName": "AWSIoTWirelessFullAccess",
      "PolicyId": "ANPAZKAPJZG4L5RZVVSRQ",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTWirelessFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the associated identity full access to all AWS IoT Wireless operations.",
      "CreateDate": "2020-12-15T15:27:57.000Z",
      "UpdateDate": "2020-12-15T15:27:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotwireless:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTWirelessReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSIoTWirelessReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4FJYYSL3ZA",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTWirelessReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the associated identity read only access to AWS IoT wireless.",
      "CreateDate": "2020-12-15T15:28:56.000Z",
      "UpdateDate": "2020-12-15T15:28:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotwireless:List*",
          "iotwireless:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTWirelessFullPublishAccess": {
    "policy": {
      "PolicyName": "AWSIoTWirelessFullPublishAccess",
      "PolicyId": "ANPAZKAPJZG4JSRC2FZ22",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTWirelessFullPublishAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides IoT Wireless full access to publish to IoT Rules Engine on your behalf.",
      "CreateDate": "2020-12-15T15:29:59.000Z",
      "UpdateDate": "2020-12-15T15:29:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iot:DescribeEndpoint",
          "iot:Publish"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTWirelessGatewayCertManager": {
    "policy": {
      "PolicyName": "AWSIoTWirelessGatewayCertManager",
      "PolicyId": "ANPAZKAPJZG4O6BH33Y6U",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTWirelessGatewayCertManager",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the associated identity access to create, list and describe IoT Certificates",
      "CreateDate": "2020-12-15T15:30:48.000Z",
      "UpdateDate": "2020-12-15T15:30:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "IoTWirelessGatewayCertManager",
        "Effect": "Allow",
        "Action": [
          "iot:CreateKeysAndCertificate",
          "iot:DescribeCertificate",
          "iot:ListCertificates"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTWirelessDataAccess": {
    "policy": {
      "PolicyName": "AWSIoTWirelessDataAccess",
      "PolicyId": "ANPAZKAPJZG4HH6GBXNUO",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTWirelessDataAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the associated identity data access to AWS IoT Wireless devices.",
      "CreateDate": "2020-12-15T15:31:39.000Z",
      "UpdateDate": "2020-12-15T15:31:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iotwireless:SendDataToWirelessDevice"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTWirelessLogging": {
    "policy": {
      "PolicyName": "AWSIoTWirelessLogging",
      "PolicyId": "ANPAZKAPJZG4L3X44AIHR",
      "Arn": "arn:aws:iam::aws:policy/AWSIoTWirelessLogging",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the associated identity to create Amazon CloudWatch Logs groups and stream logs to the groups.",
      "CreateDate": "2020-12-15T15:32:40.000Z",
      "UpdateDate": "2020-12-15T15:32:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/iotwireless*"
        ]
      }
    ]
  },
  "AWSCloudShellFullAccess": {
    "policy": {
      "PolicyName": "AWSCloudShellFullAccess",
      "PolicyId": "ANPAZKAPJZG4HEDUXFSA3",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudShellFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants using AWS CloudShell with all features",
      "CreateDate": "2020-12-15T18:07:44.000Z",
      "UpdateDate": "2020-12-15T18:07:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "cloudshell:*"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonPrometheusFullAccess": {
    "policy": {
      "PolicyName": "AmazonPrometheusFullAccess",
      "PolicyId": "ANPAZKAPJZG4POZK2DGLM",
      "Arn": "arn:aws:iam::aws:policy/AmazonPrometheusFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to AWS Managed Prometheus resources",
      "CreateDate": "2020-12-15T18:10:46.000Z",
      "UpdateDate": "2023-11-26T20:16:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllPrometheusActions",
        "Effect": "Allow",
        "Action": [
          "aps:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeCluster",
        "Effect": "Allow",
        "Action": [
          "eks:DescribeCluster",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/scraper.aps.amazonaws.com/AWSServiceRoleForAmazonPrometheusScraper*"
        ]
      }
    ]
  },
  "AmazonPrometheusConsoleFullAccess": {
    "policy": {
      "PolicyName": "AmazonPrometheusConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4P7IR2JZ6H",
      "Arn": "arn:aws:iam::aws:policy/AmazonPrometheusConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to AWS Managed Prometheus resources in the AWS console",
      "CreateDate": "2020-12-15T18:11:10.000Z",
      "UpdateDate": "2022-10-24T22:25:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetTagValues",
          "tag:GetTagKeys"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aps:CreateWorkspace",
          "aps:DescribeWorkspace",
          "aps:UpdateWorkspaceAlias",
          "aps:DeleteWorkspace",
          "aps:ListWorkspaces",
          "aps:DescribeAlertManagerDefinition",
          "aps:DescribeRuleGroupsNamespace",
          "aps:CreateAlertManagerDefinition",
          "aps:CreateRuleGroupsNamespace",
          "aps:DeleteAlertManagerDefinition",
          "aps:DeleteRuleGroupsNamespace",
          "aps:ListRuleGroupsNamespaces",
          "aps:PutAlertManagerDefinition",
          "aps:PutRuleGroupsNamespace",
          "aps:TagResource",
          "aps:UntagResource",
          "aps:CreateLoggingConfiguration",
          "aps:UpdateLoggingConfiguration",
          "aps:DeleteLoggingConfiguration",
          "aps:DescribeLoggingConfiguration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonPrometheusQueryAccess": {
    "policy": {
      "PolicyName": "AmazonPrometheusQueryAccess",
      "PolicyId": "ANPAZKAPJZG4GQ2MT4E46",
      "Arn": "arn:aws:iam::aws:policy/AmazonPrometheusQueryAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants access to run queries against AWS Managed Prometheus resources",
      "CreateDate": "2020-12-19T01:02:58.000Z",
      "UpdateDate": "2020-12-19T01:02:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "aps:GetLabels",
          "aps:GetMetricMetadata",
          "aps:GetSeries",
          "aps:QueryMetrics"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonPrometheusRemoteWriteAccess": {
    "policy": {
      "PolicyName": "AmazonPrometheusRemoteWriteAccess",
      "PolicyId": "ANPAZKAPJZG4JHMXH2L3T",
      "Arn": "arn:aws:iam::aws:policy/AmazonPrometheusRemoteWriteAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants write only access to AWS Managed Prometheus workspaces",
      "CreateDate": "2020-12-19T01:04:32.000Z",
      "UpdateDate": "2020-12-19T01:04:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "aps:RemoteWrite"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerCoreServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerCoreServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4MMWQCSNKX",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonSageMakerCoreServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Managed policy for Service Linked Role for Amazon SageMaker Core Services",
      "CreateDate": "2020-12-21T21:40:47.000Z",
      "UpdateDate": "2020-12-21T21:40:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterfacePermission"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLexV2BotPolicy": {
    "policy": {
      "PolicyName": "AmazonLexV2BotPolicy",
      "PolicyId": "ANPAZKAPJZG4DXFCYFGBA",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexV2BotPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides Lex V2 bots access to call other AWS services on your behalf.",
      "CreateDate": "2021-01-13T20:10:29.000Z",
      "UpdateDate": "2021-01-13T20:10:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "polly:SynthesizeSpeech"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonFISServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonFISServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JLZR2TQJD",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonFISServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable AWS FIS to manage monitoring and resource selection for experiments.",
      "CreateDate": "2020-12-21T21:18:19.000Z",
      "UpdateDate": "2022-10-25T09:05:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EventBridge",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:DeleteRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EventBridgeDescribe",
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Tagging",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeAlarmHistory"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeUserResources",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeSubnets",
          "iam:GetUser",
          "iam:GetRole",
          "iam:ListUsers",
          "iam:ListRoles",
          "rds:DescribeDBClusters",
          "rds:DescribeDBInstances",
          "ecs:DescribeClusters",
          "ecs:DescribeTasks",
          "ecs:ListTasks",
          "eks:DescribeNodegroup",
          "eks:DescribeCluster"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLexChannelsAccess": {
    "policy": {
      "PolicyName": "AmazonLexChannelsAccess",
      "PolicyId": "ANPAZKAPJZG4HVR6S6UVL",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexChannelsAccess",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows customers to call Lex runtime from channels",
      "CreateDate": "2021-01-13T20:12:46.000Z",
      "UpdateDate": "2021-01-13T20:12:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "lex:ListBots"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDirectConnectServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSDirectConnectServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4O7743JCTQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSDirectConnectServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Direct Connect permission to create and manage AWS resources on your behalf.",
      "CreateDate": "2021-01-14T18:35:27.000Z",
      "UpdateDate": "2021-01-14T18:35:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DescribeSecret",
          "secretsmanager:ListSecretVersionIds",
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:*directconnect*"
        ]
      }
    ]
  },
  "AWSOpsWorks_FullAccess": {
    "policy": {
      "PolicyName": "AWSOpsWorks_FullAccess",
      "PolicyId": "ANPAZKAPJZG4D626GOURR",
      "Arn": "arn:aws:iam::aws:policy/AWSOpsWorks_FullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS OpsWorks.",
      "CreateDate": "2021-01-22T16:29:08.000Z",
      "UpdateDate": "2021-01-22T16:29:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInstances",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeLoadBalancers",
          "iam:GetRolePolicy",
          "iam:ListInstanceProfiles",
          "iam:ListRoles",
          "iam:ListUsers",
          "opsworks:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkReadOnly": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkReadOnly",
      "PolicyId": "ANPAZKAPJZG4BYFSOYIWH",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticBeanstalkReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants read-only permissions. Explicitly allows operators to gain direct access to retrieve information about resources related to AWS Elastic Beanstalk applications.",
      "CreateDate": "2021-01-22T19:02:37.000Z",
      "UpdateDate": "2021-01-22T19:02:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowAPIs",
        "Effect": "Allow",
        "Action": [
          "acm:ListCertificates",
          "autoscaling:DescribeAccountLimits",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:DescribePolicies",
          "autoscaling:DescribeLoadBalancers",
          "autoscaling:DescribeNotificationConfigurations",
          "autoscaling:DescribeScalingActivities",
          "autoscaling:DescribeScheduledActions",
          "cloudformation:DescribeStackResource",
          "cloudformation:DescribeStackResources",
          "cloudformation:DescribeStacks",
          "cloudformation:GetTemplate",
          "cloudformation:ListStackResources",
          "cloudformation:ListStacks",
          "cloudformation:ValidateTemplate",
          "cloudtrail:LookupEvents",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeImages",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "elasticbeanstalk:Check*",
          "elasticbeanstalk:Describe*",
          "elasticbeanstalk:List*",
          "elasticbeanstalk:RequestEnvironmentInfo",
          "elasticbeanstalk:RetrieveEnvironmentInfo",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeSSLPolicies",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "iam:GetRole",
          "iam:ListAttachedRolePolicies",
          "iam:ListInstanceProfiles",
          "iam:ListRolePolicies",
          "iam:ListRoles",
          "iam:ListServerCertificates",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeOrderableDBInstanceOptions",
          "rds:DescribeDBSnapshots",
          "s3:ListAllMyBuckets",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics",
          "sqs:ListQueues"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowS3",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectAcl",
          "s3:GetObjectVersion",
          "s3:GetObjectVersionAcl",
          "s3:GetBucketLocation",
          "s3:GetBucketPolicy",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*"
        ]
      }
    ]
  },
  "AdministratorAccess-AWSElasticBeanstalk": {
    "policy": {
      "PolicyName": "AdministratorAccess-AWSElasticBeanstalk",
      "PolicyId": "ANPAZKAPJZG4AX52KWGWY",
      "Arn": "arn:aws:iam::aws:policy/AdministratorAccess-AWSElasticBeanstalk",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants account administrative permissions. Explicitly allows developers and administrators to gain direct access to resources they need to manage AWS Elastic Beanstalk applications",
      "CreateDate": "2021-01-22T19:36:54.000Z",
      "UpdateDate": "2023-03-23T23:45:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm:Describe*",
          "acm:List*",
          "autoscaling:Describe*",
          "cloudformation:Describe*",
          "cloudformation:Estimate*",
          "cloudformation:Get*",
          "cloudformation:List*",
          "cloudformation:Validate*",
          "cloudtrail:LookupEvents",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "codecommit:Get*",
          "codecommit:UploadArchive",
          "ec2:AllocateAddress",
          "ec2:AssociateAddress",
          "ec2:AuthorizeSecurityGroup*",
          "ec2:CreateLaunchTemplate*",
          "ec2:CreateSecurityGroup",
          "ec2:CreateTags",
          "ec2:DeleteLaunchTemplate*",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteTags",
          "ec2:Describe*",
          "ec2:DisassociateAddress",
          "ec2:ReleaseAddress",
          "ec2:RevokeSecurityGroup*",
          "ecs:CreateCluster",
          "ecs:DeRegisterTaskDefinition",
          "ecs:Describe*",
          "ecs:List*",
          "ecs:RegisterTaskDefinition",
          "elasticbeanstalk:*",
          "elasticloadbalancing:Describe*",
          "iam:GetRole",
          "iam:ListAttachedRolePolicies",
          "iam:ListInstanceProfiles",
          "iam:ListRolePolicies",
          "iam:ListRoles",
          "iam:ListServerCertificates",
          "logs:Describe*",
          "rds:Describe*",
          "s3:ListAllMyBuckets",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics",
          "sqs:ListQueues"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "autoscaling:*"
        ],
        "Resource": [
          "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
          "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/eb-*",
          "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*",
          "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/eb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CancelUpdateStack",
          "cloudformation:ContinueUpdateRollback",
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:GetTemplate",
          "cloudformation:ListStackResources",
          "cloudformation:SignalResource",
          "cloudformation:TagResource",
          "cloudformation:UntagResource",
          "cloudformation:UpdateStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awseb-*",
          "arn:aws:cloudformation:*:*:stack/eb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DeleteAlarms",
          "cloudwatch:PutMetricAlarm"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:awseb-*",
          "arn:aws:cloudwatch:*:*:alarm:eb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codebuild:BatchGetBuilds",
          "codebuild:CreateProject",
          "codebuild:DeleteProject",
          "codebuild:StartBuild"
        ],
        "Resource": [
          "arn:aws:codebuild:*:*:project/Elastic-Beanstalk-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:CreateTable",
          "dynamodb:DeleteTable",
          "dynamodb:DescribeTable",
          "dynamodb:TagResource"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/awseb-e-*",
          "arn:aws:dynamodb:*:*:table/eb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RebootInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecs:DeleteCluster"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:cluster/awseb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:*Rule",
          "elasticloadbalancing:*Tags",
          "elasticloadbalancing:SetRulePriorities",
          "elasticloadbalancing:SetSecurityGroups"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
          "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
          "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:*"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:targetgroup/eb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/eb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/awseb-*/*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/eb-*/*",
          "arn:aws:elasticloadbalancing:*:*:listener/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:listener/eb-*",
          "arn:aws:elasticloadbalancing:*:*:listener/*/awseb-*/*/*",
          "arn:aws:elasticloadbalancing:*:*:listener/*/eb-*/*/*",
          "arn:aws:elasticloadbalancing:*:*:listener-rule/app/awseb-*/*/*/*",
          "arn:aws:elasticloadbalancing:*:*:listener-rule/app/eb-*/*/*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:AddRoleToInstanceProfile",
          "iam:CreateInstanceProfile",
          "iam:CreateRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-elasticbeanstalk*",
          "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:AttachRolePolicy"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-elasticbeanstalk*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*",
          "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*",
          "arn:aws:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing*",
          "arn:aws:iam::*:role/aws-service-role/managedupdates.elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*",
          "arn:aws:iam::*:role/aws-service-role/maintenance.elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:DeleteLogGroup",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rds:*DBSubnetGroup",
          "rds:AuthorizeDBSecurityGroupIngress",
          "rds:CreateDBInstance",
          "rds:CreateDBSecurityGroup",
          "rds:DeleteDBInstance",
          "rds:DeleteDBSecurityGroup",
          "rds:ModifyDBInstance",
          "rds:RestoreDBInstanceFromDBSnapshot"
        ],
        "Resource": [
          "arn:aws:rds:*:*:db:*",
          "arn:aws:rds:*:*:secgrp:awseb-e-*",
          "arn:aws:rds:*:*:secgrp:eb-*",
          "arn:aws:rds:*:*:snapshot:*",
          "arn:aws:rds:*:*:subgrp:awseb-e-*",
          "arn:aws:rds:*:*:subgrp:eb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:Delete*",
          "s3:Get*",
          "s3:Put*"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:GetBucket*",
          "s3:ListBucket",
          "s3:PutBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:DeleteTopic",
          "sns:GetTopicAttributes",
          "sns:Publish",
          "sns:SetTopicAttributes",
          "sns:Subscribe",
          "sns:Unsubscribe"
        ],
        "Resource": [
          "arn:aws:sns:*:*:ElasticBeanstalkNotifications-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:*QueueAttributes",
          "sqs:CreateQueue",
          "sqs:DeleteQueue",
          "sqs:SendMessage",
          "sqs:TagQueue"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:awseb-e-*",
          "arn:aws:sqs:*:*:eb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkMailMessageFlowReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonWorkMailMessageFlowReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4M6UETQLYG",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkMailMessageFlowReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Read only access to WorkMail messages for the GetRawMessageContent API",
      "CreateDate": "2021-01-28T12:40:08.000Z",
      "UpdateDate": "2021-01-28T12:40:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "workmailmessageflow:Get*"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      }
    ]
  },
  "AmazonCodeGuruProfilerAgentAccess": {
    "policy": {
      "PolicyName": "AmazonCodeGuruProfilerAgentAccess",
      "PolicyId": "ANPAZKAPJZG4NJEGTVMFC",
      "Arn": "arn:aws:iam::aws:policy/AmazonCodeGuruProfilerAgentAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access required by Amazon CodeGuru Profiler agent.",
      "CreateDate": "2021-02-05T22:11:56.000Z",
      "UpdateDate": "2022-05-05T18:11:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codeguru-profiler:ConfigureAgent",
          "codeguru-profiler:CreateProfilingGroup",
          "codeguru-profiler:PostAgentProfile"
        ],
        "Resource": [
          "arn:aws:codeguru-profiler:*:*:profilingGroup/*"
        ]
      }
    ]
  },
  "AmazonWorkMailMessageFlowFullAccess": {
    "policy": {
      "PolicyName": "AmazonWorkMailMessageFlowFullAccess",
      "PolicyId": "ANPAZKAPJZG4ORQUVJL66",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkMailMessageFlowFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Full access to the WorkMail Message Flow APIs",
      "CreateDate": "2021-02-11T11:08:35.000Z",
      "UpdateDate": "2021-02-11T11:08:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "workmailmessageflow:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEventBridgeApiDestinationsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonEventBridgeApiDestinationsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GHQV22EVJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonEventBridgeApiDestinationsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows EventBridge to access Secret Manager resources on your behalf.",
      "CreateDate": "2021-02-11T20:52:05.000Z",
      "UpdateDate": "2021-02-11T20:52:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:DescribeSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:PutSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:events!connection/*"
        ]
      }
    ]
  },
  "AmazonHealthLakeFullAccess": {
    "policy": {
      "PolicyName": "AmazonHealthLakeFullAccess",
      "PolicyId": "ANPAZKAPJZG4OMJS7NARX",
      "Arn": "arn:aws:iam::aws:policy/AmazonHealthLakeFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon HealthLake service.",
      "CreateDate": "2021-02-17T01:07:05.000Z",
      "UpdateDate": "2021-02-17T01:07:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "healthlake:*",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ],
        "Effect": "Allow"
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonHealthLakeReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonHealthLakeReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4MIFB6JFLV",
      "Arn": "arn:aws:iam::aws:policy/AmazonHealthLakeReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon HealthLake service.",
      "CreateDate": "2021-02-17T02:43:31.000Z",
      "UpdateDate": "2021-02-17T02:43:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "healthlake:ListFHIRDatastores",
          "healthlake:DescribeFHIRDatastore",
          "healthlake:DescribeFHIRImportJob",
          "healthlake:DescribeFHIRExportJob",
          "healthlake:GetCapabilities",
          "healthlake:ReadResource",
          "healthlake:SearchWithGet",
          "healthlake:SearchWithPost"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSProtonDeveloperAccess": {
    "policy": {
      "PolicyName": "AWSProtonDeveloperAccess",
      "PolicyId": "ANPAZKAPJZG4FWOFPRNSU",
      "Arn": "arn:aws:iam::aws:policy/AWSProtonDeveloperAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to the AWS Proton APIs and Management Console, but does not allow administration of Proton templates or environments.",
      "CreateDate": "2021-02-17T19:02:08.000Z",
      "UpdateDate": "2022-11-18T18:35:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codecommit:ListRepositories",
          "codepipeline:GetPipeline",
          "codepipeline:GetPipelineExecution",
          "codepipeline:GetPipelineState",
          "codepipeline:ListPipelineExecutions",
          "codepipeline:ListPipelines",
          "codestar-connections:ListConnections",
          "codestar-connections:UseConnection",
          "proton:CancelServiceInstanceDeployment",
          "proton:CancelServicePipelineDeployment",
          "proton:CreateService",
          "proton:DeleteService",
          "proton:GetAccountRoles",
          "proton:GetAccountSettings",
          "proton:GetEnvironment",
          "proton:GetEnvironmentAccountConnection",
          "proton:GetEnvironmentTemplate",
          "proton:GetEnvironmentTemplateMajorVersion",
          "proton:GetEnvironmentTemplateMinorVersion",
          "proton:GetEnvironmentTemplateVersion",
          "proton:GetRepository",
          "proton:GetRepositorySyncStatus",
          "proton:GetResourcesSummary",
          "proton:GetService",
          "proton:GetServiceInstance",
          "proton:GetServiceTemplate",
          "proton:GetServiceTemplateMajorVersion",
          "proton:GetServiceTemplateMinorVersion",
          "proton:GetServiceTemplateVersion",
          "proton:GetTemplateSyncConfig",
          "proton:GetTemplateSyncStatus",
          "proton:ListEnvironmentAccountConnections",
          "proton:ListEnvironmentOutputs",
          "proton:ListEnvironmentProvisionedResources",
          "proton:ListEnvironments",
          "proton:ListEnvironmentTemplateMajorVersions",
          "proton:ListEnvironmentTemplateMinorVersions",
          "proton:ListEnvironmentTemplates",
          "proton:ListEnvironmentTemplateVersions",
          "proton:ListRepositories",
          "proton:ListRepositorySyncDefinitions",
          "proton:ListServiceInstanceOutputs",
          "proton:ListServiceInstanceProvisionedResources",
          "proton:ListServiceInstances",
          "proton:ListServicePipelineOutputs",
          "proton:ListServicePipelineProvisionedResources",
          "proton:ListServices",
          "proton:ListServiceTemplateMajorVersions",
          "proton:ListServiceTemplateMinorVersions",
          "proton:ListServiceTemplates",
          "proton:ListServiceTemplateVersions",
          "proton:ListTagsForResource",
          "proton:UpdateService",
          "proton:UpdateServiceInstance",
          "proton:UpdateServicePipeline",
          "s3:ListAllMyBuckets",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codestar-connections:PassConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      }
    ]
  },
  "AWSStorageGatewayServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSStorageGatewayServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4E4ZEKWU2U",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSStorageGatewayServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service-linked role used by AWS Storage Gateway to enable integration of other AWS services with Storage Gateway.",
      "CreateDate": "2021-02-17T19:03:19.000Z",
      "UpdateDate": "2021-02-17T19:03:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "fsx:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:backup/*"
        ]
      }
    ]
  },
  "AWSProtonFullAccess": {
    "policy": {
      "PolicyName": "AWSProtonFullAccess",
      "PolicyId": "ANPAZKAPJZG4IOK6P734E",
      "Arn": "arn:aws:iam::aws:policy/AWSProtonFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the AWS Proton APIs and Management Console. In addition to these permissions, access to Amazon S3 is also needed to register template bundles from your S3 buckets, as well as access to Amazon IAM to create and manage the service roles for Proton.",
      "CreateDate": "2021-02-17T19:07:18.000Z",
      "UpdateDate": "2022-06-20T12:36:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "proton:*",
          "codestar-connections:ListConnections",
          "kms:ListAliases",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/sync.proton.amazonaws.com/AWSServiceRoleForProtonSync"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codestar-connections:PassConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      }
    ]
  },
  "AWSProtonReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSProtonReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4DW2EHEZB3",
      "Arn": "arn:aws:iam::aws:policy/AWSProtonReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to the AWS Proton APIs and Management Console.",
      "CreateDate": "2021-02-17T19:09:12.000Z",
      "UpdateDate": "2022-11-18T18:28:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codepipeline:ListPipelineExecutions",
          "codepipeline:ListPipelines",
          "codepipeline:GetPipeline",
          "codepipeline:GetPipelineState",
          "codepipeline:GetPipelineExecution",
          "proton:GetAccountRoles",
          "proton:GetAccountSettings",
          "proton:GetEnvironment",
          "proton:GetEnvironmentAccountConnection",
          "proton:GetEnvironmentTemplate",
          "proton:GetEnvironmentTemplateMajorVersion",
          "proton:GetEnvironmentTemplateMinorVersion",
          "proton:GetEnvironmentTemplateVersion",
          "proton:GetRepository",
          "proton:GetRepositorySyncStatus",
          "proton:GetResourcesSummary",
          "proton:GetService",
          "proton:GetServiceInstance",
          "proton:GetServiceTemplate",
          "proton:GetServiceTemplateMajorVersion",
          "proton:GetServiceTemplateMinorVersion",
          "proton:GetServiceTemplateVersion",
          "proton:GetTemplateSyncConfig",
          "proton:GetTemplateSyncStatus",
          "proton:ListEnvironmentAccountConnections",
          "proton:ListEnvironmentOutputs",
          "proton:ListEnvironmentProvisionedResources",
          "proton:ListEnvironments",
          "proton:ListEnvironmentTemplateMajorVersions",
          "proton:ListEnvironmentTemplateMinorVersions",
          "proton:ListEnvironmentTemplates",
          "proton:ListEnvironmentTemplateVersions",
          "proton:ListRepositories",
          "proton:ListRepositorySyncDefinitions",
          "proton:ListServiceInstanceOutputs",
          "proton:ListServiceInstanceProvisionedResources",
          "proton:ListServiceInstances",
          "proton:ListServicePipelineOutputs",
          "proton:ListServicePipelineProvisionedResources",
          "proton:ListServices",
          "proton:ListServiceTemplateMajorVersions",
          "proton:ListServiceTemplateMinorVersions",
          "proton:ListServiceTemplates",
          "proton:ListServiceTemplateVersions",
          "proton:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGrafanaConsoleReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSGrafanaConsoleReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4OHSWBMKNF",
      "Arn": "arn:aws:iam::aws:policy/AWSGrafanaConsoleReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Access to read only operations in Amazon Grafana.",
      "CreateDate": "2021-02-23T00:10:40.000Z",
      "UpdateDate": "2022-02-15T22:30:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSGrafanaConsoleReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "grafana:Describe*",
          "grafana:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGrafanaWorkspacePermissionManagement": {
    "policy": {
      "PolicyName": "AWSGrafanaWorkspacePermissionManagement",
      "PolicyId": "ANPAZKAPJZG4G37QQNGZW",
      "Arn": "arn:aws:iam::aws:policy/AWSGrafanaWorkspacePermissionManagement",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides only the ability to update user and group permissions for AWS Grafana workspaces.",
      "CreateDate": "2021-02-23T00:15:54.000Z",
      "UpdateDate": "2023-03-15T22:17:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSGrafanaPermissions",
        "Effect": "Allow",
        "Action": [
          "grafana:DescribeWorkspace",
          "grafana:DescribeWorkspaceAuthentication",
          "grafana:UpdatePermissions",
          "grafana:ListPermissions",
          "grafana:ListWorkspaces"
        ],
        "Resource": [
          "arn:aws:grafana:*:*:/workspaces*"
        ]
      },
      {
        "Sid": "IAMIdentityCenterPermissions",
        "Effect": "Allow",
        "Action": [
          "sso:DescribeRegisteredRegions",
          "sso:GetSharedSsoConfiguration",
          "sso:ListDirectoryAssociations",
          "sso:GetManagedApplicationInstance",
          "sso:ListProfiles",
          "sso:AssociateProfile",
          "sso:DisassociateProfile",
          "sso:GetProfile",
          "sso:ListProfileAssociations",
          "sso-directory:DescribeUser",
          "sso-directory:DescribeGroup"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGrafanaAccountAdministrator": {
    "policy": {
      "PolicyName": "AWSGrafanaAccountAdministrator",
      "PolicyId": "ANPAZKAPJZG4KHVCM25DH",
      "Arn": "arn:aws:iam::aws:policy/AWSGrafanaAccountAdministrator",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access within Amazon Grafana to create and manage workspaces for the entire organization.",
      "CreateDate": "2021-02-23T00:20:38.000Z",
      "UpdateDate": "2022-02-15T22:36:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSGrafanaOrganizationAdmin",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GrafanaIAMGetRolePermission",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "AWSGrafanaPermissions",
        "Effect": "Allow",
        "Action": [
          "grafana:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GrafanaIAMPassRolePermission",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy": {
    "policy": {
      "PolicyName": "AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy",
      "PolicyId": "ANPAZKAPJZG4AKB7QD2CZ",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is for the AWS Elastic Beanstalk service role used to perform managed updates of Elastic Beanstalk environments. This policy should not be attached to other users or roles. The policy grants broad permissions to create and manage resources across a number of AWS services including AutoScaling, EC2, ECS, Elastic Load Balancing and CloudFormation.  This policy also allows passing of any IAM role usable with those services.",
      "CreateDate": "2021-03-03T22:18:00.000Z",
      "UpdateDate": "2023-03-23T23:15:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ElasticBeanstalkPermissions",
        "Effect": "Allow",
        "Action": [
          "elasticbeanstalk:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowPassRoleToElasticBeanstalkAndDownstreamServices",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "ReadOnlyPermissions",
        "Effect": "Allow",
        "Action": [
          "autoscaling:DescribeAccountLimits",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:DescribeLoadBalancers",
          "autoscaling:DescribeNotificationConfigurations",
          "autoscaling:DescribeScalingActivities",
          "autoscaling:DescribeScheduledActions",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstances",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcClassicLink",
          "ec2:DescribeVpcs",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "logs:DescribeLogGroups",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeOrderableDBInstanceOptions",
          "sns:ListSubscriptionsByTopic"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2BroadOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress",
          "ec2:AssociateAddress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateLaunchTemplate",
          "ec2:CreateLaunchTemplateVersion",
          "ec2:CreateSecurityGroup",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteLaunchTemplateVersions",
          "ec2:DeleteSecurityGroup",
          "ec2:DisassociateAddress",
          "ec2:ReleaseAddress",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2RunInstancesOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2TerminateInstancesOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ECSBroadOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "ecs:CreateCluster",
          "ecs:DescribeClusters",
          "ecs:RegisterTaskDefinition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ECSDeleteClusterOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "ecs:DeleteCluster"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:cluster/awseb-*"
        ]
      },
      {
        "Sid": "ASGOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "autoscaling:AttachInstances",
          "autoscaling:CreateAutoScalingGroup",
          "autoscaling:CreateLaunchConfiguration",
          "autoscaling:CreateOrUpdateTags",
          "autoscaling:DeleteLaunchConfiguration",
          "autoscaling:DeleteAutoScalingGroup",
          "autoscaling:DeleteScheduledAction",
          "autoscaling:DetachInstances",
          "autoscaling:DeletePolicy",
          "autoscaling:PutScalingPolicy",
          "autoscaling:PutScheduledUpdateGroupAction",
          "autoscaling:PutNotificationConfiguration",
          "autoscaling:ResumeProcesses",
          "autoscaling:SetDesiredCapacity",
          "autoscaling:SuspendProcesses",
          "autoscaling:TerminateInstanceInAutoScalingGroup",
          "autoscaling:UpdateAutoScalingGroup"
        ],
        "Resource": [
          "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
          "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/eb-*",
          "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*",
          "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/eb-*"
        ]
      },
      {
        "Sid": "CFNOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudformation:*"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/awseb-*",
          "arn:aws:cloudformation:*:*:stack/eb-*"
        ]
      },
      {
        "Sid": "ELBOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
          "elasticloadbalancing:ConfigureHealthCheck",
          "elasticloadbalancing:CreateLoadBalancer",
          "elasticloadbalancing:DeleteLoadBalancer",
          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
          "elasticloadbalancing:DeregisterTargets",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
          "elasticloadbalancing:RegisterTargets"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:targetgroup/eb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/eb-*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/awseb-*/*",
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/eb-*/*"
        ]
      },
      {
        "Sid": "CWLogsOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:DeleteLogGroup",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
        ]
      },
      {
        "Sid": "S3ObjectOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:GetObjectAcl",
          "s3:GetObjectVersion",
          "s3:GetObjectVersionAcl",
          "s3:PutObject",
          "s3:PutObjectAcl",
          "s3:PutObjectVersionAcl"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*/*"
        ]
      },
      {
        "Sid": "S3BucketOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:GetBucketPolicy",
          "s3:ListBucket",
          "s3:PutBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::elasticbeanstalk-*"
        ]
      },
      {
        "Sid": "SNSOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:GetTopicAttributes",
          "sns:SetTopicAttributes",
          "sns:Subscribe"
        ],
        "Resource": [
          "arn:aws:sns:*:*:ElasticBeanstalkNotifications-*"
        ]
      },
      {
        "Sid": "SQSOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:awseb-e-*",
          "arn:aws:sqs:*:*:eb-*"
        ]
      },
      {
        "Sid": "CWPutMetricAlarmOperationPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:awseb-*",
          "arn:aws:cloudwatch:*:*:alarm:eb-*"
        ]
      },
      {
        "Sid": "AllowECSTagResource",
        "Effect": "Allow",
        "Action": [
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "BatchServiceRolePolicy": {
    "policy": {
      "PolicyName": "BatchServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4COHHXEWBT",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/BatchServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access for the AWS Batch service to manage the required resources, including Amazon EC2 and Amazon ECS resources.",
      "CreateDate": "2021-03-10T06:55:36.000Z",
      "UpdateDate": "2023-12-05T22:52:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSBatchPolicyStatement1",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeImages",
          "ec2:DescribeImageAttribute",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeSpotFleetInstances",
          "ec2:DescribeSpotFleetRequests",
          "ec2:DescribeSpotPriceHistory",
          "ec2:DescribeSpotFleetRequestHistory",
          "ec2:DescribeVpcClassicLink",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:RequestSpotFleet",
          "autoscaling:DescribeAccountLimits",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeScalingActivities",
          "eks:DescribeCluster",
          "ecs:DescribeClusters",
          "ecs:DescribeContainerInstances",
          "ecs:DescribeTaskDefinition",
          "ecs:DescribeTasks",
          "ecs:ListClusters",
          "ecs:ListContainerInstances",
          "ecs:ListTaskDefinitionFamilies",
          "ecs:ListTaskDefinitions",
          "ecs:ListTasks",
          "ecs:DeregisterTaskDefinition",
          "ecs:TagResource",
          "ecs:ListAccountSettings",
          "logs:DescribeLogGroups",
          "iam:GetInstanceProfile",
          "iam:GetRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement2",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/batch/job*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement3",
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/batch/job*:log-stream:*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement4",
        "Effect": "Allow",
        "Action": [
          "autoscaling:CreateOrUpdateTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement5",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement6",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement7",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplate"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement8",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances",
          "ec2:CancelSpotFleetRequests",
          "ec2:ModifySpotFleetRequest",
          "ec2:DeleteLaunchTemplate"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement9",
        "Effect": "Allow",
        "Action": [
          "autoscaling:CreateLaunchConfiguration",
          "autoscaling:DeleteLaunchConfiguration"
        ],
        "Resource": [
          "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/AWSBatch*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement10",
        "Effect": "Allow",
        "Action": [
          "autoscaling:CreateAutoScalingGroup",
          "autoscaling:UpdateAutoScalingGroup",
          "autoscaling:SetDesiredCapacity",
          "autoscaling:DeleteAutoScalingGroup",
          "autoscaling:SuspendProcesses",
          "autoscaling:PutNotificationConfiguration",
          "autoscaling:TerminateInstanceInAutoScalingGroup"
        ],
        "Resource": [
          "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/AWSBatch*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement11",
        "Effect": "Allow",
        "Action": [
          "ecs:DeleteCluster",
          "ecs:DeregisterContainerInstance",
          "ecs:RunTask",
          "ecs:StartTask",
          "ecs:StopTask"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:cluster/AWSBatch*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement12",
        "Effect": "Allow",
        "Action": [
          "ecs:RunTask",
          "ecs:StartTask",
          "ecs:StopTask"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:task-definition/*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement13",
        "Effect": "Allow",
        "Action": [
          "ecs:StopTask"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:task/*/*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement14",
        "Effect": "Allow",
        "Action": [
          "ecs:CreateCluster",
          "ecs:RegisterTaskDefinition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement15",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*::snapshot/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:key-pair/*",
          "arn:aws:ec2:*:*:launch-template/*",
          "arn:aws:ec2:*:*:placement-group/*",
          "arn:aws:ec2:*:*:capacity-reservation/*",
          "arn:aws:ec2:*:*:elastic-gpu/*",
          "arn:aws:elastic-inference:*:*:elastic-inference-accelerator/*",
          "arn:aws:resource-groups:*:*:group/*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement16",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "AWSBatchPolicyStatement17",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEMRServicePolicy_v2": {
    "policy": {
      "PolicyName": "AmazonEMRServicePolicy_v2",
      "PolicyId": "ANPAZKAPJZG4M2DU3H3GW",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEMRServicePolicy_v2",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is used for the Amazon EMR Service Role and should NOT be used for any other IAM users or roles in your account. The policy grants permissions to create and manage resources associated with EMR and related services necessary for the operation of your EMR cluster.",
      "CreateDate": "2021-03-12T01:11:08.000Z",
      "UpdateDate": "2022-02-15T16:48:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CreateInTaggedNetwork",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:RunInstances",
          "ec2:CreateFleet",
          "ec2:CreateLaunchTemplate",
          "ec2:CreateLaunchTemplateVersion"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "CreateWithEMRTaggedLaunchTemplate",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateFleet",
          "ec2:RunInstances",
          "ec2:CreateLaunchTemplateVersion"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "CreateEMRTaggedLaunchTemplate",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplate"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "CreateEMRTaggedInstancesAndVolumes",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances",
          "ec2:CreateFleet"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ResourcesToLaunchEC2",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances",
          "ec2:CreateFleet",
          "ec2:CreateLaunchTemplate",
          "ec2:CreateLaunchTemplateVersion"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*::image/ami-*",
          "arn:aws:ec2:*:*:key-pair/*",
          "arn:aws:ec2:*:*:capacity-reservation/*",
          "arn:aws:ec2:*:*:placement-group/EMR_*",
          "arn:aws:ec2:*:*:fleet/*",
          "arn:aws:ec2:*:*:dedicated-host/*",
          "arn:aws:resource-groups:*:*:group/*"
        ]
      },
      {
        "Sid": "ManageEMRTaggedResources",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplateVersion",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteNetworkInterface",
          "ec2:ModifyInstanceAttribute",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManageTagsOnEMRTaggedResources",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "CreateNetworkInterfaceNeededForPrivateSubnet",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "TagOnCreateTaggedEMRResources",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "TagPlacementGroups",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:placement-group/EMR_*"
        ]
      },
      {
        "Sid": "ListActionsForEC2Resources",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeCapacityReservations",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVolumes",
          "ec2:DescribeVolumeStatus",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateDefaultSecurityGroupWithEMRTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "CreateDefaultSecurityGroupInVPCWithEMRTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "TagOnCreateDefaultSecurityGroupWithEMRTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "ManageSecurityGroups",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateEMRPlacementGroups",
        "Effect": "Allow",
        "Action": [
          "ec2:CreatePlacementGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:placement-group/EMR_*"
        ]
      },
      {
        "Sid": "DeletePlacementGroups",
        "Effect": "Allow",
        "Action": [
          "ec2:DeletePlacementGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AutoScaling",
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:RegisterScalableTarget"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ResourceGroupsForCapacityReservations",
        "Effect": "Allow",
        "Action": [
          "resource-groups:ListGroupResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AutoScalingCloudWatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:*_EMR_Auto_Scaling"
        ]
      },
      {
        "Sid": "PassRoleForAutoScaling",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/EMR_AutoScaling_DefaultRole"
        ]
      },
      {
        "Sid": "PassRoleForEC2",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/EMR_EC2_DefaultRole"
        ]
      }
    ]
  },
  "AmazonEMRReadOnlyAccessPolicy_v2": {
    "policy": {
      "PolicyName": "AmazonEMRReadOnlyAccessPolicy_v2",
      "PolicyId": "ANPAZKAPJZG4GDFTJ74PD",
      "Arn": "arn:aws:iam::aws:policy/AmazonEMRReadOnlyAccessPolicy_v2",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon EMR and the associated CloudWatch Metrics.",
      "CreateDate": "2021-03-12T01:39:16.000Z",
      "UpdateDate": "2023-08-02T19:15:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ElasticMapReduceActions",
        "Effect": "Allow",
        "Action": [
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:DescribeEditor",
          "elasticmapreduce:DescribeJobFlows",
          "elasticmapreduce:DescribeSecurityConfiguration",
          "elasticmapreduce:DescribeStep",
          "elasticmapreduce:DescribeReleaseLabel",
          "elasticmapreduce:GetBlockPublicAccessConfiguration",
          "elasticmapreduce:GetManagedScalingPolicy",
          "elasticmapreduce:GetAutoTerminationPolicy",
          "elasticmapreduce:ListBootstrapActions",
          "elasticmapreduce:ListClusters",
          "elasticmapreduce:ListEditors",
          "elasticmapreduce:ListInstanceFleets",
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ListInstances",
          "elasticmapreduce:ListSecurityConfigurations",
          "elasticmapreduce:ListSteps",
          "elasticmapreduce:ListSupportedInstanceTypes",
          "elasticmapreduce:ViewEventsFromAllClustersInConsole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ViewMetricsInEMRConsole",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEMRFullAccessPolicy_v2": {
    "policy": {
      "PolicyName": "AmazonEMRFullAccessPolicy_v2",
      "PolicyId": "ANPAZKAPJZG4BK4MMWW4W",
      "Arn": "arn:aws:iam::aws:policy/AmazonEMRFullAccessPolicy_v2",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon EMR",
      "CreateDate": "2021-03-12T01:50:29.000Z",
      "UpdateDate": "2023-07-28T14:04:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "RunJobFlowExplicitlyWithEMRManagedTag",
        "Effect": "Allow",
        "Action": [
          "elasticmapreduce:RunJobFlow"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ElasticMapReduceActions",
        "Effect": "Allow",
        "Action": [
          "elasticmapreduce:AddInstanceFleet",
          "elasticmapreduce:AddInstanceGroups",
          "elasticmapreduce:AddJobFlowSteps",
          "elasticmapreduce:AddTags",
          "elasticmapreduce:CancelSteps",
          "elasticmapreduce:CreateEditor",
          "elasticmapreduce:CreateSecurityConfiguration",
          "elasticmapreduce:DeleteEditor",
          "elasticmapreduce:DeleteSecurityConfiguration",
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:DescribeEditor",
          "elasticmapreduce:DescribeJobFlows",
          "elasticmapreduce:DescribeSecurityConfiguration",
          "elasticmapreduce:DescribeStep",
          "elasticmapreduce:DescribeReleaseLabel",
          "elasticmapreduce:GetBlockPublicAccessConfiguration",
          "elasticmapreduce:GetManagedScalingPolicy",
          "elasticmapreduce:GetAutoTerminationPolicy",
          "elasticmapreduce:ListBootstrapActions",
          "elasticmapreduce:ListClusters",
          "elasticmapreduce:ListEditors",
          "elasticmapreduce:ListInstanceFleets",
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ListInstances",
          "elasticmapreduce:ListSecurityConfigurations",
          "elasticmapreduce:ListSteps",
          "elasticmapreduce:ListSupportedInstanceTypes",
          "elasticmapreduce:ModifyCluster",
          "elasticmapreduce:ModifyInstanceFleet",
          "elasticmapreduce:ModifyInstanceGroups",
          "elasticmapreduce:OpenEditorInConsole",
          "elasticmapreduce:PutAutoScalingPolicy",
          "elasticmapreduce:PutBlockPublicAccessConfiguration",
          "elasticmapreduce:PutManagedScalingPolicy",
          "elasticmapreduce:RemoveAutoScalingPolicy",
          "elasticmapreduce:RemoveManagedScalingPolicy",
          "elasticmapreduce:RemoveTags",
          "elasticmapreduce:SetTerminationProtection",
          "elasticmapreduce:StartEditor",
          "elasticmapreduce:StopEditor",
          "elasticmapreduce:TerminateJobFlows",
          "elasticmapreduce:ViewEventsFromAllClustersInConsole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ViewMetricsInEMRConsole",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PassRoleForElasticMapReduce",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/EMR_DefaultRole_V2"
        ]
      },
      {
        "Sid": "PassRoleForEC2",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/EMR_EC2_DefaultRole"
        ]
      },
      {
        "Sid": "PassRoleForAutoScaling",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/EMR_AutoScaling_DefaultRole"
        ]
      },
      {
        "Sid": "ElasticMapReduceServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/elasticmapreduce.amazonaws.com*/AWSServiceRoleForEMRCleanup*"
        ]
      },
      {
        "Sid": "ConsoleUIActions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeNatGateways",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcEndpoints",
          "s3:ListAllMyBuckets",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSecurityHubOrganizationsAccess": {
    "policy": {
      "PolicyName": "AWSSecurityHubOrganizationsAccess",
      "PolicyId": "ANPAZKAPJZG4KVIUTRVOZ",
      "Arn": "arn:aws:iam::aws:policy/AWSSecurityHubOrganizationsAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permission to enable and manage AWS Security Hub within an organization. Includes enabling the service across the organization, and determining the delegated administrator account for the service.",
      "CreateDate": "2021-03-15T20:53:03.000Z",
      "UpdateDate": "2023-11-16T21:13:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "OrganizationPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:ListAccounts",
          "organizations:DescribeOrganization",
          "organizations:ListRoots",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListAccountsForParent",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganizationalUnit"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OrganizationPermissionsEnable",
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OrganizationPermissionsDelegatedAdmin",
        "Effect": "Allow",
        "Action": [
          "organizations:RegisterDelegatedAdministrator",
          "organizations:DeregisterDelegatedAdministrator"
        ],
        "Resource": [
          "arn:aws:organizations::*:account/o-*/*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LGJRHTEPG",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationMigrationServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS application Migration Service to create and manage AWS resources on your behalf.",
      "CreateDate": "2021-04-07T06:43:20.000Z",
      "UpdateDate": "2023-06-20T09:12:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgn:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:ListRetirableGrants"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgh:AssociateCreatedArtifact",
          "mgh:CreateProgressUpdateStream",
          "mgh:DisassociateCreatedArtifact",
          "mgh:GetHomeRegion",
          "mgh:ImportMigrationTask",
          "mgh:NotifyMigrationTaskState",
          "mgh:PutResourceAttributes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeVolumes",
          "ec2:GetEbsDefaultKmsKeyId",
          "ec2:GetEbsEncryptionByDefault"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount"
        ],
        "Resource": [
          "arn:aws:organizations::*:account/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListAccounts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RegisterImage",
          "ec2:DeregisterImage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplateVersion",
          "ec2:ModifyLaunchTemplate",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteLaunchTemplateVersions"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:ModifyInstanceAttribute",
          "ec2:GetConsoleOutput",
          "ec2:GetConsoleScreenshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RevokeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplate"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume",
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSApplicationMigrationReplicationServerRole",
          "arn:aws:iam::*:role/service-role/AWSApplicationMigrationConversionServerRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationConversionServerPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationConversionServerPolicy",
      "PolicyId": "ANPAZKAPJZG4OPUSQRTYL",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSApplicationMigrationConversionServerPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows the Application Migration Service (MGN) Conversion Server, which are EC2 instances launched by Application Migration Service, to communicate with the MGN service. An IAM role with this policy is attached (as an EC2 Instance Profile) by MGN to the MGN Conversion Servers, which are automatically launched and terminated by MGN, when needed. We do not recommend that you attach this policy to your IAM users or roles. MGN Conversion Servers are used by Application Migration Service when users choose to launch Test or Cutover instances using the MGN console, CLI, or API.",
      "CreateDate": "2021-04-07T06:48:58.000Z",
      "UpdateDate": "2021-04-07T06:48:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgn:SendClientMetricsForMgn",
          "mgn:SendClientLogsForMgn",
          "mgn:GetChannelCommandsForMgn",
          "mgn:SendChannelCommandResultForMgn"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationFullAccess": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationFullAccess",
      "PolicyId": "ANPAZKAPJZG4HPQNMM2HL",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationMigrationFullAccess",
      "Path": "/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides permissions to all public APIs of AWS Application Migration Service (MGN), as well as permissions to read KMS key information. Attach this policy to your IAM users or roles.",
      "CreateDate": "2021-04-07T06:56:05.000Z",
      "UpdateDate": "2023-04-20T17:28:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgn:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:ListAliases",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeKeyPairs",
          "ec2:DescribeTags",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstanceTypeOfferings",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeVolumes",
          "ec2:GetEbsEncryptionByDefault",
          "ec2:GetEbsDefaultKmsKeyId"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "license-manager:ListLicenseConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListInstanceProfiles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSApplicationMigrationLaunchInstanceWithSsmRole",
          "arn:aws:iam::*:role/service-role/AWSApplicationMigrationLaunchInstanceWithDrsRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "drs:DescribeSourceServers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:ListCommandInvocations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeInstanceInformation",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeDocument",
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWSDisasterRecovery-InstallDRAgentOnInstance",
          "arn:aws:ssm:*:*:document/AWSMigration-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "drs:DisconnectSourceServer"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameter",
          "ssm:PutParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/ManagedByAWSApplicationMigrationService-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicequotas:GetServiceQuota"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-execution/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetDocument"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWSDisasterRecovery-InstallDRAgentOnInstance",
          "arn:aws:ssm:*:*:document/AWSMigration-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameters"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/ManagedByAWSApplicationMigrationService-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-definition/AWSMigration-*:$DEFAULT"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:ListCommands"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationAgentPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationAgentPolicy",
      "PolicyId": "ANPAZKAPJZG4D2GD5QYXR",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationMigrationAgentPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows installing and using the AWS Replication Agent, which is used with AWS Application Migration Service (MGN) to migrate external servers to AWS. Attach this policy to your IAM users or roles whose credentials you provide when installing the AWS Replication Agent.",
      "CreateDate": "2021-04-07T07:00:21.000Z",
      "UpdateDate": "2022-09-20T11:13:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgn:SendAgentMetricsForMgn",
          "mgn:SendAgentLogsForMgn",
          "mgn:SendClientMetricsForMgn",
          "mgn:SendClientLogsForMgn"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgn:RegisterAgentForMgn",
          "mgn:UpdateAgentSourcePropertiesForMgn",
          "mgn:UpdateAgentReplicationInfoForMgn",
          "mgn:UpdateAgentConversionInfoForMgn",
          "mgn:GetAgentInstallationAssetsForMgn",
          "mgn:GetAgentCommandForMgn",
          "mgn:GetAgentConfirmedResumeInfoForMgn",
          "mgn:GetAgentRuntimeConfigurationForMgn",
          "mgn:UpdateAgentBacklogForMgn",
          "mgn:GetAgentReplicationInfoForMgn"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgn:TagResource"
        ],
        "Resource": [
          "arn:aws:mgn:*:*:source-server/*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationEC2Access": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationEC2Access",
      "PolicyId": "ANPAZKAPJZG4OBKWG2D2O",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationMigrationEC2Access",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides Amazon EC2 operations required to use Application Migration Service (MGN) to launch the migrated servers as EC2 instances. Attach this policy to your IAM users or roles.",
      "CreateDate": "2021-04-07T07:05:22.000Z",
      "UpdateDate": "2023-02-06T16:07:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSApplicationMigrationConversionServerRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSnapshots",
          "ec2:DescribeImages",
          "ec2:DescribeVolumes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplateVersion",
          "ec2:ModifyLaunchTemplate",
          "ec2:DeleteLaunchTemplateVersions"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplate"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteLaunchTemplate"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:ModifyInstanceAttribute",
          "ec2:GetConsoleOutput",
          "ec2:GetConsoleScreenshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RevokeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume",
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:ModifyVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationMGHAccess": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationMGHAccess",
      "PolicyId": "ANPAZKAPJZG4KOE4CJMGD",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSApplicationMigrationMGHAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows AWS Application Migration Service (MGN) to send meta-data about the progress of servers being migrated using MGN to AWS Migration Hub (MGH). MGN automatically creates an IAM role with this policy attached, and assumes this role. We do not recommend that you attach this policy to your IAM users or roles.",
      "CreateDate": "2021-04-07T07:10:01.000Z",
      "UpdateDate": "2021-04-07T07:10:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgh:AssociateCreatedArtifact",
          "mgh:CreateProgressUpdateStream",
          "mgh:DisassociateCreatedArtifact",
          "mgh:GetHomeRegion",
          "mgh:ImportMigrationTask",
          "mgh:NotifyMigrationTaskState",
          "mgh:PutResourceAttributes"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4M2IUSVNLL",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationMigrationReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides permissions to all read-only public APIs of Application Migration Service (MGN), as well as some read-only APIs of other AWS services that are required in order to make full read-only use of the MGN console. Attach this policy to your IAM users or roles.",
      "CreateDate": "2021-04-07T07:15:26.000Z",
      "UpdateDate": "2023-03-20T08:58:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgn:DescribeJobLogItems",
          "mgn:DescribeJobs",
          "mgn:DescribeSourceServers",
          "mgn:DescribeReplicationConfigurationTemplates",
          "mgn:GetLaunchConfiguration",
          "mgn:DescribeVcenterClients",
          "mgn:GetReplicationConfiguration",
          "mgn:DescribeLaunchConfigurationTemplates",
          "mgn:ListSourceServerActions",
          "mgn:ListTemplateActions",
          "mgn:ListApplications",
          "mgn:ListWaves",
          "mgn:ListExports",
          "mgn:ListImports",
          "mgn:ListImportErrors",
          "mgn:ListExportErrors"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicequotas:GetServiceQuota"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationReplicationServerPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationReplicationServerPolicy",
      "PolicyId": "ANPAZKAPJZG4PXFWAA3SE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSApplicationMigrationReplicationServerPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows the Application Migration Service (MGN) Replication Servers, which are EC2 instances launched by Application Migration Service - to communicate with the MGN service, and to create EBS snapshots in your AWS account. An IAM role with this policy is attached (as an EC2 Instance Profile) by Application Migration Service to the MGN Replication Servers which are automatically launched and terminated by MGN, as needed. MGN Replication Servers are used to facilitate data replication from your external servers to AWS, as part of the migration process managed using MGN. We do not recommend that you attach this policy to your IAM users or roles.",
      "CreateDate": "2021-04-07T07:21:57.000Z",
      "UpdateDate": "2021-04-07T07:21:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgn:SendClientMetricsForMgn",
          "mgn:SendClientLogsForMgn",
          "mgn:GetChannelCommandsForMgn",
          "mgn:SendChannelCommandResultForMgn",
          "mgn:GetAgentSnapshotCreditsForMgn",
          "mgn:DescribeReplicationServerAssociationsForMgn",
          "mgn:DescribeSnapshotRequestsForMgn",
          "mgn:BatchDeleteSnapshotRequestForMgn",
          "mgn:NotifyAgentAuthenticationForMgn",
          "mgn:BatchCreateVolumeSnapshotGroupForMgn",
          "mgn:UpdateAgentReplicationProcessStateForMgn",
          "mgn:NotifyAgentReplicationProgressForMgn",
          "mgn:NotifyAgentConnectedForMgn",
          "mgn:NotifyAgentDisconnectedForMgn"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCompromisedKeyQuarantineV2": {
    "policy": {
      "PolicyName": "AWSCompromisedKeyQuarantineV2",
      "PolicyId": "ANPAZKAPJZG4PFYMROIMI",
      "Arn": "arn:aws:iam::aws:policy/AWSCompromisedKeyQuarantineV2",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Denies access to certain actions, applied by the AWS team in the event that an IAM user's credentials have been compromised or exposed publicly. Do NOT remove this policy. Instead, please follow the instructions specified in the support case created for you regarding this event.",
      "CreateDate": "2021-04-21T22:30:59.000Z",
      "UpdateDate": "2023-03-16T00:20:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Deny",
        "Action": [
          "cloudtrail:LookupEvents",
          "ec2:RequestSpotInstances",
          "ec2:RunInstances",
          "ec2:StartInstances",
          "iam:AddUserToGroup",
          "iam:AttachGroupPolicy",
          "iam:AttachRolePolicy",
          "iam:AttachUserPolicy",
          "iam:ChangePassword",
          "iam:CreateAccessKey",
          "iam:CreateInstanceProfile",
          "iam:CreateLoginProfile",
          "iam:CreatePolicyVersion",
          "iam:CreateRole",
          "iam:CreateUser",
          "iam:DetachUserPolicy",
          "iam:PassRole",
          "iam:PutGroupPolicy",
          "iam:PutRolePolicy",
          "iam:PutUserPermissionsBoundary",
          "iam:PutUserPolicy",
          "iam:SetDefaultPolicyVersion",
          "iam:UpdateAccessKey",
          "iam:UpdateAccountPasswordPolicy",
          "iam:UpdateAssumeRolePolicy",
          "iam:UpdateLoginProfile",
          "iam:UpdateUser",
          "lambda:AddLayerVersionPermission",
          "lambda:AddPermission",
          "lambda:CreateFunction",
          "lambda:GetPolicy",
          "lambda:ListTags",
          "lambda:PutProvisionedConcurrencyConfig",
          "lambda:TagResource",
          "lambda:UntagResource",
          "lambda:UpdateFunctionCode",
          "lightsail:Create*",
          "lightsail:Delete*",
          "lightsail:DownloadDefaultKeyPair",
          "lightsail:GetInstanceAccessDetails",
          "lightsail:Start*",
          "lightsail:Update*",
          "organizations:CreateAccount",
          "organizations:CreateOrganization",
          "organizations:InviteAccountToOrganization",
          "s3:DeleteBucket",
          "s3:DeleteObject",
          "s3:DeleteObjectVersion",
          "s3:PutLifecycleConfiguration",
          "s3:PutBucketAcl",
          "s3:PutBucketOwnershipControls",
          "s3:DeleteBucketPolicy",
          "s3:ObjectOwnerOverrideToBucketOwner",
          "s3:PutAccountPublicAccessBlock",
          "s3:PutBucketPolicy",
          "s3:ListAllMyBuckets",
          "ec2:PurchaseReservedInstancesOffering",
          "ec2:AcceptReservedInstancesExchangeQuote",
          "ec2:CreateReservedInstancesListing",
          "savingsplans:CreateSavingsPlan"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSystemsManagerOpsDataSyncServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSSystemsManagerOpsDataSyncServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FUXS4O2QJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSSystemsManagerOpsDataSyncServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "IAM role for SSM Explorer to manage OpsData related operations",
      "CreateDate": "2021-04-26T20:42:39.000Z",
      "UpdateDate": "2023-06-28T22:53:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetOpsItem",
          "ssm:UpdateOpsItem"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:CreateOpsItem"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:opsitem/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:UpdateServiceSetting",
          "ssm:GetServiceSetting"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/*",
          "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "securityhub:GetFindings",
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "securityhub:BatchUpdateFindings"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLookoutEquipmentFullAccess": {
    "policy": {
      "PolicyName": "AmazonLookoutEquipmentFullAccess",
      "PolicyId": "ANPAZKAPJZG4KPPCPGNJA",
      "Arn": "arn:aws:iam::aws:policy/AmazonLookoutEquipmentFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Lookout for Equipment operations",
      "CreateDate": "2021-04-08T15:52:08.000Z",
      "UpdateDate": "2021-11-24T21:00:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lookoutequipment:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCloudWatchAlarms_ActionSSMIncidentsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSCloudWatchAlarms_ActionSSMIncidentsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JS7SI2RZY",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSCloudWatchAlarms_ActionSSMIncidentsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is used by the service-linked role named AWSServiceRoleForCloudWatchAlarms_ActionSSMIncidents. CloudWatch uses this service-linked role to perform AWS System Manager Incident Manager actions when a CloudWatch alarm goes in to ALARM state. This policy grants permission to start incidents on your behalf.",
      "CreateDate": "2021-04-27T13:30:52.000Z",
      "UpdateDate": "2021-04-27T13:30:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "StartIncidentPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-incidents:StartIncident"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonNimbleStudio-LaunchProfileWorker": {
    "policy": {
      "PolicyName": "AmazonNimbleStudio-LaunchProfileWorker",
      "PolicyId": "ANPAZKAPJZG4G3GPJQ7LQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonNimbleStudio-LaunchProfileWorker",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants access to resources needed by Nimble Studio Launch Profile workers. Attach this policy to EC2 instances created by Nimble Studio Builder.",
      "CreateDate": "2021-04-28T04:47:02.000Z",
      "UpdateDate": "2021-04-28T04:47:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "fsx:DescribeFileSystems",
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ],
        "Sid": "GetLaunchProfileInitializationDependencies"
      }
    ]
  },
  "AmazonNimbleStudio-StudioAdmin": {
    "policy": {
      "PolicyName": "AmazonNimbleStudio-StudioAdmin",
      "PolicyId": "ANPAZKAPJZG4PTQDL2ND4",
      "Arn": "arn:aws:iam::aws:policy/AmazonNimbleStudio-StudioAdmin",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants access to Amazon Nimble Studio resources associated with the studio admin and related studio resources in other services. Attach this policy to the Admin role associated with your studio.",
      "CreateDate": "2021-04-28T04:47:36.000Z",
      "UpdateDate": "2023-09-22T17:40:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "StudioAdminFullAccess",
        "Effect": "Allow",
        "Action": [
          "nimble:CreateStreamingSession",
          "nimble:GetStreamingSession",
          "nimble:StartStreamingSession",
          "nimble:StopStreamingSession",
          "nimble:CreateStreamingSessionStream",
          "nimble:GetStreamingSessionStream",
          "nimble:DeleteStreamingSession",
          "nimble:ListStreamingSessionBackups",
          "nimble:GetStreamingSessionBackup",
          "nimble:ListEulas",
          "nimble:ListEulaAcceptances",
          "nimble:GetEula",
          "nimble:AcceptEulas",
          "nimble:ListStudioMembers",
          "nimble:GetStudioMember",
          "nimble:ListStreamingSessions",
          "nimble:GetStreamingImage",
          "nimble:ListStreamingImages",
          "nimble:GetLaunchProfileInitialization",
          "nimble:GetLaunchProfileDetails",
          "nimble:GetFeatureMap",
          "nimble:PutStudioLogEvents",
          "nimble:ListLaunchProfiles",
          "nimble:GetLaunchProfile",
          "nimble:GetLaunchProfileMember",
          "nimble:ListLaunchProfileMembers",
          "nimble:PutLaunchProfileMembers",
          "nimble:UpdateLaunchProfileMember",
          "nimble:DeleteLaunchProfileMember"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sso-directory:DescribeUsers",
          "sso-directory:SearchUsers",
          "identitystore:DescribeUser",
          "identitystore:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ds:CreateComputer",
          "ds:DescribeDirectories",
          "ec2:DescribeSubnets",
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DescribeSecurityGroups",
          "fsx:DescribeFileSystems"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonNimbleStudio-StudioUser": {
    "policy": {
      "PolicyName": "AmazonNimbleStudio-StudioUser",
      "PolicyId": "ANPAZKAPJZG4CA37MTXJV",
      "Arn": "arn:aws:iam::aws:policy/AmazonNimbleStudio-StudioUser",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants access to Amazon Nimble Studio resources associated with the studio user and related studio resources in other services. Attach this policy to the User role associated with your studio.",
      "CreateDate": "2021-04-28T04:48:11.000Z",
      "UpdateDate": "2023-09-22T17:45:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ds:CreateComputer",
          "ec2:DescribeSubnets",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:CreateNetworkInterface",
          "ec2:DescribeSecurityGroups",
          "fsx:DescribeFileSystems",
          "ds:DescribeDirectories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sso-directory:DescribeUsers",
          "sso-directory:SearchUsers",
          "identitystore:DescribeUser",
          "identitystore:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "nimble:ListLaunchProfiles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "nimble:ListStudioMembers",
          "nimble:GetStudioMember",
          "nimble:ListEulas",
          "nimble:ListEulaAcceptances",
          "nimble:GetFeatureMap",
          "nimble:PutStudioLogEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "nimble:DeleteStreamingSession",
          "nimble:GetStreamingSession",
          "nimble:StartStreamingSession",
          "nimble:StopStreamingSession",
          "nimble:CreateStreamingSessionStream",
          "nimble:GetStreamingSessionStream",
          "nimble:ListStreamingSessions",
          "nimble:ListStreamingSessionBackups",
          "nimble:GetStreamingSessionBackup"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLookoutEquipmentReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonLookoutEquipmentReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4DNIMPJYBT",
      "Arn": "arn:aws:iam::aws:policy/AmazonLookoutEquipmentReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Lookout for Equipments",
      "CreateDate": "2021-05-05T16:47:55.000Z",
      "UpdateDate": "2022-11-10T22:04:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lookoutequipment:Describe*",
          "lookoutequipment:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLookoutMetricsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonLookoutMetricsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4MP33SLV3F",
      "Arn": "arn:aws:iam::aws:policy/AmazonLookoutMetricsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Gives access to all read-only actions for Amazon Lookout for Metrics",
      "CreateDate": "2021-05-07T00:43:34.000Z",
      "UpdateDate": "2022-01-04T18:19:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lookoutmetrics:DescribeMetricSet",
          "lookoutmetrics:ListMetricSets",
          "lookoutmetrics:DescribeAnomalyDetector",
          "lookoutmetrics:ListAnomalyDetectors",
          "lookoutmetrics:DescribeAnomalyDetectionExecutions",
          "lookoutmetrics:DescribeAlert",
          "lookoutmetrics:ListAlerts",
          "lookoutmetrics:ListTagsForResource",
          "lookoutmetrics:ListAnomalyGroupSummaries",
          "lookoutmetrics:ListAnomalyGroupTimeSeries",
          "lookoutmetrics:ListAnomalyGroupRelatedMetrics",
          "lookoutmetrics:GetAnomalyGroup",
          "lookoutmetrics:GetDataQualityMetrics",
          "lookoutmetrics:GetSampleData",
          "lookoutmetrics:GetFeedback"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLookoutMetricsFullAccess": {
    "policy": {
      "PolicyName": "AmazonLookoutMetricsFullAccess",
      "PolicyId": "ANPAZKAPJZG4CYQN5ZMMA",
      "Arn": "arn:aws:iam::aws:policy/AmazonLookoutMetricsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Gives access to all actions for Amazon Lookout for Metrics",
      "CreateDate": "2021-05-07T00:43:38.000Z",
      "UpdateDate": "2021-05-07T00:43:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lookoutmetrics:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*LookoutMetrics*"
        ]
      }
    ]
  },
  "AWSIncidentManagerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSIncidentManagerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4INCMTEIEV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSIncidentManagerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants Incident Manager permission to manage incident records and related resources on your behalf.",
      "CreateDate": "2021-05-10T03:34:45.000Z",
      "UpdateDate": "2022-12-05T02:11:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "UpdateIncidentRecordPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-incidents:ListIncidentRecords",
          "ssm-incidents:CreateTimelineEvent"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RelatedOpsItemPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:CreateOpsItem",
          "ssm:AssociateOpsItemRelatedItem"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IncidentEngagementPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-contacts:StartEngagement"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PutMetricDataPermission",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIncidentManagerResolverAccess": {
    "policy": {
      "PolicyName": "AWSIncidentManagerResolverAccess",
      "PolicyId": "ANPAZKAPJZG4EQ4SDPENY",
      "Arn": "arn:aws:iam::aws:policy/AWSIncidentManagerResolverAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions to start, view, and update incidents with full access to custom timeline events & related items. Assign this policy to users who will create and resolve incidents.",
      "CreateDate": "2021-05-10T06:12:34.000Z",
      "UpdateDate": "2021-05-10T06:12:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "StartIncidentPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-incidents:StartIncident"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ResponsePlanReadOnlyPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-incidents:ListResponsePlans",
          "ssm-incidents:GetResponsePlan"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IncidentRecordResolverPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm-incidents:ListIncidentRecords",
          "ssm-incidents:GetIncidentRecord",
          "ssm-incidents:UpdateIncidentRecord",
          "ssm-incidents:ListTimelineEvents",
          "ssm-incidents:CreateTimelineEvent",
          "ssm-incidents:GetTimelineEvent",
          "ssm-incidents:UpdateTimelineEvent",
          "ssm-incidents:DeleteTimelineEvent",
          "ssm-incidents:ListRelatedItems",
          "ssm-incidents:UpdateRelatedItems"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLookoutVisionReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonLookoutVisionReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4OJEEMR6Q3",
      "Arn": "arn:aws:iam::aws:policy/AmazonLookoutVisionReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Lookout for Vision and scoped access to required dependencies.",
      "CreateDate": "2021-05-11T19:11:07.000Z",
      "UpdateDate": "2021-12-09T03:01:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "LookoutVisionReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "lookoutvision:DescribeDataset",
          "lookoutvision:DescribeModel",
          "lookoutvision:DescribeProject",
          "lookoutvision:DescribeModelPackagingJob",
          "lookoutvision:ListDatasetEntries",
          "lookoutvision:ListModels",
          "lookoutvision:ListProjects",
          "lookoutvision:ListTagsForResource",
          "lookoutvision:ListModelPackagingJobs"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLookoutVisionFullAccess": {
    "policy": {
      "PolicyName": "AmazonLookoutVisionFullAccess",
      "PolicyId": "ANPAZKAPJZG4CMORWIX77",
      "Arn": "arn:aws:iam::aws:policy/AmazonLookoutVisionFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Lookout for Vision and scoped access to required dependencies.",
      "CreateDate": "2021-05-11T19:24:54.000Z",
      "UpdateDate": "2021-05-11T19:24:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "LookoutVisionFullAccess",
        "Effect": "Allow",
        "Action": [
          "lookoutvision:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLookoutVisionConsoleReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonLookoutVisionConsoleReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4CE2DP5IDX",
      "Arn": "arn:aws:iam::aws:policy/AmazonLookoutVisionConsoleReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Lookout for Vision and scoped access to required service and console dependencies.",
      "CreateDate": "2021-05-11T19:32:02.000Z",
      "UpdateDate": "2021-12-09T02:46:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "LookoutVisionReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "lookoutvision:DescribeDataset",
          "lookoutvision:DescribeModel",
          "lookoutvision:DescribeProject",
          "lookoutvision:DescribeTrialDetection",
          "lookoutvision:DescribeModelPackagingJob",
          "lookoutvision:ListDatasetEntries",
          "lookoutvision:ListModels",
          "lookoutvision:ListProjects",
          "lookoutvision:ListTagsForResource",
          "lookoutvision:ListTrialDetections",
          "lookoutvision:ListModelPackagingJobs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleS3BucketSearchAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleS3ObjectReadAccess",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "arn:aws:s3:::lookoutvision-*/*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleDashboardAccess",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLookoutVisionConsoleFullAccess": {
    "policy": {
      "PolicyName": "AmazonLookoutVisionConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4NJJ7RFZ5A",
      "Arn": "arn:aws:iam::aws:policy/AmazonLookoutVisionConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Lookout for Vision and scoped access to required service and console dependencies.",
      "CreateDate": "2021-05-11T19:37:17.000Z",
      "UpdateDate": "2021-05-11T19:37:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "LookoutVisionFullAccess",
        "Effect": "Allow",
        "Action": [
          "lookoutvision:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleS3BucketSearchAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleS3BucketFirstUseSetupAccess",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:PutBucketVersioning",
          "s3:PutLifecycleConfiguration",
          "s3:PutEncryptionConfiguration",
          "s3:PutBucketPublicAccessBlock"
        ],
        "Resource": [
          "arn:aws:s3:::lookoutvision-*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleS3BucketAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "s3:GetBucketVersioning"
        ],
        "Resource": [
          "arn:aws:s3:::lookoutvision-*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleS3ObjectAccess",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject",
          "s3:AbortMultipartUpload",
          "s3:ListMultipartUploadParts"
        ],
        "Resource": [
          "arn:aws:s3:::lookoutvision-*/*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleDatasetLabelingToolsAccess",
        "Effect": "Allow",
        "Action": [
          "groundtruthlabeling:RunGenerateManifestByCrawlingJob",
          "groundtruthlabeling:AssociatePatchToManifestJob",
          "groundtruthlabeling:DescribeConsoleJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleDashboardAccess",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleTagSelectorAccess",
        "Effect": "Allow",
        "Action": [
          "tag:GetTagKeys",
          "tag:GetTagValues"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LookoutVisionConsoleKmsKeySelectorAccess",
        "Effect": "Allow",
        "Action": [
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AppRunnerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AppRunnerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FKEGI2QN2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AppRunnerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS AppRunner to manage related AWS resources on your behalf.",
      "CreateDate": "2021-05-14T19:15:04.000Z",
      "UpdateDate": "2021-05-14T19:15:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Action": [
          "logs:CreateLogGroup",
          "logs:PutRetentionPolicy"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/apprunner/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/apprunner/*:log-stream:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:PutTargets",
          "events:DeleteRule",
          "events:RemoveTargets",
          "events:DescribeRule",
          "events:EnableRule",
          "events:DisableRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AWSAppRunnerManagedRule*"
        ]
      }
    ]
  },
  "AWSAppRunnerServicePolicyForECRAccess": {
    "policy": {
      "PolicyName": "AWSAppRunnerServicePolicyForECRAccess",
      "PolicyId": "ANPAZKAPJZG4LYM3IT6IY",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS App Runner service policy that grants read permissions to Amazon ECR resources in the customer's account. Use it in a role that is passed to App Runner when creating or updating an App Runner service.",
      "CreateDate": "2021-05-14T19:17:21.000Z",
      "UpdateDate": "2021-05-14T19:17:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetDownloadUrlForLayer",
          "ecr:BatchGetImage",
          "ecr:DescribeImages",
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceCatalogAppRegistryServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSServiceCatalogAppRegistryServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4H3V4QGJFH",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceCatalogAppRegistryServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Service Catalog AppRegistry to manage Resource Groups on your behalf",
      "CreateDate": "2021-05-18T22:18:55.000Z",
      "UpdateDate": "2022-10-26T16:05:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:CreateGroup",
          "resource-groups:Tag"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:DeleteGroup",
          "resource-groups:UpdateGroup",
          "resource-groups:GetTags",
          "resource-groups:Tag",
          "resource-groups:Untag"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:GetGroup",
          "resource-groups:GetGroupConfiguration"
        ],
        "Resource": [
          "arn:*:resource-groups:*:*:group/AWS_AppRegistry*",
          "arn:*:resource-groups:*:*:group/AWS_CloudFormation_Stack*"
        ]
      }
    ]
  },
  "AWSDeviceFarmTestGridServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSDeviceFarmTestGridServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4KOLIVAOCV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSDeviceFarmTestGridServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grant permissions to AWS Device Farm to call EC2 APIs on your behalf.",
      "CreateDate": "2021-05-26T22:01:35.000Z",
      "UpdateDate": "2021-05-26T22:01:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      }
    ]
  },
  "AWSKeyManagementServiceMultiRegionKeysServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSKeyManagementServiceMultiRegionKeysServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4P3NRAIDRH",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSKeyManagementServiceMultiRegionKeysServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables AWS KMS to synchronize the shared properties of multi-Region keys.",
      "CreateDate": "2021-06-16T15:37:37.000Z",
      "UpdateDate": "2021-06-16T15:37:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kms:SynchronizeMultiRegionKey"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSSMOpsInsightsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSSSMOpsInsightsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4ITJH2GWAW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSSSMOpsInsightsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for Service Linked Role AWSServiceRoleForAmazonSSM_OpsInsights",
      "CreateDate": "2021-06-16T20:12:52.000Z",
      "UpdateDate": "2021-06-16T20:12:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowCreateOpsItem",
        "Effect": "Allow",
        "Action": [
          "ssm:CreateOpsItem",
          "ssm:AddTagsToResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowAccessOpsItem",
        "Effect": "Allow",
        "Action": [
          "ssm:UpdateOpsItem",
          "ssm:GetOpsItem"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBugBustServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSBugBustServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LXHZTN64K",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSBugBustServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to AWS BugBust to access resources on your behalf",
      "CreateDate": "2021-06-24T06:59:05.000Z",
      "UpdateDate": "2021-06-24T06:59:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codeguru-reviewer:ListRecommendations",
          "codeguru-reviewer:UntagResource",
          "codeguru-reviewer:DescribeCodeReview"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBugBustFullAccess": {
    "policy": {
      "PolicyName": "AWSBugBustFullAccess",
      "PolicyId": "ANPAZKAPJZG4MQU5DXLFC",
      "Arn": "arn:aws:iam::aws:policy/AWSBugBustFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This IAM policy grants users full access to the AWS BugBust console",
      "CreateDate": "2021-06-24T07:03:26.000Z",
      "UpdateDate": "2021-07-22T20:04:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CodeGuruReviewerPermission",
        "Effect": "Allow",
        "Action": [
          "codeguru-reviewer:DescribeCodeReview",
          "codeguru-reviewer:ListRecommendations",
          "codeguru-reviewer:ListCodeReviews"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeGuruProfilerPermission",
        "Effect": "Allow",
        "Action": [
          "codeguru-profiler:ListProfilingGroups",
          "codeguru-profiler:DescribeProfilingGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBugBustFullAccess",
        "Effect": "Allow",
        "Action": [
          "bugbust:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBugBustSLRCreation",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/bugbust.amazonaws.com/AWSServiceRoleForBugBust"
        ]
      }
    ]
  },
  "AWSBugBustPlayerAccess": {
    "policy": {
      "PolicyName": "AWSBugBustPlayerAccess",
      "PolicyId": "ANPAZKAPJZG4CPEJPLKKR",
      "Arn": "arn:aws:iam::aws:policy/AWSBugBustPlayerAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This IAM policy grants users access to participate in AWS BugBust events",
      "CreateDate": "2021-06-24T07:15:00.000Z",
      "UpdateDate": "2021-06-24T07:15:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CodeGuruReviewerPermission",
        "Effect": "Allow",
        "Action": [
          "codeguru-reviewer:DescribeCodeReview",
          "codeguru-reviewer:ListRecommendations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeGuruProfilerPermission",
        "Effect": "Allow",
        "Action": [
          "codeguru-profiler:DescribeProfilingGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSBugBustPlayerAccess",
        "Effect": "Allow",
        "Action": [
          "bugbust:ListBugs",
          "bugbust:ListProfilingGroups",
          "bugbust:JoinEvent",
          "bugbust:GetEvent",
          "bugbust:ListEvents",
          "bugbust:GetJoinEventStatus",
          "bugbust:ListEventScores",
          "bugbust:ListEventParticipants",
          "bugbust:UpdateWorkItem",
          "bugbust:ListPullRequests"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "Route53RecoveryReadinessServiceRolePolicy": {
    "policy": {
      "PolicyName": "Route53RecoveryReadinessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4J7MSL2FYD",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/Route53RecoveryReadinessServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service Linked Role Policy for Route 53 Recovery Readiness",
      "CreateDate": "2021-07-15T16:06:21.000Z",
      "UpdateDate": "2023-02-14T18:08:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:DescribeReservedCapacity",
          "dynamodb:DescribeReservedCapacityOfferings"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:DescribeTable",
          "dynamodb:DescribeTimeToLive"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/servicequotas.amazonaws.com/AWSServiceRoleForServiceQuotas"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:GetFunctionConcurrency",
          "lambda:GetFunctionConfiguration",
          "lambda:GetProvisionedConcurrencyConfig",
          "lambda:ListProvisionedConcurrencyConfigs",
          "lambda:ListAliases",
          "lambda:ListVersionsByFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBClusters"
        ],
        "Resource": [
          "arn:aws:rds:*:*:cluster:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances"
        ],
        "Resource": [
          "arn:aws:rds:*:*:db:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53:ListResourceRecordSets"
        ],
        "Resource": [
          "arn:aws:route53:::hostedzone/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53:GetHealthCheck",
          "route53:GetHealthCheckStatus"
        ],
        "Resource": [
          "arn:aws:route53:::healthcheck/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicequotas:RequestServiceQuotaIncrease"
        ],
        "Resource": [
          "arn:aws:servicequotas:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:GetTopicAttributes",
          "sns:ListSubscriptionsByTopic"
        ],
        "Resource": [
          "arn:aws:sns:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:GET",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingPolicies",
          "autoscaling:DescribeAccountLimits",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeLifecycleHooks",
          "autoscaling:DescribeLoadBalancers",
          "autoscaling:DescribeLoadBalancerTargetGroups",
          "autoscaling:DescribeNotificationConfigurations",
          "autoscaling:DescribePolicies",
          "cloudwatch:GetMetricData",
          "cloudwatch:DescribeAlarms",
          "dynamodb:DescribeLimits",
          "dynamodb:ListGlobalTables",
          "dynamodb:ListTables",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeInstances",
          "ec2:DescribeSubnets",
          "ec2:DescribeVolumes",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:GetEbsEncryptionByDefault",
          "ec2:GetEbsDefaultKmsKeyId",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "kafka:DescribeCluster",
          "kafka:DescribeConfigurationRevision",
          "lambda:ListEventSourceMappings",
          "lambda:ListFunctions",
          "rds:DescribeAccountAttributes",
          "route53:GetHostedZone",
          "servicequotas:ListAWSDefaultServiceQuotas",
          "servicequotas:ListRequestedServiceQuotaChangeHistory",
          "servicequotas:ListServiceQuotas",
          "servicequotas:ListServices",
          "sns:GetEndpointAttributes",
          "sns:GetSubscriptionAttributes"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerPipelinesIntegrations": {
    "policy": {
      "PolicyName": "AmazonSageMakerPipelinesIntegrations",
      "PolicyId": "ANPAZKAPJZG4FK53JOAN3",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerPipelinesIntegrations",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This Amazon Managed Policy grants permissions commonly needed for use with Callback steps and Lambda steps in SageMaker Model Building Pipelines. It is added to the AmazonSageMaker-ExecutionRole that can be created when setting up SageMaker Studio. It can also be attached to any other role that will be used for authoring or executing pipelines.",
      "CreateDate": "2021-07-30T16:35:10.000Z",
      "UpdateDate": "2023-02-17T21:28:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction",
          "lambda:DeleteFunction",
          "lambda:GetFunction",
          "lambda:InvokeFunction",
          "lambda:UpdateFunctionCode"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*sagemaker*",
          "arn:aws:lambda:*:*:function:*sageMaker*",
          "arn:aws:lambda:*:*:function:*SageMaker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sqs:CreateQueue",
          "sqs:SendMessage"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:*sagemaker*",
          "arn:aws:sqs:*:*:*sageMaker*",
          "arn:aws:sqs:*:*:*SageMaker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:PutRule",
          "events:PutTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/SageMakerPipelineExecutionEMRStepStatusUpdateRule",
          "arn:aws:events:*:*:rule/SageMakerPipelineExecutionEMRClusterStatusUpdateRule"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticmapreduce:AddJobFlowSteps",
          "elasticmapreduce:CancelSteps",
          "elasticmapreduce:DescribeStep",
          "elasticmapreduce:RunJobFlow",
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:TerminateJobFlows",
          "elasticmapreduce:ListSteps"
        ],
        "Resource": [
          "arn:aws:elasticmapreduce:*:*:cluster/*"
        ]
      }
    ]
  },
  "AmazonChimeTranscriptionServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AmazonChimeTranscriptionServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4DC6EM4O3Q",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonChimeTranscriptionServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Chime to access Amazon Transcribe and Amazon Transcribe Medical on your behalf",
      "CreateDate": "2021-08-04T21:47:41.000Z",
      "UpdateDate": "2021-08-04T21:47:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "transcribe:StartStreamTranscription",
          "transcribe:StartMedicalStreamTranscription"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLicenseManagerConsumptionPolicy": {
    "policy": {
      "PolicyName": "AWSLicenseManagerConsumptionPolicy",
      "PolicyId": "ANPAZKAPJZG4KWNLLSDDM",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSLicenseManagerConsumptionPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions to allow access to the AWS License Manager API actions required to consume upon licenses that the user has entitlements.",
      "CreateDate": "2021-08-11T23:18:08.000Z",
      "UpdateDate": "2021-08-11T23:18:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "license-manager:CheckoutLicense",
          "license-manager:CheckInLicense",
          "license-manager:ExtendLicenseConsumption",
          "license-manager:GetLicense"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "MemoryDBServiceRolePolicy": {
    "policy": {
      "PolicyName": "MemoryDBServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4KWEJCOJNF",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/MemoryDBServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows MemoryDB to manage AWS resources on your behalf as necessary for managing your resources.",
      "CreateDate": "2021-08-17T22:34:59.000Z",
      "UpdateDate": "2021-08-18T23:48:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingElastiCacheRGPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingElastiCacheRGPolicy",
      "PolicyId": "ANPAZKAPJZG4A7HPQJPZ7",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingElastiCacheRGPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access Amazon ElastiCache and Amazon CloudWatch.",
      "CreateDate": "2021-08-17T23:41:42.000Z",
      "UpdateDate": "2021-08-17T23:41:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticache:DescribeReplicationGroups",
          "elasticache:ModifyReplicationGroupShardConfiguration",
          "elasticache:IncreaseReplicaCount",
          "elasticache:DecreaseReplicaCount",
          "elasticache:DescribeCacheClusters",
          "elasticache:DescribeCacheParameters",
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
        ]
      }
    ]
  },
  "AmazonS3ObjectLambdaExecutionRolePolicy": {
    "policy": {
      "PolicyName": "AmazonS3ObjectLambdaExecutionRolePolicy",
      "PolicyId": "ANPAZKAPJZG4PG47VBSXA",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Lambda functions permissions to interact with Amazon S3 Object Lambda. Also grants Lambda permissions to write to CloudWatch Logs.",
      "CreateDate": "2021-08-18T10:07:41.000Z",
      "UpdateDate": "2021-08-18T10:07:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "s3-object-lambda:WriteGetObjectResponse"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53RecoveryReadinessFullAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53RecoveryReadinessFullAccess",
      "PolicyId": "ANPAZKAPJZG4AP3B2MSA3",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53RecoveryReadinessFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Route 53 Recovery Readiness",
      "CreateDate": "2021-08-18T16:45:07.000Z",
      "UpdateDate": "2021-08-18T16:45:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53-recovery-readiness:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53RecoveryClusterReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53RecoveryClusterReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4PNOFP2E23",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53RecoveryClusterReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Route 53 Recovery Cluster",
      "CreateDate": "2021-08-18T17:36:01.000Z",
      "UpdateDate": "2022-04-01T17:37:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53-recovery-cluster:GetRoutingControlState",
          "route53-recovery-cluster:ListRoutingControls"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53RecoveryControlConfigFullAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53RecoveryControlConfigFullAccess",
      "PolicyId": "ANPAZKAPJZG4BNPPOPVZM",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53RecoveryControlConfigFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Route 53 Recovery Control Config",
      "CreateDate": "2021-08-18T17:48:35.000Z",
      "UpdateDate": "2021-08-18T17:48:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53-recovery-control-config:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53RecoveryControlConfigReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53RecoveryControlConfigReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4DBQWX62W5",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53RecoveryControlConfigReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Route 53 Recovery Control Config",
      "CreateDate": "2021-08-18T18:01:12.000Z",
      "UpdateDate": "2023-10-18T17:15:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53-recovery-control-config:DescribeCluster",
          "route53-recovery-control-config:DescribeControlPanel",
          "route53-recovery-control-config:DescribeRoutingControl",
          "route53-recovery-control-config:DescribeRoutingControlByName",
          "route53-recovery-control-config:DescribeSafetyRule",
          "route53-recovery-control-config:GetResourcePolicy",
          "route53-recovery-control-config:ListAssociatedRoute53HealthChecks",
          "route53-recovery-control-config:ListClusters",
          "route53-recovery-control-config:ListControlPanels",
          "route53-recovery-control-config:ListRoutingControls",
          "route53-recovery-control-config:ListSafetyRules",
          "route53-recovery-control-config:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRoute53RecoveryReadinessReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53RecoveryReadinessReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4M6P5L3S4F",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53RecoveryReadinessReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Route 53 Recovery Readiness",
      "CreateDate": "2021-08-18T18:11:33.000Z",
      "UpdateDate": "2021-11-09T20:14:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53-recovery-readiness:GetCell",
          "route53-recovery-readiness:GetReadinessCheck",
          "route53-recovery-readiness:GetReadinessCheckResourceStatus",
          "route53-recovery-readiness:GetReadinessCheckStatus",
          "route53-recovery-readiness:GetRecoveryGroup",
          "route53-recovery-readiness:GetRecoveryGroupReadinessSummary",
          "route53-recovery-readiness:GetResourceSet",
          "route53-recovery-readiness:ListCells",
          "route53-recovery-readiness:ListCrossAccountAuthorizations",
          "route53-recovery-readiness:ListReadinessChecks",
          "route53-recovery-readiness:ListRecoveryGroups",
          "route53-recovery-readiness:ListResourceSets",
          "route53-recovery-readiness:ListRules",
          "route53-recovery-readiness:ListTagsForResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53-recovery-readiness:GetArchitectureRecommendations",
          "route53-recovery-readiness:GetCellReadinessSummary"
        ],
        "Resource": [
          "arn:aws:route53-recovery-readiness::*:*"
        ]
      }
    ]
  },
  "AmazonRoute53RecoveryClusterFullAccess": {
    "policy": {
      "PolicyName": "AmazonRoute53RecoveryClusterFullAccess",
      "PolicyId": "ANPAZKAPJZG4MMWM2PHKW",
      "Arn": "arn:aws:iam::aws:policy/AmazonRoute53RecoveryClusterFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Route 53 Recovery Cluster",
      "CreateDate": "2021-08-18T18:37:00.000Z",
      "UpdateDate": "2021-08-18T18:37:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "route53-recovery-cluster:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRolePolicyForBackupReports": {
    "policy": {
      "PolicyName": "AWSServiceRolePolicyForBackupReports",
      "PolicyId": "ANPAZKAPJZG4MSKXNYMTU",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRolePolicyForBackupReports",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Backup permissions to create compliance reports on your behalf",
      "CreateDate": "2021-08-19T21:16:45.000Z",
      "UpdateDate": "2023-03-10T00:51:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "backup:DescribeFramework",
          "backup:ListBackupJobs",
          "backup:ListRestoreJobs",
          "backup:ListCopyJobs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DescribeConfigurationRecorders",
          "config:DescribeConfigurationRecorderStatus",
          "config:BatchGetResourceConfig",
          "config:SelectResourceConfig",
          "config:DescribeConfigurationAggregators",
          "config:SelectAggregateResourceConfig",
          "config:DescribeConfigRuleEvaluationStatus",
          "config:DescribeConfigRules",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:GetComplianceDetailsByConfigRule",
          "config:PutConfigRule",
          "config:DeleteConfigRule"
        ],
        "Resource": [
          "arn:aws:config:*:*:config-rule/aws-service-rule/backup.amazonaws.com*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DeleteConfigurationAggregator",
          "config:PutConfigurationAggregator"
        ],
        "Resource": [
          "arn:aws:config:*:*:config-aggregator/aws-service-config-aggregator/backup.amazonaws.com*"
        ]
      }
    ]
  },
  "AWSBackupAuditAccess": {
    "policy": {
      "PolicyName": "AWSBackupAuditAccess",
      "PolicyId": "ANPAZKAPJZG4C7QUTQXCL",
      "Arn": "arn:aws:iam::aws:policy/AWSBackupAuditAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions for users to create controls and frameworks that define their expectations for AWS Backup resources and activities, and to audit AWS Backup resources and activities against their defined controls and frameworks. This policy grants permissions to AWS Config and similar services to describe user expectations perform the audits. This policy also grants permissions to deliver audit reports to S3 and similar services, and enables users to find and open their audit reports.",
      "CreateDate": "2021-08-24T01:02:23.000Z",
      "UpdateDate": "2023-04-10T21:23:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "backup:CreateFramework",
          "backup:UpdateFramework",
          "backup:ListFrameworks",
          "backup:DescribeFramework",
          "backup:DeleteFramework",
          "backup:ListBackupPlans",
          "backup:ListBackupVaults",
          "backup:CreateReportPlan",
          "backup:UpdateReportPlan",
          "backup:ListReportPlans",
          "backup:DescribeReportPlan",
          "backup:DeleteReportPlan",
          "backup:StartReportJob",
          "backup:ListReportJobs",
          "backup:DescribeReportJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DescribeConfigurationRecorders",
          "config:DescribeConfigurationRecorderStatus",
          "config:DescribeComplianceByConfigRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:GetComplianceDetailsByConfigRule"
        ],
        "Resource": [
          "arn:aws:config:*:*:config-rule/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      }
    ]
  },
  "AmazonOpenSearchServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonOpenSearchServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NHHCOTRP6",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonOpenSearchServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow Amazon OpenSearch Service to access other AWS services such as EC2 Networking APIs on your behalf.",
      "CreateDate": "2021-08-26T09:27:09.000Z",
      "UpdateDate": "2023-10-23T07:07:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "Stmt1480452973134",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "Stmt1480452973145",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973144",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "Stmt1480452973165",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "Stmt1480452973149",
        "Effect": "Allow",
        "Action": [
          "ec2:AssignIpv6Addresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "Stmt1480452973150",
        "Effect": "Allow",
        "Action": [
          "ec2:UnAssignIpv6Addresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "Stmt1480452973154",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973164",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973174",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973184",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddListenerCertificates",
          "elasticloadbalancing:RemoveListenerCertificates"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:listener/*"
        ]
      },
      {
        "Sid": "Stmt1480452973194",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "Stmt1480452973195",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973196",
        "Effect": "Allow",
        "Action": [
          "acm:DescribeCertificate"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973197",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973198",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint",
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "Stmt1480452973199",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "Stmt1480452973200",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint",
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "Stmt1480452973201",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Stmt1480452973202",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      }
    ]
  },
  "AmazonOpenSearchServiceCognitoAccess": {
    "policy": {
      "PolicyName": "AmazonOpenSearchServiceCognitoAccess",
      "PolicyId": "ANPAZKAPJZG4I2NKQTDYL",
      "Arn": "arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to the Amazon Cognito configuration service.",
      "CreateDate": "2021-09-02T06:31:49.000Z",
      "UpdateDate": "2021-12-20T14:04:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cognito-idp:DescribeUserPool",
          "cognito-idp:CreateUserPoolClient",
          "cognito-idp:DeleteUserPoolClient",
          "cognito-idp:UpdateUserPoolClient",
          "cognito-idp:DescribeUserPoolClient",
          "cognito-idp:AdminInitiateAuth",
          "cognito-idp:AdminUserGlobalSignOut",
          "cognito-idp:ListUserPoolClients",
          "cognito-identity:DescribeIdentityPool",
          "cognito-identity:UpdateIdentityPool",
          "cognito-identity:GetIdentityPoolRoles"
        ],
        "Resource": [
          "arn:aws:cognito-identity:*:*:identitypool/*",
          "arn:aws:cognito-idp:*:*:userpool/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cognito-identity:SetIdentityPoolRoles"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationAutoscalingNeptuneClusterPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationAutoscalingNeptuneClusterPolicy",
      "PolicyId": "ANPAZKAPJZG4LJVNMME6T",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSApplicationAutoscalingNeptuneClusterPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy granting permissions to Application Auto Scaling to access Amazon Neptune and Amazon CloudWatch.",
      "CreateDate": "2021-09-02T21:14:55.000Z",
      "UpdateDate": "2021-09-02T21:14:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rds:ListTagsForResource",
          "rds:DescribeDBInstances",
          "rds:DescribeDBClusters",
          "rds:DescribeDBClusterParameters",
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rds:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:rds:*:*:db:autoscaled-reader*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rds:CreateDBInstance"
        ],
        "Resource": [
          "arn:aws:rds:*:*:db:autoscaled-reader*",
          "arn:aws:rds:*:*:cluster:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "rds:DeleteDBInstance"
        ],
        "Resource": [
          "arn:aws:rds:*:*:db:autoscaled-reader*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
        ]
      }
    ]
  },
  "AmazonEKSConnectorServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonEKSConnectorServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4H2PH3AV2C",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonEKSConnectorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows Amazon EKS to manage AWS resources for EKS connector",
      "CreateDate": "2021-09-04T20:31:08.000Z",
      "UpdateDate": "2021-09-04T20:31:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AccessSSMService",
        "Effect": "Allow",
        "Action": [
          "ssm:CreateActivation",
          "ssm:DescribeInstanceInformation",
          "ssm:DeleteActivation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConnectorAgentStartSession",
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession"
        ],
        "Resource": [
          "arn:aws:eks:*:*:cluster/*",
          "arn:aws:ssm:*::document/AmazonEKS-ExecuteNonInteractiveCommand"
        ]
      },
      {
        "Sid": "ConnectorAgentDeregister",
        "Effect": "Allow",
        "Action": [
          "ssm:DeregisterManagedInstance"
        ],
        "Resource": [
          "arn:aws:eks:*:*:cluster/*"
        ]
      },
      {
        "Sid": "PassAnyRoleToSsm",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PutManagedEventRule",
        "Effect": "Allow",
        "Action": [
          "events:PutRule"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PutManagedEventTarget",
        "Effect": "Allow",
        "Action": [
          "events:PutTargets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "KafkaConnectServiceRolePolicy": {
    "policy": {
      "PolicyName": "KafkaConnectServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4KFEKH7VR6",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/KafkaConnectServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants Kafka Connect permission to manage AWS resources on your behalf.",
      "CreateDate": "2021-09-07T13:12:44.000Z",
      "UpdateDate": "2021-09-07T13:12:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:AttachNetworkInterface",
          "ec2:DetachNetworkInterface",
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      }
    ]
  },
  "AWSQuicksightOpenSearchPolicy": {
    "policy": {
      "PolicyName": "AWSQuicksightOpenSearchPolicy",
      "PolicyId": "ANPAZKAPJZG4JW5IRBCM3",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSQuicksightOpenSearchPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Amazon OpenSearch resources from Amazon QuickSight",
      "CreateDate": "2021-09-07T23:26:19.000Z",
      "UpdateDate": "2021-09-07T23:26:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "es:ESHttpGet"
        ],
        "Resource": [
          "arn:aws:es:*:*:domain/*/",
          "arn:aws:es:*:*:domain/*/_cluster/settings",
          "arn:aws:es:*:*:domain/*/_cat/indices"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "es:ListDomainNames"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "es:DescribeDomain"
        ],
        "Resource": [
          "arn:aws:es:*:*:domain/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "es:ESHttpPost",
          "es:ESHttpGet"
        ],
        "Resource": [
          "arn:aws:es:*:*:domain/*/_opendistro/_sql",
          "arn:aws:es:*:*:domain/*/_plugin/_sql"
        ]
      }
    ]
  },
  "AmazonOpenSearchServiceFullAccess": {
    "policy": {
      "PolicyName": "AmazonOpenSearchServiceFullAccess",
      "PolicyId": "ANPAZKAPJZG4F6P6N56MG",
      "Arn": "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the Amazon OpenSearch Service configuration service.",
      "CreateDate": "2021-09-08T05:33:47.000Z",
      "UpdateDate": "2021-09-08T05:33:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "es:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonOpenSearchServiceReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonOpenSearchServiceReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4PQONZTCWT",
      "Arn": "arn:aws:iam::aws:policy/AmazonOpenSearchServiceReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to the Amazon OpenSearch Service configuration service.",
      "CreateDate": "2021-09-08T05:38:13.000Z",
      "UpdateDate": "2021-09-08T05:38:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "es:Describe*",
          "es:List*",
          "es:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMediaTailorServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSMediaTailorServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4N46XCSH76",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSMediaTailorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enable access to AWS Resources used or managed by MediaTailor",
      "CreateDate": "2021-09-17T22:27:10.000Z",
      "UpdateDate": "2021-09-17T22:27:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:MediaTailor/*:log-stream:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:MediaTailor/*"
        ]
      }
    ]
  },
  "AmazonMSKConnectReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMSKConnectReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4NBJ5F5NIS",
      "Arn": "arn:aws:iam::aws:policy/AmazonMSKConnectReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide readonly access to Amazon MSK Connect",
      "CreateDate": "2021-09-20T10:18:43.000Z",
      "UpdateDate": "2021-10-18T09:16:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kafkaconnect:ListConnectors",
          "kafkaconnect:ListCustomPlugins",
          "kafkaconnect:ListWorkerConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kafkaconnect:DescribeConnector"
        ],
        "Resource": [
          "arn:aws:kafkaconnect:*:*:connector/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kafkaconnect:DescribeCustomPlugin"
        ],
        "Resource": [
          "arn:aws:kafkaconnect:*:*:custom-plugin/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kafkaconnect:DescribeWorkerConfiguration"
        ],
        "Resource": [
          "arn:aws:kafkaconnect:*:*:worker-configuration/*"
        ]
      }
    ]
  },
  "AmazonConnectCampaignsServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AmazonConnectCampaignsServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4PT3AZPOPK",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonConnectCampaignsServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for Amazon Connect Campaigns service linked role",
      "CreateDate": "2021-09-23T20:54:26.000Z",
      "UpdateDate": "2023-11-08T16:16:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "connect-campaigns:ListCampaigns"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "connect:BatchPutContact",
          "connect:StopContact"
        ],
        "Resource": [
          "arn:aws:connect:*:*:instance/*"
        ]
      }
    ]
  },
  "AmazonRedshiftQueryEditorV2FullAccess": {
    "policy": {
      "PolicyName": "AmazonRedshiftQueryEditorV2FullAccess",
      "PolicyId": "ANPAZKAPJZG4BKYFZHR4E",
      "Arn": "arn:aws:iam::aws:policy/AmazonRedshiftQueryEditorV2FullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to the Amazon Redshift Query Editor V2 operations and resources. This policy also grants access to other required services. This includes permissions to list the Amazon Redshift clusters, read keys and aliases in AWS KMS and manage the Query Editor V2 secrets in AWS Secrets Manager.",
      "CreateDate": "2021-09-24T14:06:02.000Z",
      "UpdateDate": "2024-02-21T17:20:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "RedshiftPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListWorkgroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KeyManagementServicePermissions",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:DeleteSecret",
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:sqlworkbench!*"
        ]
      },
      {
        "Sid": "ResourceGroupsTaggingPermissions",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2Permissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRedshiftQueryEditorV2NoSharing": {
    "policy": {
      "PolicyName": "AmazonRedshiftQueryEditorV2NoSharing",
      "PolicyId": "ANPAZKAPJZG4JFCSC6IV2",
      "Arn": "arn:aws:iam::aws:policy/AmazonRedshiftQueryEditorV2NoSharing",
      "Path": "/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants the ability to work with Amazon Redshift Query Editor V2 without sharing resources. The granted principal can only read, update and delete its own resources but cannot share them. This policy also grants access to other required services. This includes permissions to list the Amazon Redshift clusters and manage the Query Editor V2 secrets of the principal in AWS Secrets Manager.",
      "CreateDate": "2021-09-24T14:18:42.000Z",
      "UpdateDate": "2024-02-21T17:25:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "RedshiftPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListWorkgroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:DeleteSecret",
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:sqlworkbench!*"
        ]
      },
      {
        "Sid": "ResourceGroupsTaggingPermissions",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:CreateFolder",
          "sqlworkbench:PutTab",
          "sqlworkbench:BatchDeleteFolder",
          "sqlworkbench:DeleteTab",
          "sqlworkbench:GenerateSession",
          "sqlworkbench:GetAccountInfo",
          "sqlworkbench:GetAccountSettings",
          "sqlworkbench:GetUserInfo",
          "sqlworkbench:GetUserWorkspaceSettings",
          "sqlworkbench:PutUserWorkspaceSettings",
          "sqlworkbench:ListConnections",
          "sqlworkbench:ListFiles",
          "sqlworkbench:ListTabs",
          "sqlworkbench:UpdateFolder",
          "sqlworkbench:ListRedshiftClusters",
          "sqlworkbench:DriverExecute",
          "sqlworkbench:ListTaggedResources",
          "sqlworkbench:ListQueryExecutionHistory",
          "sqlworkbench:GetQueryExecutionHistory",
          "sqlworkbench:ListNotebooks",
          "sqlworkbench:GetSchemaInference",
          "sqlworkbench:GetAutocompletionMetadata",
          "sqlworkbench:GetAutocompletionResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:CreateConnection",
          "sqlworkbench:CreateSavedQuery",
          "sqlworkbench:CreateChart",
          "sqlworkbench:CreateNotebook",
          "sqlworkbench:DuplicateNotebook",
          "sqlworkbench:CreateNotebookFromVersion",
          "sqlworkbench:ImportNotebook"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:DeleteChart",
          "sqlworkbench:DeleteConnection",
          "sqlworkbench:DeleteSavedQuery",
          "sqlworkbench:GetChart",
          "sqlworkbench:GetConnection",
          "sqlworkbench:GetSavedQuery",
          "sqlworkbench:ListSavedQueryVersions",
          "sqlworkbench:UpdateChart",
          "sqlworkbench:UpdateConnection",
          "sqlworkbench:UpdateSavedQuery",
          "sqlworkbench:AssociateConnectionWithTab",
          "sqlworkbench:AssociateQueryWithTab",
          "sqlworkbench:AssociateConnectionWithChart",
          "sqlworkbench:AssociateNotebookWithTab",
          "sqlworkbench:UpdateFileFolder",
          "sqlworkbench:ListTagsForResource",
          "sqlworkbench:GetNotebook",
          "sqlworkbench:UpdateNotebook",
          "sqlworkbench:DeleteNotebook",
          "sqlworkbench:DuplicateNotebook",
          "sqlworkbench:CreateNotebookCell",
          "sqlworkbench:DeleteNotebookCell",
          "sqlworkbench:UpdateNotebookCellContent",
          "sqlworkbench:UpdateNotebookCellLayout",
          "sqlworkbench:BatchGetNotebookCell",
          "sqlworkbench:ListNotebookVersions",
          "sqlworkbench:CreateNotebookVersion",
          "sqlworkbench:GetNotebookVersion",
          "sqlworkbench:DeleteNotebookVersion",
          "sqlworkbench:RestoreNotebookVersion",
          "sqlworkbench:CreateNotebookFromVersion",
          "sqlworkbench:ExportNotebook",
          "sqlworkbench:ImportNotebook"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:TagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRedshiftQueryEditorV2ReadSharing": {
    "policy": {
      "PolicyName": "AmazonRedshiftQueryEditorV2ReadSharing",
      "PolicyId": "ANPAZKAPJZG4G5PCICHSV",
      "Arn": "arn:aws:iam::aws:policy/AmazonRedshiftQueryEditorV2ReadSharing",
      "Path": "/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants the ability to work with Amazon Redshift Query Editor V2 with limited sharing of resources. The granted principal can read, write and share its own resources. The granted principal can read the resources shared with its team but cannot update them. This policy also grants access to other required services. This includes permissions to list the Amazon Redshift clusters and manage the Query Editor V2 secrets of the principal in AWS Secrets Manager.",
      "CreateDate": "2021-09-24T14:22:21.000Z",
      "UpdateDate": "2024-02-21T17:27:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "RedshiftPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListWorkgroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:DeleteSecret",
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:sqlworkbench!*"
        ]
      },
      {
        "Sid": "ResourceGroupsTaggingPermissions",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:CreateFolder",
          "sqlworkbench:PutTab",
          "sqlworkbench:BatchDeleteFolder",
          "sqlworkbench:DeleteTab",
          "sqlworkbench:GenerateSession",
          "sqlworkbench:GetAccountInfo",
          "sqlworkbench:GetAccountSettings",
          "sqlworkbench:GetUserInfo",
          "sqlworkbench:GetUserWorkspaceSettings",
          "sqlworkbench:PutUserWorkspaceSettings",
          "sqlworkbench:ListConnections",
          "sqlworkbench:ListFiles",
          "sqlworkbench:ListTabs",
          "sqlworkbench:UpdateFolder",
          "sqlworkbench:ListRedshiftClusters",
          "sqlworkbench:DriverExecute",
          "sqlworkbench:ListTaggedResources",
          "sqlworkbench:ListQueryExecutionHistory",
          "sqlworkbench:GetQueryExecutionHistory",
          "sqlworkbench:ListNotebooks",
          "sqlworkbench:GetSchemaInference",
          "sqlworkbench:GetAutocompletionMetadata",
          "sqlworkbench:GetAutocompletionResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:CreateConnection",
          "sqlworkbench:CreateSavedQuery",
          "sqlworkbench:CreateChart",
          "sqlworkbench:CreateNotebook",
          "sqlworkbench:DuplicateNotebook",
          "sqlworkbench:CreateNotebookFromVersion",
          "sqlworkbench:ImportNotebook"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:DeleteChart",
          "sqlworkbench:DeleteConnection",
          "sqlworkbench:DeleteSavedQuery",
          "sqlworkbench:GetChart",
          "sqlworkbench:GetConnection",
          "sqlworkbench:GetSavedQuery",
          "sqlworkbench:ListSavedQueryVersions",
          "sqlworkbench:UpdateChart",
          "sqlworkbench:UpdateConnection",
          "sqlworkbench:UpdateSavedQuery",
          "sqlworkbench:AssociateConnectionWithTab",
          "sqlworkbench:AssociateQueryWithTab",
          "sqlworkbench:AssociateConnectionWithChart",
          "sqlworkbench:AssociateNotebookWithTab",
          "sqlworkbench:UpdateFileFolder",
          "sqlworkbench:ListTagsForResource",
          "sqlworkbench:GetNotebook",
          "sqlworkbench:UpdateNotebook",
          "sqlworkbench:DeleteNotebook",
          "sqlworkbench:DuplicateNotebook",
          "sqlworkbench:CreateNotebookCell",
          "sqlworkbench:DeleteNotebookCell",
          "sqlworkbench:UpdateNotebookCellContent",
          "sqlworkbench:UpdateNotebookCellLayout",
          "sqlworkbench:BatchGetNotebookCell",
          "sqlworkbench:ListNotebookVersions",
          "sqlworkbench:CreateNotebookVersion",
          "sqlworkbench:GetNotebookVersion",
          "sqlworkbench:DeleteNotebookVersion",
          "sqlworkbench:RestoreNotebookVersion",
          "sqlworkbench:CreateNotebookFromVersion",
          "sqlworkbench:ExportNotebook",
          "sqlworkbench:ImportNotebook"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2TeamReadAccessPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:GetChart",
          "sqlworkbench:GetConnection",
          "sqlworkbench:GetSavedQuery",
          "sqlworkbench:ListSavedQueryVersions",
          "sqlworkbench:ListTagsForResource",
          "sqlworkbench:AssociateQueryWithTab",
          "sqlworkbench:AssociateNotebookWithTab",
          "sqlworkbench:GetNotebook",
          "sqlworkbench:DuplicateNotebook",
          "sqlworkbench:BatchGetNotebookCell",
          "sqlworkbench:ListNotebookVersions",
          "sqlworkbench:GetNotebookVersion",
          "sqlworkbench:CreateNotebookFromVersion",
          "sqlworkbench:ExportNotebook"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2TagOnlyTeamPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2UntagOnlyTeamPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:UntagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRedshiftQueryEditorV2ReadWriteSharing": {
    "policy": {
      "PolicyName": "AmazonRedshiftQueryEditorV2ReadWriteSharing",
      "PolicyId": "ANPAZKAPJZG4LIWZX3BPO",
      "Arn": "arn:aws:iam::aws:policy/AmazonRedshiftQueryEditorV2ReadWriteSharing",
      "Path": "/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants the ability to work with Amazon Redshift Query Editor V2 with sharing of resources. The granted principal can read, write and share its own resources. The granted principal can read and update the resources shared with its team. This policy also grants access to other required services. This includes permissions to list the Amazon Redshift clusters and manage the Query Editor V2 secrets of the principal in AWS Secrets Manager.",
      "CreateDate": "2021-09-24T14:25:37.000Z",
      "UpdateDate": "2024-02-21T17:30:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "RedshiftPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListWorkgroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:DeleteSecret",
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:sqlworkbench!*"
        ]
      },
      {
        "Sid": "ResourceGroupsTaggingPermissions",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:CreateFolder",
          "sqlworkbench:PutTab",
          "sqlworkbench:BatchDeleteFolder",
          "sqlworkbench:DeleteTab",
          "sqlworkbench:GenerateSession",
          "sqlworkbench:GetAccountInfo",
          "sqlworkbench:GetAccountSettings",
          "sqlworkbench:GetUserInfo",
          "sqlworkbench:GetUserWorkspaceSettings",
          "sqlworkbench:PutUserWorkspaceSettings",
          "sqlworkbench:ListConnections",
          "sqlworkbench:ListFiles",
          "sqlworkbench:ListTabs",
          "sqlworkbench:UpdateFolder",
          "sqlworkbench:ListRedshiftClusters",
          "sqlworkbench:DriverExecute",
          "sqlworkbench:ListTaggedResources",
          "sqlworkbench:ListQueryExecutionHistory",
          "sqlworkbench:GetQueryExecutionHistory",
          "sqlworkbench:ListNotebooks",
          "sqlworkbench:GetSchemaInference",
          "sqlworkbench:GetAutocompletionMetadata",
          "sqlworkbench:GetAutocompletionResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:CreateConnection",
          "sqlworkbench:CreateSavedQuery",
          "sqlworkbench:CreateChart",
          "sqlworkbench:CreateNotebook",
          "sqlworkbench:DuplicateNotebook",
          "sqlworkbench:CreateNotebookFromVersion",
          "sqlworkbench:ImportNotebook"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:DeleteChart",
          "sqlworkbench:DeleteConnection",
          "sqlworkbench:DeleteSavedQuery",
          "sqlworkbench:GetChart",
          "sqlworkbench:GetConnection",
          "sqlworkbench:GetSavedQuery",
          "sqlworkbench:ListSavedQueryVersions",
          "sqlworkbench:UpdateChart",
          "sqlworkbench:UpdateConnection",
          "sqlworkbench:UpdateSavedQuery",
          "sqlworkbench:AssociateConnectionWithTab",
          "sqlworkbench:AssociateQueryWithTab",
          "sqlworkbench:AssociateConnectionWithChart",
          "sqlworkbench:AssociateNotebookWithTab",
          "sqlworkbench:UpdateFileFolder",
          "sqlworkbench:ListTagsForResource",
          "sqlworkbench:GetNotebook",
          "sqlworkbench:UpdateNotebook",
          "sqlworkbench:DeleteNotebook",
          "sqlworkbench:DuplicateNotebook",
          "sqlworkbench:CreateNotebookCell",
          "sqlworkbench:DeleteNotebookCell",
          "sqlworkbench:UpdateNotebookCellContent",
          "sqlworkbench:UpdateNotebookCellLayout",
          "sqlworkbench:BatchGetNotebookCell",
          "sqlworkbench:ListNotebookVersions",
          "sqlworkbench:CreateNotebookVersion",
          "sqlworkbench:GetNotebookVersion",
          "sqlworkbench:DeleteNotebookVersion",
          "sqlworkbench:RestoreNotebookVersion",
          "sqlworkbench:CreateNotebookFromVersion",
          "sqlworkbench:ExportNotebook",
          "sqlworkbench:ImportNotebook"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2TeamReadWriteAccessPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:GetChart",
          "sqlworkbench:GetConnection",
          "sqlworkbench:GetSavedQuery",
          "sqlworkbench:ListSavedQueryVersions",
          "sqlworkbench:ListTagsForResource",
          "sqlworkbench:UpdateChart",
          "sqlworkbench:UpdateConnection",
          "sqlworkbench:UpdateSavedQuery",
          "sqlworkbench:AssociateConnectionWithTab",
          "sqlworkbench:AssociateQueryWithTab",
          "sqlworkbench:AssociateConnectionWithChart",
          "sqlworkbench:AssociateNotebookWithTab",
          "sqlworkbench:GetNotebook",
          "sqlworkbench:DuplicateNotebook",
          "sqlworkbench:BatchGetNotebookCell",
          "sqlworkbench:ListNotebookVersions",
          "sqlworkbench:GetNotebookVersion",
          "sqlworkbench:CreateNotebookFromVersion",
          "sqlworkbench:ExportNotebook"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2TagOnlyTeamPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRedshiftQueryEditorV2UntagOnlyTeamPermissions",
        "Effect": "Allow",
        "Action": [
          "sqlworkbench:UntagResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonConnectVoiceIDFullAccess": {
    "policy": {
      "PolicyName": "AmazonConnectVoiceIDFullAccess",
      "PolicyId": "ANPAZKAPJZG4EE2VNKAA5",
      "Arn": "arn:aws:iam::aws:policy/AmazonConnectVoiceIDFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Connect Voice ID",
      "CreateDate": "2021-09-26T19:04:10.000Z",
      "UpdateDate": "2021-09-26T19:04:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "voiceid:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSEC2CapacityReservationFleetRolePolicy": {
    "policy": {
      "PolicyName": "AWSEC2CapacityReservationFleetRolePolicy",
      "PolicyId": "ANPAZKAPJZG4HMH3YJXLU",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSEC2CapacityReservationFleetRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows EC2 CapacityReservation Fleet service to manage Capacity Reservations",
      "CreateDate": "2021-09-29T14:43:09.000Z",
      "UpdateDate": "2021-09-29T14:43:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeCapacityReservations",
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateCapacityReservation",
          "ec2:CancelCapacityReservation",
          "ec2:ModifyCapacityReservation"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:capacity-reservation/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:capacity-reservation/*"
        ]
      }
    ]
  },
  "AWSAccountManagementFullAccess": {
    "policy": {
      "PolicyName": "AWSAccountManagementFullAccess",
      "PolicyId": "ANPAZKAPJZG4NJRKI5OH5",
      "Arn": "arn:aws:iam::aws:policy/AWSAccountManagementFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Account Management.",
      "CreateDate": "2021-09-30T23:20:37.000Z",
      "UpdateDate": "2021-09-30T23:20:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "account:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAccountManagementReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSAccountManagementReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4FJMX42HLT",
      "Arn": "arn:aws:iam::aws:policy/AWSAccountManagementReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to AWS Account Management",
      "CreateDate": "2021-09-30T23:29:53.000Z",
      "UpdateDate": "2021-09-30T23:29:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "account:Get*",
          "account:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMemoryDBFullAccess": {
    "policy": {
      "PolicyName": "AmazonMemoryDBFullAccess",
      "PolicyId": "ANPAZKAPJZG4LGPHLZEWJ",
      "Arn": "arn:aws:iam::aws:policy/AmazonMemoryDBFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon MemoryDB via the AWS Management Console.",
      "CreateDate": "2021-10-08T19:24:16.000Z",
      "UpdateDate": "2021-10-08T19:24:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "memorydb:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/memorydb.amazonaws.com/AWSServiceRoleForMemoryDB"
        ]
      }
    ]
  },
  "AmazonMemoryDBReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMemoryDBReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4HGOZ3UBWP",
      "Arn": "arn:aws:iam::aws:policy/AmazonMemoryDBReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon MemoryDB via the AWS Management Console.",
      "CreateDate": "2021-10-08T19:27:28.000Z",
      "UpdateDate": "2021-10-08T19:27:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "memorydb:Describe*",
          "memorydb:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSCustomServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonRDSCustomServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4F2M3XYA7J",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonRDSCustomServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon RDS Custom to manage AWS resources on your behalf.",
      "CreateDate": "2021-10-08T21:39:12.000Z",
      "UpdateDate": "2024-04-08T19:39:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ecc1",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeRegions",
          "ec2:DescribeSnapshots",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVolumes",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeIamInstanceProfileAssociations",
          "ec2:DescribeImages",
          "ec2:DescribeVpcs",
          "ec2:RegisterImage",
          "ec2:DeregisterImage",
          "ec2:DescribeTags",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVolumesModifications",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:SearchTransitGatewayMulticastGroups",
          "ec2:GetTransitGatewayMulticastDomainAssociations",
          "ec2:DescribeTransitGatewayMulticastDomains",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeRouteTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ecc2",
        "Effect": "Allow",
        "Action": [
          "ec2:DisassociateIamInstanceProfile",
          "ec2:AssociateIamInstanceProfile",
          "ec2:ReplaceIamInstanceProfileAssociation",
          "ec2:TerminateInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:RebootInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ecc1scoping",
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ecc1scoping2",
        "Effect": "Allow",
        "Action": [
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:ReleaseAddress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ecc1scoping3",
        "Effect": "Allow",
        "Action": [
          "ec2:AssignPrivateIpAddresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "eccRunInstances1",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "eccRunInstances2",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*",
          "arn:aws:ec2:*:*:placement-group/*"
        ]
      },
      {
        "Sid": "eccRunInstances3",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "eccModifyInstanceAttribute1",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyInstanceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "RequireImdsV2",
        "Effect": "Deny",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "eccRunInstances3keyPair1",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances",
          "ec2:DeleteKeyPair"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eccKeyPair2",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateKeyPair"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eccNetworkInterface1",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "eccNetworkInterface2",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "eccNetworkInterface3",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "eccCreateTag1",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "eccCreateTag2",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "eccVolume1",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume",
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "eccVolume2",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "eccVolume3",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVolumeAttribute",
          "ec2:DeleteVolume",
          "ec2:ModifyVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "eccVolume4snapshot1",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume",
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "eccSnapshot2",
        "Effect": "Allow",
        "Action": [
          "ec2:CopySnapshot",
          "ec2:CreateSnapshot",
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "eccSnapshot3",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "eccSnapshot4",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "iam1",
        "Effect": "Allow",
        "Action": [
          "iam:ListInstanceProfiles",
          "iam:GetInstanceProfile",
          "iam:GetRole",
          "iam:ListRolePolicies",
          "iam:GetRolePolicy",
          "iam:ListAttachedRolePolicies",
          "iam:GetPolicy",
          "iam:GetPolicyVersion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "iam2",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSRDSCustom*"
        ]
      },
      {
        "Sid": "cloudtrail1",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:GetTrailStatus"
        ],
        "Resource": [
          "arn:aws:cloudtrail:*:*:trail/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "cw1",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:EnableAlarmActions",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "cw2",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:TagResource"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "cw3",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:*"
        ]
      },
      {
        "Sid": "ssm1",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      },
      {
        "Sid": "ssm2",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ssm3",
        "Effect": "Allow",
        "Action": [
          "ssm:GetCommandInvocation",
          "ssm:GetConnectionStatus",
          "ssm:DescribeInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ssm4",
        "Effect": "Allow",
        "Action": [
          "ssm:PutParameter",
          "ssm:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*"
        ]
      },
      {
        "Sid": "ssm5",
        "Effect": "Allow",
        "Action": [
          "ssm:DeleteParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*"
        ]
      },
      {
        "Sid": "eb1",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:TagResource"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eb2",
        "Effect": "Allow",
        "Action": [
          "events:PutTargets",
          "events:DescribeRule",
          "events:EnableRule",
          "events:ListTargetsByRule",
          "events:DeleteRule",
          "events:RemoveTargets",
          "events:DisableRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eb3",
        "Effect": "Allow",
        "Action": [
          "events:PutRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eb4",
        "Effect": "Allow",
        "Action": [
          "events:PutTargets",
          "events:EnableRule",
          "events:DeleteRule",
          "events:RemoveTargets",
          "events:DisableRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eb5",
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "secretmanager1",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource",
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "secretmanager2",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource",
          "secretsmanager:DescribeSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:PutSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "sqs1",
        "Effect": "Allow",
        "Action": [
          "sqs:CreateQueue",
          "sqs:TagQueue"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "sqs2",
        "Effect": "Allow",
        "Action": [
          "sqs:GetQueueAttributes",
          "sqs:SendMessage",
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage",
          "sqs:DeleteQueue"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "servicequota1",
        "Effect": "Allow",
        "Action": [
          "servicequotas:GetServiceQuota"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSCustomPreviewServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonRDSCustomPreviewServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4D6BEPON2G",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonRDSCustomPreviewServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Amazon RDS Custom Preview Service Role Policy",
      "CreateDate": "2021-10-08T21:44:15.000Z",
      "UpdateDate": "2023-09-20T17:48:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ecc1",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeRegions",
          "ec2:DescribeSnapshots",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVolumes",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeIamInstanceProfileAssociations",
          "ec2:DescribeImages",
          "ec2:DescribeVpcs",
          "ec2:RegisterImage",
          "ec2:DeregisterImage",
          "ec2:DescribeTags",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVolumesModifications",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:SearchTransitGatewayMulticastGroups",
          "ec2:GetTransitGatewayMulticastDomainAssociations",
          "ec2:DescribeTransitGatewayMulticastDomains",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeRouteTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ecc2",
        "Effect": "Allow",
        "Action": [
          "ec2:DisassociateIamInstanceProfile",
          "ec2:AssociateIamInstanceProfile",
          "ec2:ReplaceIamInstanceProfileAssociation",
          "ec2:TerminateInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:RebootInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ecc1scoping",
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ecc1scoping2",
        "Effect": "Allow",
        "Action": [
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:ReleaseAddress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ecc1scoping3",
        "Effect": "Allow",
        "Action": [
          "ec2:AssignPrivateIpAddresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "eccRunInstances1",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "eccRunInstances2",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*",
          "arn:aws:ec2:*:*:placement-group/*"
        ]
      },
      {
        "Sid": "eccRunInstances3",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "RequireImdsV2",
        "Effect": "Deny",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "eccRunInstances3keyPair1",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances",
          "ec2:DeleteKeyPair"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eccKeyPair2",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateKeyPair"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eccNetworkInterface1",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "eccNetworkInterface2",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "eccNetworkInterface3",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "eccCreateTag1",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "eccCreateTag2",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "eccVolume1",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume",
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "eccVolume2",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "eccVolume3",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVolumeAttribute",
          "ec2:DeleteVolume",
          "ec2:ModifyVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "eccVolume4snapshot1",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume",
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "eccSnapshot2",
        "Effect": "Allow",
        "Action": [
          "ec2:CopySnapshot",
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "eccSnapshot3",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "iam1",
        "Effect": "Allow",
        "Action": [
          "iam:ListInstanceProfiles",
          "iam:GetInstanceProfile",
          "iam:GetRole",
          "iam:ListRolePolicies",
          "iam:GetRolePolicy",
          "iam:ListAttachedRolePolicies",
          "iam:GetPolicy",
          "iam:GetPolicyVersion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "iam2",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AWSRDSCustom*"
        ]
      },
      {
        "Sid": "cloudtrail1",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:GetTrailStatus"
        ],
        "Resource": [
          "arn:aws:cloudtrail:*:*:trail/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "cw1",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:EnableAlarmActions",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "cw2",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:TagResource"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "cw3",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:*"
        ]
      },
      {
        "Sid": "ssm1",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      },
      {
        "Sid": "ssm2",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ssm3",
        "Effect": "Allow",
        "Action": [
          "ssm:GetCommandInvocation",
          "ssm:GetConnectionStatus",
          "ssm:DescribeInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ssm4",
        "Effect": "Allow",
        "Action": [
          "ssm:PutParameter",
          "ssm:AddTagsToResource"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*"
        ]
      },
      {
        "Sid": "ssm5",
        "Effect": "Allow",
        "Action": [
          "ssm:DeleteParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*"
        ]
      },
      {
        "Sid": "eb1",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:TagResource"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eb2",
        "Effect": "Allow",
        "Action": [
          "events:PutTargets",
          "events:DescribeRule",
          "events:EnableRule",
          "events:ListTargetsByRule",
          "events:DeleteRule",
          "events:RemoveTargets",
          "events:DisableRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eb3",
        "Effect": "Allow",
        "Action": [
          "events:PutRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eb4",
        "Effect": "Allow",
        "Action": [
          "events:PutTargets",
          "events:EnableRule",
          "events:DeleteRule",
          "events:RemoveTargets",
          "events:DisableRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "eb5",
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "secretmanager1",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource",
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "secretmanager2",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource",
          "secretsmanager:DescribeSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:PutSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "servicequota1",
        "Effect": "Allow",
        "Action": [
          "servicequotas:GetServiceQuota"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMigrationHubStrategyServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSMigrationHubStrategyServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4EZOM3LHDI",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSMigrationHubStrategyServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enable access to AWS Resources used or managed by AWS Migration Hub Strategy Recommendations service.",
      "CreateDate": "2021-10-19T20:02:37.000Z",
      "UpdateDate": "2021-10-19T20:02:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "permissionsForAds",
        "Effect": "Allow",
        "Action": [
          "discovery:ListConfigurations",
          "discovery:DescribeConfigurations",
          "mgh:GetHomeRegion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "permissionsForS3",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:PutObjectAcl"
        ],
        "Resource": [
          "arn:aws:s3:::migrationhub-strategy-*"
        ]
      }
    ]
  },
  "AWSMigrationHubStrategyConsoleFullAccess": {
    "policy": {
      "PolicyName": "AWSMigrationHubStrategyConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4NOFRRYUC5",
      "Arn": "arn:aws:iam::aws:policy/AWSMigrationHubStrategyConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to the AWS Migration Hub Strategy Recommendations service and access to related AWS services through the AWS Management Console.",
      "CreateDate": "2021-10-19T20:13:26.000Z",
      "UpdateDate": "2022-11-09T00:00:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "migrationhub-strategy:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:CreateBucket",
          "s3:PutEncryptionConfiguration",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketPolicy",
          "s3:PutBucketVersioning",
          "s3:PutLifecycleConfiguration"
        ],
        "Resource": [
          "arn:aws:s3:::migrationhub-strategy-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "discovery:GetDiscoverySummary",
          "discovery:DescribeTags",
          "discovery:DescribeConfigurations",
          "discovery:ListConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/migrationhub-strategy.amazonaws.com/AWSMigrationHubStrategyServiceRolePolicy*"
        ]
      }
    ]
  },
  "AWSPanoramaServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AWSPanoramaServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BQE5OFSDO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSPanoramaServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Panorama to manage resources in AWS IoT, AWS Secrets Manager and AWS Panorama.",
      "CreateDate": "2021-10-20T12:12:50.000Z",
      "UpdateDate": "2021-10-20T12:12:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PanoramaIoTThingAccess",
        "Effect": "Allow",
        "Action": [
          "iot:CreateThing",
          "iot:DeleteThing",
          "iot:DeleteThingShadow",
          "iot:DescribeThing",
          "iot:GetThingShadow",
          "iot:UpdateThing",
          "iot:UpdateThingShadow"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/panorama*"
        ]
      },
      {
        "Sid": "PanoramaIoTCertificateAccess",
        "Effect": "Allow",
        "Action": [
          "iot:AttachThingPrincipal",
          "iot:DetachThingPrincipal",
          "iot:UpdateCertificate",
          "iot:DeleteCertificate",
          "iot:AttachPrincipalPolicy",
          "iot:DetachPrincipalPolicy"
        ],
        "Resource": [
          "arn:aws:iot:*:*:thing/panorama*",
          "arn:aws:iot:*:*:cert/*"
        ]
      },
      {
        "Sid": "PanoramaIoTCreateCertificateAccess",
        "Effect": "Allow",
        "Action": [
          "iot:CreateKeysAndCertificate"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PanoramaIoTCreatePolicyAndVersionAccess",
        "Effect": "Allow",
        "Action": [
          "iot:CreatePolicy",
          "iot:CreatePolicyVersion",
          "iot:AttachPolicy"
        ],
        "Resource": [
          "arn:aws:iot:*:*:policy/panorama*"
        ]
      },
      {
        "Sid": "PanoramaIoTJobAccess",
        "Effect": "Allow",
        "Action": [
          "iot:DescribeJobExecution",
          "iot:CreateJob",
          "iot:DeleteJob"
        ],
        "Resource": [
          "arn:aws:iot:*:*:job/panorama*",
          "arn:aws:iot:*:*:thing/panorama*"
        ]
      },
      {
        "Sid": "PanoramaIoTEndpointAccess",
        "Effect": "Allow",
        "Action": [
          "iot:DescribeEndpoint"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PanoramaReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "panorama:Describe*",
          "panorama:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret",
          "secretsmanager:CreateSecret",
          "secretsmanager:ListSecretVersionIds",
          "secretsmanager:DeleteSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:panorama*",
          "arn:aws:secretsmanager:*:*:secret:Panorama*"
        ]
      }
    ]
  },
  "AWSPanoramaApplianceServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSPanoramaApplianceServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4O5K6UVMRK",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSPanoramaApplianceServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows an AWS Panorama Appliance to upload logs to Amazon CloudWatch, and to get objects from Amazon S3 access points created for use with AWS Panorama.",
      "CreateDate": "2021-10-20T12:14:03.000Z",
      "UpdateDate": "2023-01-17T21:32:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PanoramaDeviceCreateLogStream",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/panorama_device*:log-stream:*",
          "arn:aws:logs:*:*:log-group:/aws/panorama/devices/*"
        ]
      },
      {
        "Sid": "PanoramaDeviceCreateLogGroup",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/panorama_device*",
          "arn:aws:logs:*:*:log-group:/aws/panorama/devices/*"
        ]
      },
      {
        "Sid": "PanoramaDevicePutMetric",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PanoramaDeviceS3Access",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:ListBucket",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "arn:aws:s3:::*-nodepackage-store-*",
          "arn:aws:s3:::*-application-payload-store-*",
          "arn:aws:s3:*:*:accesspoint/panorama*"
        ]
      }
    ]
  },
  "AWSMigrationHubStrategyCollector": {
    "policy": {
      "PolicyName": "AWSMigrationHubStrategyCollector",
      "PolicyId": "ANPAZKAPJZG4LHUI3MFF6",
      "Arn": "arn:aws:iam::aws:policy/AWSMigrationHubStrategyCollector",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to allow communication with the AWS Migration Hub Strategy Recommendations service, read/write access to S3 buckets related to the service, Amazon API Gateway access to upload logs and metrics to AWS, AWS Secrets Manager access to fetch credentials, and any related services.",
      "CreateDate": "2021-10-19T20:15:15.000Z",
      "UpdateDate": "2024-04-01T16:21:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "MHSRAllowS3Resources",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:GetBucketAcl",
          "s3:CreateBucket",
          "s3:PutEncryptionConfiguration",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketVersioning",
          "s3:PutLifecycleConfiguration",
          "s3:ListBucket",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "arn:aws:s3:::migrationhub-strategy-*"
        ]
      },
      {
        "Sid": "MHSRAllowS3ListBucket",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "MHSRAllowMetricsAndLogs",
        "Effect": "Allow",
        "Action": [
          "application-transformation:PutMetricData",
          "application-transformation:PutLogData",
          "application-transformation:StartPortingCompatibilityAssessment",
          "application-transformation:GetPortingCompatibilityAssessment",
          "application-transformation:StartPortingRecommendationAssessment",
          "application-transformation:GetPortingRecommendationAssessment"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "MHSRAllowExecuteAPI",
        "Effect": "Allow",
        "Action": [
          "execute-api:Invoke",
          "execute-api:ManageConnections"
        ],
        "Resource": [
          "arn:aws:execute-api:*:*:*/prod/*/put-log-data",
          "arn:aws:execute-api:*:*:*/prod/*/put-metric-data"
        ]
      },
      {
        "Sid": "MHSRAllowCollectorAPI",
        "Effect": "Allow",
        "Action": [
          "migrationhub-strategy:RegisterCollector",
          "migrationhub-strategy:GetAntiPattern",
          "migrationhub-strategy:GetMessage",
          "migrationhub-strategy:SendMessage",
          "migrationhub-strategy:ListAntiPatterns",
          "migrationhub-strategy:ListJarArtifacts",
          "migrationhub-strategy:UpdateCollectorConfiguration",
          "migrationhub-strategy:PutLogData",
          "migrationhub-strategy:PutMetricData"
        ],
        "Resource": [
          "arn:aws:migrationhub-strategy:*:*:*"
        ]
      },
      {
        "Sid": "MHSRAllowSecretsManager",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:migrationhub-strategy-*"
        ]
      }
    ]
  },
  "AWSMarketplacePurchaseOrdersServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSMarketplacePurchaseOrdersServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BHDLJGTI4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSMarketplacePurchaseOrdersServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access for AWS Marketplace services to purchase order management.",
      "CreateDate": "2021-10-27T15:12:37.000Z",
      "UpdateDate": "2021-10-27T15:12:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowPurchaseOrderActions",
        "Effect": "Allow",
        "Action": [
          "purchase-orders:ViewPurchaseOrders",
          "purchase-orders:ModifyPurchaseOrders"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeepRacerAccountAdminAccess": {
    "policy": {
      "PolicyName": "AWSDeepRacerAccountAdminAccess",
      "PolicyId": "ANPAZKAPJZG4HKQKG3YSU",
      "Arn": "arn:aws:iam::aws:policy/AWSDeepRacerAccountAdminAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "DeepRacer admin access to all actions including toggling between multiuser and single user mode.",
      "CreateDate": "2021-10-28T01:27:13.000Z",
      "UpdateDate": "2021-10-28T01:27:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DeepRacerAdminAccessStatement",
        "Effect": "Allow",
        "Action": [
          "deepracer:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeepRacerDefaultMultiUserAccess": {
    "policy": {
      "PolicyName": "AWSDeepRacerDefaultMultiUserAccess",
      "PolicyId": "ANPAZKAPJZG4IDMSNDQGW",
      "Arn": "arn:aws:iam::aws:policy/AWSDeepRacerDefaultMultiUserAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "DeepRacer MultiUser Default user access to use deepracer in multi-user mode",
      "CreateDate": "2021-10-28T01:27:13.000Z",
      "UpdateDate": "2021-10-28T01:27:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "deepracer:Add*",
          "deepracer:Remove*",
          "deepracer:Create*",
          "deepracer:Perform*",
          "deepracer:Clone*",
          "deepracer:Get*",
          "deepracer:List*",
          "deepracer:Edit*",
          "deepracer:Start*",
          "deepracer:Set*",
          "deepracer:Update*",
          "deepracer:Delete*",
          "deepracer:Stop*",
          "deepracer:Import*",
          "deepracer:Tag*",
          "deepracer:Untag*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "deepracer:GetAccountConfig",
          "deepracer:GetTrack",
          "deepracer:ListTracks",
          "deepracer:TestRewardFunction"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "deepracer:Admin*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCostAndUsageReportAutomationPolicy": {
    "policy": {
      "PolicyName": "AWSCostAndUsageReportAutomationPolicy",
      "PolicyId": "ANPAZKAPJZG4KVW6KKXOP",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSCostAndUsageReportAutomationPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to to describe the organization of the account, create S3 buckets for the MAP program and apply tags to it, create a Cost and Usage Report, and describe Cost and Usage Report definitions.",
      "CreateDate": "2021-11-01T21:27:29.000Z",
      "UpdateDate": "2021-11-01T21:27:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketTagging",
          "s3:PutBucketTagging",
          "s3:GetBucketPolicy",
          "s3:PutBucketPolicy",
          "s3:ListBucket",
          "s3:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-map-cur-bucket-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cur:PutReportDefinition",
          "cur:DeleteReportDefinition",
          "cur:DescribeReportDefinitions"
        ],
        "Resource": [
          "arn:aws:cur:*:*:definition/map-migrated-report"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cur:DescribeReportDefinitions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRedshiftAllCommandsFullAccess": {
    "policy": {
      "PolicyName": "AmazonRedshiftAllCommandsFullAccess",
      "PolicyId": "ANPAZKAPJZG4FLN3TI7CS",
      "Arn": "arn:aws:iam::aws:policy/AmazonRedshiftAllCommandsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy includes permissions to run SQL commands to copy, load, unload, query, and analyze data on Amazon Redshift. The policy also grants permissions to run select statements for related services, such as Amazon S3, Amazon CloudWatch logs, Amazon SageMaker, or AWS Glue.",
      "CreateDate": "2021-11-04T00:48:08.000Z",
      "UpdateDate": "2021-11-25T02:27:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateTrainingJob",
          "sagemaker:CreateAutoMLJob",
          "sagemaker:CreateCompilationJob",
          "sagemaker:CreateEndpoint",
          "sagemaker:DescribeAutoMLJob",
          "sagemaker:DescribeTrainingJob",
          "sagemaker:DescribeCompilationJob",
          "sagemaker:DescribeProcessingJob",
          "sagemaker:DescribeTransformJob",
          "sagemaker:ListCandidatesForAutoMLJob",
          "sagemaker:StopAutoMLJob",
          "sagemaker:StopCompilationJob",
          "sagemaker:StopTrainingJob",
          "sagemaker:DescribeEndpoint",
          "sagemaker:InvokeEndpoint",
          "sagemaker:StopProcessingJob",
          "sagemaker:CreateModel",
          "sagemaker:CreateProcessingJob"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:model/*redshift*",
          "arn:aws:sagemaker:*:*:training-job/*redshift*",
          "arn:aws:sagemaker:*:*:automl-job/*redshift*",
          "arn:aws:sagemaker:*:*:compilation-job/*redshift*",
          "arn:aws:sagemaker:*:*:processing-job/*redshift*",
          "arn:aws:sagemaker:*:*:transform-job/*redshift*",
          "arn:aws:sagemaker:*:*:endpoint/*redshift*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/sagemaker/Endpoints/*redshift*",
          "arn:aws:logs:*:*:log-group:/aws/sagemaker/ProcessingJobs/*redshift*",
          "arn:aws:logs:*:*:log-group:/aws/sagemaker/TrainingJobs/*redshift*",
          "arn:aws:logs:*:*:log-group:/aws/sagemaker/TransformJobs/*redshift*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:BatchCheckLayerAvailability",
          "ecr:BatchGetImage",
          "ecr:GetAuthorizationToken",
          "ecr:GetDownloadUrlForLayer"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetBucketAcl",
          "s3:GetBucketCors",
          "s3:GetEncryptionConfiguration",
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:ListMultipartUploadParts",
          "s3:ListBucketMultipartUploads",
          "s3:PutObject",
          "s3:PutBucketAcl",
          "s3:PutBucketCors",
          "s3:DeleteObject",
          "s3:AbortMultipartUpload",
          "s3:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3:::redshift-downloads",
          "arn:aws:s3:::redshift-downloads/*",
          "arn:aws:s3:::*redshift*",
          "arn:aws:s3:::*redshift*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "dynamodb:Scan",
          "dynamodb:DescribeTable",
          "dynamodb:Getitem"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/*redshift*",
          "arn:aws:dynamodb:*:*:table/*redshift*/index/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticmapreduce:ListInstances"
        ],
        "Resource": [
          "arn:aws:elasticmapreduce:*:*:cluster/*redshift*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticmapreduce:ListInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:*redshift*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateDatabase",
          "glue:DeleteDatabase",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:UpdateDatabase",
          "glue:CreateTable",
          "glue:DeleteTable",
          "glue:BatchDeleteTable",
          "glue:UpdateTable",
          "glue:GetTable",
          "glue:GetTables",
          "glue:BatchCreatePartition",
          "glue:CreatePartition",
          "glue:DeletePartition",
          "glue:BatchDeletePartition",
          "glue:UpdatePartition",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:BatchGetPartition"
        ],
        "Resource": [
          "arn:aws:glue:*:*:table/*redshift*/*",
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/*redshift*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetResourcePolicy",
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret",
          "secretsmanager:ListSecretVersionIds"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:*redshift*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetRandomPassword",
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationVCenterClientPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationVCenterClientPolicy",
      "PolicyId": "ANPAZKAPJZG4EZSWKZUGJ",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationMigrationVCenterClientPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows installing and using the AWS VCenter Client, which is used with AWS Application Migration Service (MGN) to migrate external servers to AWS. Attach this policy to your IAM users or roles whose credentials you provide when installing the AWS VCenter Client.",
      "CreateDate": "2021-11-08T12:53:08.000Z",
      "UpdateDate": "2021-11-08T12:53:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgn:CreateVcenterClientForMgn",
          "mgn:DescribeVcenterClients"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgn:GetVcenterClientCommandsForMgn",
          "mgn:SendVcenterClientCommandResultForMgn",
          "mgn:SendVcenterClientLogsForMgn",
          "mgn:SendVcenterClientMetricsForMgn",
          "mgn:DeleteVcenterClient",
          "mgn:TagResource",
          "mgn:NotifyVcenterClientStartedForMgn"
        ],
        "Resource": [
          "arn:aws:mgn:*:*:vcenter-client/*"
        ]
      }
    ]
  },
  "AmazonDevOpsGuruOrganizationsAccess": {
    "policy": {
      "PolicyName": "AmazonDevOpsGuruOrganizationsAccess",
      "PolicyId": "ANPAZKAPJZG4M26ELBKR2",
      "Arn": "arn:aws:iam::aws:policy/AmazonDevOpsGuruOrganizationsAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide access to enable and manage Amazon DevOps Guru within an organization.",
      "CreateDate": "2021-11-15T23:50:52.000Z",
      "UpdateDate": "2021-11-15T23:50:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DevOpsGuruOrganizationsAccess",
        "Effect": "Allow",
        "Action": [
          "devops-guru:DescribeOrganizationHealth",
          "devops-guru:DescribeOrganizationResourceCollectionHealth",
          "devops-guru:DescribeOrganizationOverview",
          "devops-guru:ListOrganizationInsights",
          "devops-guru:SearchOrganizationInsights"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OrganizationsDataAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListAccounts",
          "organizations:ListChildren",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListRoots"
        ],
        "Resource": [
          "arn:aws:organizations::*:"
        ]
      },
      {
        "Sid": "OrganizationsAdminDataAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:DeregisterDelegatedAdministrator",
          "organizations:RegisterDelegatedAdministrator",
          "organizations:ListDelegatedAdministrators",
          "organizations:EnableAWSServiceAccess",
          "organizations:DisableAWSServiceAccess"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonInspector2ServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonInspector2ServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BINOILVQW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonInspector2ServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v12",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants Amazon Inspector access to AWS Services needed to perform security assessments",
      "CreateDate": "2021-11-16T20:27:48.000Z",
      "UpdateDate": "2024-01-22T14:06:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "TirosPolicy",
        "Effect": "Allow",
        "Action": [
          "directconnect:DescribeConnections",
          "directconnect:DescribeDirectConnectGatewayAssociations",
          "directconnect:DescribeDirectConnectGatewayAttachments",
          "directconnect:DescribeDirectConnectGateways",
          "directconnect:DescribeVirtualGateways",
          "directconnect:DescribeVirtualInterfaces",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeManagedPrefixLists",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRegions",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeTransitGatewayAttachments",
          "ec2:DescribeTransitGatewayConnects",
          "ec2:DescribeTransitGatewayPeeringAttachments",
          "ec2:DescribeTransitGatewayRouteTables",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:GetManagedPrefixListEntries",
          "ec2:GetTransitGatewayRouteTablePropagations",
          "ec2:SearchTransitGatewayRoutes",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetGroupAttributes",
          "elasticloadbalancing:DescribeTargetHealth",
          "network-firewall:DescribeFirewall",
          "network-firewall:DescribeFirewallPolicy",
          "network-firewall:DescribeResourcePolicy",
          "network-firewall:DescribeRuleGroup",
          "network-firewall:ListFirewallPolicies",
          "network-firewall:ListFirewalls",
          "network-firewall:ListRuleGroups",
          "tiros:CreateQuery",
          "tiros:GetQueryAnswer"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PackageVulnerabilityScanning",
        "Effect": "Allow",
        "Action": [
          "ecr:BatchGetImage",
          "ecr:BatchGetRepositoryScanningConfiguration",
          "ecr:DescribeImages",
          "ecr:DescribeRegistry",
          "ecr:DescribeRepositories",
          "ecr:GetAuthorizationToken",
          "ecr:GetDownloadUrlForLayer",
          "ecr:GetRegistryScanningConfiguration",
          "ecr:ListImages",
          "ecr:PutRegistryScanningConfiguration",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "ssm:DescribeAssociation",
          "ssm:DescribeAssociationExecutions",
          "ssm:DescribeInstanceInformation",
          "ssm:ListAssociations",
          "ssm:ListResourceDataSync"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LambdaPackageVulnerabilityScanning",
        "Effect": "Allow",
        "Action": [
          "lambda:ListFunctions",
          "lambda:GetFunction",
          "lambda:GetLayerVersion",
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GatherInventory",
        "Effect": "Allow",
        "Action": [
          "ssm:CreateAssociation",
          "ssm:StartAssociationsOnce",
          "ssm:DeleteAssociation",
          "ssm:UpdateAssociation"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ssm:*:*:document/AmazonInspector2-*",
          "arn:aws:ssm:*:*:document/AWS-GatherSoftwareInventory",
          "arn:aws:ssm:*:*:managed-instance/*",
          "arn:aws:ssm:*:*:association/*"
        ]
      },
      {
        "Sid": "DataSyncCleanup",
        "Effect": "Allow",
        "Action": [
          "ssm:CreateResourceDataSync",
          "ssm:DeleteResourceDataSync"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:resource-data-sync/InspectorResourceDataSync-do-not-delete"
        ]
      },
      {
        "Sid": "ManagedRules",
        "Effect": "Allow",
        "Action": [
          "events:PutRule",
          "events:DeleteRule",
          "events:DescribeRule",
          "events:ListTargetsByRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/DO-NOT-DELETE-AmazonInspector*ManagedRule"
        ]
      },
      {
        "Sid": "LambdaCodeVulnerabilityScanning",
        "Effect": "Allow",
        "Action": [
          "codeguru-security:CreateScan",
          "codeguru-security:GetAccountConfiguration",
          "codeguru-security:GetFindings",
          "codeguru-security:GetScan",
          "codeguru-security:ListFindings",
          "codeguru-security:BatchGetFindings",
          "codeguru-security:DeleteScansByCategory"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeGuruCodeVulnerabilityScanning",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:ListAttachedRolePolicies",
          "iam:ListPolicies",
          "iam:ListPolicyVersions",
          "iam:ListRolePolicies",
          "lambda:ListVersionsByFunction"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2DeepInspection",
        "Effect": "Allow",
        "Action": [
          "ssm:PutParameter",
          "ssm:GetParameters",
          "ssm:DeleteParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/inspector-aws/service/inspector-linux-application-paths"
        ]
      },
      {
        "Sid": "AllowManagementOfServiceLinkedChannel",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:CreateServiceLinkedChannel",
          "cloudtrail:DeleteServiceLinkedChannel"
        ],
        "Resource": [
          "arn:aws:cloudtrail:*:*:channel/aws-service-channel/inspector2/*"
        ]
      },
      {
        "Sid": "AllowListServiceLinkedChannels",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:ListServiceLinkedChannels"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowToRunInvokeCisSpecificDocuments",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AmazonInspector2-InvokeInspectorSsmPluginCIS"
        ]
      },
      {
        "Sid": "AllowToRunCisCommandsToSpecificResources",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "AllowToPutCloudwatchMetricData",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryRecoveryInstancePolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryRecoveryInstancePolicy",
      "PolicyId": "ANPAZKAPJZG4NGCMXUFTL",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryRecoveryInstancePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is attached to the instance role of Elastic Disaster Recovery's Recovery Instance.  This policy allows the Elastic Disaster Recovery (DRS) Recovery Instance, which are EC2 instances launched by Elastic Disaster Recovery - to communicate with the DRS service, and to be able to failback to their original source infrastructure. An IAM role with this policy is attached (as an EC2 Instance Profile) by Elastic Disaster Recovery to the DRS Recovery Instances. We do not recommend that you attach this policy to your IAM users or roles.",
      "CreateDate": "2021-11-17T10:20:43.000Z",
      "UpdateDate": "2023-11-27T13:11:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSRecoveryInstancePolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:SendAgentMetricsForDrs",
          "drs:SendAgentLogsForDrs",
          "drs:UpdateAgentSourcePropertiesForDrs",
          "drs:UpdateAgentReplicationInfoForDrs",
          "drs:UpdateAgentConversionInfoForDrs",
          "drs:GetAgentCommandForDrs",
          "drs:GetAgentConfirmedResumeInfoForDrs",
          "drs:GetAgentRuntimeConfigurationForDrs",
          "drs:UpdateAgentBacklogForDrs",
          "drs:GetAgentReplicationInfoForDrs",
          "drs:UpdateReplicationCertificateForDrs",
          "drs:NotifyReplicationServerAuthenticationForDrs"
        ],
        "Resource": [
          "arn:aws:drs:*:*:recovery-instance/*"
        ]
      },
      {
        "Sid": "DRSRecoveryInstancePolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:DescribeRecoveryInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSRecoveryInstancePolicy3",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstanceTypes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSRecoveryInstancePolicy4",
        "Effect": "Allow",
        "Action": [
          "drs:GetAgentInstallationAssetsForDrs",
          "drs:SendClientLogsForDrs",
          "drs:CreateSourceServerForDrs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSRecoveryInstancePolicy5",
        "Effect": "Allow",
        "Action": [
          "drs:TagResource"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      },
      {
        "Sid": "DRSRecoveryInstancePolicy6",
        "Effect": "Allow",
        "Action": [
          "drs:SendAgentMetricsForDrs",
          "drs:SendAgentLogsForDrs",
          "drs:UpdateAgentSourcePropertiesForDrs",
          "drs:UpdateAgentReplicationInfoForDrs",
          "drs:UpdateAgentConversionInfoForDrs",
          "drs:GetAgentCommandForDrs",
          "drs:GetAgentConfirmedResumeInfoForDrs",
          "drs:GetAgentRuntimeConfigurationForDrs",
          "drs:UpdateAgentBacklogForDrs",
          "drs:GetAgentReplicationInfoForDrs"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      },
      {
        "Sid": "DRSRecoveryInstancePolicy7",
        "Effect": "Allow",
        "Action": [
          "sts:AssumeRole",
          "sts:TagSession"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/DRSCrossAccountAgentAuthorizedRole_*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryAgentPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryAgentPolicy",
      "PolicyId": "ANPAZKAPJZG4IPFHAAF4L",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryAgentPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows using the AWS Replication Agent, which is used with AWS Elastic Disaster Recovery (DRS) to recover source servers to AWS. We do not recommend that you attach this policy to your IAM users or roles.",
      "CreateDate": "2021-11-17T10:32:32.000Z",
      "UpdateDate": "2023-11-27T13:44:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSAgentPolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:SendAgentMetricsForDrs",
          "drs:SendAgentLogsForDrs",
          "drs:UpdateAgentSourcePropertiesForDrs",
          "drs:UpdateAgentReplicationInfoForDrs",
          "drs:UpdateAgentConversionInfoForDrs",
          "drs:GetAgentCommandForDrs",
          "drs:GetAgentConfirmedResumeInfoForDrs",
          "drs:GetAgentRuntimeConfigurationForDrs",
          "drs:UpdateAgentBacklogForDrs",
          "drs:GetAgentReplicationInfoForDrs",
          "drs:IssueAgentCertificateForDrs"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/${aws:SourceIdentity}"
        ]
      },
      {
        "Sid": "DRSAgentPolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:GetAgentInstallationAssetsForDrs"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryAgentInstallationPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryAgentInstallationPolicy",
      "PolicyId": "ANPAZKAPJZG4LHPRHPQKB",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticDisasterRecoveryAgentInstallationPolicy",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows installing the AWS Replication Agent, which is used with AWS Elastic Disaster Recovery (DRS) to recover external servers to AWS. Attach this policy to your IAM users or roles whose credentials you provide during the installation step of the AWS Replication Agent.",
      "CreateDate": "2021-11-17T10:37:54.000Z",
      "UpdateDate": "2023-11-27T12:38:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSAgentInstallationPolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:GetAgentInstallationAssetsForDrs",
          "drs:SendClientLogsForDrs",
          "drs:SendClientMetricsForDrs",
          "drs:CreateSourceServerForDrs",
          "drs:CreateRecoveryInstanceForDrs",
          "drs:DescribeRecoveryInstances",
          "drs:CreateSourceNetwork"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSAgentInstallationPolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:TagResource"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      },
      {
        "Sid": "DRSAgentInstallationPolicy3",
        "Effect": "Allow",
        "Action": [
          "drs:TagResource"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      },
      {
        "Sid": "DRSAgentInstallationPolicy4",
        "Effect": "Allow",
        "Action": [
          "drs:TagResource"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-network/*"
        ]
      },
      {
        "Sid": "DRSAgentInstallationPolicy5",
        "Effect": "Allow",
        "Action": [
          "drs:IssueAgentCertificateForDrs"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryFailbackPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryFailbackPolicy",
      "PolicyId": "ANPAZKAPJZG4FSEIUN7KZ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryFailbackPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows using the Elastic Disaster Recovery Failback Client, which is used to failback Recovery Instances back to your original source infrastructure. We do not recommend that you attach this policy to your IAM users or roles.",
      "CreateDate": "2021-11-17T10:41:40.000Z",
      "UpdateDate": "2023-11-27T12:56:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSFailbackPolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:SendClientMetricsForDrs",
          "drs:SendClientLogsForDrs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSFailbackPolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:GetChannelCommandsForDrs",
          "drs:SendChannelCommandResultForDrs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSFailbackPolicy3",
        "Effect": "Allow",
        "Action": [
          "drs:DescribeReplicationServerAssociationsForDrs",
          "drs:DescribeRecoveryInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSFailbackPolicy4",
        "Effect": "Allow",
        "Action": [
          "drs:GetFailbackCommandForDrs",
          "drs:UpdateFailbackClientLastSeenForDrs",
          "drs:NotifyAgentAuthenticationForDrs",
          "drs:UpdateAgentReplicationProcessStateForDrs",
          "drs:NotifyAgentReplicationProgressForDrs",
          "drs:NotifyAgentConnectedForDrs",
          "drs:NotifyAgentDisconnectedForDrs",
          "drs:NotifyConsistencyAttainedForDrs",
          "drs:GetFailbackLaunchRequestedForDrs",
          "drs:IssueAgentCertificateForDrs"
        ],
        "Resource": [
          "arn:aws:drs:*:*:recovery-instance/${aws:SourceIdentity}"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryConsoleFullAccess": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4LCQTK3F7W",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticDisasterRecoveryConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides full access to all public APIs of AWS Elastic Disaster Recovery (DRS), as well as permissions to read KMS key, License Manager, Resource Groups, Elastic Load Balancing, IAM, and EC2 information. Attach this policy to your IAM users or roles.",
      "CreateDate": "2021-11-17T10:46:29.000Z",
      "UpdateDate": "2023-10-16T12:24:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ConsoleFullAccess1",
        "Effect": "Allow",
        "Action": [
          "drs:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess2",
        "Effect": "Allow",
        "Action": [
          "kms:ListAliases",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess3",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstanceTypeOfferings",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeVolumes",
          "ec2:GetEbsEncryptionByDefault",
          "ec2:GetEbsDefaultKmsKeyId",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeCapacityReservations",
          "ec2:DescribeHosts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess4",
        "Effect": "Allow",
        "Action": [
          "license-manager:ListLicenseConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess5",
        "Effect": "Allow",
        "Action": [
          "resource-groups:ListGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess6",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess7",
        "Effect": "Allow",
        "Action": [
          "iam:ListInstanceProfiles",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess8",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryConversionServerRole",
          "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceRole"
        ]
      },
      {
        "Sid": "ConsoleFullAccess9",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess10",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplateVersion",
          "ec2:ModifyLaunchTemplate",
          "ec2:DeleteLaunchTemplateVersions",
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess11",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplate"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess12",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess13",
        "Effect": "Allow",
        "Action": [
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:ModifyInstanceAttribute",
          "ec2:GetConsoleOutput",
          "ec2:GetConsoleScreenshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess14",
        "Effect": "Allow",
        "Action": [
          "ec2:RevokeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess15",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess16",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess17",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess18",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess19",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess20",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume",
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess21",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume",
          "ec2:AttachVolume",
          "ec2:StartInstances",
          "ec2:GetConsoleOutput",
          "ec2:GetConsoleScreenshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess22",
        "Effect": "Allow",
        "Action": [
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess23",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess24",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess25",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess26",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess27",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess28",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess29",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4AACAUJE3T",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticDisasterRecoveryReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "You can attach the AWSElasticDisasterRecoveryReadOnlyAccess policy to your IAM identities.  This policy provides permissions to all read-only public APIs of Elastic Disaster Recovery (DRS), as well as some read-only APIs of other AWS services that are required in order to make full read-only use of the DRS console. Attach this policy to your IAM users or roles.",
      "CreateDate": "2021-11-17T10:50:05.000Z",
      "UpdateDate": "2023-11-27T13:03:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSReadOnlyAccess1",
        "Effect": "Allow",
        "Action": [
          "drs:DescribeJobLogItems",
          "drs:DescribeJobs",
          "drs:DescribeRecoveryInstances",
          "drs:DescribeRecoverySnapshots",
          "drs:DescribeReplicationConfigurationTemplates",
          "drs:DescribeSourceServers",
          "drs:GetFailbackReplicationConfiguration",
          "drs:GetLaunchConfiguration",
          "drs:GetReplicationConfiguration",
          "drs:ListExtensibleSourceServers",
          "drs:ListStagingAccounts",
          "drs:ListTagsForResource",
          "drs:ListLaunchActions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSReadOnlyAccess2",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSReadOnlyAccess4",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSReadOnlyAccess5",
        "Effect": "Allow",
        "Action": [
          "ssm:ListCommandInvocations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSReadOnlyAccess6",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecovery-*"
        ]
      },
      {
        "Sid": "DRSReadOnlyAccess7",
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeDocument",
          "ssm:GetDocument"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWS-CreateImage",
          "arn:aws:ssm:*:*:document/AWSMigration-ValidateNetworkConnectivity",
          "arn:aws:ssm:*:*:document/AWSMigration-VerifyMountedVolumes",
          "arn:aws:ssm:*:*:document/AWSMigration-ValidateHttpResponse",
          "arn:aws:ssm:*:*:document/AWSMigration-ValidateDiskSpace",
          "arn:aws:ssm:*:*:document/AWSMigration-VerifyProcessIsRunning",
          "arn:aws:ssm:*:*:document/AWSMigration-LinuxTimeSyncSetting",
          "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure"
        ]
      },
      {
        "Sid": "DRSReadOnlyAccess8",
        "Effect": "Allow",
        "Action": [
          "ssm:GetAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-execution/*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4HALZVJBJX",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSElasticDisasterRecoveryServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows Elastic Disaster Recovery to manage AWS resources on your behalf.",
      "CreateDate": "2021-11-17T10:56:17.000Z",
      "UpdateDate": "2024-01-17T13:49:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSServiceRolePolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:TagResource"
        ],
        "Resource": [
          "arn:aws:drs:*:*:recovery-instance/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy3",
        "Effect": "Allow",
        "Action": [
          "drs:CreateRecoveryInstanceForDrs",
          "drs:TagResource"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy4",
        "Effect": "Allow",
        "Action": [
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy5",
        "Effect": "Allow",
        "Action": [
          "kms:ListRetirableGrants"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy6",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeVolumes",
          "ec2:DescribeVolumeAttribute",
          "ec2:GetEbsDefaultKmsKeyId",
          "ec2:GetEbsEncryptionByDefault",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeVpcs",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeRouteTables",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeManagedPrefixLists",
          "ec2:GetManagedPrefixListEntries",
          "ec2:GetManagedPrefixListAssociations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy7",
        "Effect": "Allow",
        "Action": [
          "ec2:RegisterImage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy8",
        "Effect": "Allow",
        "Action": [
          "ec2:DeregisterImage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy9",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy10",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplateVersion",
          "ec2:ModifyLaunchTemplate",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteLaunchTemplateVersions"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy11",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume",
          "ec2:ModifyVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy12",
        "Effect": "Allow",
        "Action": [
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:ModifyInstanceAttribute",
          "ec2:GetConsoleOutput",
          "ec2:GetConsoleScreenshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy13",
        "Effect": "Allow",
        "Action": [
          "ec2:RevokeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy14",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy15",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy16",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy17",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplate"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy18",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy19",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy20",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume",
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy21",
        "Effect": "Allow",
        "Action": [
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy22",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy23",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy24",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy25",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryReplicationServerRole",
          "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryConversionServerRole",
          "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceRole"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy26",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy27",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:image/*"
        ]
      },
      {
        "Sid": "DRSServiceRolePolicy28",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryFailbackInstallationPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryFailbackInstallationPolicy",
      "PolicyId": "ANPAZKAPJZG4JWDYEAMTS",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticDisasterRecoveryFailbackInstallationPolicy",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "You can attach the AWSElasticDisasterRecoveryFailbackInstallationPolicy policy to your IAM identities.  This policy allows installing the Elastic Disaster Recovery Failback Client, which is used to failback Recovery Instances back to your original source infrastructure. Attach this policy to your IAM users or roles whose credentials you provide when running the Elastic Disaster Recovery Failback Client.",
      "CreateDate": "2021-11-17T11:02:03.000Z",
      "UpdateDate": "2023-11-27T13:43:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSFailbackInstallationPolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:SendClientLogsForDrs",
          "drs:SendClientMetricsForDrs",
          "drs:DescribeRecoveryInstances",
          "drs:DescribeSourceServers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSFailbackInstallationPolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:TagResource",
          "drs:IssueAgentCertificateForDrs",
          "drs:AssociateFailbackClientToRecoveryInstanceForDrs",
          "drs:GetSuggestedFailbackClientDeviceMappingForDrs",
          "drs:UpdateAgentReplicationInfoForDrs",
          "drs:UpdateFailbackClientDeviceMappingForDrs"
        ],
        "Resource": [
          "arn:aws:drs:*:*:recovery-instance/*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryReplicationServerPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryReplicationServerPolicy",
      "PolicyId": "ANPAZKAPJZG4PHOT5QARB",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryReplicationServerPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is attached to the Elastic Disaster Recovery Replication server's instance role. This policy allows the Elastic Disaster Recovery (DRS) Replication Servers, which are EC2 instances launched by Elastic Disaster Recovery - to communicate with the DRS service, and to create EBS snapshots in your AWS account. An IAM role with this policy is attached (as an EC2 Instance Profile) by Elastic Disaster Recovery to the DRS Replication Servers which are automatically launched and terminated by DRS, as needed. DRS Replication Servers are used to facilitate data replication from your external servers to AWS, as part of the recovery process managed by DRS. We do not recommend that you attach this policy to your IAM users or roles.",
      "CreateDate": "2021-11-17T13:34:00.000Z",
      "UpdateDate": "2023-11-27T13:28:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSReplicationServerPolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:SendClientMetricsForDrs",
          "drs:SendClientLogsForDrs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSReplicationServerPolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:GetChannelCommandsForDrs",
          "drs:SendChannelCommandResultForDrs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSReplicationServerPolicy3",
        "Effect": "Allow",
        "Action": [
          "drs:GetAgentSnapshotCreditsForDrs",
          "drs:DescribeReplicationServerAssociationsForDrs",
          "drs:DescribeSnapshotRequestsForDrs",
          "drs:BatchDeleteSnapshotRequestForDrs",
          "drs:NotifyAgentAuthenticationForDrs",
          "drs:BatchCreateVolumeSnapshotGroupForDrs",
          "drs:UpdateAgentReplicationProcessStateForDrs",
          "drs:NotifyAgentReplicationProgressForDrs",
          "drs:NotifyAgentConnectedForDrs",
          "drs:NotifyAgentDisconnectedForDrs",
          "drs:NotifyVolumeEventForDrs",
          "drs:SendVolumeStatsForDrs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSReplicationServerPolicy4",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSReplicationServerPolicy5",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "DRSReplicationServerPolicy6",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "DRSReplicationServerPolicy7",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryConversionServerPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryConversionServerPolicy",
      "PolicyId": "ANPAZKAPJZG4G7IPHJVFX",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryConversionServerPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is attached to the AWS Elastic Disaster Recovery Conversion server's instance role. This policy allows Elastic Disaster Recovery (DRS) Conversion Servers, which are EC2 instances launched by Elastic Disaster Recovery, to communicate with the DRS service. An IAM role with this policy is attached (as an EC2 Instance Profile) by DRS to the DRS Conversion Servers, which are automatically launched and terminated by DRS, when needed. We do not recommend that you attach this policy to your IAM users or roles. DRS Conversion Servers are used by Elastic Disaster Recovery when users choose to recover source servers using the DRS console, CLI, or API.",
      "CreateDate": "2021-11-17T13:42:23.000Z",
      "UpdateDate": "2023-11-27T13:13:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSConversionServerPolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:SendClientMetricsForDrs",
          "drs:SendClientLogsForDrs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSConversionServerPolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:GetChannelCommandsForDrs",
          "drs:SendChannelCommandResultForDrs"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSShieldServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSShieldServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LW6EWPBMS",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSShieldServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Shield to access AWS resources on your behalf to provide DDoS protection.",
      "CreateDate": "2021-11-17T19:17:46.000Z",
      "UpdateDate": "2021-11-17T19:17:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSShield",
        "Effect": "Allow",
        "Action": [
          "wafv2:GetWebACL",
          "wafv2:UpdateWebACL",
          "wafv2:GetWebACLForResource",
          "wafv2:ListResourcesForWebACL",
          "cloudfront:ListDistributions",
          "cloudfront:GetDistribution"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCloudWatchRUMServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonCloudWatchRUMServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GYUK4NU52",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonCloudWatchRUMServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permission to Amazon CloudWatch RUM Service to publish monitoring data to other relevant AWS services",
      "CreateDate": "2021-11-17T23:17:23.000Z",
      "UpdateDate": "2023-02-22T20:35:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "xray:PutTraceSegments"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDetectiveServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AmazonDetectiveServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4G5GQKDXB6",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonDetectiveServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Detective to make service calls on your behalf",
      "CreateDate": "2021-11-18T19:47:32.000Z",
      "UpdateDate": "2021-11-18T19:47:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:ListAccounts"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonGrafanaAthenaAccess": {
    "policy": {
      "PolicyName": "AmazonGrafanaAthenaAccess",
      "PolicyId": "ANPAZKAPJZG4GXSPM7QQ7",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonGrafanaAthenaAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants access to Amazon Athena and the dependencies needed to enable querying and writing results to s3 from the Amazon Athena plugin in Amazon Grafana.",
      "CreateDate": "2021-11-22T17:11:11.000Z",
      "UpdateDate": "2021-11-22T17:11:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "athena:GetDatabase",
          "athena:GetDataCatalog",
          "athena:GetTableMetadata",
          "athena:ListDatabases",
          "athena:ListDataCatalogs",
          "athena:ListTableMetadata",
          "athena:ListWorkGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:GetWorkGroup",
          "athena:StartQueryExecution",
          "athena:StopQueryExecution"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:BatchGetPartition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:ListMultipartUploadParts",
          "s3:AbortMultipartUpload",
          "s3:CreateBucket",
          "s3:PutObject",
          "s3:PutBucketPublicAccessBlock"
        ],
        "Resource": [
          "arn:aws:s3:::grafana-athena-query-results-*"
        ]
      }
    ]
  },
  "AWSElementalMediaTailorFullAccess": {
    "policy": {
      "PolicyName": "AWSElementalMediaTailorFullAccess",
      "PolicyId": "ANPAZKAPJZG4NNHQVB6BS",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaTailorFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Elemental MediaTailor resources",
      "CreateDate": "2021-11-23T00:04:39.000Z",
      "UpdateDate": "2021-11-23T00:04:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mediatailor:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaTailorReadOnly": {
    "policy": {
      "PolicyName": "AWSElementalMediaTailorReadOnly",
      "PolicyId": "ANPAZKAPJZG4BINASLBHU",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaTailorReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Elemental MediaTailor resources",
      "CreateDate": "2021-11-23T00:05:01.000Z",
      "UpdateDate": "2021-11-23T00:05:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mediatailor:List*",
          "mediatailor:Describe*",
          "mediatailor:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSProtonSyncServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSProtonSyncServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4H6XP2ZY2O",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSProtonSyncServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy which allows AWS Proton to sync your git repository contents to Proton or sync Proton contents to your git repositories.",
      "CreateDate": "2021-11-23T21:14:36.000Z",
      "UpdateDate": "2021-11-23T21:14:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SyncToProton",
        "Effect": "Allow",
        "Action": [
          "proton:UpdateServiceTemplateVersion",
          "proton:UpdateServiceTemplate",
          "proton:UpdateEnvironmentTemplateVersion",
          "proton:UpdateEnvironmentTemplate",
          "proton:GetServiceTemplateVersion",
          "proton:GetServiceTemplate",
          "proton:GetEnvironmentTemplateVersion",
          "proton:GetEnvironmentTemplate",
          "proton:DeleteServiceTemplateVersion",
          "proton:DeleteEnvironmentTemplateVersion",
          "proton:CreateServiceTemplateVersion",
          "proton:CreateServiceTemplate",
          "proton:CreateEnvironmentTemplateVersion",
          "proton:CreateEnvironmentTemplate",
          "proton:ListEnvironmentTemplateVersions",
          "proton:ListServiceTemplateVersions",
          "proton:CreateEnvironmentTemplateMajorVersion",
          "proton:CreateServiceTemplateMajorVersion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AccessGitRepos",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:UseConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      }
    ]
  },
  "AmazonBraketJobsExecutionPolicy": {
    "policy": {
      "PolicyName": "AmazonBraketJobsExecutionPolicy",
      "PolicyId": "ANPAZKAPJZG4CBFQZHJ3B",
      "Arn": "arn:aws:iam::aws:policy/AmazonBraketJobsExecutionPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants access to AWS Services and resources necessary for executing an Amazon Braket Job including S3, Cloudwatch, IAM and Braket",
      "CreateDate": "2021-11-26T19:34:41.000Z",
      "UpdateDate": "2021-11-28T05:34:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket",
          "s3:CreateBucket",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::amazon-braket-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetDownloadUrlForLayer",
          "ecr:BatchGetImage",
          "ecr:BatchCheckLayerAvailability"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/amazon-braket*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetAuthorizationToken"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "braket:CancelJob",
          "braket:CancelQuantumTask",
          "braket:CreateJob",
          "braket:CreateQuantumTask",
          "braket:GetDevice",
          "braket:GetJob",
          "braket:GetQuantumTask",
          "braket:SearchDevices",
          "braket:SearchJobs",
          "braket:SearchQuantumTasks",
          "braket:ListTagsForResource",
          "braket:TagResource",
          "braket:UntagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonBraketJobsExecutionRole*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:GetQueryResults"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents",
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:GetLogEvents",
          "logs:DescribeLogStreams",
          "logs:StartQuery",
          "logs:StopQuery"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/braket*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSECRPullThroughCache_ServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSECRPullThroughCache_ServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4G6RNU4BVN",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSECRPullThroughCache_ServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS services and resources used or managed by AWS ECR pull through cache",
      "CreateDate": "2021-11-26T21:51:09.000Z",
      "UpdateDate": "2023-11-13T15:23:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ECR",
        "Effect": "Allow",
        "Action": [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:InitiateLayerUpload",
          "ecr:UploadLayerPart",
          "ecr:CompleteLayerUpload",
          "ecr:PutImage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManager",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:ecr-pullthroughcache/*"
        ]
      }
    ]
  },
  "AmazonGrafanaRedshiftAccess": {
    "policy": {
      "PolicyName": "AmazonGrafanaRedshiftAccess",
      "PolicyId": "ANPAZKAPJZG4GQPUO5JGY",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonGrafanaRedshiftAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants scoped access to Amazon Redshift and the dependencies needed to use the Amazon Redshift plugin in Amazon Grafana.",
      "CreateDate": "2021-11-26T23:15:15.000Z",
      "UpdateDate": "2021-11-26T23:15:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "redshift:DescribeClusters",
          "redshift-data:GetStatementResult",
          "redshift-data:DescribeStatement",
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "redshift-data:DescribeTable",
          "redshift-data:ExecuteStatement",
          "redshift-data:ListTables",
          "redshift-data:ListSchemas"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "redshift:GetClusterCredentials"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:dbname:*/*",
          "arn:aws:redshift:*:*:dbuser:*/redshift_data_api_user"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMigrationHubRefactorSpacesServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSMigrationHubRefactorSpacesServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4KIIHJIPXW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSMigrationHubRefactorSpacesServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS Resources managed or used by AWS Migration Hub Refactor Spaces.",
      "CreateDate": "2021-11-29T06:50:15.000Z",
      "UpdateDate": "2023-07-20T15:57:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeTargetGroups",
          "ram:GetResourceShareAssociations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteTransitGatewayVpcAttachment",
          "ec2:CreateRoute",
          "ec2:DeleteRoute",
          "ec2:DeleteTags",
          "ram:DeleteResourceShare",
          "ram:AssociateResourceShare",
          "ram:DisassociateResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVpcEndpointServiceConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:CreateLoadBalancerListeners",
          "elasticloadbalancing:CreateListener",
          "elasticloadbalancing:DeleteListener",
          "elasticloadbalancing:DeleteTargetGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:PUT",
          "apigateway:POST",
          "apigateway:GET",
          "apigateway:PATCH",
          "apigateway:DELETE"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/restapis/*",
          "arn:aws:apigateway:*::/vpclinks/*",
          "arn:aws:apigateway:*::/tags",
          "arn:aws:apigateway:*::/tags/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/vpclinks/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteLoadBalancer"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateListener"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
          "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteListener"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteTargetGroup",
          "elasticloadbalancing:RegisterTargets"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeregisterTargets"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateTargetGroup"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        ]
      }
    ]
  },
  "AWSMigrationHubRefactorSpacesFullAccess": {
    "policy": {
      "PolicyName": "AWSMigrationHubRefactorSpacesFullAccess",
      "PolicyId": "ANPAZKAPJZG4OQKCEGRMK",
      "Arn": "arn:aws:iam::aws:policy/AWSMigrationHubRefactorSpacesFullAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to AWS MigrationHub Refactor Spaces, AWS MigrationHub Refactor Spaces console features and other related AWS services except permissions required for AWS Lambda and AWS Resource Access Manager as they can be scoped down based on tags.",
      "CreateDate": "2021-11-29T07:12:55.000Z",
      "UpdateDate": "2024-04-11T17:45:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "RefactorSpaces",
        "Effect": "Allow",
        "Action": [
          "refactor-spaces:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2Describe",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeVpcs",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeTags",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeInternetGateways"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RequestTagTransitGatewayCreate",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTransitGateway",
          "ec2:CreateSecurityGroup",
          "ec2:CreateTransitGatewayVpcAttachment"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ResourceTagTransitGatewayCreate",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTransitGateway",
          "ec2:CreateSecurityGroup",
          "ec2:CreateTransitGatewayVpcAttachment"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VpcEndpointServiceConfigurationCreate",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpointServiceConfiguration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2NetworkingModify",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteTransitGateway",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteTransitGatewayVpcAttachment",
          "ec2:CreateRoute",
          "ec2:DeleteRoute",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VpcEndpointServiceConfigurationDelete",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVpcEndpointServiceConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ELBLoadBalancerCreate",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateLoadBalancer"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Sid": "ELBDescribe",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeListeners"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ELBModify",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:CreateLoadBalancerListeners",
          "elasticloadbalancing:CreateListener",
          "elasticloadbalancing:DeleteListener",
          "elasticloadbalancing:DeleteTargetGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ELBLoadBalancerDelete",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteLoadBalancer"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Sid": "ELBListenerCreate",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateListener"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
          "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Sid": "ELBListenerDelete",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteListener"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Sid": "ELBTargetGroupModify",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteTargetGroup",
          "elasticloadbalancing:RegisterTargets"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        ]
      },
      {
        "Sid": "ELBTargetGroupCreate",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateTargetGroup"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        ]
      },
      {
        "Sid": "APIGatewayModify",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET",
          "apigateway:DELETE",
          "apigateway:PATCH",
          "apigateway:POST",
          "apigateway:PUT",
          "apigateway:UpdateRestApiPolicy"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/restapis/*",
          "arn:aws:apigateway:*::/vpclinks",
          "arn:aws:apigateway:*::/vpclinks/*",
          "arn:aws:apigateway:*::/tags",
          "arn:aws:apigateway:*::/tags/*"
        ]
      },
      {
        "Sid": "APIGatewayVpcLinksGet",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/vpclinks",
          "arn:aws:apigateway:*::/vpclinks/*"
        ]
      },
      {
        "Sid": "OrganizationDescribe",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudformationStackCreate",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudformationStackTag",
        "Effect": "Allow",
        "Action": [
          "cloudformation:TagResource"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/*"
        ]
      },
      {
        "Sid": "CreateRefactorSpacesSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateELBSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCloudWatchEvidentlyReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonCloudWatchEvidentlyReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4EQ6XHY7DQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonCloudWatchEvidentlyReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon CloudWatch Evidently",
      "CreateDate": "2021-11-29T15:08:38.000Z",
      "UpdateDate": "2021-11-29T15:08:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "evidently:GetExperiment",
          "evidently:GetFeature",
          "evidently:GetLaunch",
          "evidently:GetProject",
          "evidently:ListExperiments",
          "evidently:ListFeatures",
          "evidently:ListLaunches",
          "evidently:ListProjects"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCloudWatchEvidentlyFullAccess": {
    "policy": {
      "PolicyName": "AmazonCloudWatchEvidentlyFullAccess",
      "PolicyId": "ANPAZKAPJZG4OBNGJAXBS",
      "Arn": "arn:aws:iam::aws:policy/AmazonCloudWatchEvidentlyFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full only access to Amazon CloudWatch Evidently. Also provides access to related Amazon S3, Amazon SNS, Amazon CloudWatch, and other related services.",
      "CreateDate": "2021-11-29T15:10:14.000Z",
      "UpdateDate": "2021-11-29T15:10:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "evidently:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/CloudWatchRUMEvidentlyRole-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:DescribeAlarmHistory",
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms",
          "cloudwatch:TagResource",
          "cloudwatch:UnTagResource"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudtrail:LookupEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:Evidently-Alarm-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:Subscribe",
          "sns:ListSubscriptionsByTopic"
        ],
        "Resource": [
          "arn:*:sns:*:*:Evidently-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCloudWatchRUMFullAccess": {
    "policy": {
      "PolicyName": "AmazonCloudWatchRUMFullAccess",
      "PolicyId": "ANPAZKAPJZG4DPYSNOE6F",
      "Arn": "arn:aws:iam::aws:policy/AmazonCloudWatchRUMFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access permissions for the Amazon CloudWatch RUM service",
      "CreateDate": "2021-11-29T15:46:12.000Z",
      "UpdateDate": "2021-11-29T15:46:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rum:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/rum.amazonaws.com/AWSServiceRoleForRealUserMonitoring"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/RUM-Monitor*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cognito-identity:CreateIdentityPool",
          "cognito-identity:ListIdentityPools",
          "cognito-identity:DescribeIdentityPool",
          "cognito-identity:GetIdentityPoolRoles",
          "cognito-identity:SetIdentityPoolRoles"
        ],
        "Resource": [
          "arn:aws:cognito-identity:*:*:identitypool/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:DeleteLogGroup",
          "logs:PutRetentionPolicy",
          "logs:CreateLogStream"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*RUMService*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:GetLogDelivery",
          "logs:UpdateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:ListLogDeliveries",
          "logs:DescribeResourcePolicies"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group::log-stream:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "synthetics:describeCanaries",
          "synthetics:describeCanariesLastRun"
        ],
        "Resource": [
          "arn:aws:synthetics:*:*:canary:*"
        ]
      }
    ]
  },
  "AmazonInspector2FullAccess": {
    "policy": {
      "PolicyName": "AmazonInspector2FullAccess",
      "PolicyId": "ANPAZKAPJZG4CK4E7UETF",
      "Arn": "arn:aws:iam::aws:policy/AmazonInspector2FullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Inspector and access to other related services such as organizations.",
      "CreateDate": "2021-11-29T19:10:15.000Z",
      "UpdateDate": "2023-08-03T19:28:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "inspector2:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codeguru-security:BatchGetFindings",
          "codeguru-security:GetAccountConfiguration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess",
          "organizations:RegisterDelegatedAdministrator",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCloudWatchRUMReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonCloudWatchRUMReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4MNS2SANVJ",
      "Arn": "arn:aws:iam::aws:policy/AmazonCloudWatchRUMReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants read only permissions for the Amazon CloudWatch RUM service",
      "CreateDate": "2021-11-29T15:43:47.000Z",
      "UpdateDate": "2022-10-28T18:12:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rum:GetAppMonitor",
          "rum:GetAppMonitorData",
          "rum:ListAppMonitors",
          "rum:ListRumMetricsDestinations",
          "rum:BatchGetRumMetricDefinitions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkSpacesWebServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonWorkSpacesWebServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JW4G4DATC",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonWorkSpacesWebServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by Amazon WorkSpaces Web",
      "CreateDate": "2021-11-30T13:15:53.000Z",
      "UpdateDate": "2022-12-15T22:46:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeNetworkInterfaces",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:PutRecord",
          "kinesis:PutRecords",
          "kinesis:DescribeStreamSummary"
        ],
        "Resource": [
          "arn:aws:kinesis:*:*:stream/amazon-workspaces-web-*"
        ]
      }
    ]
  },
  "AmazonWorkSpacesWebReadOnly": {
    "policy": {
      "PolicyName": "AmazonWorkSpacesWebReadOnly",
      "PolicyId": "ANPAZKAPJZG4HIYKYJQEQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkSpacesWebReadOnly",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon WorkSpaces Web and its dependencies through the AWS Management Console, SDK, and CLI.",
      "CreateDate": "2021-11-30T14:20:36.000Z",
      "UpdateDate": "2022-11-02T20:20:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "workspaces-web:GetBrowserSettings",
          "workspaces-web:GetIdentityProvider",
          "workspaces-web:GetNetworkSettings",
          "workspaces-web:GetPortal",
          "workspaces-web:GetPortalServiceProviderMetadata",
          "workspaces-web:GetTrustStore",
          "workspaces-web:GetTrustStoreCertificate",
          "workspaces-web:GetUserSettings",
          "workspaces-web:GetUserAccessLoggingSettings",
          "workspaces-web:ListBrowserSettings",
          "workspaces-web:ListIdentityProviders",
          "workspaces-web:ListNetworkSettings",
          "workspaces-web:ListPortals",
          "workspaces-web:ListTagsForResource",
          "workspaces-web:ListTrustStoreCertificates",
          "workspaces-web:ListTrustStores",
          "workspaces-web:ListUserSettings",
          "workspaces-web:ListUserAccessLoggingSettings"
        ],
        "Resource": [
          "arn:aws:workspaces-web:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "kinesis:ListStreams"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIPAMServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSIPAMServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JEQHJ6QN6",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSIPAMServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows VPC IP Address Manager to access VPC resources and integrate with AWS Organizations on your behalf.",
      "CreateDate": "2021-11-30T19:08:11.000Z",
      "UpdateDate": "2023-11-08T19:05:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "IPAMDiscoveryDescribeActions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAddresses",
          "ec2:DescribeByoipCidrs",
          "ec2:DescribeIpv6Pools",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePublicIpv4Pools",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSecurityGroupRules",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:GetIpamDiscoveredAccounts",
          "ec2:GetIpamDiscoveredPublicAddresses",
          "ec2:GetIpamDiscoveredResourceCidrs",
          "globalaccelerator:ListAccelerators",
          "globalaccelerator:ListByoipCidrs",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchMetricsPublishActions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPrivateNetworksServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSPrivateNetworksServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IGXMJRAAS",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSPrivateNetworksServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Private Networks Service to manage resources on behalf of the customer.",
      "CreateDate": "2021-12-16T23:17:46.000Z",
      "UpdateDate": "2021-12-16T23:17:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDevOpsGuruConsoleFullAccess": {
    "policy": {
      "PolicyName": "AmazonDevOpsGuruConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4GSGM7UDO3",
      "Arn": "arn:aws:iam::aws:policy/AmazonDevOpsGuruConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The policy grants full-access to the DevOps Guru console.",
      "CreateDate": "2021-12-17T18:43:09.000Z",
      "UpdateDate": "2022-08-25T18:18:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DevOpsGuruFullAccess",
        "Effect": "Allow",
        "Action": [
          "devops-guru:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudFormationListStacksAccess",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchGetMetricDataAccess",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SnsListTopicsAccess",
        "Effect": "Allow",
        "Action": [
          "sns:ListTopics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SnsTopicOperations",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:GetTopicAttributes",
          "sns:SetTopicAttributes",
          "sns:Publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:DevOps-Guru-*"
        ]
      },
      {
        "Sid": "DevOpsGuruSlrCreation",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
        ]
      },
      {
        "Sid": "DevOpsGuruSlrDeletion",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
        ]
      },
      {
        "Sid": "RDSDescribeDBInstancesAccess",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PerformanceInsightsMetricsDataAccess",
        "Effect": "Allow",
        "Action": [
          "pi:GetResourceMetrics",
          "pi:DescribeDimensionKeys"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchLogsFilterLogEventsAccess",
        "Effect": "Allow",
        "Action": [
          "logs:FilterLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:*"
        ]
      }
    ]
  },
  "EC2FastLaunchServiceRolePolicy": {
    "policy": {
      "PolicyName": "EC2FastLaunchServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4PBILMNSY7",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/EC2FastLaunchServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy grants ec2fastlaunch to prepare and manage preprovisioned snapshots in customer's account & publish related metrics.",
      "CreateDate": "2022-01-10T13:08:21.000Z",
      "UpdateDate": "2022-01-10T13:08:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*::image/*",
          "arn:aws:ec2:*:*:key-pair/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "AllowCreateTaggedSnapshot",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplate"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypeOfferings",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeLaunchTemplates"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSAppRunnerFullAccess": {
    "policy": {
      "PolicyName": "AWSAppRunnerFullAccess",
      "PolicyId": "ANPAZKAPJZG4CI7E7OMBX",
      "Arn": "arn:aws:iam::aws:policy/AWSAppRunnerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to all App Runner actions.",
      "CreateDate": "2022-01-11T04:02:09.000Z",
      "UpdateDate": "2022-01-11T04:02:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/apprunner.amazonaws.com/AWSServiceRoleForAppRunner"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AppRunnerAdminAccess",
        "Effect": "Allow",
        "Action": [
          "apprunner:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AppRunnerNetworkingServiceRolePolicy": {
    "policy": {
      "PolicyName": "AppRunnerNetworkingServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BKUD67OZN",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AppRunnerNetworkingServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS AppRunner Networking to manage related AWS resources on your behalf.",
      "CreateDate": "2022-01-12T21:02:40.000Z",
      "UpdateDate": "2022-01-12T21:02:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcs",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonInspector2ReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonInspector2ReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4IASIMCEPM",
      "Arn": "arn:aws:iam::aws:policy/AmazonInspector2ReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to the Amazon inspector2 service and relevant support services",
      "CreateDate": "2022-01-21T14:45:14.000Z",
      "UpdateDate": "2023-09-22T20:56:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListDelegatedAdministrators",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:DescribeOrganizationalUnit",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "inspector2:BatchGet*",
          "inspector2:List*",
          "inspector2:Describe*",
          "inspector2:Get*",
          "inspector2:Search*",
          "codeguru-security:BatchGetFindings",
          "codeguru-security:GetAccountConfiguration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBackupServiceRolePolicyForS3Restore": {
    "policy": {
      "PolicyName": "AWSBackupServiceRolePolicyForS3Restore",
      "PolicyId": "ANPAZKAPJZG4KPHGRYXGS",
      "Arn": "arn:aws:iam::aws:policy/AWSBackupServiceRolePolicyForS3Restore",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy containing permissions necessary for AWS Backup to restore a S3 backup to a bucket. This includes read/write permissions to all S3 buckets, and permissions to GenerateDataKey and DescribeKey for all KMS keys.",
      "CreateDate": "2022-02-18T17:39:37.000Z",
      "UpdateDate": "2023-02-07T00:06:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:ListBucketVersions",
          "s3:ListBucket",
          "s3:GetBucketVersioning",
          "s3:GetBucketLocation",
          "s3:PutBucketVersioning",
          "s3:PutBucketOwnershipControls",
          "s3:GetBucketOwnershipControls"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:DeleteObject",
          "s3:PutObjectVersionAcl",
          "s3:GetObjectVersionAcl",
          "s3:GetObjectTagging",
          "s3:PutObjectTagging",
          "s3:GetObjectAcl",
          "s3:PutObjectAcl",
          "s3:ListMultipartUploadParts",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:GenerateDataKey",
          "kms:Decrypt"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBackupServiceRolePolicyForS3Backup": {
    "policy": {
      "PolicyName": "AWSBackupServiceRolePolicyForS3Backup",
      "PolicyId": "ANPAZKAPJZG4CGZAHUZ2D",
      "Arn": "arn:aws:iam::aws:policy/AWSBackupServiceRolePolicyForS3Backup",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy containing permissions necessary for AWS Backup to backup data in any S3 bucket. This includes read access to all S3 objects and any decrypt access for all KMS keys.",
      "CreateDate": "2022-02-18T17:40:24.000Z",
      "UpdateDate": "2022-09-01T16:52:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:PutTargets",
          "events:DescribeRule",
          "events:EnableRule",
          "events:PutRule",
          "events:RemoveTargets",
          "events:ListTargetsByRule",
          "events:DisableRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AwsBackupManagedRule*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:ListRules"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketTagging",
          "s3:GetInventoryConfiguration",
          "s3:ListBucketVersions",
          "s3:ListBucket",
          "s3:GetBucketVersioning",
          "s3:GetBucketLocation",
          "s3:GetBucketAcl",
          "s3:PutInventoryConfiguration",
          "s3:GetBucketNotification",
          "s3:PutBucketNotification"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObjectAcl",
          "s3:GetObject",
          "s3:GetObjectVersionTagging",
          "s3:GetObjectVersionAcl",
          "s3:GetObjectTagging",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "arn:aws:s3:::*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerServiceCatalogProductsGlueServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsGlueServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4DOYZH7RTZ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerServiceCatalogProductsGlueServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS Glue within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a set of related services including Glue, S3 and others.",
      "CreateDate": "2022-02-22T09:51:13.000Z",
      "UpdateDate": "2022-08-26T19:13:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "glue:BatchCreatePartition",
          "glue:BatchDeletePartition",
          "glue:BatchDeleteTable",
          "glue:BatchDeleteTableVersion",
          "glue:BatchGetPartition",
          "glue:CreateDatabase",
          "glue:CreatePartition",
          "glue:CreateTable",
          "glue:DeletePartition",
          "glue:DeleteTable",
          "glue:DeleteTableVersion",
          "glue:GetDatabase",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetTableVersion",
          "glue:GetTableVersions",
          "glue:SearchTables",
          "glue:UpdatePartition",
          "glue:UpdateTable",
          "glue:GetUserDefinedFunctions"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/default",
          "arn:aws:glue:*:*:database/global_temp",
          "arn:aws:glue:*:*:database/sagemaker-*",
          "arn:aws:glue:*:*:table/sagemaker-*",
          "arn:aws:glue:*:*:tableVersion/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:GetBucketAcl",
          "s3:GetBucketCors",
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:PutBucketCors"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*",
          "arn:aws:s3:::sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*",
          "arn:aws:s3:::sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DeleteLogDelivery",
          "logs:Describe*",
          "logs:GetLogDelivery",
          "logs:GetLogEvents",
          "logs:ListLogDeliveries",
          "logs:PutLogEvents",
          "logs:PutResourcePolicy",
          "logs:UpdateLogDelivery"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/glue/*"
        ]
      }
    ]
  },
  "AmazonSageMakerServiceCatalogProductsCodePipelineServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsCodePipelineServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4CL3UG2EHM",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerServiceCatalogProductsCodePipelineServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS CodePipeline within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a subset of related services including CodePipeline, CodeBuild and others.",
      "CreateDate": "2022-02-22T09:53:17.000Z",
      "UpdateDate": "2022-02-22T09:53:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateChangeSet",
          "cloudformation:CreateStack",
          "cloudformation:DescribeChangeSet",
          "cloudformation:DeleteChangeSet",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStacks",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:SetStackPolicy",
          "cloudformation:UpdateStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCloudformationRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codebuild:BatchGetBuilds",
          "codebuild:StartBuild"
        ],
        "Resource": [
          "arn:aws:codebuild:*:*:project/sagemaker-*",
          "arn:aws:codebuild:*:*:build/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codecommit:CancelUploadArchive",
          "codecommit:GetBranch",
          "codecommit:GetCommit",
          "codecommit:GetUploadArchiveStatus",
          "codecommit:UploadArchive"
        ],
        "Resource": [
          "arn:aws:codecommit:*:*:sagemaker-*"
        ]
      }
    ]
  },
  "AmazonSageMakerServiceCatalogProductsEventsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsEventsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4ATIM24QYI",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerServiceCatalogProductsEventsServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS CloudWatch Events within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a subset of related services including CodePipeline and others.",
      "CreateDate": "2022-02-22T09:53:59.000Z",
      "UpdateDate": "2022-02-22T09:53:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codepipeline:StartPipelineExecution"
        ],
        "Resource": [
          "arn:aws:codepipeline:*:*:sagemaker-*"
        ]
      }
    ]
  },
  "AmazonSageMakerServiceCatalogProductsFirehoseServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsFirehoseServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4ESFA6JNN2",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerServiceCatalogProductsFirehoseServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS Firehose within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a set of related services including Firehose and others.",
      "CreateDate": "2022-02-22T09:54:35.000Z",
      "UpdateDate": "2022-02-22T09:54:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "firehose:PutRecord",
          "firehose:PutRecordBatch"
        ],
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/sagemaker-*"
        ]
      }
    ]
  },
  "AWSAppRunnerReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSAppRunnerReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4PMYP6C5TR",
      "Arn": "arn:aws:iam::aws:policy/AWSAppRunnerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to list and view details about App Runner resources.",
      "CreateDate": "2022-02-24T21:24:15.000Z",
      "UpdateDate": "2022-02-24T21:24:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "apprunner:List*",
          "apprunner:Describe*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIdentitySyncFullAccess": {
    "policy": {
      "PolicyName": "AWSIdentitySyncFullAccess",
      "PolicyId": "ANPAZKAPJZG4ERMGGBXIS",
      "Arn": "arn:aws:iam::aws:policy/AWSIdentitySyncFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to the Identity Sync service",
      "CreateDate": "2022-03-23T23:29:33.000Z",
      "UpdateDate": "2022-03-23T23:29:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ds:AuthorizeApplication",
          "ds:UnauthorizeApplication"
        ],
        "Resource": [
          "arn:*:ds:*:*:*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "identity-sync:DeleteSyncProfile",
          "identity-sync:CreateSyncProfile",
          "identity-sync:GetSyncProfile",
          "identity-sync:StartSync",
          "identity-sync:StopSync",
          "identity-sync:CreateSyncFilter",
          "identity-sync:DeleteSyncFilter",
          "identity-sync:ListSyncFilters",
          "identity-sync:CreateSyncTarget",
          "identity-sync:DeleteSyncTarget",
          "identity-sync:GetSyncTarget",
          "identity-sync:UpdateSyncTarget"
        ],
        "Resource": [
          "arn:*:identity-sync:*:*:*/*"
        ]
      }
    ]
  },
  "AWSIdentitySyncReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSIdentitySyncReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4E7AMNPBT3",
      "Arn": "arn:aws:iam::aws:policy/AWSIdentitySyncReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Read only access to the Identity Sync service",
      "CreateDate": "2022-03-23T23:29:52.000Z",
      "UpdateDate": "2022-03-23T23:29:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "identity-sync:GetSyncProfile",
          "identity-sync:ListSyncFilters",
          "identity-sync:GetSyncTarget"
        ],
        "Resource": [
          "arn:*:identity-sync:*:*:*/*"
        ]
      }
    ]
  },
  "AmazonSageMakerServiceCatalogProductsApiGatewayServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsApiGatewayServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4PMOKIK2TP",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerServiceCatalogProductsApiGatewayServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS APIGateway within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a set of related services including CloudWatch Logs and others.",
      "CreateDate": "2022-03-25T04:25:36.000Z",
      "UpdateDate": "2022-03-25T04:25:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DeleteLogDelivery",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:DescribeResourcePolicies",
          "logs:DescribeDestinations",
          "logs:DescribeExportTasks",
          "logs:DescribeMetricFilters",
          "logs:DescribeQueries",
          "logs:DescribeQueryDefinitions",
          "logs:DescribeSubscriptionFilters",
          "logs:GetLogDelivery",
          "logs:GetLogEvents",
          "logs:PutLogEvents",
          "logs:PutResourcePolicy",
          "logs:UpdateLogDelivery"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/apigateway/*"
        ]
      }
    ]
  },
  "AmazonSageMakerServiceCatalogProductsCloudformationServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsCloudformationServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BLGQUR4HI",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerServiceCatalogProductsCloudformationServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS CloudFormation within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a subset of related services including SageMaker and others.",
      "CreateDate": "2022-03-25T04:26:40.000Z",
      "UpdateDate": "2022-03-25T04:26:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:AddAssociation",
          "sagemaker:AddTags",
          "sagemaker:AssociateTrialComponent",
          "sagemaker:BatchDescribeModelPackage",
          "sagemaker:BatchGetMetrics",
          "sagemaker:BatchGetRecord",
          "sagemaker:BatchPutMetrics",
          "sagemaker:CreateAction",
          "sagemaker:CreateAlgorithm",
          "sagemaker:CreateApp",
          "sagemaker:CreateAppImageConfig",
          "sagemaker:CreateArtifact",
          "sagemaker:CreateAutoMLJob",
          "sagemaker:CreateCodeRepository",
          "sagemaker:CreateCompilationJob",
          "sagemaker:CreateContext",
          "sagemaker:CreateDataQualityJobDefinition",
          "sagemaker:CreateDeviceFleet",
          "sagemaker:CreateDomain",
          "sagemaker:CreateEdgePackagingJob",
          "sagemaker:CreateEndpoint",
          "sagemaker:CreateEndpointConfig",
          "sagemaker:CreateExperiment",
          "sagemaker:CreateFeatureGroup",
          "sagemaker:CreateFlowDefinition",
          "sagemaker:CreateHumanTaskUi",
          "sagemaker:CreateHyperParameterTuningJob",
          "sagemaker:CreateImage",
          "sagemaker:CreateImageVersion",
          "sagemaker:CreateInferenceRecommendationsJob",
          "sagemaker:CreateLabelingJob",
          "sagemaker:CreateLineageGroupPolicy",
          "sagemaker:CreateModel",
          "sagemaker:CreateModelBiasJobDefinition",
          "sagemaker:CreateModelExplainabilityJobDefinition",
          "sagemaker:CreateModelPackage",
          "sagemaker:CreateModelPackageGroup",
          "sagemaker:CreateModelQualityJobDefinition",
          "sagemaker:CreateMonitoringSchedule",
          "sagemaker:CreateNotebookInstance",
          "sagemaker:CreateNotebookInstanceLifecycleConfig",
          "sagemaker:CreatePipeline",
          "sagemaker:CreatePresignedDomainUrl",
          "sagemaker:CreatePresignedNotebookInstanceUrl",
          "sagemaker:CreateProcessingJob",
          "sagemaker:CreateProject",
          "sagemaker:CreateTrainingJob",
          "sagemaker:CreateTransformJob",
          "sagemaker:CreateTrial",
          "sagemaker:CreateTrialComponent",
          "sagemaker:CreateUserProfile",
          "sagemaker:CreateWorkforce",
          "sagemaker:CreateWorkteam",
          "sagemaker:DeleteAction",
          "sagemaker:DeleteAlgorithm",
          "sagemaker:DeleteApp",
          "sagemaker:DeleteAppImageConfig",
          "sagemaker:DeleteArtifact",
          "sagemaker:DeleteAssociation",
          "sagemaker:DeleteCodeRepository",
          "sagemaker:DeleteContext",
          "sagemaker:DeleteDataQualityJobDefinition",
          "sagemaker:DeleteDeviceFleet",
          "sagemaker:DeleteDomain",
          "sagemaker:DeleteEndpoint",
          "sagemaker:DeleteEndpointConfig",
          "sagemaker:DeleteExperiment",
          "sagemaker:DeleteFeatureGroup",
          "sagemaker:DeleteFlowDefinition",
          "sagemaker:DeleteHumanLoop",
          "sagemaker:DeleteHumanTaskUi",
          "sagemaker:DeleteImage",
          "sagemaker:DeleteImageVersion",
          "sagemaker:DeleteLineageGroupPolicy",
          "sagemaker:DeleteModel",
          "sagemaker:DeleteModelBiasJobDefinition",
          "sagemaker:DeleteModelExplainabilityJobDefinition",
          "sagemaker:DeleteModelPackage",
          "sagemaker:DeleteModelPackageGroup",
          "sagemaker:DeleteModelPackageGroupPolicy",
          "sagemaker:DeleteModelQualityJobDefinition",
          "sagemaker:DeleteMonitoringSchedule",
          "sagemaker:DeleteNotebookInstance",
          "sagemaker:DeleteNotebookInstanceLifecycleConfig",
          "sagemaker:DeletePipeline",
          "sagemaker:DeleteProject",
          "sagemaker:DeleteRecord",
          "sagemaker:DeleteTags",
          "sagemaker:DeleteTrial",
          "sagemaker:DeleteTrialComponent",
          "sagemaker:DeleteUserProfile",
          "sagemaker:DeleteWorkforce",
          "sagemaker:DeleteWorkteam",
          "sagemaker:DeregisterDevices",
          "sagemaker:DescribeAction",
          "sagemaker:DescribeAlgorithm",
          "sagemaker:DescribeApp",
          "sagemaker:DescribeAppImageConfig",
          "sagemaker:DescribeArtifact",
          "sagemaker:DescribeAutoMLJob",
          "sagemaker:DescribeCodeRepository",
          "sagemaker:DescribeCompilationJob",
          "sagemaker:DescribeContext",
          "sagemaker:DescribeDataQualityJobDefinition",
          "sagemaker:DescribeDevice",
          "sagemaker:DescribeDeviceFleet",
          "sagemaker:DescribeDomain",
          "sagemaker:DescribeEdgePackagingJob",
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:DescribeExperiment",
          "sagemaker:DescribeFeatureGroup",
          "sagemaker:DescribeFlowDefinition",
          "sagemaker:DescribeHumanLoop",
          "sagemaker:DescribeHumanTaskUi",
          "sagemaker:DescribeHyperParameterTuningJob",
          "sagemaker:DescribeImage",
          "sagemaker:DescribeImageVersion",
          "sagemaker:DescribeInferenceRecommendationsJob",
          "sagemaker:DescribeLabelingJob",
          "sagemaker:DescribeLineageGroup",
          "sagemaker:DescribeModel",
          "sagemaker:DescribeModelBiasJobDefinition",
          "sagemaker:DescribeModelExplainabilityJobDefinition",
          "sagemaker:DescribeModelPackage",
          "sagemaker:DescribeModelPackageGroup",
          "sagemaker:DescribeModelQualityJobDefinition",
          "sagemaker:DescribeMonitoringSchedule",
          "sagemaker:DescribeNotebookInstance",
          "sagemaker:DescribeNotebookInstanceLifecycleConfig",
          "sagemaker:DescribePipeline",
          "sagemaker:DescribePipelineDefinitionForExecution",
          "sagemaker:DescribePipelineExecution",
          "sagemaker:DescribeProcessingJob",
          "sagemaker:DescribeProject",
          "sagemaker:DescribeSubscribedWorkteam",
          "sagemaker:DescribeTrainingJob",
          "sagemaker:DescribeTransformJob",
          "sagemaker:DescribeTrial",
          "sagemaker:DescribeTrialComponent",
          "sagemaker:DescribeUserProfile",
          "sagemaker:DescribeWorkforce",
          "sagemaker:DescribeWorkteam",
          "sagemaker:DisableSagemakerServicecatalogPortfolio",
          "sagemaker:DisassociateTrialComponent",
          "sagemaker:EnableSagemakerServicecatalogPortfolio",
          "sagemaker:GetDeviceFleetReport",
          "sagemaker:GetDeviceRegistration",
          "sagemaker:GetLineageGroupPolicy",
          "sagemaker:GetModelPackageGroupPolicy",
          "sagemaker:GetRecord",
          "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
          "sagemaker:GetSearchSuggestions",
          "sagemaker:InvokeEndpoint",
          "sagemaker:InvokeEndpointAsync",
          "sagemaker:ListActions",
          "sagemaker:ListAlgorithms",
          "sagemaker:ListAppImageConfigs",
          "sagemaker:ListApps",
          "sagemaker:ListArtifacts",
          "sagemaker:ListAssociations",
          "sagemaker:ListAutoMLJobs",
          "sagemaker:ListCandidatesForAutoMLJob",
          "sagemaker:ListCodeRepositories",
          "sagemaker:ListCompilationJobs",
          "sagemaker:ListContexts",
          "sagemaker:ListDataQualityJobDefinitions",
          "sagemaker:ListDeviceFleets",
          "sagemaker:ListDevices",
          "sagemaker:ListDomains",
          "sagemaker:ListEdgePackagingJobs",
          "sagemaker:ListEndpointConfigs",
          "sagemaker:ListEndpoints",
          "sagemaker:ListExperiments",
          "sagemaker:ListFeatureGroups",
          "sagemaker:ListFlowDefinitions",
          "sagemaker:ListHumanLoops",
          "sagemaker:ListHumanTaskUis",
          "sagemaker:ListHyperParameterTuningJobs",
          "sagemaker:ListImageVersions",
          "sagemaker:ListImages",
          "sagemaker:ListInferenceRecommendationsJobs",
          "sagemaker:ListLabelingJobs",
          "sagemaker:ListLabelingJobsForWorkteam",
          "sagemaker:ListLineageGroups",
          "sagemaker:ListModelBiasJobDefinitions",
          "sagemaker:ListModelExplainabilityJobDefinitions",
          "sagemaker:ListModelMetadata",
          "sagemaker:ListModelPackageGroups",
          "sagemaker:ListModelPackages",
          "sagemaker:ListModelQualityJobDefinitions",
          "sagemaker:ListModels",
          "sagemaker:ListMonitoringExecutions",
          "sagemaker:ListMonitoringSchedules",
          "sagemaker:ListNotebookInstanceLifecycleConfigs",
          "sagemaker:ListNotebookInstances",
          "sagemaker:ListPipelineExecutionSteps",
          "sagemaker:ListPipelineExecutions",
          "sagemaker:ListPipelineParametersForExecution",
          "sagemaker:ListPipelines",
          "sagemaker:ListProcessingJobs",
          "sagemaker:ListProjects",
          "sagemaker:ListSubscribedWorkteams",
          "sagemaker:ListTags",
          "sagemaker:ListTrainingJobs",
          "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
          "sagemaker:ListTransformJobs",
          "sagemaker:ListTrialComponents",
          "sagemaker:ListTrials",
          "sagemaker:ListUserProfiles",
          "sagemaker:ListWorkforces",
          "sagemaker:ListWorkteams",
          "sagemaker:PutLineageGroupPolicy",
          "sagemaker:PutModelPackageGroupPolicy",
          "sagemaker:PutRecord",
          "sagemaker:QueryLineage",
          "sagemaker:RegisterDevices",
          "sagemaker:RenderUiTemplate",
          "sagemaker:Search",
          "sagemaker:SendHeartbeat",
          "sagemaker:SendPipelineExecutionStepFailure",
          "sagemaker:SendPipelineExecutionStepSuccess",
          "sagemaker:StartHumanLoop",
          "sagemaker:StartMonitoringSchedule",
          "sagemaker:StartNotebookInstance",
          "sagemaker:StartPipelineExecution",
          "sagemaker:StopAutoMLJob",
          "sagemaker:StopCompilationJob",
          "sagemaker:StopEdgePackagingJob",
          "sagemaker:StopHumanLoop",
          "sagemaker:StopHyperParameterTuningJob",
          "sagemaker:StopInferenceRecommendationsJob",
          "sagemaker:StopLabelingJob",
          "sagemaker:StopMonitoringSchedule",
          "sagemaker:StopNotebookInstance",
          "sagemaker:StopPipelineExecution",
          "sagemaker:StopProcessingJob",
          "sagemaker:StopTrainingJob",
          "sagemaker:StopTransformJob",
          "sagemaker:UpdateAction",
          "sagemaker:UpdateAppImageConfig",
          "sagemaker:UpdateArtifact",
          "sagemaker:UpdateCodeRepository",
          "sagemaker:UpdateContext",
          "sagemaker:UpdateDeviceFleet",
          "sagemaker:UpdateDevices",
          "sagemaker:UpdateDomain",
          "sagemaker:UpdateEndpoint",
          "sagemaker:UpdateEndpointWeightsAndCapacities",
          "sagemaker:UpdateExperiment",
          "sagemaker:UpdateImage",
          "sagemaker:UpdateModelPackage",
          "sagemaker:UpdateMonitoringSchedule",
          "sagemaker:UpdateNotebookInstance",
          "sagemaker:UpdateNotebookInstanceLifecycleConfig",
          "sagemaker:UpdatePipeline",
          "sagemaker:UpdatePipelineExecution",
          "sagemaker:UpdateProject",
          "sagemaker:UpdateTrainingJob",
          "sagemaker:UpdateTrial",
          "sagemaker:UpdateTrialComponent",
          "sagemaker:UpdateUserProfile",
          "sagemaker:UpdateWorkforce",
          "sagemaker:UpdateWorkteam"
        ],
        "NotResource": [
          "arn:aws:sagemaker:*:*:domain/*",
          "arn:aws:sagemaker:*:*:user-profile/*",
          "arn:aws:sagemaker:*:*:app/*",
          "arn:aws:sagemaker:*:*:flow-definition/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCodeBuildRole",
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsExecutionRole"
        ]
      }
    ]
  },
  "AmazonSageMakerServiceCatalogProductsCodeBuildServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsCodeBuildServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4ILK6GZTSE",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerServiceCatalogProductsCodeBuildServiceRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS CodeBuild within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a subset of related services including CodePipeline, CodeBuild and others.",
      "CreateDate": "2022-03-25T04:27:46.000Z",
      "UpdateDate": "2022-03-25T04:27:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codecommit:CancelUploadArchive",
          "codecommit:GetBranch",
          "codecommit:GetCommit",
          "codecommit:GetUploadArchiveStatus",
          "codecommit:UploadArchive"
        ],
        "Resource": [
          "arn:aws:codecommit:*:*:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:BatchCheckLayerAvailability",
          "ecr:BatchGetImage",
          "ecr:DescribeImageScanFindings",
          "ecr:DescribeRegistry",
          "ecr:DescribeImageReplicationStatus",
          "ecr:DescribeRepositories",
          "ecr:DescribeImageReplicationStatus",
          "ecr:GetAuthorizationToken",
          "ecr:GetDownloadUrlForLayer"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:CompleteLayerUpload",
          "ecr:CreateRepository",
          "ecr:InitiateLayerUpload",
          "ecr:PutImage",
          "ecr:UploadLayerPart"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsEventsRole",
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCodePipelineRole",
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCloudformationRole",
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCodeBuildRole",
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsExecutionRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DeleteLogDelivery",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:DescribeResourcePolicies",
          "logs:DescribeDestinations",
          "logs:DescribeExportTasks",
          "logs:DescribeMetricFilters",
          "logs:DescribeQueries",
          "logs:DescribeQueryDefinitions",
          "logs:DescribeSubscriptionFilters",
          "logs:GetLogDelivery",
          "logs:GetLogEvents",
          "logs:ListLogDeliveries",
          "logs:PutLogEvents",
          "logs:PutResourcePolicy",
          "logs:UpdateLogDelivery"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/codebuild/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:GetBucketAcl",
          "s3:GetBucketCors",
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:PutBucketCors",
          "s3:AbortMultipartUpload",
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*",
          "arn:aws:s3:::sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:AddAssociation",
          "sagemaker:AddTags",
          "sagemaker:AssociateTrialComponent",
          "sagemaker:BatchDescribeModelPackage",
          "sagemaker:BatchGetMetrics",
          "sagemaker:BatchGetRecord",
          "sagemaker:BatchPutMetrics",
          "sagemaker:CreateAction",
          "sagemaker:CreateAlgorithm",
          "sagemaker:CreateApp",
          "sagemaker:CreateAppImageConfig",
          "sagemaker:CreateArtifact",
          "sagemaker:CreateAutoMLJob",
          "sagemaker:CreateCodeRepository",
          "sagemaker:CreateCompilationJob",
          "sagemaker:CreateContext",
          "sagemaker:CreateDataQualityJobDefinition",
          "sagemaker:CreateDeviceFleet",
          "sagemaker:CreateDomain",
          "sagemaker:CreateEdgePackagingJob",
          "sagemaker:CreateEndpoint",
          "sagemaker:CreateEndpointConfig",
          "sagemaker:CreateExperiment",
          "sagemaker:CreateFeatureGroup",
          "sagemaker:CreateFlowDefinition",
          "sagemaker:CreateHumanTaskUi",
          "sagemaker:CreateHyperParameterTuningJob",
          "sagemaker:CreateImage",
          "sagemaker:CreateImageVersion",
          "sagemaker:CreateInferenceRecommendationsJob",
          "sagemaker:CreateLabelingJob",
          "sagemaker:CreateLineageGroupPolicy",
          "sagemaker:CreateModel",
          "sagemaker:CreateModelBiasJobDefinition",
          "sagemaker:CreateModelExplainabilityJobDefinition",
          "sagemaker:CreateModelPackage",
          "sagemaker:CreateModelPackageGroup",
          "sagemaker:CreateModelQualityJobDefinition",
          "sagemaker:CreateMonitoringSchedule",
          "sagemaker:CreateNotebookInstance",
          "sagemaker:CreateNotebookInstanceLifecycleConfig",
          "sagemaker:CreatePipeline",
          "sagemaker:CreatePresignedDomainUrl",
          "sagemaker:CreatePresignedNotebookInstanceUrl",
          "sagemaker:CreateProcessingJob",
          "sagemaker:CreateProject",
          "sagemaker:CreateTrainingJob",
          "sagemaker:CreateTransformJob",
          "sagemaker:CreateTrial",
          "sagemaker:CreateTrialComponent",
          "sagemaker:CreateUserProfile",
          "sagemaker:CreateWorkforce",
          "sagemaker:CreateWorkteam",
          "sagemaker:DeleteAction",
          "sagemaker:DeleteAlgorithm",
          "sagemaker:DeleteApp",
          "sagemaker:DeleteAppImageConfig",
          "sagemaker:DeleteArtifact",
          "sagemaker:DeleteAssociation",
          "sagemaker:DeleteCodeRepository",
          "sagemaker:DeleteContext",
          "sagemaker:DeleteDataQualityJobDefinition",
          "sagemaker:DeleteDeviceFleet",
          "sagemaker:DeleteDomain",
          "sagemaker:DeleteEndpoint",
          "sagemaker:DeleteEndpointConfig",
          "sagemaker:DeleteExperiment",
          "sagemaker:DeleteFeatureGroup",
          "sagemaker:DeleteFlowDefinition",
          "sagemaker:DeleteHumanLoop",
          "sagemaker:DeleteHumanTaskUi",
          "sagemaker:DeleteImage",
          "sagemaker:DeleteImageVersion",
          "sagemaker:DeleteLineageGroupPolicy",
          "sagemaker:DeleteModel",
          "sagemaker:DeleteModelBiasJobDefinition",
          "sagemaker:DeleteModelExplainabilityJobDefinition",
          "sagemaker:DeleteModelPackage",
          "sagemaker:DeleteModelPackageGroup",
          "sagemaker:DeleteModelPackageGroupPolicy",
          "sagemaker:DeleteModelQualityJobDefinition",
          "sagemaker:DeleteMonitoringSchedule",
          "sagemaker:DeleteNotebookInstance",
          "sagemaker:DeleteNotebookInstanceLifecycleConfig",
          "sagemaker:DeletePipeline",
          "sagemaker:DeleteProject",
          "sagemaker:DeleteRecord",
          "sagemaker:DeleteTags",
          "sagemaker:DeleteTrial",
          "sagemaker:DeleteTrialComponent",
          "sagemaker:DeleteUserProfile",
          "sagemaker:DeleteWorkforce",
          "sagemaker:DeleteWorkteam",
          "sagemaker:DeregisterDevices",
          "sagemaker:DescribeAction",
          "sagemaker:DescribeAlgorithm",
          "sagemaker:DescribeApp",
          "sagemaker:DescribeAppImageConfig",
          "sagemaker:DescribeArtifact",
          "sagemaker:DescribeAutoMLJob",
          "sagemaker:DescribeCodeRepository",
          "sagemaker:DescribeCompilationJob",
          "sagemaker:DescribeContext",
          "sagemaker:DescribeDataQualityJobDefinition",
          "sagemaker:DescribeDevice",
          "sagemaker:DescribeDeviceFleet",
          "sagemaker:DescribeDomain",
          "sagemaker:DescribeEdgePackagingJob",
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:DescribeExperiment",
          "sagemaker:DescribeFeatureGroup",
          "sagemaker:DescribeFlowDefinition",
          "sagemaker:DescribeHumanLoop",
          "sagemaker:DescribeHumanTaskUi",
          "sagemaker:DescribeHyperParameterTuningJob",
          "sagemaker:DescribeImage",
          "sagemaker:DescribeImageVersion",
          "sagemaker:DescribeInferenceRecommendationsJob",
          "sagemaker:DescribeLabelingJob",
          "sagemaker:DescribeLineageGroup",
          "sagemaker:DescribeModel",
          "sagemaker:DescribeModelBiasJobDefinition",
          "sagemaker:DescribeModelExplainabilityJobDefinition",
          "sagemaker:DescribeModelPackage",
          "sagemaker:DescribeModelPackageGroup",
          "sagemaker:DescribeModelQualityJobDefinition",
          "sagemaker:DescribeMonitoringSchedule",
          "sagemaker:DescribeNotebookInstance",
          "sagemaker:DescribeNotebookInstanceLifecycleConfig",
          "sagemaker:DescribePipeline",
          "sagemaker:DescribePipelineDefinitionForExecution",
          "sagemaker:DescribePipelineExecution",
          "sagemaker:DescribeProcessingJob",
          "sagemaker:DescribeProject",
          "sagemaker:DescribeSubscribedWorkteam",
          "sagemaker:DescribeTrainingJob",
          "sagemaker:DescribeTransformJob",
          "sagemaker:DescribeTrial",
          "sagemaker:DescribeTrialComponent",
          "sagemaker:DescribeUserProfile",
          "sagemaker:DescribeWorkforce",
          "sagemaker:DescribeWorkteam",
          "sagemaker:DisableSagemakerServicecatalogPortfolio",
          "sagemaker:DisassociateTrialComponent",
          "sagemaker:EnableSagemakerServicecatalogPortfolio",
          "sagemaker:GetDeviceFleetReport",
          "sagemaker:GetDeviceRegistration",
          "sagemaker:GetLineageGroupPolicy",
          "sagemaker:GetModelPackageGroupPolicy",
          "sagemaker:GetRecord",
          "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
          "sagemaker:GetSearchSuggestions",
          "sagemaker:InvokeEndpoint",
          "sagemaker:InvokeEndpointAsync",
          "sagemaker:ListActions",
          "sagemaker:ListAlgorithms",
          "sagemaker:ListAppImageConfigs",
          "sagemaker:ListApps",
          "sagemaker:ListArtifacts",
          "sagemaker:ListAssociations",
          "sagemaker:ListAutoMLJobs",
          "sagemaker:ListCandidatesForAutoMLJob",
          "sagemaker:ListCodeRepositories",
          "sagemaker:ListCompilationJobs",
          "sagemaker:ListContexts",
          "sagemaker:ListDataQualityJobDefinitions",
          "sagemaker:ListDeviceFleets",
          "sagemaker:ListDevices",
          "sagemaker:ListDomains",
          "sagemaker:ListEdgePackagingJobs",
          "sagemaker:ListEndpointConfigs",
          "sagemaker:ListEndpoints",
          "sagemaker:ListExperiments",
          "sagemaker:ListFeatureGroups",
          "sagemaker:ListFlowDefinitions",
          "sagemaker:ListHumanLoops",
          "sagemaker:ListHumanTaskUis",
          "sagemaker:ListHyperParameterTuningJobs",
          "sagemaker:ListImageVersions",
          "sagemaker:ListImages",
          "sagemaker:ListInferenceRecommendationsJobs",
          "sagemaker:ListLabelingJobs",
          "sagemaker:ListLabelingJobsForWorkteam",
          "sagemaker:ListLineageGroups",
          "sagemaker:ListModelBiasJobDefinitions",
          "sagemaker:ListModelExplainabilityJobDefinitions",
          "sagemaker:ListModelMetadata",
          "sagemaker:ListModelPackageGroups",
          "sagemaker:ListModelPackages",
          "sagemaker:ListModelQualityJobDefinitions",
          "sagemaker:ListModels",
          "sagemaker:ListMonitoringExecutions",
          "sagemaker:ListMonitoringSchedules",
          "sagemaker:ListNotebookInstanceLifecycleConfigs",
          "sagemaker:ListNotebookInstances",
          "sagemaker:ListPipelineExecutionSteps",
          "sagemaker:ListPipelineExecutions",
          "sagemaker:ListPipelineParametersForExecution",
          "sagemaker:ListPipelines",
          "sagemaker:ListProcessingJobs",
          "sagemaker:ListProjects",
          "sagemaker:ListSubscribedWorkteams",
          "sagemaker:ListTags",
          "sagemaker:ListTrainingJobs",
          "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
          "sagemaker:ListTransformJobs",
          "sagemaker:ListTrialComponents",
          "sagemaker:ListTrials",
          "sagemaker:ListUserProfiles",
          "sagemaker:ListWorkforces",
          "sagemaker:ListWorkteams",
          "sagemaker:PutLineageGroupPolicy",
          "sagemaker:PutModelPackageGroupPolicy",
          "sagemaker:PutRecord",
          "sagemaker:QueryLineage",
          "sagemaker:RegisterDevices",
          "sagemaker:RenderUiTemplate",
          "sagemaker:Search",
          "sagemaker:SendHeartbeat",
          "sagemaker:SendPipelineExecutionStepFailure",
          "sagemaker:SendPipelineExecutionStepSuccess",
          "sagemaker:StartHumanLoop",
          "sagemaker:StartMonitoringSchedule",
          "sagemaker:StartNotebookInstance",
          "sagemaker:StartPipelineExecution",
          "sagemaker:StopAutoMLJob",
          "sagemaker:StopCompilationJob",
          "sagemaker:StopEdgePackagingJob",
          "sagemaker:StopHumanLoop",
          "sagemaker:StopHyperParameterTuningJob",
          "sagemaker:StopInferenceRecommendationsJob",
          "sagemaker:StopLabelingJob",
          "sagemaker:StopMonitoringSchedule",
          "sagemaker:StopNotebookInstance",
          "sagemaker:StopPipelineExecution",
          "sagemaker:StopProcessingJob",
          "sagemaker:StopTrainingJob",
          "sagemaker:StopTransformJob",
          "sagemaker:UpdateAction",
          "sagemaker:UpdateAppImageConfig",
          "sagemaker:UpdateArtifact",
          "sagemaker:UpdateCodeRepository",
          "sagemaker:UpdateContext",
          "sagemaker:UpdateDeviceFleet",
          "sagemaker:UpdateDevices",
          "sagemaker:UpdateDomain",
          "sagemaker:UpdateEndpoint",
          "sagemaker:UpdateEndpointWeightsAndCapacities",
          "sagemaker:UpdateExperiment",
          "sagemaker:UpdateImage",
          "sagemaker:UpdateModelPackage",
          "sagemaker:UpdateMonitoringSchedule",
          "sagemaker:UpdateNotebookInstance",
          "sagemaker:UpdateNotebookInstanceLifecycleConfig",
          "sagemaker:UpdatePipeline",
          "sagemaker:UpdatePipelineExecution",
          "sagemaker:UpdateProject",
          "sagemaker:UpdateTrainingJob",
          "sagemaker:UpdateTrial",
          "sagemaker:UpdateTrialComponent",
          "sagemaker:UpdateUserProfile",
          "sagemaker:UpdateWorkforce",
          "sagemaker:UpdateWorkteam"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:endpoint/*",
          "arn:aws:sagemaker:*:*:endpoint-config/*",
          "arn:aws:sagemaker:*:*:model/*",
          "arn:aws:sagemaker:*:*:pipeline/*",
          "arn:aws:sagemaker:*:*:project/*",
          "arn:aws:sagemaker:*:*:model-package/*"
        ]
      }
    ]
  },
  "AmazonSageMakerServiceCatalogProductsLambdaServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsLambdaServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4CMUQVI4HY",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerServiceCatalogProductsLambdaServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS Lambda within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a set of related services including ECR, S3 and others.",
      "CreateDate": "2022-04-04T16:34:43.000Z",
      "UpdateDate": "2022-04-04T16:34:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecr:DescribeImages",
          "ecr:BatchDeleteImage",
          "ecr:CompleteLayerUpload",
          "ecr:CreateRepository",
          "ecr:DeleteRepository",
          "ecr:InitiateLayerUpload",
          "ecr:PutImage",
          "ecr:UploadLayerPart"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:DescribeRule",
          "events:PutRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:GetBucketAcl",
          "s3:GetBucketCors",
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:PutBucketCors"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*",
          "arn:aws:s3:::sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*",
          "arn:aws:s3:::sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:AddAssociation",
          "sagemaker:AddTags",
          "sagemaker:AssociateTrialComponent",
          "sagemaker:BatchDescribeModelPackage",
          "sagemaker:BatchGetMetrics",
          "sagemaker:BatchGetRecord",
          "sagemaker:BatchPutMetrics",
          "sagemaker:CreateAction",
          "sagemaker:CreateAlgorithm",
          "sagemaker:CreateApp",
          "sagemaker:CreateAppImageConfig",
          "sagemaker:CreateArtifact",
          "sagemaker:CreateAutoMLJob",
          "sagemaker:CreateCodeRepository",
          "sagemaker:CreateCompilationJob",
          "sagemaker:CreateContext",
          "sagemaker:CreateDataQualityJobDefinition",
          "sagemaker:CreateDeviceFleet",
          "sagemaker:CreateDomain",
          "sagemaker:CreateEdgePackagingJob",
          "sagemaker:CreateEndpoint",
          "sagemaker:CreateEndpointConfig",
          "sagemaker:CreateExperiment",
          "sagemaker:CreateFeatureGroup",
          "sagemaker:CreateFlowDefinition",
          "sagemaker:CreateHumanTaskUi",
          "sagemaker:CreateHyperParameterTuningJob",
          "sagemaker:CreateImage",
          "sagemaker:CreateImageVersion",
          "sagemaker:CreateInferenceRecommendationsJob",
          "sagemaker:CreateLabelingJob",
          "sagemaker:CreateLineageGroupPolicy",
          "sagemaker:CreateModel",
          "sagemaker:CreateModelBiasJobDefinition",
          "sagemaker:CreateModelExplainabilityJobDefinition",
          "sagemaker:CreateModelPackage",
          "sagemaker:CreateModelPackageGroup",
          "sagemaker:CreateModelQualityJobDefinition",
          "sagemaker:CreateMonitoringSchedule",
          "sagemaker:CreateNotebookInstance",
          "sagemaker:CreateNotebookInstanceLifecycleConfig",
          "sagemaker:CreatePipeline",
          "sagemaker:CreatePresignedDomainUrl",
          "sagemaker:CreatePresignedNotebookInstanceUrl",
          "sagemaker:CreateProcessingJob",
          "sagemaker:CreateProject",
          "sagemaker:CreateTrainingJob",
          "sagemaker:CreateTransformJob",
          "sagemaker:CreateTrial",
          "sagemaker:CreateTrialComponent",
          "sagemaker:CreateUserProfile",
          "sagemaker:CreateWorkforce",
          "sagemaker:CreateWorkteam",
          "sagemaker:DeleteAction",
          "sagemaker:DeleteAlgorithm",
          "sagemaker:DeleteApp",
          "sagemaker:DeleteAppImageConfig",
          "sagemaker:DeleteArtifact",
          "sagemaker:DeleteAssociation",
          "sagemaker:DeleteCodeRepository",
          "sagemaker:DeleteContext",
          "sagemaker:DeleteDataQualityJobDefinition",
          "sagemaker:DeleteDeviceFleet",
          "sagemaker:DeleteDomain",
          "sagemaker:DeleteEndpoint",
          "sagemaker:DeleteEndpointConfig",
          "sagemaker:DeleteExperiment",
          "sagemaker:DeleteFeatureGroup",
          "sagemaker:DeleteFlowDefinition",
          "sagemaker:DeleteHumanLoop",
          "sagemaker:DeleteHumanTaskUi",
          "sagemaker:DeleteImage",
          "sagemaker:DeleteImageVersion",
          "sagemaker:DeleteLineageGroupPolicy",
          "sagemaker:DeleteModel",
          "sagemaker:DeleteModelBiasJobDefinition",
          "sagemaker:DeleteModelExplainabilityJobDefinition",
          "sagemaker:DeleteModelPackage",
          "sagemaker:DeleteModelPackageGroup",
          "sagemaker:DeleteModelPackageGroupPolicy",
          "sagemaker:DeleteModelQualityJobDefinition",
          "sagemaker:DeleteMonitoringSchedule",
          "sagemaker:DeleteNotebookInstance",
          "sagemaker:DeleteNotebookInstanceLifecycleConfig",
          "sagemaker:DeletePipeline",
          "sagemaker:DeleteProject",
          "sagemaker:DeleteRecord",
          "sagemaker:DeleteTags",
          "sagemaker:DeleteTrial",
          "sagemaker:DeleteTrialComponent",
          "sagemaker:DeleteUserProfile",
          "sagemaker:DeleteWorkforce",
          "sagemaker:DeleteWorkteam",
          "sagemaker:DeregisterDevices",
          "sagemaker:DescribeAction",
          "sagemaker:DescribeAlgorithm",
          "sagemaker:DescribeApp",
          "sagemaker:DescribeAppImageConfig",
          "sagemaker:DescribeArtifact",
          "sagemaker:DescribeAutoMLJob",
          "sagemaker:DescribeCodeRepository",
          "sagemaker:DescribeCompilationJob",
          "sagemaker:DescribeContext",
          "sagemaker:DescribeDataQualityJobDefinition",
          "sagemaker:DescribeDevice",
          "sagemaker:DescribeDeviceFleet",
          "sagemaker:DescribeDomain",
          "sagemaker:DescribeEdgePackagingJob",
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:DescribeExperiment",
          "sagemaker:DescribeFeatureGroup",
          "sagemaker:DescribeFlowDefinition",
          "sagemaker:DescribeHumanLoop",
          "sagemaker:DescribeHumanTaskUi",
          "sagemaker:DescribeHyperParameterTuningJob",
          "sagemaker:DescribeImage",
          "sagemaker:DescribeImageVersion",
          "sagemaker:DescribeInferenceRecommendationsJob",
          "sagemaker:DescribeLabelingJob",
          "sagemaker:DescribeLineageGroup",
          "sagemaker:DescribeModel",
          "sagemaker:DescribeModelBiasJobDefinition",
          "sagemaker:DescribeModelExplainabilityJobDefinition",
          "sagemaker:DescribeModelPackage",
          "sagemaker:DescribeModelPackageGroup",
          "sagemaker:DescribeModelQualityJobDefinition",
          "sagemaker:DescribeMonitoringSchedule",
          "sagemaker:DescribeNotebookInstance",
          "sagemaker:DescribeNotebookInstanceLifecycleConfig",
          "sagemaker:DescribePipeline",
          "sagemaker:DescribePipelineDefinitionForExecution",
          "sagemaker:DescribePipelineExecution",
          "sagemaker:DescribeProcessingJob",
          "sagemaker:DescribeProject",
          "sagemaker:DescribeSubscribedWorkteam",
          "sagemaker:DescribeTrainingJob",
          "sagemaker:DescribeTransformJob",
          "sagemaker:DescribeTrial",
          "sagemaker:DescribeTrialComponent",
          "sagemaker:DescribeUserProfile",
          "sagemaker:DescribeWorkforce",
          "sagemaker:DescribeWorkteam",
          "sagemaker:DisableSagemakerServicecatalogPortfolio",
          "sagemaker:DisassociateTrialComponent",
          "sagemaker:EnableSagemakerServicecatalogPortfolio",
          "sagemaker:GetDeviceFleetReport",
          "sagemaker:GetDeviceRegistration",
          "sagemaker:GetLineageGroupPolicy",
          "sagemaker:GetModelPackageGroupPolicy",
          "sagemaker:GetRecord",
          "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
          "sagemaker:GetSearchSuggestions",
          "sagemaker:InvokeEndpoint",
          "sagemaker:InvokeEndpointAsync",
          "sagemaker:ListActions",
          "sagemaker:ListAlgorithms",
          "sagemaker:ListAppImageConfigs",
          "sagemaker:ListApps",
          "sagemaker:ListArtifacts",
          "sagemaker:ListAssociations",
          "sagemaker:ListAutoMLJobs",
          "sagemaker:ListCandidatesForAutoMLJob",
          "sagemaker:ListCodeRepositories",
          "sagemaker:ListCompilationJobs",
          "sagemaker:ListContexts",
          "sagemaker:ListDataQualityJobDefinitions",
          "sagemaker:ListDeviceFleets",
          "sagemaker:ListDevices",
          "sagemaker:ListDomains",
          "sagemaker:ListEdgePackagingJobs",
          "sagemaker:ListEndpointConfigs",
          "sagemaker:ListEndpoints",
          "sagemaker:ListExperiments",
          "sagemaker:ListFeatureGroups",
          "sagemaker:ListFlowDefinitions",
          "sagemaker:ListHumanLoops",
          "sagemaker:ListHumanTaskUis",
          "sagemaker:ListHyperParameterTuningJobs",
          "sagemaker:ListImageVersions",
          "sagemaker:ListImages",
          "sagemaker:ListInferenceRecommendationsJobs",
          "sagemaker:ListLabelingJobs",
          "sagemaker:ListLabelingJobsForWorkteam",
          "sagemaker:ListLineageGroups",
          "sagemaker:ListModelBiasJobDefinitions",
          "sagemaker:ListModelExplainabilityJobDefinitions",
          "sagemaker:ListModelMetadata",
          "sagemaker:ListModelPackageGroups",
          "sagemaker:ListModelPackages",
          "sagemaker:ListModelQualityJobDefinitions",
          "sagemaker:ListModels",
          "sagemaker:ListMonitoringExecutions",
          "sagemaker:ListMonitoringSchedules",
          "sagemaker:ListNotebookInstanceLifecycleConfigs",
          "sagemaker:ListNotebookInstances",
          "sagemaker:ListPipelineExecutionSteps",
          "sagemaker:ListPipelineExecutions",
          "sagemaker:ListPipelineParametersForExecution",
          "sagemaker:ListPipelines",
          "sagemaker:ListProcessingJobs",
          "sagemaker:ListProjects",
          "sagemaker:ListSubscribedWorkteams",
          "sagemaker:ListTags",
          "sagemaker:ListTrainingJobs",
          "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
          "sagemaker:ListTransformJobs",
          "sagemaker:ListTrialComponents",
          "sagemaker:ListTrials",
          "sagemaker:ListUserProfiles",
          "sagemaker:ListWorkforces",
          "sagemaker:ListWorkteams",
          "sagemaker:PutLineageGroupPolicy",
          "sagemaker:PutModelPackageGroupPolicy",
          "sagemaker:PutRecord",
          "sagemaker:QueryLineage",
          "sagemaker:RegisterDevices",
          "sagemaker:RenderUiTemplate",
          "sagemaker:Search",
          "sagemaker:SendHeartbeat",
          "sagemaker:SendPipelineExecutionStepFailure",
          "sagemaker:SendPipelineExecutionStepSuccess",
          "sagemaker:StartHumanLoop",
          "sagemaker:StartMonitoringSchedule",
          "sagemaker:StartNotebookInstance",
          "sagemaker:StartPipelineExecution",
          "sagemaker:StopAutoMLJob",
          "sagemaker:StopCompilationJob",
          "sagemaker:StopEdgePackagingJob",
          "sagemaker:StopHumanLoop",
          "sagemaker:StopHyperParameterTuningJob",
          "sagemaker:StopInferenceRecommendationsJob",
          "sagemaker:StopLabelingJob",
          "sagemaker:StopMonitoringSchedule",
          "sagemaker:StopNotebookInstance",
          "sagemaker:StopPipelineExecution",
          "sagemaker:StopProcessingJob",
          "sagemaker:StopTrainingJob",
          "sagemaker:StopTransformJob",
          "sagemaker:UpdateAction",
          "sagemaker:UpdateAppImageConfig",
          "sagemaker:UpdateArtifact",
          "sagemaker:UpdateCodeRepository",
          "sagemaker:UpdateContext",
          "sagemaker:UpdateDeviceFleet",
          "sagemaker:UpdateDevices",
          "sagemaker:UpdateDomain",
          "sagemaker:UpdateEndpoint",
          "sagemaker:UpdateEndpointWeightsAndCapacities",
          "sagemaker:UpdateExperiment",
          "sagemaker:UpdateImage",
          "sagemaker:UpdateModelPackage",
          "sagemaker:UpdateMonitoringSchedule",
          "sagemaker:UpdateNotebookInstance",
          "sagemaker:UpdateNotebookInstanceLifecycleConfig",
          "sagemaker:UpdatePipeline",
          "sagemaker:UpdatePipelineExecution",
          "sagemaker:UpdateProject",
          "sagemaker:UpdateTrainingJob",
          "sagemaker:UpdateTrial",
          "sagemaker:UpdateTrialComponent",
          "sagemaker:UpdateUserProfile",
          "sagemaker:UpdateWorkforce",
          "sagemaker:UpdateWorkteam"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:action/*",
          "arn:aws:sagemaker:*:*:algorithm/*",
          "arn:aws:sagemaker:*:*:app-image-config/*",
          "arn:aws:sagemaker:*:*:artifact/*",
          "arn:aws:sagemaker:*:*:automl-job/*",
          "arn:aws:sagemaker:*:*:code-repository/*",
          "arn:aws:sagemaker:*:*:compilation-job/*",
          "arn:aws:sagemaker:*:*:context/*",
          "arn:aws:sagemaker:*:*:data-quality-job-definition/*",
          "arn:aws:sagemaker:*:*:device-fleet/*/device/*",
          "arn:aws:sagemaker:*:*:device-fleet/*",
          "arn:aws:sagemaker:*:*:edge-packaging-job/*",
          "arn:aws:sagemaker:*:*:endpoint/*",
          "arn:aws:sagemaker:*:*:endpoint-config/*",
          "arn:aws:sagemaker:*:*:experiment/*",
          "arn:aws:sagemaker:*:*:experiment-trial/*",
          "arn:aws:sagemaker:*:*:experiment-trial-component/*",
          "arn:aws:sagemaker:*:*:feature-group/*",
          "arn:aws:sagemaker:*:*:human-loop/*",
          "arn:aws:sagemaker:*:*:human-task-ui/*",
          "arn:aws:sagemaker:*:*:hyper-parameter-tuning-job/*",
          "arn:aws:sagemaker:*:*:image/*",
          "arn:aws:sagemaker:*:*:image-version/*/*",
          "arn:aws:sagemaker:*:*:inference-recommendations-job/*",
          "arn:aws:sagemaker:*:*:labeling-job/*",
          "arn:aws:sagemaker:*:*:model/*",
          "arn:aws:sagemaker:*:*:model-bias-job-definition/*",
          "arn:aws:sagemaker:*:*:model-explainability-job-definition/*",
          "arn:aws:sagemaker:*:*:model-package/*",
          "arn:aws:sagemaker:*:*:model-package-group/*",
          "arn:aws:sagemaker:*:*:model-quality-job-definition/*",
          "arn:aws:sagemaker:*:*:monitoring-schedule/*",
          "arn:aws:sagemaker:*:*:notebook-instance/*",
          "arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/*",
          "arn:aws:sagemaker:*:*:pipeline/*",
          "arn:aws:sagemaker:*:*:pipeline/*/execution/*",
          "arn:aws:sagemaker:*:*:processing-job/*",
          "arn:aws:sagemaker:*:*:project/*",
          "arn:aws:sagemaker:*:*:training-job/*",
          "arn:aws:sagemaker:*:*:transform-job/*",
          "arn:aws:sagemaker:*:*:workforce/*",
          "arn:aws:sagemaker:*:*:workteam/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsExecutionRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DeleteLogDelivery",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:DescribeResourcePolicies",
          "logs:DescribeDestinations",
          "logs:DescribeExportTasks",
          "logs:DescribeMetricFilters",
          "logs:DescribeQueries",
          "logs:DescribeQueryDefinitions",
          "logs:DescribeSubscriptionFilters",
          "logs:GetLogDelivery",
          "logs:GetLogEvents",
          "logs:ListLogDeliveries",
          "logs:PutLogEvents",
          "logs:PutResourcePolicy",
          "logs:UpdateLogDelivery"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/lambda/*"
        ]
      }
    ]
  },
  "AmazonEBSCSIDriverPolicy": {
    "policy": {
      "PolicyName": "AmazonEBSCSIDriverPolicy",
      "PolicyId": "ANPAZKAPJZG4IV6FHD2UE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "IAM Policy that allows the CSI driver service account to make calls to related services such as EC2 on your behalf.",
      "CreateDate": "2022-04-04T17:24:29.000Z",
      "UpdateDate": "2022-11-18T14:42:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot",
          "ec2:AttachVolume",
          "ec2:DetachVolume",
          "ec2:ModifyVolume",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInstances",
          "ec2:DescribeSnapshots",
          "ec2:DescribeTags",
          "ec2:DescribeVolumes",
          "ec2:DescribeVolumesModifications"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonChimeSDKMediaPipelinesServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AmazonChimeSDKMediaPipelinesServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4ERP6SEMWK",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonChimeSDKMediaPipelinesServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Managed Policy For Amazon Chime SDK MediaPipelines Service Linked Role",
      "CreateDate": "2022-04-04T22:02:05.000Z",
      "UpdateDate": "2023-12-08T19:14:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowPutMetricsForChimeSDKNamespace",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowKinesisVideoStreamsAccess",
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:GetDataEndpoint",
          "kinesisvideo:PutMedia",
          "kinesisvideo:UpdateDataRetention",
          "kinesisvideo:DescribeStream",
          "kinesisvideo:CreateStream"
        ],
        "Resource": [
          "arn:aws:kinesisvideo:*:*:stream/ChimeMediaPipelines-*"
        ]
      },
      {
        "Sid": "AllowKinesisVideoStreamsListAccess",
        "Effect": "Allow",
        "Action": [
          "kinesisvideo:ListStreams"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowChimeMeetingAccess",
        "Effect": "Allow",
        "Action": [
          "chime:GetMeeting",
          "chime:CreateAttendee",
          "chime:DeleteAttendee"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSPerformanceInsightsReadOnly": {
    "policy": {
      "PolicyName": "AmazonRDSPerformanceInsightsReadOnly",
      "PolicyId": "ANPAZKAPJZG4M2AUBSW6R",
      "Arn": "arn:aws:iam::aws:policy/AmazonRDSPerformanceInsightsReadOnly",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Read-Only policy for RDS Performance Insights",
      "CreateDate": "2022-04-05T00:02:08.000Z",
      "UpdateDate": "2023-10-23T21:17:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonRDSDescribeDBInstances",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRDSDescribeDBClusters",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBClusters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsDescribeDimensionKeys",
        "Effect": "Allow",
        "Action": [
          "pi:DescribeDimensionKeys"
        ],
        "Resource": [
          "arn:aws:pi:*:*:metrics/rds/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsGetDimensionKeyDetails",
        "Effect": "Allow",
        "Action": [
          "pi:GetDimensionKeyDetails"
        ],
        "Resource": [
          "arn:aws:pi:*:*:metrics/rds/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsGetResourceMetadata",
        "Effect": "Allow",
        "Action": [
          "pi:GetResourceMetadata"
        ],
        "Resource": [
          "arn:aws:pi:*:*:metrics/rds/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsGetResourceMetrics",
        "Effect": "Allow",
        "Action": [
          "pi:GetResourceMetrics"
        ],
        "Resource": [
          "arn:aws:pi:*:*:metrics/rds/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsListAvailableResourceDimensions",
        "Effect": "Allow",
        "Action": [
          "pi:ListAvailableResourceDimensions"
        ],
        "Resource": [
          "arn:aws:pi:*:*:metrics/rds/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsListAvailableResourceMetrics",
        "Effect": "Allow",
        "Action": [
          "pi:ListAvailableResourceMetrics"
        ],
        "Resource": [
          "arn:aws:pi:*:*:metrics/rds/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsGetPerformanceAnalysisReport",
        "Effect": "Allow",
        "Action": [
          "pi:GetPerformanceAnalysisReport"
        ],
        "Resource": [
          "arn:aws:pi:*:*:perf-reports/rds/*/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsListPerformanceAnalysisReports",
        "Effect": "Allow",
        "Action": [
          "pi:ListPerformanceAnalysisReports"
        ],
        "Resource": [
          "arn:aws:pi:*:*:perf-reports/rds/*/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsListTagsForResource",
        "Effect": "Allow",
        "Action": [
          "pi:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:pi:*:*:*/rds/*"
        ]
      }
    ]
  },
  "ROSAManageSubscription": {
    "policy": {
      "PolicyName": "ROSAManageSubscription",
      "PolicyId": "ANPAZKAPJZG4HMYAT5EMA",
      "Arn": "arn:aws:iam::aws:policy/ROSAManageSubscription",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides the permissions required to manage the Red Hat OpenShift Service on AWS (ROSA) subscription.",
      "CreateDate": "2022-04-11T20:58:08.000Z",
      "UpdateDate": "2023-08-04T19:59:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:Subscribe",
          "aws-marketplace:Unsubscribe"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ViewSubscriptions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBillingConductorFullAccess": {
    "policy": {
      "PolicyName": "AWSBillingConductorFullAccess",
      "PolicyId": "ANPAZKAPJZG4D2AMFVFND",
      "Arn": "arn:aws:iam::aws:policy/AWSBillingConductorFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Use the AWSBillingConductorFullAccess managed policy to allow complete access to AWS Billing Conductor (ABC) console and APIs. This policy allows users to list, create and delete ABC resources.",
      "CreateDate": "2022-04-13T18:02:29.000Z",
      "UpdateDate": "2022-04-13T18:02:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "billingconductor:*",
          "organizations:ListAccounts",
          "pricing:DescribeServices"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBillingConductorReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSBillingConductorReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4CR7OZHOL2",
      "Arn": "arn:aws:iam::aws:policy/AWSBillingConductorReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Use the AWSBillingConductorReadOnlyAccess managed policy to allow read only access to AWS Billing Conductor (ABC) console and APIs. This policy grants permission to view and list all ABC resources. It does not include the ability to create or delete resources.",
      "CreateDate": "2022-04-13T18:02:59.000Z",
      "UpdateDate": "2022-04-13T18:02:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "billingconductor:List*",
          "organizations:ListAccounts",
          "pricing:DescribeServices"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AwsGlueSessionUserRestrictedServiceRole": {
    "policy": {
      "PolicyName": "AwsGlueSessionUserRestrictedServiceRole",
      "PolicyId": "ANPAZKAPJZG4NDGTDBV5G",
      "Arn": "arn:aws:iam::aws:policy/service-role/AwsGlueSessionUserRestrictedServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all AWS Glue resources except for sessions. Allows users to create and use only the interactive sessions that are associated with the user. This policy also includes other permissions needed by AWS Glue to manage Glue resources in other AWS services",
      "CreateDate": "2022-04-14T21:30:07.000Z",
      "UpdateDate": "2022-04-14T21:30:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "glue:*"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog/*",
          "arn:aws:glue:*:*:database/*",
          "arn:aws:glue:*:*:table/*",
          "arn:aws:glue:*:*:tableVersion/*",
          "arn:aws:glue:*:*:connection/*",
          "arn:aws:glue:*:*:userDefinedFunction/*",
          "arn:aws:glue:*:*:devEndpoint/*",
          "arn:aws:glue:*:*:job/*",
          "arn:aws:glue:*:*:trigger/*",
          "arn:aws:glue:*:*:crawler/*",
          "arn:aws:glue:*:*:workflow/*",
          "arn:aws:glue:*:*:mlTransform/*",
          "arn:aws:glue:*:*:registry/*",
          "arn:aws:glue:*:*:schema/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateSession"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:RunStatement",
          "glue:GetStatement",
          "glue:ListStatements",
          "glue:CancelStatement",
          "glue:StopSession",
          "glue:DeleteSession",
          "glue:GetSession"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:ListSessions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "glue:TagResource",
          "glue:UntagResource",
          "tag:TagResources",
          "tag:UntagResources"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*/*",
          "arn:aws:s3:::*/*aws-glue-*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::crawler-public*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:/aws-glue/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AwsGlueSessionUserRestrictedPolicy": {
    "policy": {
      "PolicyName": "AwsGlueSessionUserRestrictedPolicy",
      "PolicyId": "ANPAZKAPJZG4MG6ZEY4WF",
      "Arn": "arn:aws:iam::aws:policy/AwsGlueSessionUserRestrictedPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions that allows users to create and use only the interactive sessions that are associated with the user. This policy also includes permissions to explicitly allow users to pass a restricted Glue session role.",
      "CreateDate": "2022-04-14T21:31:01.000Z",
      "UpdateDate": "2022-04-14T21:31:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateSession"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:RunStatement",
          "glue:GetStatement",
          "glue:ListStatements",
          "glue:CancelStatement",
          "glue:StopSession",
          "glue:DeleteSession",
          "glue:GetSession"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:ListSessions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "glue:TagResource",
          "glue:UntagResource",
          "tag:TagResources",
          "tag:UntagResources"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AwsGlueSessionServiceRoleUserRestricted*"
        ]
      }
    ]
  },
  "AwsGlueSessionUserRestrictedNotebookPolicy": {
    "policy": {
      "PolicyName": "AwsGlueSessionUserRestrictedNotebookPolicy",
      "PolicyId": "ANPAZKAPJZG4BZZRVUUJU",
      "Arn": "arn:aws:iam::aws:policy/AwsGlueSessionUserRestrictedNotebookPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions that allows users to create and use only the notebook sessions that are associated with the user. This policy also includes permissions to explicitly allow users to pass a restricted Glue session role.",
      "CreateDate": "2022-04-18T15:24:56.000Z",
      "UpdateDate": "2023-11-22T01:32:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "NotebokAllowActions0",
        "Effect": "Allow",
        "Action": [
          "glue:CreateSession"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Sid": "NotebookAllowActions1",
        "Effect": "Allow",
        "Action": [
          "glue:StartCompletion",
          "glue:GetCompletion"
        ],
        "Resource": [
          "arn:aws:glue:*:*:completion/*"
        ]
      },
      {
        "Sid": "NotebookAllowActions2",
        "Effect": "Allow",
        "Action": [
          "glue:RunStatement",
          "glue:GetStatement",
          "glue:ListStatements",
          "glue:CancelStatement",
          "glue:StopSession",
          "glue:DeleteSession",
          "glue:GetSession"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Sid": "NotebookAllowActions3",
        "Effect": "Allow",
        "Action": [
          "glue:ListSessions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "NotebookDenyActions",
        "Effect": "Deny",
        "Action": [
          "glue:TagResource",
          "glue:UntagResource",
          "tag:TagResources",
          "tag:UntagResources"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Sid": "NotebookPassRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AwsGlueSessionServiceRoleUserRestrictedForNotebook*"
        ]
      }
    ]
  },
  "AwsGlueSessionUserRestrictedNotebookServiceRole": {
    "policy": {
      "PolicyName": "AwsGlueSessionUserRestrictedNotebookServiceRole",
      "PolicyId": "ANPAZKAPJZG4GLSDXUPXM",
      "Arn": "arn:aws:iam::aws:policy/service-role/AwsGlueSessionUserRestrictedNotebookServiceRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to all AWS Glue resources except for sessions. Allows users to create and use only the notebook sessions that are associated with the user. This policy also includes other permissions needed by AWS Glue to manage Glue resources in other AWS services.",
      "CreateDate": "2022-04-18T15:27:11.000Z",
      "UpdateDate": "2022-04-18T15:27:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "glue:*"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog/*",
          "arn:aws:glue:*:*:database/*",
          "arn:aws:glue:*:*:table/*",
          "arn:aws:glue:*:*:tableVersion/*",
          "arn:aws:glue:*:*:connection/*",
          "arn:aws:glue:*:*:userDefinedFunction/*",
          "arn:aws:glue:*:*:devEndpoint/*",
          "arn:aws:glue:*:*:job/*",
          "arn:aws:glue:*:*:trigger/*",
          "arn:aws:glue:*:*:crawler/*",
          "arn:aws:glue:*:*:workflow/*",
          "arn:aws:glue:*:*:mlTransform/*",
          "arn:aws:glue:*:*:registry/*",
          "arn:aws:glue:*:*:schema/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:CreateSession"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:RunStatement",
          "glue:GetStatement",
          "glue:ListStatements",
          "glue:CancelStatement",
          "glue:StopSession",
          "glue:DeleteSession",
          "glue:GetSession"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "glue:ListSessions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "glue:TagResource",
          "glue:UntagResource",
          "tag:TagResources",
          "tag:UntagResources"
        ],
        "Resource": [
          "arn:aws:glue:*:*:session/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-glue-*/*",
          "arn:aws:s3:::*/*aws-glue-*/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::crawler-public*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:/aws-glue/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AWSMigrationHubOrchestratorServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSMigrationHubOrchestratorServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LSN7AHAZR",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSMigrationHubOrchestratorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions necessary for Migration Hub Orchestrator to migrate and modernize your on-premises workloads",
      "CreateDate": "2022-04-20T02:24:04.000Z",
      "UpdateDate": "2024-03-04T18:25:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ApplicationDiscoveryService",
        "Effect": "Allow",
        "Action": [
          "discovery:DescribeConfigurations",
          "discovery:ListConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LaunchWizard",
        "Effect": "Allow",
        "Action": [
          "launchwizard:ListProvisionedApps",
          "launchwizard:DescribeProvisionedApp",
          "launchwizard:ListDeployments",
          "launchwizard:GetDeployment"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2instances",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ec2MGNLaunchTemplate",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplateVersion",
          "ec2:ModifyLaunchTemplate"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ec2LaunchTemplates",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeLaunchTemplates"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "getHomeRegion",
        "Action": [
          "mgh:GetHomeRegion"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMcommand",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand",
          "ssm:GetCommandInvocation",
          "ssm:CancelCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*::document/AWS-RunRemoteScript",
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:s3:::aws-migrationhub-orchestrator-*",
          "arn:aws:s3:::migrationhub-orchestrator-*"
        ]
      },
      {
        "Sid": "SSM",
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeInstanceInformation",
          "ssm:GetCommandInvocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "s3GetObject",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::migrationhub-orchestrator-*",
          "arn:aws:s3:::migrationhub-orchestrator-*/*"
        ]
      },
      {
        "Sid": "EventBridge",
        "Effect": "Allow",
        "Action": [
          "events:PutTargets",
          "events:DescribeRule",
          "events:DeleteRule",
          "events:PutRule",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/MigrationHubOrchestratorManagedRule*"
        ]
      },
      {
        "Sid": "MGN",
        "Effect": "Allow",
        "Action": [
          "mgn:GetReplicationConfiguration",
          "mgn:GetLaunchConfiguration",
          "mgn:StartCutover",
          "mgn:FinalizeCutover",
          "mgn:StartTest",
          "mgn:UpdateReplicationConfiguration",
          "mgn:DescribeSourceServers",
          "mgn:MarkAsArchived",
          "mgn:ChangeServerLifeCycleState"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ec2DescribeImportImage",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImportImageTasks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "s3ListBucket",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      }
    ]
  },
  "AWSMigrationHubOrchestratorPlugin": {
    "policy": {
      "PolicyName": "AWSMigrationHubOrchestratorPlugin",
      "PolicyId": "ANPAZKAPJZG4E5FGK2T5X",
      "Arn": "arn:aws:iam::aws:policy/AWSMigrationHubOrchestratorPlugin",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides limited access to Amazon Simple Storage Service, AWS Secrets Manager and Plugin related actions for AWS Migration Hub Orchestrator.",
      "CreateDate": "2022-04-20T02:25:10.000Z",
      "UpdateDate": "2022-04-20T02:25:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:PutObject",
          "s3:GetObject",
          "s3:GetBucketAcl"
        ],
        "Resource": [
          "arn:aws:s3:::migrationhub-orchestrator-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "execute-api:Invoke",
          "execute-api:ManageConnections"
        ],
        "Resource": [
          "arn:aws:execute-api:*:*:*/prod/*/put-log-data",
          "arn:aws:execute-api:*:*:*/prod/*/put-metric-data"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "migrationhub-orchestrator:RegisterPlugin",
          "migrationhub-orchestrator:GetMessage",
          "migrationhub-orchestrator:SendMessage"
        ],
        "Resource": [
          "arn:aws:migrationhub-orchestrator:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:migrationhub-orchestrator-*"
        ]
      }
    ]
  },
  "AWSMigrationHubOrchestratorConsoleFullAccess": {
    "policy": {
      "PolicyName": "AWSMigrationHubOrchestratorConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4K2IRHZ6FO",
      "Arn": "arn:aws:iam::aws:policy/AWSMigrationHubOrchestratorConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides limited access to AWS Migration Hub, AWS Application Discovery Service, Amazon Simple Storage Service and AWS Secrets Manager. This policy also grants full access to AWS Migration Hub Orchestrator service.",
      "CreateDate": "2022-04-20T02:26:28.000Z",
      "UpdateDate": "2023-12-05T17:34:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "MHO",
        "Effect": "Allow",
        "Action": [
          "migrationhub-orchestrator:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListAllMyBuckets",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "S3MHO",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetBucketAcl",
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListBucketVersions",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::migrationhub-orchestrator-*",
          "arn:aws:s3:::migrationhub-orchestrator-*/*"
        ]
      },
      {
        "Sid": "ListSecrets",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Configuration",
        "Effect": "Allow",
        "Action": [
          "discovery:DescribeConfigurations",
          "discovery:ListConfigurations",
          "discovery:GetDiscoverySummary"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetHomeRegion",
        "Effect": "Allow",
        "Action": [
          "mgh:GetHomeRegion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2Describe",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMS",
        "Effect": "Allow",
        "Action": [
          "kms:ListKeys",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMListProfileRole",
        "Effect": "Allow",
        "Action": [
          "iam:ListInstanceProfiles",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ECS",
        "Effect": "Allow",
        "Action": [
          "ecs:ListClusters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Account",
        "Effect": "Allow",
        "Action": [
          "account:ListRegions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetRole",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/migrationhub-orchestrator.amazonaws.com/AWSServiceRoleForMigrationHubOrchestrator*"
        ]
      }
    ]
  },
  "AWSMigrationHubOrchestratorInstanceRolePolicy": {
    "policy": {
      "PolicyName": "AWSMigrationHubOrchestratorInstanceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4DZ5VOQQO5",
      "Arn": "arn:aws:iam::aws:policy/AWSMigrationHubOrchestratorInstanceRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy needs to be attached for SAP and MGN migrated instance for our service to orchestrate instances by downloading scripts from S3 and to fetch secret values inside EC2 instance.",
      "CreateDate": "2022-04-20T02:43:50.000Z",
      "UpdateDate": "2022-04-20T02:43:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:migrationhub-orchestrator-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::migrationhub-orchestrator-*",
          "arn:aws:s3:::aws-migrationhub-orchestrator-*/*"
        ]
      }
    ]
  },
  "MonitronServiceRolePolicy": {
    "policy": {
      "PolicyName": "MonitronServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4EVQOKLN7I",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/MonitronServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for AWS Monitron service linked role granting access to required customer resources.",
      "CreateDate": "2022-05-02T19:22:03.000Z",
      "UpdateDate": "2022-05-02T19:22:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/monitron/*"
        ]
      }
    ]
  },
  "AmazonEMRServerlessServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonEMRServerlessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GWPDPIMVL",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonEMRServerlessServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows access to other AWS service resources that are required to run Amazon EMRServerless",
      "CreateDate": "2022-05-20T23:15:42.000Z",
      "UpdateDate": "2024-01-25T18:21:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EC2PolicyStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeRouteTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchPolicyStatement",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBudgetsActions_RolePolicyForResourceAdministrationWithSSM": {
    "policy": {
      "PolicyName": "AWSBudgetsActions_RolePolicyForResourceAdministrationWithSSM",
      "PolicyId": "ANPAZKAPJZG4ADHFVJLNJ",
      "Arn": "arn:aws:iam::aws:policy/AWSBudgetsActions_RolePolicyForResourceAdministrationWithSSM",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy gives permissions to control AWS resources. For example, to start and stop EC2 or RDS instances by executing AWS Systems Manager (SSM) scripts.",
      "CreateDate": "2022-05-25T19:03:30.000Z",
      "UpdateDate": "2022-05-25T19:03:30.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstanceStatus",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "rds:DescribeDBInstances",
          "rds:StartDBInstance",
          "rds:StopDBInstance"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-definition/AWS-StartEC2Instance:*",
          "arn:aws:ssm:*:*:automation-definition/AWS-StopEC2Instance:*",
          "arn:aws:ssm:*:*:automation-definition/AWS-StartRdsInstance:*",
          "arn:aws:ssm:*:*:automation-definition/AWS-StopRdsInstance:*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryStagingAccountPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryStagingAccountPolicy",
      "PolicyId": "ANPAZKAPJZG4AMU6RTDXQ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryStagingAccountPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows read-only access to AWS Elastic Disaster Recovery (DRS) resources such as source servers and jobs. It also allows creating a converted snapshot and sharing that EBS snapshot with a specific account.",
      "CreateDate": "2022-05-26T09:49:18.000Z",
      "UpdateDate": "2023-11-27T13:07:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSStagingAccountPolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:DescribeSourceServers",
          "drs:DescribeRecoverySnapshots",
          "drs:CreateConvertedSnapshotForDrs",
          "drs:GetReplicationConfiguration",
          "drs:DescribeJobs",
          "drs:DescribeJobLogItems"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSStagingAccountPolicy2",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifySnapshotAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryEc2InstancePolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryEc2InstancePolicy",
      "PolicyId": "ANPAZKAPJZG4DUAC4ANEW",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryEc2InstancePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows installing and using the AWS Replication Agent, which is used by AWS Elastic Disaster Recovery (DRS) to recover source servers that run on EC2 (cross-region or cross-AZ). An IAM role with this policy should be attached (as an EC2 Instance Profile) to the EC2 Instances.",
      "CreateDate": "2022-05-26T12:30:18.000Z",
      "UpdateDate": "2023-11-27T13:39:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSEc2InstancePolicy1",
        "Effect": "Allow",
        "Action": [
          "drs:GetAgentInstallationAssetsForDrs",
          "drs:SendClientLogsForDrs",
          "drs:SendClientMetricsForDrs",
          "drs:CreateSourceServerForDrs",
          "drs:CreateSourceNetwork"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSEc2InstancePolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:TagResource"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      },
      {
        "Sid": "DRSEc2InstancePolicy3",
        "Effect": "Allow",
        "Action": [
          "drs:TagResource"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-network/*"
        ]
      },
      {
        "Sid": "DRSEc2InstancePolicy4",
        "Effect": "Allow",
        "Action": [
          "drs:SendAgentMetricsForDrs",
          "drs:SendAgentLogsForDrs",
          "drs:UpdateAgentSourcePropertiesForDrs",
          "drs:UpdateAgentReplicationInfoForDrs",
          "drs:UpdateAgentConversionInfoForDrs",
          "drs:GetAgentCommandForDrs",
          "drs:GetAgentConfirmedResumeInfoForDrs",
          "drs:GetAgentRuntimeConfigurationForDrs",
          "drs:UpdateAgentBacklogForDrs",
          "drs:GetAgentReplicationInfoForDrs"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      },
      {
        "Sid": "DRSEc2InstancePolicy5",
        "Effect": "Allow",
        "Action": [
          "sts:AssumeRole",
          "sts:TagSession"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/DRSCrossAccountAgentAuthorizedRole_*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationAgentPolicy_v2": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationAgentPolicy_v2",
      "PolicyId": "ANPAZKAPJZG4FKCFNWVHO",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSApplicationMigrationAgentPolicy_v2",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows using the AWS Replication Agent, which is used with AWS Application Migration Service (MGN) to migrate external servers to AWS. We do not recommend that you attach this policy to your IAM users or roles.",
      "CreateDate": "2022-06-06T14:14:38.000Z",
      "UpdateDate": "2022-06-06T14:14:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgn:SendAgentMetricsForMgn",
          "mgn:SendAgentLogsForMgn",
          "mgn:UpdateAgentSourcePropertiesForMgn",
          "mgn:UpdateAgentReplicationInfoForMgn",
          "mgn:UpdateAgentConversionInfoForMgn",
          "mgn:GetAgentCommandForMgn",
          "mgn:GetAgentConfirmedResumeInfoForMgn",
          "mgn:GetAgentRuntimeConfigurationForMgn",
          "mgn:UpdateAgentBacklogForMgn",
          "mgn:GetAgentReplicationInfoForMgn",
          "mgn:IssueClientCertificateForMgn"
        ],
        "Resource": [
          "arn:aws:mgn:*:*:source-server/${aws:SourceIdentity}"
        ]
      }
    ]
  },
  "AWSM2ServicePolicy": {
    "policy": {
      "PolicyName": "AWSM2ServicePolicy",
      "PolicyId": "ANPAZKAPJZG4PRLPTATTD",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSM2ServicePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS M2 to manage AWS resources on your behalf.",
      "CreateDate": "2022-06-07T20:26:39.000Z",
      "UpdateDate": "2022-06-07T20:26:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSubnets",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DescribeMountTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:DeregisterTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeFileSystems"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSManagedServicesDeploymentToolkitPolicy": {
    "policy": {
      "PolicyName": "AWSManagedServicesDeploymentToolkitPolicy",
      "PolicyId": "ANPAZKAPJZG4AJVRS2BUS",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSManagedServicesDeploymentToolkitPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Managed Services to manage deployment toolkit on your behalf.",
      "CreateDate": "2022-06-09T18:33:03.000Z",
      "UpdateDate": "2024-04-04T20:41:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AMSCDKToolkitS3Permissions",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:DeleteBucketPolicy",
          "s3:DeleteObject",
          "s3:DeleteObjectTagging",
          "s3:DeleteObjectVersion",
          "s3:DeleteObjectVersionTagging",
          "s3:GetBucketLocation",
          "s3:GetBucketLogging",
          "s3:GetBucketPolicy",
          "s3:GetBucketVersioning",
          "s3:GetLifecycleConfiguration",
          "s3:GetObject",
          "s3:GetObjectAcl",
          "s3:GetObjectAttributes",
          "s3:GetObjectLegalHold",
          "s3:GetObjectRetention",
          "s3:GetObjectTagging",
          "s3:GetObjectVersion",
          "s3:GetObjectVersionAcl",
          "s3:GetObjectVersionAttributes",
          "s3:GetObjectVersionForReplication",
          "s3:GetObjectVersionTagging",
          "s3:GetObjectVersionTorrent",
          "s3:ListBucket",
          "s3:ListBucketVersions",
          "s3:PutBucketAcl",
          "s3:PutBucketLogging",
          "s3:PutBucketObjectLockConfiguration",
          "s3:PutBucketPolicy",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketTagging",
          "s3:PutBucketVersioning",
          "s3:PutEncryptionConfiguration",
          "s3:PutLifecycleConfiguration"
        ],
        "Resource": [
          "arn:aws:s3:::ams-cdktoolkit*"
        ]
      },
      {
        "Sid": "AMSCDKToolkitCloudFormationPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateChangeSet",
          "cloudformation:DeleteChangeSet",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeChangeSet",
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResources",
          "cloudformation:DescribeStacks",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:GetTemplate",
          "cloudformation:GetTemplateSummary",
          "cloudformation:TagResource",
          "cloudformation:UntagResource",
          "cloudformation:UpdateTerminationProtection"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/ams-cdk-toolkit*"
        ]
      },
      {
        "Sid": "AMSCDKToolkitECRPermissions",
        "Effect": "Allow",
        "Action": [
          "ecr:BatchGetRepositoryScanningConfiguration",
          "ecr:CreateRepository",
          "ecr:DeleteLifecyclePolicy",
          "ecr:DeleteRepository",
          "ecr:DeleteRepositoryPolicy",
          "ecr:DescribeRepositories",
          "ecr:GetLifecyclePolicy",
          "ecr:ListTagsForResource",
          "ecr:PutImageScanningConfiguration",
          "ecr:PutImageTagMutability",
          "ecr:PutLifecyclePolicy",
          "ecr:SetRepositoryPolicy",
          "ecr:TagResource",
          "ecr:UntagResource"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/ams-cdktoolkit*"
        ]
      }
    ]
  },
  "AWSCloudTrail_ReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCloudTrail_ReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4OGLRVUGKM",
      "Arn": "arn:aws:iam::aws:policy/AWSCloudTrail_ReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS CloudTrail.",
      "CreateDate": "2022-06-14T17:19:05.000Z",
      "UpdateDate": "2022-06-14T17:19:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudtrail:Get*",
          "cloudtrail:Describe*",
          "cloudtrail:List*",
          "cloudtrail:LookupEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationAgentInstallationPolicy": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationAgentInstallationPolicy",
      "PolicyId": "ANPAZKAPJZG4CCKR37CNT",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationMigrationAgentInstallationPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows installing the AWS Replication Agent, which is used with AWS Application Migration Service (MGN) to migrate external servers to AWS. Attach this policy to your IAM users or roles whose credentials you provide when installing the AWS Replication Agent.",
      "CreateDate": "2022-06-19T07:51:04.000Z",
      "UpdateDate": "2022-09-20T11:21:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mgn:GetAgentInstallationAssetsForMgn",
          "mgn:SendClientMetricsForMgn",
          "mgn:SendClientLogsForMgn",
          "mgn:RegisterAgentForMgn",
          "mgn:VerifyClientRoleForMgn"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgn:IssueClientCertificateForMgn"
        ],
        "Resource": [
          "arn:aws:mgn:*:*:source-server/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgn:TagResource"
        ],
        "Resource": [
          "arn:aws:mgn:*:*:source-server/*"
        ]
      }
    ]
  },
  "AWSWellArchitectedOrganizationsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSWellArchitectedOrganizationsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LFLXB53HA",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSWellArchitectedOrganizationsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Well-Architected to access Organizations on your behalf.",
      "CreateDate": "2022-06-23T17:15:26.000Z",
      "UpdateDate": "2022-07-25T18:03:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListAccountsForParent",
          "organizations:ListChildren",
          "organizations:ListParents",
          "organizations:ListRoots"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSRolesAnywhereServicePolicy": {
    "policy": {
      "PolicyName": "AWSRolesAnywhereServicePolicy",
      "PolicyId": "ANPAZKAPJZG4L542JDEGK",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSRolesAnywhereServicePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows IAM Roles Anywhere to publish service/usage metrics to CloudWatch and check the status of Private Certificate Authorities on your behalf.",
      "CreateDate": "2022-07-05T15:26:11.000Z",
      "UpdateDate": "2022-07-05T15:26:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:DescribeCertificateAuthority"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:*"
        ]
      }
    ]
  },
  "AWSNetworkManagerCloudWANServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSNetworkManagerCloudWANServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4H76RFSPPV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSNetworkManagerCloudWANServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow NetworkManager to access resources associated with your Core Network",
      "CreateDate": "2022-07-12T12:17:49.000Z",
      "UpdateDate": "2022-07-12T12:17:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTransitGatewayRouteTableAnnouncement",
          "ec2:DeleteTransitGatewayRouteTableAnnouncement",
          "ec2:EnableTransitGatewayRouteTablePropagation",
          "ec2:DisableTransitGatewayRouteTablePropagation"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonGuardDutyMalwareProtectionServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonGuardDutyMalwareProtectionServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4DYKRPKYEO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonGuardDutyMalwareProtectionServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "GuardDuty malware protection uses the service-linked role (SLR) named AWSServiceRoleForAmazonGuardDutyMalwareProtection. This service-linked role allows GuardDuty malware protection to perform agent-less scans to detect malware. It allows GuardDuty to create snapshots in your account, and share the snapshots with the GuardDuty service account to scan for malware. It evaluates these shared snapshots and includes the retrieved EC2 instance metadata in the GuardDuty Malware Protection findings. The AWSServiceRoleForAmazonGuardDutyMalwareProtection service-linked role trusts the malware-protection.guardduty.amazonaws.com service to assume the role.",
      "CreateDate": "2022-07-19T19:06:53.000Z",
      "UpdateDate": "2024-01-25T22:24:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DescribeAndListPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeVolumes",
          "ec2:DescribeSnapshots",
          "ecs:ListClusters",
          "ecs:ListContainerInstances",
          "ecs:ListTasks",
          "ecs:DescribeTasks",
          "eks:DescribeCluster"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateSnapshotVolumeConditionalStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "CreateSnapshotConditionalStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "CreateTagsPermission",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:*/*"
        ]
      },
      {
        "Sid": "AddTagsToSnapshotPermission",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "DeleteAndShareSnapshotPermission",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot",
          "ec2:ModifySnapshotAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "PreventPublicAccessToSnapshotPermission",
        "Effect": "Deny",
        "Action": [
          "ec2:ModifySnapshotAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "CreateGrantPermission",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "ShareSnapshotKMSPermission",
        "Effect": "Allow",
        "Action": [
          "kms:ReEncryptTo",
          "kms:ReEncryptFrom"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "DescribeKeyPermission",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "GuardDutyLogGroupPermission",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups",
          "logs:CreateLogGroup",
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/guardduty/*"
        ]
      },
      {
        "Sid": "GuardDutyLogStreamPermission",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/guardduty/*:log-stream:*"
        ]
      },
      {
        "Sid": "EBSDirectAPIPermissions",
        "Effect": "Allow",
        "Action": [
          "ebs:GetSnapshotBlock",
          "ebs:ListSnapshotBlocks"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      }
    ]
  },
  "AWSVendorInsightsVendorFullAccess": {
    "policy": {
      "PolicyName": "AWSVendorInsightsVendorFullAccess",
      "PolicyId": "ANPAZKAPJZG4CLYN576GG",
      "Arn": "arn:aws:iam::aws:policy/AWSVendorInsightsVendorFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access for creating and managing the Vendor Insights resources",
      "CreateDate": "2022-07-26T15:05:27.000Z",
      "UpdateDate": "2023-10-19T01:41:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:DescribeEntity"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:*/SaaSProduct/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListEntities"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "vendor-insights:CreateDataSource",
          "vendor-insights:UpdateDataSource",
          "vendor-insights:DeleteDataSource",
          "vendor-insights:GetDataSource",
          "vendor-insights:ListDataSources",
          "vendor-insights:CreateSecurityProfile",
          "vendor-insights:ListSecurityProfiles",
          "vendor-insights:GetSecurityProfile",
          "vendor-insights:AssociateDataSource",
          "vendor-insights:DisassociateDataSource",
          "vendor-insights:UpdateSecurityProfile",
          "vendor-insights:ActivateSecurityProfile",
          "vendor-insights:DeactivateSecurityProfile",
          "vendor-insights:UpdateSecurityProfileSnapshotCreationConfiguration",
          "vendor-insights:UpdateSecurityProfileSnapshotReleaseConfiguration",
          "vendor-insights:ListSecurityProfileSnapshots",
          "vendor-insights:GetSecurityProfileSnapshot",
          "vendor-insights:TagResource",
          "vendor-insights:UntagResource",
          "vendor-insights:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:AcceptAgreementApprovalRequest",
          "aws-marketplace:RejectAgreementApprovalRequest",
          "aws-marketplace:GetAgreementApprovalRequest",
          "aws-marketplace:ListAgreementApprovalRequests",
          "aws-marketplace:CancelAgreement",
          "aws-marketplace:SearchAgreements"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "artifact:GetReport",
          "artifact:GetReportMetadata",
          "artifact:GetTermForReport",
          "artifact:ListReports"
        ],
        "Resource": [
          "arn:aws:artifact:*::report/*"
        ]
      }
    ]
  },
  "AWSVendorInsightsVendorReadOnly": {
    "policy": {
      "PolicyName": "AWSVendorInsightsVendorReadOnly",
      "PolicyId": "ANPAZKAPJZG4NHHAIIJR5",
      "Arn": "arn:aws:iam::aws:policy/AWSVendorInsightsVendorReadOnly",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access for viewing the Vendor Insights resources",
      "CreateDate": "2022-07-26T15:05:34.000Z",
      "UpdateDate": "2022-12-01T00:54:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:DescribeEntity"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:*/SaaSProduct/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListEntities"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "vendor-insights:GetDataSource",
          "vendor-insights:ListDataSources",
          "vendor-insights:ListSecurityProfiles",
          "vendor-insights:GetSecurityProfile",
          "vendor-insights:GetSecurityProfileSnapshot",
          "vendor-insights:ListSecurityProfileSnapshots",
          "vendor-insights:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "artifact:GetReport",
          "artifact:GetReportMetadata",
          "artifact:GetTermForReport",
          "artifact:ListReports"
        ],
        "Resource": [
          "arn:aws:artifact:*::report/*"
        ]
      }
    ]
  },
  "AWSVendorInsightsAssessorFullAccess": {
    "policy": {
      "PolicyName": "AWSVendorInsightsAssessorFullAccess",
      "PolicyId": "ANPAZKAPJZG4AEED3KMDL",
      "Arn": "arn:aws:iam::aws:policy/AWSVendorInsightsAssessorFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access for viewing entitled Vendor Insights resources and managing Vendor Insights subscriptions",
      "CreateDate": "2022-07-26T15:05:40.000Z",
      "UpdateDate": "2022-12-01T00:51:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "vendor-insights:GetProfileAccessTerms",
          "vendor-insights:ListEntitledSecurityProfiles",
          "vendor-insights:GetEntitledSecurityProfileSnapshot",
          "vendor-insights:ListEntitledSecurityProfileSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:CreateAgreementRequest",
          "aws-marketplace:GetAgreementRequest",
          "aws-marketplace:AcceptAgreementRequest",
          "aws-marketplace:CancelAgreementRequest",
          "aws-marketplace:ListAgreementRequests",
          "aws-marketplace:SearchAgreements",
          "aws-marketplace:CancelAgreement"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "artifact:GetReport",
          "artifact:GetReportMetadata",
          "artifact:GetTermForReport",
          "artifact:ListReports"
        ],
        "Resource": [
          "arn:aws:artifact:*::report/*"
        ]
      }
    ]
  },
  "AWSVendorInsightsAssessorReadOnly": {
    "policy": {
      "PolicyName": "AWSVendorInsightsAssessorReadOnly",
      "PolicyId": "ANPAZKAPJZG4MRZ4DPUNS",
      "Arn": "arn:aws:iam::aws:policy/AWSVendorInsightsAssessorReadOnly",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access for viewing entitled Vendor Insights resources",
      "CreateDate": "2022-07-26T15:05:56.000Z",
      "UpdateDate": "2022-12-01T00:55:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "vendor-insights:ListEntitledSecurityProfiles",
          "vendor-insights:GetEntitledSecurityProfileSnapshot",
          "vendor-insights:ListEntitledSecurityProfileSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "artifact:GetReport",
          "artifact:GetReportMetadata",
          "artifact:GetTermForReport",
          "artifact:ListReports"
        ],
        "Resource": [
          "arn:aws:artifact:*::report/*"
        ]
      }
    ]
  },
  "AWSLicenseManagerUserSubscriptionsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSLicenseManagerUserSubscriptionsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4EEZOJYVEV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSLicenseManagerUserSubscriptionsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS License Manager User Subscriptions Service to manage resources on your behalf.",
      "CreateDate": "2022-07-30T01:17:18.000Z",
      "UpdateDate": "2022-11-21T19:51:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DSReadPermissions",
        "Effect": "Allow",
        "Action": [
          "ds:DescribeDirectories",
          "ds:GetAuthorizedApplicationDetails"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMReadPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:GetInventory",
          "ssm:GetCommandInvocation",
          "ssm:ListCommandInvocations",
          "ssm:DescribeInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2ReadPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeVpcPeeringConnections"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2WritePermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances",
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "SSMDocumentExecutionPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*::document/AWS-RunPowerShellScript"
        ]
      },
      {
        "Sid": "SSMInstanceExecutionPermissions",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AWSTrustedAdvisorPriorityFullAccess": {
    "policy": {
      "PolicyName": "AWSTrustedAdvisorPriorityFullAccess",
      "PolicyId": "ANPAZKAPJZG4LJLEVDMJO",
      "Arn": "arn:aws:iam::aws:policy/AWSTrustedAdvisorPriorityFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Trusted Advisor Priority. This policy also enables the user to add Trusted Advisor as a trusted service with AWS Organizations and to specify delegated administrator accounts for Trusted Advisor Priority.",
      "CreateDate": "2022-08-16T16:08:24.000Z",
      "UpdateDate": "2022-08-16T16:08:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "trustedadvisor:DescribeAccount*",
          "trustedadvisor:DescribeOrganization",
          "trustedadvisor:DescribeRisk*",
          "trustedadvisor:DownloadRisk",
          "trustedadvisor:UpdateRiskStatus",
          "trustedadvisor:DescribeNotificationConfigurations",
          "trustedadvisor:UpdateNotificationConfigurations",
          "trustedadvisor:DeleteNotificationConfigurationForDelegatedAdmin",
          "trustedadvisor:SetOrganizationAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListDelegatedAdministrators",
          "organizations:EnableAWSServiceAccess",
          "organizations:DisableAWSServiceAccess"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/reporting.trustedadvisor.amazonaws.com/AWSServiceRoleForTrustedAdvisorReporting"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:RegisterDelegatedAdministrator",
          "organizations:DeregisterDelegatedAdministrator"
        ],
        "Resource": [
          "arn:aws:organizations::*:*"
        ]
      }
    ]
  },
  "AWSTrustedAdvisorPriorityReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSTrustedAdvisorPriorityReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4JNY6EYCP6",
      "Arn": "arn:aws:iam::aws:policy/AWSTrustedAdvisorPriorityReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to AWS Trusted Advisor Priority. This includes permission to view the delegated administrator accounts.",
      "CreateDate": "2022-08-16T16:35:12.000Z",
      "UpdateDate": "2022-08-16T16:35:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "trustedadvisor:DescribeAccount*",
          "trustedadvisor:DescribeOrganization",
          "trustedadvisor:DescribeRisk*",
          "trustedadvisor:DownloadRisk",
          "trustedadvisor:DescribeNotificationConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationDiscoveryAgentlessCollectorAccess": {
    "policy": {
      "PolicyName": "AWSApplicationDiscoveryAgentlessCollectorAccess",
      "PolicyId": "ANPAZKAPJZG4AMW5AV4HF",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationDiscoveryAgentlessCollectorAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Application Discovery Service Agentless Collectors to auto update, register, and communicate with Application Discovery Service",
      "CreateDate": "2022-08-16T21:00:59.000Z",
      "UpdateDate": "2022-08-16T21:00:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "arsenal:RegisterOnPremisesAgent"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr-public:DescribeImages"
        ],
        "Resource": [
          "arn:aws:ecr-public::446372222237:repository/6e5498e4-8c31-4f57-9991-13b4b992ff7b"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr-public:GetAuthorizationToken"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "mgh:GetHomeRegion"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sts:GetServiceBearerToken"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSupportAppFullAccess": {
    "policy": {
      "PolicyName": "AWSSupportAppFullAccess",
      "PolicyId": "ANPAZKAPJZG4OBZ6YD36A",
      "Arn": "arn:aws:iam::aws:policy/AWSSupportAppFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the AWS Support App and other required services, such as AWS Support and Service Quotas. This policy includes permissions to use the supporting services so that the user can contact AWS Support for support cases, change service quotas, and create the relevant service-linked roles.",
      "CreateDate": "2022-08-22T16:53:41.000Z",
      "UpdateDate": "2022-08-22T16:53:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "servicequotas:GetRequestedServiceQuotaChange",
          "servicequotas:GetServiceQuota",
          "servicequotas:RequestServiceQuotaIncrease",
          "support:AddAttachmentsToSet",
          "support:AddCommunicationToCase",
          "support:CreateCase",
          "support:DescribeCases",
          "support:DescribeCommunications",
          "support:DescribeSeverityLevels",
          "support:InitiateChatForCase",
          "support:ResolveCase"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSupportAppReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSSupportAppReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4JNPPTE2II",
      "Arn": "arn:aws:iam::aws:policy/AWSSupportAppReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to the AWS Support App.",
      "CreateDate": "2022-08-22T17:01:15.000Z",
      "UpdateDate": "2022-08-22T17:01:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "support:DescribeCases",
          "support:DescribeCommunications"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEKSLocalOutpostServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonEKSLocalOutpostServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4A6PGOGKJI",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonEKSLocalOutpostServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon EKS Local to call AWS services on your behalf.",
      "CreateDate": "2022-08-23T21:53:02.000Z",
      "UpdateDate": "2022-10-24T16:24:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeRouteTables",
          "ec2:DescribeAddresses",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribePlacementGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:launch-template/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:placement-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup",
          "ec2:TerminateInstances",
          "ec2:GetConsoleOutput"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DeleteSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DescribeSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:GetInstanceProfile",
          "iam:DeleteInstanceProfile",
          "iam:RemoveRoleFromInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/eks-local-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartSession"
        ],
        "Resource": [
          "arn:aws:ssm:*::document/AmazonEKS-ControlPlaneInstanceProxy"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:ResumeSession",
          "ssm:TerminateSession"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "outposts:GetOutpost"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerCanvasForecastAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerCanvasForecastAccess",
      "PolicyId": "ANPAZKAPJZG4NXKPWTG5T",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerCanvasForecastAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions commonly needed to use SageMaker Canvas with Amazon Forecast.",
      "CreateDate": "2022-08-24T20:04:20.000Z",
      "UpdateDate": "2022-08-24T20:04:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker-*/Canvas*",
          "arn:aws:s3:::sagemaker-*/canvas*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker-*"
        ]
      }
    ]
  },
  "GroundTruthSyntheticConsoleReadOnlyAccess": {
    "policy": {
      "PolicyName": "GroundTruthSyntheticConsoleReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4CS74COTOM",
      "Arn": "arn:aws:iam::aws:policy/GroundTruthSyntheticConsoleReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants read-only access to SageMaker Ground Truth Synthetic via the AWS Management Console.",
      "CreateDate": "2022-08-25T15:58:49.000Z",
      "UpdateDate": "2022-08-25T15:58:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker-groundtruth-synthetic:List*",
          "sagemaker-groundtruth-synthetic:Get*",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "GroundTruthSyntheticConsoleFullAccess": {
    "policy": {
      "PolicyName": "GroundTruthSyntheticConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4PG7TGY6YB",
      "Arn": "arn:aws:iam::aws:policy/GroundTruthSyntheticConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions needed to use all features of the SageMaker Ground Truth Synthetic Console.",
      "CreateDate": "2022-08-25T15:58:49.000Z",
      "UpdateDate": "2022-08-25T15:58:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker-groundtruth-synthetic:*",
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEKSLocalOutpostClusterPolicy": {
    "policy": {
      "PolicyName": "AmazonEKSLocalOutpostClusterPolicy",
      "PolicyId": "ANPAZKAPJZG4GSJCNLZP4",
      "Arn": "arn:aws:iam::aws:policy/AmazonEKSLocalOutpostClusterPolicy",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides permissions to EKS local cluster's control-plane instances running in your account to manage resources on your behalf.",
      "CreateDate": "2022-08-24T21:56:47.000Z",
      "UpdateDate": "2022-10-17T16:02:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeRouteTables",
          "ec2:DescribeTags",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeInstanceTypes",
          "ec2messages:AcknowledgeMessage",
          "ec2messages:DeleteMessage",
          "ec2messages:FailMessage",
          "ec2messages:GetEndpoint",
          "ec2messages:GetMessages",
          "ec2messages:SendReply",
          "ssmmessages:CreateControlChannel",
          "ssmmessages:CreateDataChannel",
          "ssmmessages:OpenControlChannel",
          "ssmmessages:OpenDataChannel",
          "ssm:DescribeInstanceProperties",
          "ssm:DescribeDocumentParameters",
          "ssm:ListInstanceAssociations",
          "ssm:RegisterManagedInstance",
          "ssm:UpdateInstanceInformation",
          "ssm:UpdateInstanceAssociationStatus",
          "ssm:PutComplianceItems",
          "ssm:PutInventory",
          "ecr-public:GetAuthorizationToken",
          "ecr:GetAuthorizationToken"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:GetDownloadUrlForLayer",
          "ecr:BatchGetImage"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/eks/*",
          "arn:aws:ecr:*:*:repository/bottlerocket-admin",
          "arn:aws:ecr:*:*:repository/bottlerocket-control-eks",
          "arn:aws:ecr:*:*:repository/diagnostics-collector-eks",
          "arn:aws:ecr:*:*:repository/kubelet-config-updater"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DeleteSecret"
        ],
        "Resource": [
          "arn:*:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/eks/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents",
          "logs:CreateLogStream",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
        ]
      }
    ]
  },
  "AmazonSSMManagedEC2InstanceDefaultPolicy": {
    "policy": {
      "PolicyName": "AmazonSSMManagedEC2InstanceDefaultPolicy",
      "PolicyId": "ANPAZKAPJZG4LVDRKUQFG",
      "Arn": "arn:aws:iam::aws:policy/AmazonSSMManagedEC2InstanceDefaultPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy enables AWS Systems Manager functionality on EC2 instances.",
      "CreateDate": "2022-08-30T20:54:27.000Z",
      "UpdateDate": "2022-08-30T20:54:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeAssociation",
          "ssm:GetDeployablePatchSnapshotForInstance",
          "ssm:GetDocument",
          "ssm:DescribeDocument",
          "ssm:GetManifest",
          "ssm:ListAssociations",
          "ssm:ListInstanceAssociations",
          "ssm:PutInventory",
          "ssm:PutComplianceItems",
          "ssm:PutConfigurePackageResult",
          "ssm:UpdateAssociationStatus",
          "ssm:UpdateInstanceAssociationStatus",
          "ssm:UpdateInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssmmessages:CreateControlChannel",
          "ssmmessages:CreateDataChannel",
          "ssmmessages:OpenControlChannel",
          "ssmmessages:OpenDataChannel"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2messages:AcknowledgeMessage",
          "ec2messages:DeleteMessage",
          "ec2messages:FailMessage",
          "ec2messages:GetEndpoint",
          "ec2messages:GetMessages",
          "ec2messages:SendReply"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerCanvasFullAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerCanvasFullAccess",
      "PolicyId": "ANPAZKAPJZG4LG6L7ZJCN",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerCanvasFullAccess",
      "Path": "/",
      "DefaultVersionId": "v9",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon SageMaker Canvas resources and operations. The policy also provides select access to related services (e.g., S3, IAM, VPC, ECR, CloudWatch Logs, Redshift, Secrets Manager, and Forecast). This policy should be attached to the Amazon SageMaker Domain/User Profile execution role.",
      "CreateDate": "2022-09-09T00:44:25.000Z",
      "UpdateDate": "2024-01-24T22:01:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SageMakerUserDetailsAndPackageOperations",
        "Effect": "Allow",
        "Action": [
          "sagemaker:DescribeDomain",
          "sagemaker:DescribeUserProfile",
          "sagemaker:ListTags",
          "sagemaker:ListModelPackages",
          "sagemaker:ListModelPackageGroups",
          "sagemaker:ListEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SageMakerPackageGroupOperations",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateModelPackageGroup",
          "sagemaker:CreateModelPackage",
          "sagemaker:DescribeModelPackageGroup",
          "sagemaker:DescribeModelPackage"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:model-package/*",
          "arn:aws:sagemaker:*:*:model-package-group/*"
        ]
      },
      {
        "Sid": "SageMakerTrainingOperations",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateCompilationJob",
          "sagemaker:CreateEndpoint",
          "sagemaker:CreateEndpointConfig",
          "sagemaker:CreateModel",
          "sagemaker:CreateProcessingJob",
          "sagemaker:CreateAutoMLJob",
          "sagemaker:CreateAutoMLJobV2",
          "sagemaker:DeleteEndpoint",
          "sagemaker:DescribeCompilationJob",
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:DescribeModel",
          "sagemaker:DescribeProcessingJob",
          "sagemaker:DescribeAutoMLJob",
          "sagemaker:DescribeAutoMLJobV2",
          "sagemaker:ListCandidatesForAutoMLJob",
          "sagemaker:AddTags",
          "sagemaker:DeleteApp"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:*Canvas*",
          "arn:aws:sagemaker:*:*:*canvas*",
          "arn:aws:sagemaker:*:*:*model-compilation-*"
        ]
      },
      {
        "Sid": "SageMakerHostingOperations",
        "Effect": "Allow",
        "Action": [
          "sagemaker:DeleteEndpointConfig",
          "sagemaker:DeleteModel",
          "sagemaker:InvokeEndpoint",
          "sagemaker:UpdateEndpointWeightsAndCapacities",
          "sagemaker:InvokeEndpointAsync"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:*Canvas*",
          "arn:aws:sagemaker:*:*:*canvas*"
        ]
      },
      {
        "Sid": "EC2VPCOperation",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcEndpointServices"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ECROperations",
        "Effect": "Allow",
        "Action": [
          "ecr:BatchGetImage",
          "ecr:GetDownloadUrlForLayer",
          "ecr:GetAuthorizationToken"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMGetOperations",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "IAMPassOperation",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "LoggingOperation",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/sagemaker/*"
        ]
      },
      {
        "Sid": "S3Operations",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:CreateBucket",
          "s3:GetBucketCors",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Sid": "ReadSageMakerJumpstartArtifacts",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::jumpstart-cache-prod-us-west-2/*",
          "arn:aws:s3:::jumpstart-cache-prod-us-east-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-us-east-2/*",
          "arn:aws:s3:::jumpstart-cache-prod-eu-west-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-eu-central-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-south-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-2/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-2/*"
        ]
      },
      {
        "Sid": "S3ListOperations",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GlueOperations",
        "Effect": "Allow",
        "Action": [
          "glue:SearchTables"
        ],
        "Resource": [
          "arn:aws:glue:*:*:table/*/*",
          "arn:aws:glue:*:*:database/*",
          "arn:aws:glue:*:*:catalog"
        ]
      },
      {
        "Sid": "SecretsManagerARNBasedOperation",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:CreateSecret",
          "secretsmanager:PutResourcePolicy"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
        ]
      },
      {
        "Sid": "SecretManagerTagBasedOperation",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RedshiftOperations",
        "Effect": "Allow",
        "Action": [
          "redshift-data:ExecuteStatement",
          "redshift-data:DescribeStatement",
          "redshift-data:CancelStatement",
          "redshift-data:GetStatementResult",
          "redshift-data:ListSchemas",
          "redshift-data:ListTables",
          "redshift-data:DescribeTable"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RedshiftGetCredentialsOperation",
        "Effect": "Allow",
        "Action": [
          "redshift:GetClusterCredentials"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
          "arn:aws:redshift:*:*:dbname:*"
        ]
      },
      {
        "Sid": "ForecastOperations",
        "Effect": "Allow",
        "Action": [
          "forecast:CreateExplainabilityExport",
          "forecast:CreateExplainability",
          "forecast:CreateForecastEndpoint",
          "forecast:CreateAutoPredictor",
          "forecast:CreateDatasetImportJob",
          "forecast:CreateDatasetGroup",
          "forecast:CreateDataset",
          "forecast:CreateForecast",
          "forecast:CreateForecastExportJob",
          "forecast:CreatePredictorBacktestExportJob",
          "forecast:CreatePredictor",
          "forecast:DescribeExplainabilityExport",
          "forecast:DescribeExplainability",
          "forecast:DescribeAutoPredictor",
          "forecast:DescribeForecastEndpoint",
          "forecast:DescribeDatasetImportJob",
          "forecast:DescribeDataset",
          "forecast:DescribeForecast",
          "forecast:DescribeForecastExportJob",
          "forecast:DescribePredictorBacktestExportJob",
          "forecast:GetAccuracyMetrics",
          "forecast:InvokeForecastEndpoint",
          "forecast:GetRecentForecastContext",
          "forecast:DescribePredictor",
          "forecast:TagResource",
          "forecast:DeleteResourceTree"
        ],
        "Resource": [
          "arn:aws:forecast:*:*:*Canvas*"
        ]
      },
      {
        "Sid": "RDSOperation",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMPassOperationForForecast",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "AutoscalingOperations",
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:RegisterScalableTarget"
        ],
        "Resource": [
          "arn:aws:application-autoscaling:*:*:scalable-target/*"
        ]
      },
      {
        "Sid": "AsyncEndpointOperations",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms",
          "sagemaker:DescribeEndpointConfig"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SageMakerCloudWatchUpdate",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:DeleteAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
        ]
      },
      {
        "Sid": "AutoscalingSageMakerEndpointOperation",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint"
        ]
      }
    ]
  },
  "AmazonCloudWatchEvidentlyServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonCloudWatchEvidentlyServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LFONJYLB3",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonCloudWatchEvidentlyServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows CloudWatch Evidently Service to manage associated AWS Resources on behalf of the customer",
      "CreateDate": "2022-09-13T17:25:36.000Z",
      "UpdateDate": "2022-09-13T17:25:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appconfig:StartDeployment"
        ],
        "Resource": [
          "arn:aws:appconfig:*:*:application/*",
          "arn:aws:appconfig:*:*:deploymentstrategy/*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "appconfig:StartDeployment"
        ],
        "Resource": [
          "arn:aws:appconfig:*:*:application/*/configurationprofile/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "appconfig:TagResource"
        ],
        "Resource": [
          "arn:aws:appconfig:*:*:application/*/environment/*/deployment/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "appconfig:StopDeployment"
        ],
        "Resource": [
          "arn:aws:appconfig:*:*:application/*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "appconfig:StopDeployment"
        ],
        "Resource": [
          "arn:aws:appconfig:*:*:application/*/environment/*/deployment/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "appconfig:ListDeployments"
        ],
        "Resource": [
          "arn:aws:appconfig:*:*:application/*"
        ]
      }
    ]
  },
  "AWSDeviceFarmServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSDeviceFarmServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FGV5PC6T3",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSDeviceFarmServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grant permissions to AWS Device Farm to call EC2 Network APIs on your behalf.",
      "CreateDate": "2022-09-20T21:02:28.000Z",
      "UpdateDate": "2022-09-20T21:02:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      }
    ]
  },
  "AWSIoTFleetwiseServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSIoTFleetwiseServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FLIYXIYJ3",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSIoTFleetwiseServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to AWS Resources and metaData used or managed by AWSIoTFleetwise for auxiliary features",
      "CreateDate": "2022-09-21T23:27:48.000Z",
      "UpdateDate": "2022-09-21T23:27:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSupportPlansReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSSupportPlansReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4HILAV7PNB",
      "Arn": "arn:aws:iam::aws:policy/AWSSupportPlansReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to supportplans.",
      "CreateDate": "2022-09-27T18:08:29.000Z",
      "UpdateDate": "2022-09-27T18:08:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "supportplans:GetSupportPlan",
          "supportplans:GetSupportPlanUpdateStatus"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSupportPlansFullAccess": {
    "policy": {
      "PolicyName": "AWSSupportPlansFullAccess",
      "PolicyId": "ANPAZKAPJZG4K42KXJODL",
      "Arn": "arn:aws:iam::aws:policy/AWSSupportPlansFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to supportplans.",
      "CreateDate": "2022-09-27T18:19:30.000Z",
      "UpdateDate": "2023-05-09T21:07:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "supportplans:GetSupportPlan",
          "supportplans:GetSupportPlanUpdateStatus",
          "supportplans:StartSupportPlanUpdate",
          "supportplans:CreateSupportPlanSchedule"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AppIntegrationsServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AppIntegrationsServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GMGEUNFL5",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AppIntegrationsServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AppIntegrations to manage AppFlow resources and publish CloudWatch metric data on your behalf.",
      "CreateDate": "2022-09-30T19:42:56.000Z",
      "UpdateDate": "2022-09-30T19:42:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "appflow:DescribeConnectorEntity",
          "appflow:ListConnectorEntities"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "appflow:DescribeConnectorProfiles",
          "appflow:UseConnectorProfile"
        ],
        "Resource": [
          "arn:aws:appflow:*:*:connector-profile/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "appflow:DeleteFlow",
          "appflow:DescribeFlow",
          "appflow:DescribeFlowExecutionRecords",
          "appflow:StartFlow",
          "appflow:StopFlow",
          "appflow:UpdateFlow"
        ],
        "Resource": [
          "arn:aws:appflow:*:*:flow/FlowCreatedByAppIntegrations-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "appflow:TagResource"
        ],
        "Resource": [
          "arn:aws:appflow:*:*:flow/FlowCreatedByAppIntegrations-*"
        ]
      }
    ]
  },
  "AmazonAppStreamPCAAccess": {
    "policy": {
      "PolicyName": "AmazonAppStreamPCAAccess",
      "PolicyId": "ANPAZKAPJZG4HXOSULL5E",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonAppStreamPCAAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Amazon AppStream 2.0 access to AWS Certificate Manager Private CA in customer accounts for certificate-based authentication",
      "CreateDate": "2022-10-24T17:05:03.000Z",
      "UpdateDate": "2022-10-24T17:05:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:IssueCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:DescribeCertificateAuthority"
        ],
        "Resource": [
          "arn:*:acm-pca:*:*:*"
        ]
      }
    ]
  },
  "AWSRefactoringToolkitSidecarPolicy": {
    "policy": {
      "PolicyName": "AWSRefactoringToolkitSidecarPolicy",
      "PolicyId": "ANPAZKAPJZG4LC67532NW",
      "Arn": "arn:aws:iam::aws:policy/AWSRefactoringToolkitSidecarPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is intended to be used by Amazon ECS Tasks created for testing applications in AWS using the AWS Toolkit for .NET Refactoring extension for Microsoft Visual Studio. The policy grants access to download application artifacts from Amazon S3, communicate the status of the Task using AWS Systems Manager, and other required services.",
      "CreateDate": "2022-10-25T16:41:12.000Z",
      "UpdateDate": "2022-10-29T22:15:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SsmMessagesAccess",
        "Effect": "Allow",
        "Action": [
          "ssmmessages:OpenControlChannel",
          "ssmmessages:CreateControlChannel",
          "ssmmessages:OpenDataChannel",
          "ssmmessages:CreateDataChannel"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3GetObjectAccess",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*/refactoringtoolkit*"
        ]
      },
      {
        "Sid": "S3ListBucketAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      }
    ]
  },
  "AWSRefactoringToolkitFullAccess": {
    "policy": {
      "PolicyName": "AWSRefactoringToolkitFullAccess",
      "PolicyId": "ANPAZKAPJZG4BNNXRNIF7",
      "Arn": "arn:aws:iam::aws:policy/AWSRefactoringToolkitFullAccess",
      "Path": "/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permission to use AWS services with the AWS Toolkit for .NET Refactoring extension for Microsoft Visual Studio. It is intended to be attached to a local AWS profile. The policy allows uploading application artifacts and downloading the resulting artifacts from Amazon S3. It allows building applications into a container image using AWS CodeBuild and storing and retrieving the images from Amazon Elastic Container Registry (Amazon ECR). And it allows deployment of the application to container services on AWS such as Amazon Elastic Container Service (Amazon ECS), optional creation of VPC resources, optional connection to existing infrastructure such as AWS Directory Service, and other related services.",
      "CreateDate": "2022-10-25T16:41:15.000Z",
      "UpdateDate": "2024-03-25T18:43:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "App2ContainerAccess",
        "Effect": "Allow",
        "Action": [
          "a2c:GetContainerizationJobDetails",
          "a2c:GetDeploymentJobDetails",
          "a2c:StartContainerizationJob",
          "a2c:StartDeploymentJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudformationExecutionAccess",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateChangeSet",
          "cloudformation:CreateStack",
          "cloudformation:DescribeChangeSet",
          "cloudformation:DescribeStackEvents",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:UpdateStack",
          "cloudformation:TagResource",
          "cloudformation:UntagResource"
        ],
        "Resource": [
          "arn:*:cloudformation:*:*:stack/a2c-app-*",
          "arn:*:cloudformation:*:*:stack/a2c-build-*",
          "arn:*:cloudformation:*:*:stack/application-transformation-app-*"
        ]
      },
      {
        "Sid": "CodeBuildCreateAccess",
        "Effect": "Allow",
        "Action": [
          "codebuild:CreateProject",
          "codebuild:UpdateProject"
        ],
        "Resource": [
          "arn:aws:codebuild:*:*:project/*"
        ]
      },
      {
        "Sid": "CodeBuildExecutionAccess",
        "Effect": "Allow",
        "Action": [
          "codebuild:StartBuild"
        ],
        "Resource": [
          "arn:aws:codebuild:*:*:project/*"
        ]
      },
      {
        "Sid": "CreateSecurityGroupAccess",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2CreateAccess",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateInternetGateway",
          "ec2:CreateKeyPair",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSubnet",
          "ec2:CreateTags",
          "ec2:CreateVpc",
          "ec2:AuthorizeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2CreateAccessATS",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateInternetGateway",
          "ec2:CreateKeyPair",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSubnet",
          "ec2:CreateTags",
          "ec2:CreateVpc",
          "ec2:AuthorizeSecurityGroupIngress"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2ModifyAccess",
        "Effect": "Allow",
        "Action": [
          "ec2:AssociateRouteTable",
          "ec2:AttachInternetGateway",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:DeleteTags",
          "ec2:ModifySubnetAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:CreateSubnet",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2ModifyAccessATS",
        "Effect": "Allow",
        "Action": [
          "ec2:AssociateRouteTable",
          "ec2:AttachInternetGateway",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:DeleteTags",
          "ec2:ModifySubnetAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:CreateSubnet",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EcrCreateAccess",
        "Effect": "Allow",
        "Action": [
          "ecr:CreateRepository",
          "ecr:TagResource"
        ],
        "Resource": [
          "arn:*:ecr:*:*:repository/*"
        ]
      },
      {
        "Sid": "EcrCreateAccessATS",
        "Effect": "Allow",
        "Action": [
          "ecr:CreateRepository",
          "ecr:TagResource"
        ],
        "Resource": [
          "arn:*:ecr:*:*:repository/*"
        ]
      },
      {
        "Sid": "EcrModifyAccess",
        "Effect": "Allow",
        "Action": [
          "ecr:GetLifecyclePolicy",
          "ecr:GetRepositoryPolicy",
          "ecr:ListImages",
          "ecr:ListTagsForResource",
          "ecr:TagResource",
          "ecr:UntagResource"
        ],
        "Resource": [
          "arn:*:ecr:*:*:repository/*"
        ]
      },
      {
        "Sid": "EcrModifyAccessATS",
        "Effect": "Allow",
        "Action": [
          "ecr:GetLifecyclePolicy",
          "ecr:GetRepositoryPolicy",
          "ecr:ListImages",
          "ecr:ListTagsForResource",
          "ecr:TagResource",
          "ecr:UntagResource"
        ],
        "Resource": [
          "arn:*:ecr:*:*:repository/*"
        ]
      },
      {
        "Sid": "EcsCreateAccess",
        "Effect": "Allow",
        "Action": [
          "ecs:CreateCluster",
          "ecs:CreateService",
          "ecs:RegisterTaskDefinition",
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EcsCreateAccessATS",
        "Effect": "Allow",
        "Action": [
          "ecs:CreateCluster",
          "ecs:CreateService",
          "ecs:RegisterTaskDefinition",
          "ecs:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EcsModifyAccess",
        "Effect": "Allow",
        "Action": [
          "ecs:UpdateService",
          "ecs:TagResource",
          "ecs:UntagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EcsModifyAccessATS",
        "Effect": "Allow",
        "Action": [
          "ecs:UpdateService",
          "ecs:TagResource",
          "ecs:UntagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EcsReadTaskDefinitionAccess",
        "Effect": "Allow",
        "Action": [
          "ecs:DescribeTaskDefinition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EcsExecuteCommandInSidecar",
        "Effect": "Allow",
        "Action": [
          "ecs:ExecuteCommand"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EcsExecuteCommandInSidecarATS",
        "Effect": "Allow",
        "Action": [
          "ecs:ExecuteCommand"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateEcsServiceLinkedRoleAccess",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
        ]
      },
      {
        "Sid": "CloudwatchCreateAccess",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:TagResource"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/codebuild/*:*",
          "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
          "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
        ]
      },
      {
        "Sid": "CloudwatchCreateAccessATS",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:TagResource"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
          "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
        ]
      },
      {
        "Sid": "CloudwatchGetAccess",
        "Effect": "Allow",
        "Action": [
          "logs:GetLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/codebuild/*:*",
          "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
          "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
        ]
      },
      {
        "Sid": "CloudwatchGetAccessATS",
        "Effect": "Allow",
        "Action": [
          "logs:GetLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
          "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
        ]
      },
      {
        "Sid": "SsmParameterAccess",
        "Effect": "Allow",
        "Action": [
          "ssm:AddTagsToResource",
          "ssm:GetParameters",
          "ssm:PutParameter",
          "ssm:RemoveTagsFromResource"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/a2c-generated-check-ecs-slr-*"
        ]
      },
      {
        "Sid": "SsmMessagesAccess",
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeSessions",
          "ssmmessages:CreateControlChannel",
          "ssmmessages:CreateDataChannel",
          "ssmmessages:OpenControlChannel",
          "ssmmessages:OpenDataChannel"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3ObjectAccess",
        "Effect": "Allow",
        "Action": [
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*/refactoringtoolkit*",
          "arn:aws:s3:::*/a2c-generated*",
          "arn:aws:s3:::*/application-transformation*"
        ]
      },
      {
        "Sid": "S3ListAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "ReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks",
          "clouddirectory:ListDirectories",
          "codebuild:BatchGetProjects",
          "codebuild:BatchGetBuilds",
          "ds:DescribeDirectories",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeRegions",
          "ecr:DescribeImages",
          "ecr:DescribeRepositories",
          "ecs:DescribeClusters",
          "ecs:DescribeServices",
          "ecs:DescribeTasks",
          "ecs:ListTagsForResource",
          "ecs:ListTasks",
          "iam:ListRoles",
          "s3:GetBucketLocation",
          "s3:GetBucketVersioning",
          "s3:ListAllMyBuckets",
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetECSSLR",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
        ]
      },
      {
        "Sid": "PortingAssistantFullAccess",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws.portingassistant.dotnet.datastore",
          "arn:aws:s3:::aws.portingassistant.dotnet.datastore/*"
        ]
      },
      {
        "Sid": "ApplicationTransformationAccess",
        "Effect": "Allow",
        "Action": [
          "application-transformation:StartPortingCompatibilityAssessment",
          "application-transformation:GetPortingCompatibilityAssessment",
          "application-transformation:StartPortingRecommendationAssessment",
          "application-transformation:GetPortingRecommendationAssessment",
          "application-transformation:PutLogData",
          "application-transformation:PutMetricData",
          "application-transformation:StartContainerization",
          "application-transformation:GetContainerization",
          "application-transformation:StartDeployment",
          "application-transformation:GetDeployment"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KmsAccess",
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt",
          "kms:Encrypt",
          "kms:DescribeKey",
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "arn:aws:kms:*::*"
        ]
      },
      {
        "Sid": "EcrPushAccess",
        "Effect": "Allow",
        "Action": [
          "ecr:InitiateLayerUpload",
          "ecr:PutImage",
          "ecr:UploadLayerPart",
          "ecr:CompleteLayerUpload",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer"
        ],
        "Resource": [
          "arn:*:ecr:*:*:repository/*"
        ]
      },
      {
        "Sid": "EcrAuthAccess",
        "Effect": "Allow",
        "Action": [
          "ecr:GetAuthorizationToken"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KmsCreateGrantAccess",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "arn:aws:kms:*::*"
        ]
      }
    ]
  },
  "AWSResourceExplorerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSResourceExplorerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4K2H54PAUL",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSResourceExplorerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Resource Explorer to view resources and CloudTrail events on your behalf to index your resources for search.",
      "CreateDate": "2022-10-25T20:35:29.000Z",
      "UpdateDate": "2023-12-20T13:58:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudTrailEventsAccess",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:CreateServiceLinkedChannel"
        ],
        "Resource": [
          "arn:aws:cloudtrail:*:*:channel/aws-service-channel/resource-explorer-2/*"
        ]
      },
      {
        "Sid": "ApiGatewayAccess",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/restapis/*/deployments"
        ]
      },
      {
        "Sid": "ResourceInventoryAccess",
        "Effect": "Allow",
        "Action": [
          "access-analyzer:ListAnalyzers",
          "acm-pca:ListCertificateAuthorities",
          "amplify:ListApps",
          "amplify:ListBackendEnvironments",
          "amplify:ListBranches",
          "amplify:ListDomainAssociations",
          "amplifyuibuilder:ListComponents",
          "amplifyuibuilder:ListThemes",
          "app-integrations:ListEventIntegrations",
          "apprunner:ListServices",
          "apprunner:ListVpcConnectors",
          "appstream:DescribeAppBlocks",
          "appstream:DescribeApplications",
          "appstream:DescribeFleets",
          "appstream:DescribeImageBuilders",
          "appstream:DescribeStacks",
          "appsync:ListGraphqlApis",
          "aps:ListRuleGroupsNamespaces",
          "aps:ListWorkspaces",
          "athena:ListDataCatalogs",
          "athena:ListWorkGroups",
          "autoscaling:DescribeAutoScalingGroups",
          "backup:ListBackupPlans",
          "backup:ListReportPlans",
          "batch:DescribeComputeEnvironments",
          "batch:DescribeJobQueues",
          "batch:ListSchedulingPolicies",
          "cloudformation:ListStacks",
          "cloudformation:ListStackSets",
          "cloudfront:ListCachePolicies",
          "cloudfront:ListCloudFrontOriginAccessIdentities",
          "cloudfront:ListDistributions",
          "cloudfront:ListFieldLevelEncryptionConfigs",
          "cloudfront:ListFieldLevelEncryptionProfiles",
          "cloudfront:ListFunctions",
          "cloudfront:ListOriginAccessControls",
          "cloudfront:ListOriginRequestPolicies",
          "cloudfront:ListRealtimeLogConfigs",
          "cloudfront:ListResponseHeadersPolicies",
          "cloudtrail:ListTrails",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:DescribeInsightRules",
          "cloudwatch:ListDashboards",
          "cloudwatch:ListMetricStreams",
          "codeartifact:ListDomains",
          "codeartifact:ListRepositories",
          "codebuild:ListProjects",
          "codecommit:ListRepositories",
          "codeguru-profiler:ListProfilingGroups",
          "codepipeline:ListPipelines",
          "codestar-connections:ListConnections",
          "cognito-identity:ListIdentityPools",
          "cognito-idp:ListUserPools",
          "databrew:ListDatasets",
          "databrew:ListRecipes",
          "databrew:ListRulesets",
          "detective:ListGraphs",
          "ds:DescribeDirectories",
          "dynamodb:ListStreams",
          "dynamodb:ListTables",
          "ec2:DescribeAddresses",
          "ec2:DescribeCapacityReservationFleets",
          "ec2:DescribeCapacityReservations",
          "ec2:DescribeCarrierGateways",
          "ec2:DescribeClientVpnEndpoints",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeEgressOnlyInternetGateways",
          "ec2:DescribeElasticGpus",
          "ec2:DescribeExportImageTasks",
          "ec2:DescribeExportTasks",
          "ec2:DescribeFleets",
          "ec2:DescribeFlowLogs",
          "ec2:DescribeFpgaImages",
          "ec2:DescribeHostReservations",
          "ec2:DescribeHosts",
          "ec2:DescribeImages",
          "ec2:DescribeImportImageTasks",
          "ec2:DescribeImportSnapshotTasks",
          "ec2:DescribeInstanceEventWindows",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeIpamPools",
          "ec2:DescribeIpams",
          "ec2:DescribeIpamScopes",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeManagedPrefixLists",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
          "ec2:DescribeNetworkInsightsAccessScopes",
          "ec2:DescribeNetworkInsightsAnalyses",
          "ec2:DescribeNetworkInsightsPaths",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePlacementGroups",
          "ec2:DescribePublicIpv4Pools",
          "ec2:DescribeReservedInstances",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroupRules",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSpotFleetRequests",
          "ec2:DescribeSpotInstanceRequests",
          "ec2:DescribeSubnets",
          "ec2:DescribeTrafficMirrorFilters",
          "ec2:DescribeTrafficMirrorSessions",
          "ec2:DescribeTrafficMirrorTargets",
          "ec2:DescribeTransitGatewayAttachments",
          "ec2:DescribeTransitGatewayConnectPeers",
          "ec2:DescribeTransitGatewayMulticastDomains",
          "ec2:DescribeTransitGatewayPolicyTables",
          "ec2:DescribeTransitGatewayRouteTableAnnouncements",
          "ec2:DescribeTransitGatewayRouteTables",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeVerifiedAccessEndpoints",
          "ec2:DescribeVerifiedAccessGroups",
          "ec2:DescribeVerifiedAccessInstances",
          "ec2:DescribeVerifiedAccessTrustProviders",
          "ec2:DescribeVolumes",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcEndpointServices",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:GetSubnetCidrReservations",
          "ecr:DescribeRepositories",
          "ecr-public:DescribeRepositories",
          "ecs:DescribeCapacityProviders",
          "ecs:DescribeServices",
          "ecs:ListClusters",
          "ecs:ListContainerInstances",
          "ecs:ListServices",
          "ecs:ListTaskDefinitions",
          "ecs:ListTasks",
          "elasticache:DescribeCacheClusters",
          "elasticache:DescribeCacheParameterGroups",
          "elasticache:DescribeCacheSecurityGroups",
          "elasticache:DescribeCacheSubnetGroups",
          "elasticache:DescribeGlobalReplicationGroups",
          "elasticache:DescribeReplicationGroups",
          "elasticache:DescribeReservedCacheNodes",
          "elasticache:DescribeSnapshots",
          "elasticache:DescribeUserGroups",
          "elasticache:DescribeUsers",
          "elasticbeanstalk:DescribeApplications",
          "elasticbeanstalk:DescribeApplicationVersions",
          "elasticbeanstalk:DescribeEnvironments",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeFileSystems",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTargetGroups",
          "emr-serverless:ListApplications",
          "es:ListDomainNames",
          "events:ListEventBuses",
          "events:ListRules",
          "evidently:ListExperiments",
          "evidently:ListFeatures",
          "evidently:ListLaunches",
          "evidently:ListProjects",
          "finspace:ListEnvironments",
          "firehose:ListDeliveryStreams",
          "fis:ListExperimentTemplates",
          "forecast:ListDatasetGroups",
          "forecast:ListDatasets",
          "frauddetector:GetDetectors",
          "frauddetector:GetEntityTypes",
          "frauddetector:GetEventTypes",
          "frauddetector:GetLabels",
          "frauddetector:GetOutcomes",
          "frauddetector:GetVariables",
          "gamelift:ListAliases",
          "geo:ListPlaceIndexes",
          "geo:ListTrackers",
          "greengrass:ListComponents",
          "globalaccelerator:ListAccelerators",
          "globalaccelerator:ListEndpointGroups",
          "globalaccelerator:ListListeners",
          "glue:GetDatabases",
          "glue:GetJobs",
          "glue:GetTables",
          "glue:GetTriggers",
          "greengrass:ListComponentVersions",
          "greengrass:ListGroups",
          "healthlake:ListFHIRDatastores",
          "iam:ListGroups",
          "iam:ListInstanceProfiles",
          "iam:ListOpenIDConnectProviders",
          "iam:ListPolicies",
          "iam:ListRoles",
          "iam:ListSAMLProviders",
          "iam:ListServerCertificates",
          "iam:ListUsers",
          "iam:ListVirtualMFADevices",
          "imagebuilder:ListComponentBuildVersions",
          "imagebuilder:ListComponents",
          "imagebuilder:ListContainerRecipes",
          "imagebuilder:ListDistributionConfigurations",
          "imagebuilder:ListImageBuildVersions",
          "imagebuilder:ListImagePipelines",
          "imagebuilder:ListImageRecipes",
          "imagebuilder:ListImages",
          "imagebuilder:ListInfrastructureConfigurations",
          "iotanalytics:ListChannels",
          "iotanalytics:ListDatasets",
          "iotanalytics:ListDatastores",
          "iotanalytics:ListPipelines",
          "iotevents:ListAlarmModels",
          "iotevents:ListDetectorModels",
          "iotevents:ListInputs",
          "iot:ListJobTemplates",
          "iot:ListAuthorizers",
          "iot:ListMitigationActions",
          "iot:ListPolicies",
          "iot:ListProvisioningTemplates",
          "iot:ListRoleAliases",
          "iot:ListSecurityProfiles",
          "iot:ListThings",
          "iot:ListTopicRuleDestinations",
          "iot:ListTopicRules",
          "iotsitewise:ListAssetModels",
          "iotsitewise:ListAssets",
          "iotsitewise:ListGateways",
          "iottwinmaker:ListComponentTypes",
          "iottwinmaker:ListEntities",
          "iottwinmaker:ListScenes",
          "iottwinmaker:ListWorkspaces",
          "kafka:ListConfigurations",
          "kms:ListKeys",
          "ivs:ListChannels",
          "ivs:ListStreamKeys",
          "kafka:ListClusters",
          "kinesis:ListStreamConsumers",
          "kinesis:ListStreams",
          "kinesisanalytics:ListApplications",
          "kinesisvideo:ListStreams",
          "lambda:ListAliases",
          "lambda:ListCodeSigningConfigs",
          "lambda:ListEventSourceMappings",
          "lambda:ListFunctions",
          "lambda:ListLayers",
          "lambda:ListLayerVersions",
          "lex:ListBots",
          "lex:ListBotAliases",
          "logs:DescribeDestinations",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "lookoutmetrics:ListAlerts",
          "lookoutvision:ListProjects",
          "mediapackage:ListChannels",
          "mediapackage:ListOriginEndpoints",
          "mediapackage-vod:ListPackagingConfigurations",
          "mediapackage-vod:ListPackagingGroups",
          "mq:ListBrokers",
          "mediatailor:ListPlaybackConfigurations",
          "memorydb:DescribeACLs",
          "memorydb:DescribeClusters",
          "memorydb:DescribeParameterGroups",
          "memorydb:DescribeUsers",
          "mobiletargeting:GetApps",
          "mobiletargeting:GetSegments",
          "mobiletargeting:ListTemplates",
          "network-firewall:ListFirewallPolicies",
          "network-firewall:ListFirewalls",
          "networkmanager:DescribeGlobalNetworks",
          "networkmanager:GetDevices",
          "networkmanager:GetLinks",
          "networkmanager:ListAttachments",
          "networkmanager:ListCoreNetworks",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListDelegatedAdministrators",
          "panorama:ListPackages",
          "personalize:ListDatasetGroups",
          "personalize:ListDatasets",
          "personalize:ListSchemas",
          "qldb:ListJournalKinesisStreamsForLedger",
          "qldb:ListLedgers",
          "rds:DescribeBlueGreenDeployments",
          "rds:DescribeDBClusterEndpoints",
          "rds:DescribeDBClusterParameterGroups",
          "rds:DescribeDBClusters",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstanceAutomatedBackups",
          "rds:DescribeDBInstances",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBProxies",
          "rds:DescribeDBProxyEndpoints",
          "rds:DescribeDBSecurityGroups",
          "rds:DescribeDBSnapshots",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeGlobalClusters",
          "rds:DescribeOptionGroups",
          "rds:DescribeReservedDBInstances",
          "redshift:DescribeClusterParameterGroups",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSnapshots",
          "redshift:DescribeClusterSubnetGroups",
          "redshift:DescribeEventSubscriptions",
          "redshift:DescribeSnapshotCopyGrants",
          "redshift:DescribeSnapshotSchedules",
          "redshift:DescribeUsageLimits",
          "refactor-spaces:ListApplications",
          "refactor-spaces:ListEnvironments",
          "refactor-spaces:ListRoutes",
          "refactor-spaces:ListServices",
          "rekognition:DescribeProjects",
          "resiliencehub:ListApps",
          "resiliencehub:ListResiliencyPolicies",
          "resource-explorer-2:GetIndex",
          "resource-explorer-2:ListIndexes",
          "resource-explorer-2:ListViews",
          "resource-groups:ListGroups",
          "route53:ListHealthChecks",
          "route53:ListHostedZones",
          "route53-recovery-readiness:ListRecoveryGroups",
          "route53-recovery-readiness:ListResourceSets",
          "route53resolver:ListFirewallDomainLists",
          "route53resolver:ListFirewallRuleGroups",
          "route53resolver:ListResolverEndpoints",
          "route53resolver:ListResolverRules",
          "s3:GetBucketLocation",
          "s3:ListAccessPoints",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListStorageLensConfigurations",
          "sagemaker:ListModels",
          "sagemaker:ListNotebookInstances",
          "secretsmanager:ListSecrets",
          "servicecatalog:ListApplications",
          "servicecatalog:ListAttributeGroups",
          "signer:ListSigningProfiles",
          "sns:ListTopics",
          "sqs:ListQueues",
          "ssm:DescribeAutomationExecutions",
          "ssm:DescribeInstanceInformation",
          "ssm:DescribeMaintenanceWindows",
          "ssm:DescribeMaintenanceWindowTargets",
          "ssm:DescribeMaintenanceWindowTasks",
          "ssm:DescribeParameters",
          "ssm:DescribePatchBaselines",
          "ssm-incidents:ListResponsePlans",
          "ssm:ListAssociations",
          "ssm:ListDocuments",
          "ssm:ListInventoryEntries",
          "ssm:ListResourceDataSync",
          "states:ListActivities",
          "states:ListStateMachines",
          "timestream:ListDatabases",
          "wisdom:listAssistantAssociations",
          "wisdom:ListAssistants",
          "wisdom:listKnowledgeBases"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSFaultInjectionSimulatorSSMAccess": {
    "policy": {
      "PolicyName": "AWSFaultInjectionSimulatorSSMAccess",
      "PolicyId": "ANPAZKAPJZG4LYOCAYKDJ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSFaultInjectionSimulatorSSMAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants the Fault Injection Simulator Service permission in SSM and other required services to perform FIS actions.",
      "CreateDate": "2022-10-26T15:33:44.000Z",
      "UpdateDate": "2023-06-02T22:55:18.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-definition/*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetAutomationExecution",
          "ssm:StopAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-execution/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ssm:*:*:document/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:ListCommands",
          "ssm:CancelCommand"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSFaultInjectionSimulatorRDSAccess": {
    "policy": {
      "PolicyName": "AWSFaultInjectionSimulatorRDSAccess",
      "PolicyId": "ANPAZKAPJZG4JOZDKT6GH",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSFaultInjectionSimulatorRDSAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants the Fault Injection Simulator Service permission in RDS and other required services to perform FIS actions.",
      "CreateDate": "2022-10-26T20:30:57.000Z",
      "UpdateDate": "2023-11-13T16:23:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowFailover",
        "Effect": "Allow",
        "Action": [
          "rds:FailoverDBCluster"
        ],
        "Resource": [
          "arn:aws:rds:*:*:cluster:*"
        ]
      },
      {
        "Sid": "AllowReboot",
        "Effect": "Allow",
        "Action": [
          "rds:RebootDBInstance"
        ],
        "Resource": [
          "arn:aws:rds:*:*:db:*"
        ]
      },
      {
        "Sid": "DescribeResources",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBClusters",
          "rds:DescribeDBInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TargetResolutionByTags",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSFaultInjectionSimulatorNetworkAccess": {
    "policy": {
      "PolicyName": "AWSFaultInjectionSimulatorNetworkAccess",
      "PolicyId": "ANPAZKAPJZG4AXEXMENON",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSFaultInjectionSimulatorNetworkAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants the Fault Injection Simulator Service permission in EC2 networking and other required services to perform FIS actions.",
      "CreateDate": "2022-10-26T20:32:50.000Z",
      "UpdateDate": "2024-01-25T16:07:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CreateTagsOnNetworkAcl",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-acl/*"
        ]
      },
      {
        "Sid": "CreateNetworkAcl",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkAcl"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-acl/*"
        ]
      },
      {
        "Sid": "DeleteNetworkAcl",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkAclEntry",
          "ec2:DeleteNetworkAcl"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-acl/*",
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "CreateNetworkAclOnVpc",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkAcl"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "VpcActions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs",
          "ec2:DescribeManagedPrefixLists",
          "ec2:DescribeSubnets",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeRouteTables",
          "ec2:DescribeTransitGatewayPeeringAttachments",
          "ec2:DescribeTransitGatewayAttachments",
          "ec2:DescribeTransitGateways"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ReplaceNetworkAclAssociation",
        "Effect": "Allow",
        "Action": [
          "ec2:ReplaceNetworkAclAssociation"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:network-acl/*"
        ]
      },
      {
        "Sid": "GetManagedPrefixListEntries",
        "Effect": "Allow",
        "Action": [
          "ec2:GetManagedPrefixListEntries"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:prefix-list/*"
        ]
      },
      {
        "Sid": "CreateRouteTable",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateRouteTable"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "CreateRouteTableOnVpc",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateRouteTable"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "CreateTagsOnRouteTable",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "CreateTagsOnNetworkInterface",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "CreateTagsOnPrefixList",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:prefix-list/*"
        ]
      },
      {
        "Sid": "DeleteRouteTable",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteRouteTable"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*",
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "CreateRoute",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateRoute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "CreateNetworkInterface",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "CreateNetworkInterfaceOnSubnet",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "DeleteNetworkInterface",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "CreateManagedPrefixList",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateManagedPrefixList"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:prefix-list/*"
        ]
      },
      {
        "Sid": "DeleteManagedPrefixList",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteManagedPrefixList"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:prefix-list/*"
        ]
      },
      {
        "Sid": "ModifyManagedPrefixList",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyManagedPrefixList"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:prefix-list/*"
        ]
      },
      {
        "Sid": "ReplaceRouteTableAssociation",
        "Effect": "Allow",
        "Action": [
          "ec2:ReplaceRouteTableAssociation"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "AssociateRouteTable",
        "Effect": "Allow",
        "Action": [
          "ec2:AssociateRouteTable"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "DisassociateRouteTable",
        "Effect": "Allow",
        "Action": [
          "ec2:DisassociateRouteTable"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "DisassociateRouteTableOnSubnet",
        "Effect": "Allow",
        "Action": [
          "ec2:DisassociateRouteTable"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Sid": "ModifyVpcEndpointOnRouteTable",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "ModifyVpcEndpoint",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "TransitGatewayRouteTableAssociation",
        "Effect": "Allow",
        "Action": [
          "ec2:DisassociateTransitGatewayRouteTable",
          "ec2:AssociateTransitGatewayRouteTable"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:transit-gateway-route-table/*",
          "arn:aws:ec2:*:*:transit-gateway-attachment/*"
        ]
      }
    ]
  },
  "AWSFaultInjectionSimulatorEKSAccess": {
    "policy": {
      "PolicyName": "AWSFaultInjectionSimulatorEKSAccess",
      "PolicyId": "ANPAZKAPJZG4AYLYQSX3T",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSFaultInjectionSimulatorEKSAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants the Fault Injection Simulator Service permission in EKS and other required services to perform FIS actions.",
      "CreateDate": "2022-10-26T20:34:43.000Z",
      "UpdateDate": "2023-11-13T16:44:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DescribeInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TerminateInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "DescribeSubnets",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSubnets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeCluster",
        "Effect": "Allow",
        "Action": [
          "eks:DescribeCluster"
        ],
        "Resource": [
          "arn:aws:eks:*:*:cluster/*"
        ]
      },
      {
        "Sid": "DescribeNodeGroup",
        "Effect": "Allow",
        "Action": [
          "eks:DescribeNodegroup"
        ],
        "Resource": [
          "arn:aws:eks:*:*:nodegroup/*"
        ]
      },
      {
        "Sid": "TargetResolutionByTags",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSFaultInjectionSimulatorECSAccess": {
    "policy": {
      "PolicyName": "AWSFaultInjectionSimulatorECSAccess",
      "PolicyId": "ANPAZKAPJZG4O4WAPQIW3",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSFaultInjectionSimulatorECSAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants the Fault Injection Simulator Service permission in ECS and other required services to perform FIS actions.",
      "CreateDate": "2022-10-26T20:37:56.000Z",
      "UpdateDate": "2024-01-25T16:16:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "Clusters",
        "Effect": "Allow",
        "Action": [
          "ecs:DescribeClusters",
          "ecs:ListContainerInstances"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:cluster/*"
        ]
      },
      {
        "Sid": "Tasks",
        "Effect": "Allow",
        "Action": [
          "ecs:DescribeTasks",
          "ecs:StopTask"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:task/*/*"
        ]
      },
      {
        "Sid": "ContainerInstances",
        "Effect": "Allow",
        "Action": [
          "ecs:UpdateContainerInstancesState"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:container-instance/*/*"
        ]
      },
      {
        "Sid": "ListTasks",
        "Effect": "Allow",
        "Action": [
          "ecs:ListTasks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SSMSend",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:managed-instance/*",
          "arn:aws:ssm:*:*:document/*"
        ]
      },
      {
        "Sid": "SSMList",
        "Effect": "Allow",
        "Action": [
          "ssm:ListCommands",
          "ssm:CancelCommand"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TargetResolutionByTags",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSFaultInjectionSimulatorEC2Access": {
    "policy": {
      "PolicyName": "AWSFaultInjectionSimulatorEC2Access",
      "PolicyId": "ANPAZKAPJZG4JRMRLWKEY",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSFaultInjectionSimulatorEC2Access",
      "Path": "/service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants the Fault Injection Simulator Service permission in EC2 and other required services to perform FIS actions.",
      "CreateDate": "2022-10-26T20:39:26.000Z",
      "UpdateDate": "2023-11-27T15:08:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowEc2Actions",
        "Effect": "Allow",
        "Action": [
          "ec2:RebootInstances",
          "ec2:SendSpotInstanceInterruptions",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "AllowEc2InstancesWithEncryptedEbsVolumes",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "AllowSSMSendOnEc2",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ssm:*:*:document/*"
        ]
      },
      {
        "Sid": "AllowSSMStopOnEc2",
        "Effect": "Allow",
        "Action": [
          "ssm:CancelCommand",
          "ssm:ListCommands"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSResourceExplorerReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSResourceExplorerReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4GTUSQOR6X",
      "Arn": "arn:aws:iam::aws:policy/AWSResourceExplorerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants read-only permissions to search for and view Resource Explorer resources and grants read-only permissions to other AWS services to support this access.",
      "CreateDate": "2022-11-07T19:56:00.000Z",
      "UpdateDate": "2023-11-14T16:43:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ResourceExplorerReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "resource-explorer-2:Get*",
          "resource-explorer-2:List*",
          "resource-explorer-2:Search",
          "resource-explorer-2:BatchGetView",
          "ec2:DescribeRegions",
          "ram:ListResources",
          "ram:GetResourceShares",
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSResourceExplorerFullAccess": {
    "policy": {
      "PolicyName": "AWSResourceExplorerFullAccess",
      "PolicyId": "ANPAZKAPJZG4MZIYCHOML",
      "Arn": "arn:aws:iam::aws:policy/AWSResourceExplorerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants administrative permissions to access Resource Explorer resources and grants read-only permissions to other AWS services to support this access.",
      "CreateDate": "2022-11-07T20:01:20.000Z",
      "UpdateDate": "2023-11-14T16:53:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ResourceExplorerConsoleFullAccess",
        "Effect": "Allow",
        "Action": [
          "resource-explorer-2:*",
          "ec2:DescribeRegions",
          "ram:ListResources",
          "ram:GetResourceShares",
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ResourceExplorerSLRAccess",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonWorkspacesPCAAccess": {
    "policy": {
      "PolicyName": "AmazonWorkspacesPCAAccess",
      "PolicyId": "ANPAZKAPJZG4EYKDVYFZC",
      "Arn": "arn:aws:iam::aws:policy/AmazonWorkspacesPCAAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This managed policy provides full administrative access to AWS Certificate Manager Private CA resources in your AWS account for certificate-based authentication.",
      "CreateDate": "2022-11-08T00:25:55.000Z",
      "UpdateDate": "2022-11-08T00:25:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:IssueCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:DescribeCertificateAuthority"
        ],
        "Resource": [
          "arn:*:acm-pca:*:*:*"
        ]
      }
    ]
  },
  "AmazonGrafanaServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AmazonGrafanaServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GVYHGYOD7",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonGrafanaServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS Resources managed or used by Amazon Grafana.",
      "CreateDate": "2022-11-08T23:10:33.000Z",
      "UpdateDate": "2022-11-08T23:10:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcs",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSProtonCodeBuildProvisioningBasicAccess": {
    "policy": {
      "PolicyName": "AWSProtonCodeBuildProvisioningBasicAccess",
      "PolicyId": "ANPAZKAPJZG4MZL5CKSIM",
      "Arn": "arn:aws:iam::aws:policy/AWSProtonCodeBuildProvisioningBasicAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions CodeBuild needs to run a build for AWS Proton CodeBuild Provisioning.",
      "CreateDate": "2022-11-09T21:04:16.000Z",
      "UpdateDate": "2022-11-09T21:04:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:CreateLogGroup",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/codebuild/AWSProton-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "proton:NotifyResourceDeploymentStatusChange"
        ],
        "Resource": [
          "arn:aws:proton:*:*:*"
        ]
      }
    ]
  },
  "AWSProtonCodeBuildProvisioningServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSProtonCodeBuildProvisioningServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4CY5VKNVD7",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSProtonCodeBuildProvisioningServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Proton to manage Proton resource provisioning using CodeBuild and other AWS services on your behalf.",
      "CreateDate": "2022-11-09T21:32:06.000Z",
      "UpdateDate": "2023-05-17T16:11:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:CreateChangeSet",
          "cloudformation:DeleteChangeSet",
          "cloudformation:DeleteStack",
          "cloudformation:UpdateStack",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeStackEvents",
          "cloudformation:ListStackResources"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/AWSProton-CodeBuild-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "codebuild:CreateProject",
          "codebuild:DeleteProject",
          "codebuild:UpdateProject",
          "codebuild:StartBuild",
          "codebuild:StopBuild",
          "codebuild:RetryBuild",
          "codebuild:BatchGetBuilds",
          "codebuild:BatchGetProjects"
        ],
        "Resource": [
          "arn:aws:codebuild:*:*:project/AWSProton*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicequotas:GetServiceQuota"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEventBridgeSchedulerFullAccess": {
    "policy": {
      "PolicyName": "AmazonEventBridgeSchedulerFullAccess",
      "PolicyId": "ANPAZKAPJZG4KJ7UDPZGC",
      "Arn": "arn:aws:iam::aws:policy/AmazonEventBridgeSchedulerFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The AmazonEventBridgeSchedulerFullAccess managed policy grants permissions to use all EventBridge Scheduler actions for schedules, and schedule groups.",
      "CreateDate": "2022-11-10T18:37:25.000Z",
      "UpdateDate": "2022-11-10T18:37:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "scheduler:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AmazonEventBridgeSchedulerReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonEventBridgeSchedulerReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4KNL3CVTKG",
      "Arn": "arn:aws:iam::aws:policy/AmazonEventBridgeSchedulerReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The AmazonEventBridgeSchedulerReadOnlyAccess managed policy grants read-only permissions to view details about your schedules and schedule groups",
      "CreateDate": "2022-11-10T18:50:12.000Z",
      "UpdateDate": "2022-11-10T18:50:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "scheduler:ListSchedules",
          "scheduler:ListScheduleGroups",
          "scheduler:GetSchedule",
          "scheduler:GetScheduleGroup",
          "scheduler:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBackupRestoreAccessForSAPHANA": {
    "policy": {
      "PolicyName": "AWSBackupRestoreAccessForSAPHANA",
      "PolicyId": "ANPAZKAPJZG4KKKORFFTK",
      "Arn": "arn:aws:iam::aws:policy/AWSBackupRestoreAccessForSAPHANA",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Backup permission to restore a backup of SAP HANA on Amazon EC2",
      "CreateDate": "2022-11-10T22:43:27.000Z",
      "UpdateDate": "2022-11-10T22:43:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "backup:Get*",
          "backup:List*",
          "backup:Describe*",
          "backup:StartBackupJob",
          "backup:StartRestoreJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm-sap:GetOperation",
          "ssm-sap:ListDatabases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm-sap:BackupDatabase",
          "ssm-sap:RestoreDatabase",
          "ssm-sap:UpdateHanaBackupSettings",
          "ssm-sap:GetDatabase",
          "ssm-sap:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:ssm-sap:*:*:*"
        ]
      }
    ]
  },
  "AWSBackupDataTransferAccess": {
    "policy": {
      "PolicyName": "AWSBackupDataTransferAccess",
      "PolicyId": "ANPAZKAPJZG4GH4RA7VPS",
      "Arn": "arn:aws:iam::aws:policy/AWSBackupDataTransferAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows the AWS Backint agent to complete backup data transfer with AWS Backup Storage plane. Attach this policy to roles assumed by EC2 Instances running SAP HANA with the Backint agent.",
      "CreateDate": "2022-11-10T22:48:05.000Z",
      "UpdateDate": "2022-11-10T22:48:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "backup-storage:StartObject",
          "backup-storage:PutChunk",
          "backup-storage:GetChunk",
          "backup-storage:ListChunks",
          "backup-storage:ListObjects",
          "backup-storage:GetObjectMetadata",
          "backup-storage:NotifyObjectComplete"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceCatalogSyncServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSServiceCatalogSyncServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4KOWJHWS5L",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceCatalogSyncServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "A Service Linked Role for AWS ServiceCatalog to sync Provisioning Artifacts from source repositories",
      "CreateDate": "2022-11-15T21:20:15.000Z",
      "UpdateDate": "2022-11-15T21:20:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ArtifactSyncToServiceCatalog",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:ListProvisioningArtifacts",
          "servicecatalog:DescribeProductAsAdmin",
          "servicecatalog:DeleteProvisioningArtifact",
          "servicecatalog:ListServiceActionsForProvisioningArtifact",
          "servicecatalog:DescribeProvisioningArtifact",
          "servicecatalog:CreateProvisioningArtifact",
          "servicecatalog:UpdateProvisioningArtifact"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AccessArtifactRepositories",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:UseConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      },
      {
        "Sid": "ValidateTemplate",
        "Effect": "Allow",
        "Action": [
          "cloudformation:ValidateTemplate"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSSMForSAPServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AWSSSMForSAPServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4AONIU2LID",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSSSMForSAPServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v7",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Systems Manager for SAP with the permissions needed to manage and integrate SAP software with AWS.",
      "CreateDate": "2022-11-16T01:18:21.000Z",
      "UpdateDate": "2024-04-11T18:31:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DescribeInstanceActions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ssm:GetCommandInvocation",
          "ssm:DescribeInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeInstanceStatus",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstanceStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TargetRuleActions",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:PutTargets",
          "events:DescribeRule",
          "events:PutRule",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:*:events:*:*:rule/SSMSAPManagedRule*",
          "arn:*:events:*:*:event-bus/default"
        ]
      },
      {
        "Sid": "DocumentActions",
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeDocument",
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:*:ssm:*:*:document/AWSSystemsManagerSAP-*",
          "arn:*:ssm:*:*:document/AWSSSMSAP*",
          "arn:*:ssm:*:*:document/AWSSAP*"
        ]
      },
      {
        "Sid": "CustomerSendCommand",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:*:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "InstanceTagActions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:*:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "DescribeTag",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetApplication",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:GetApplication"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:*"
        ]
      },
      {
        "Sid": "UpdateOrDeleteApplication",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:DeleteApplication",
          "servicecatalog:UpdateApplication"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:*"
        ]
      },
      {
        "Sid": "CreateApplication",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:TagResource",
          "servicecatalog:CreateApplication"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:*"
        ]
      },
      {
        "Sid": "CreateServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:*:iam::*:role/aws-service-role/servicecatalog-appregistry.amazonaws.com/AWSServiceRoleForAWSServiceCatalogAppRegistry"
        ]
      },
      {
        "Sid": "PutMetricData",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateAttributeGroup",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:CreateAttributeGroup"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:/attribute-groups/*"
        ]
      },
      {
        "Sid": "GetAttributeGroup",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:GetAttributeGroup"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:/attribute-groups/*"
        ]
      },
      {
        "Sid": "DeleteAttributeGroup",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:DeleteAttributeGroup"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:/attribute-groups/*"
        ]
      },
      {
        "Sid": "AttributeGroupActions",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:AssociateAttributeGroup",
          "servicecatalog:DisassociateAttributeGroup"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:*"
        ]
      },
      {
        "Sid": "ListAssociatedAttributeGroups",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:ListAssociatedAttributeGroups"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:*"
        ]
      },
      {
        "Sid": "CreateGroup",
        "Effect": "Allow",
        "Action": [
          "resource-groups:CreateGroup",
          "resource-groups:Tag"
        ],
        "Resource": [
          "arn:*:resource-groups:*:*:group/SystemsManagerForSAP-*"
        ]
      },
      {
        "Sid": "GetGroup",
        "Effect": "Allow",
        "Action": [
          "resource-groups:GetGroup"
        ],
        "Resource": [
          "arn:*:resource-groups:*:*:group/SystemsManagerForSAP-*"
        ]
      },
      {
        "Sid": "DeleteGroup",
        "Effect": "Allow",
        "Action": [
          "resource-groups:DeleteGroup"
        ],
        "Resource": [
          "arn:*:resource-groups:*:*:group/SystemsManagerForSAP-*"
        ]
      },
      {
        "Sid": "CreateAppTagResourceGroup",
        "Effect": "Allow",
        "Action": [
          "resource-groups:CreateGroup"
        ],
        "Resource": [
          "arn:*:resource-groups:*:*:group/AWS_AppRegistry_AppTag_*"
        ]
      },
      {
        "Sid": "TagAppTagResourceGroup",
        "Effect": "Allow",
        "Action": [
          "resource-groups:Tag"
        ],
        "Resource": [
          "arn:*:resource-groups:*:*:group/AWS_AppRegistry_AppTag_*"
        ]
      },
      {
        "Sid": "GetAppTagResourceGroupConfig",
        "Effect": "Allow",
        "Action": [
          "resource-groups:GetGroupConfiguration"
        ],
        "Resource": [
          "arn:*:resource-groups:*:*:group/AWS_AppRegistry_AppTag_*"
        ]
      },
      {
        "Sid": "StartStopInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:StartInstances",
          "ec2:StopInstances"
        ],
        "Resource": [
          "arn:*:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AWSSystemsManagerForSAPFullAccess": {
    "policy": {
      "PolicyName": "AWSSystemsManagerForSAPFullAccess",
      "PolicyId": "ANPAZKAPJZG4HXSMPOKVI",
      "Arn": "arn:aws:iam::aws:policy/AWSSystemsManagerForSAPFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Systems Manager for SAP service",
      "CreateDate": "2022-11-17T02:11:09.000Z",
      "UpdateDate": "2022-11-18T21:58:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm-sap:*"
        ],
        "Resource": [
          "arn:*:ssm-sap:*:*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/ssm-sap.amazonaws.com/AWSServiceRoleForAWSSSMForSAP"
        ]
      }
    ]
  },
  "AWSSystemsManagerForSAPReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSSystemsManagerForSAPReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4BMR6RA62T",
      "Arn": "arn:aws:iam::aws:policy/AWSSystemsManagerForSAPReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Systems Manager for SAP service",
      "CreateDate": "2022-11-17T02:11:44.000Z",
      "UpdateDate": "2022-11-17T02:11:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm-sap:get*",
          "ssm-sap:list*"
        ],
        "Resource": [
          "arn:*:ssm-sap:*:*:*"
        ]
      }
    ]
  },
  "AWSReachabilityAnalyzerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSReachabilityAnalyzerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4CQCKOPHMV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSReachabilityAnalyzerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows VPC Reachability Analyzer to access AWS resources and integrate with AWS Organizations on your behalf.",
      "CreateDate": "2022-11-23T17:12:28.000Z",
      "UpdateDate": "2023-06-23T21:04:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources",
          "directconnect:DescribeConnections",
          "directconnect:DescribeDirectConnectGatewayAssociations",
          "directconnect:DescribeDirectConnectGatewayAttachments",
          "directconnect:DescribeDirectConnectGateways",
          "directconnect:DescribeVirtualGateways",
          "directconnect:DescribeVirtualInterfaces",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeManagedPrefixLists",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRegions",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeTransitGatewayAttachments",
          "ec2:DescribeTransitGatewayConnects",
          "ec2:DescribeTransitGatewayPeeringAttachments",
          "ec2:DescribeTransitGatewayRouteTables",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:GetManagedPrefixListEntries",
          "ec2:GetTransitGatewayRouteTablePropagations",
          "ec2:SearchTransitGatewayRoutes",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "globalaccelerator:ListAccelerators",
          "globalaccelerator:ListCustomRoutingAccelerators",
          "globalaccelerator:ListCustomRoutingEndpointGroups",
          "globalaccelerator:ListCustomRoutingListeners",
          "globalaccelerator:ListCustomRoutingPortMappings",
          "globalaccelerator:ListEndpointGroups",
          "globalaccelerator:ListListeners",
          "network-firewall:DescribeFirewall",
          "network-firewall:DescribeFirewallPolicy",
          "network-firewall:DescribeResourcePolicy",
          "network-firewall:DescribeRuleGroup",
          "network-firewall:ListFirewallPolicies",
          "network-firewall:ListFirewalls",
          "network-firewall:ListRuleGroups",
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListAccounts",
          "organizations:ListDelegatedAdministrators",
          "resource-groups:ListGroups",
          "resource-groups:ListGroupResources",
          "tag:GetResources",
          "tiros:CreateQuery",
          "tiros:ExtendQuery",
          "tiros:GetQueryAnswer",
          "tiros:GetQueryExplanation",
          "tiros:GetQueryExtensionAccounts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/restapis/*/stages",
          "arn:aws:apigateway:*::/restapis/*/stages/*",
          "arn:aws:apigateway:*::/vpclinks"
        ]
      }
    ]
  },
  "AmazonOpenSearchIngestionServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonOpenSearchIngestionServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LJIG2P2JF",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonOpenSearchIngestionServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon OpenSearch Ingestion Service to access other AWS services on your behalf.",
      "CreateDate": "2022-11-18T16:49:50.000Z",
      "UpdateDate": "2022-11-18T16:49:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonOpenSearchServerlessServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonOpenSearchServerlessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4KVCDI6A6Y",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonOpenSearchServerlessServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow Amazon OpenSearch Serverless to access other AWS services such as CloudWatch APIs on your behalf.",
      "CreateDate": "2022-11-24T19:50:12.000Z",
      "UpdateDate": "2022-11-24T19:50:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationSSMAccess": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationSSMAccess",
      "PolicyId": "ANPAZKAPJZG4EEPTUBLGD",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationMigrationSSMAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides access to Amazon SSM operations required to use Application Migration Service (MGN) to execute custom post migration command SSM documents. Attach this policy to your IAM users or roles.",
      "CreateDate": "2022-11-27T09:29:05.000Z",
      "UpdateDate": "2023-03-20T10:57:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetCommandInvocation",
          "ssm:DescribeInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand",
          "ssm:DescribeDocument",
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*",
          "arn:aws:ssm:*:*:automation-definition/*:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:ListDocuments"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:ListDocumentVersions",
          "ssm:GetDocument"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      }
    ]
  },
  "OAMReadOnlyAccess": {
    "policy": {
      "PolicyName": "OAMReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4BVQLK27KA",
      "Arn": "arn:aws:iam::aws:policy/OAMReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides Read Only access to CloudWatch Observability Access Manager",
      "CreateDate": "2022-11-27T13:29:39.000Z",
      "UpdateDate": "2022-11-27T13:29:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "oam:Get*",
          "oam:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "OAMFullAccess": {
    "policy": {
      "PolicyName": "OAMFullAccess",
      "PolicyId": "ANPAZKAPJZG4GXI4BXRUV",
      "Arn": "arn:aws:iam::aws:policy/OAMFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to CloudWatch Observability Access Manager",
      "CreateDate": "2022-11-27T13:38:29.000Z",
      "UpdateDate": "2022-11-27T13:38:29.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "oam:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSXrayCrossAccountSharingConfiguration": {
    "policy": {
      "PolicyName": "AWSXrayCrossAccountSharingConfiguration",
      "PolicyId": "ANPAZKAPJZG4HNLJFUIQJ",
      "Arn": "arn:aws:iam::aws:policy/AWSXrayCrossAccountSharingConfiguration",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides capabilities to manage Observability Access Manager links and establish sharing of X-Ray traces",
      "CreateDate": "2022-11-27T13:46:35.000Z",
      "UpdateDate": "2022-11-27T13:46:35.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "xray:Link",
          "oam:ListLinks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "oam:DeleteLink",
          "oam:GetLink",
          "oam:TagResource"
        ],
        "Resource": [
          "arn:aws:oam:*:*:link/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "oam:CreateLink",
          "oam:UpdateLink"
        ],
        "Resource": [
          "arn:aws:oam:*:*:link/*",
          "arn:aws:oam:*:*:sink/*"
        ]
      }
    ]
  },
  "CloudWatchLogsCrossAccountSharingConfiguration": {
    "policy": {
      "PolicyName": "CloudWatchLogsCrossAccountSharingConfiguration",
      "PolicyId": "ANPAZKAPJZG4NQWESC5DO",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchLogsCrossAccountSharingConfiguration",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides capabilities to manage Observability Access Manager links and establish sharing of CloudWatch Logs resources",
      "CreateDate": "2022-11-27T13:55:22.000Z",
      "UpdateDate": "2022-11-27T13:55:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "logs:Link",
          "oam:ListLinks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "oam:DeleteLink",
          "oam:GetLink",
          "oam:TagResource"
        ],
        "Resource": [
          "arn:aws:oam:*:*:link/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "oam:CreateLink",
          "oam:UpdateLink"
        ],
        "Resource": [
          "arn:aws:oam:*:*:link/*",
          "arn:aws:oam:*:*:sink/*"
        ]
      }
    ]
  },
  "CloudWatchCrossAccountSharingConfiguration": {
    "policy": {
      "PolicyName": "CloudWatchCrossAccountSharingConfiguration",
      "PolicyId": "ANPAZKAPJZG4PJS4RPZHS",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchCrossAccountSharingConfiguration",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides capabilities to manage Observability Access Manager links and establish sharing of CloudWatch resources",
      "CreateDate": "2022-11-27T14:01:10.000Z",
      "UpdateDate": "2022-11-27T14:01:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:Link",
          "oam:ListLinks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "oam:DeleteLink",
          "oam:GetLink",
          "oam:TagResource"
        ],
        "Resource": [
          "arn:aws:oam:*:*:link/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "oam:CreateLink",
          "oam:UpdateLink"
        ],
        "Resource": [
          "arn:aws:oam:*:*:link/*",
          "arn:aws:oam:*:*:sink/*"
        ]
      }
    ]
  },
  "CloudWatchInternetMonitorServiceRolePolicy": {
    "policy": {
      "PolicyName": "CloudWatchInternetMonitorServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JXY6SBQJJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudWatchInternetMonitorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Internet Monitor to access EC2, Workspaces, and CloudFront resources, and other required services on your behalf.",
      "CreateDate": "2022-11-27T17:46:24.000Z",
      "UpdateDate": "2023-07-20T04:46:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudfront:GetDistribution",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcs",
          "elasticloadbalancing:DescribeLoadBalancers",
          "workspaces:DescribeWorkspaceDirectories"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/internet-monitor/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/internet-monitor/*:log-stream:*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSWickrFullAccess": {
    "policy": {
      "PolicyName": "AWSWickrFullAccess",
      "PolicyId": "ANPAZKAPJZG4OGH3Y32NK",
      "Arn": "arn:aws:iam::aws:policy/AWSWickrFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants full administrative permissions to the Wickr service, including the Wickr administrative functions under the AWS Management Console.",
      "CreateDate": "2022-11-27T20:36:44.000Z",
      "UpdateDate": "2022-11-27T20:36:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "wickr:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSVPCVerifiedAccessServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSVPCVerifiedAccessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FVJMSTHCL",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSVPCVerifiedAccessServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable AWS Verified Access service to provision endpoints on your behalf",
      "CreateDate": "2022-11-29T03:35:11.000Z",
      "UpdateDate": "2023-11-17T21:03:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "VerifiedAccessRoleModifyTaggedNetworkInterfaceActions",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "VerifiedAccessRoleModifyNetworkInterfaceActions",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "VerifiedAccessRoleNetworkInterfaceActions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "VerifiedAccessRoleTaggedNetworkInterfaceActions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "VerifiedAccessRoleTaggingActions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      }
    ]
  },
  "AmazonOmicsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonOmicsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4CAFDPZP7H",
      "Arn": "arn:aws:iam::aws:policy/AmazonOmicsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide read only access to Amazon Omics",
      "CreateDate": "2022-11-29T04:17:07.000Z",
      "UpdateDate": "2022-11-29T04:17:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "omics:Get*",
          "omics:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "SecurityLakeServiceLinkedRole": {
    "policy": {
      "PolicyName": "SecurityLakeServiceLinkedRole",
      "PolicyId": "ANPAZKAPJZG4CY4TAEDJQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/SecurityLakeServiceLinkedRole",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions to operate the Amazon Security Lake service on your behalf",
      "CreateDate": "2022-11-29T14:03:33.000Z",
      "UpdateDate": "2024-02-29T19:14:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "OrganizationsPolicies",
        "Effect": "Allow",
        "Action": [
          "organizations:ListAccounts",
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeOrgAccounts",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount"
        ],
        "Resource": [
          "arn:aws:organizations::*:account/o-*/*"
        ]
      },
      {
        "Sid": "AllowManagementOfServiceLinkedChannel",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:CreateServiceLinkedChannel",
          "cloudtrail:DeleteServiceLinkedChannel",
          "cloudtrail:GetServiceLinkedChannel",
          "cloudtrail:UpdateServiceLinkedChannel"
        ],
        "Resource": [
          "arn:aws:cloudtrail:*:*:channel/aws-service-channel/security-lake/*"
        ]
      },
      {
        "Sid": "AllowListServiceLinkedChannel",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:ListServiceLinkedChannels"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeAnyVpc",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListDelegatedAdmins",
        "Effect": "Allow",
        "Action": [
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowWafLoggingConfiguration",
        "Effect": "Allow",
        "Action": [
          "wafv2:PutLoggingConfiguration",
          "wafv2:GetLoggingConfiguration",
          "wafv2:ListLoggingConfigurations",
          "wafv2:DeleteLoggingConfiguration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowPutLoggingConfiguration",
        "Effect": "Allow",
        "Action": [
          "wafv2:PutLoggingConfiguration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListWebACLs",
        "Effect": "Allow",
        "Action": [
          "wafv2:ListWebACLs"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSecurityLakePermissionsBoundary": {
    "policy": {
      "PolicyName": "AmazonSecurityLakePermissionsBoundary",
      "PolicyId": "ANPAZKAPJZG4B7P5TB4TG",
      "Arn": "arn:aws:iam::aws:policy/AmazonSecurityLakePermissionsBoundary",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Amazon Security Lake creates IAM roles for third-party custom sources to write data to a data lake and for third-party subscribers to consume data from a data lake, and uses this policy when creating these roles to define the boundary of their permissions.",
      "CreateDate": "2022-11-29T14:11:12.000Z",
      "UpdateDate": "2022-11-29T14:11:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:ListBucket",
          "s3:ListBucketVersions",
          "s3:PutObject",
          "s3:GetBucketLocation",
          "kms:Decrypt",
          "kms:GenerateDataKey",
          "sqs:ReceiveMessage",
          "sqs:ChangeMessageVisibility",
          "sqs:DeleteMessage",
          "sqs:GetQueueUrl",
          "sqs:SendMessage",
          "sqs:GetQueueAttributes",
          "sqs:ListQueues"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "NotAction": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:ListBucket",
          "s3:ListBucketVersions",
          "s3:PutObject",
          "s3:GetBucketLocation",
          "kms:Decrypt",
          "kms:GenerateDataKey",
          "sqs:ReceiveMessage",
          "sqs:ChangeMessageVisibility",
          "sqs:DeleteMessage",
          "sqs:GetQueueUrl",
          "sqs:SendMessage",
          "sqs:GetQueueAttributes",
          "sqs:ListQueues"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:ListBucket",
          "s3:ListBucketVersions",
          "s3:PutObject",
          "s3:GetBucketLocation"
        ],
        "NotResource": [
          "arn:aws:s3:::aws-security-data-lake*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "sqs:ReceiveMessage",
          "sqs:ChangeMessageVisibility",
          "sqs:DeleteMessage",
          "sqs:GetQueueUrl",
          "sqs:SendMessage",
          "sqs:GetQueueAttributes",
          "sqs:ListQueues"
        ],
        "NotResource": [
          "arn:aws:sqs:*:*:AmazonSecurityLake*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerModelGovernanceUseAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerModelGovernanceUseAccess",
      "PolicyId": "ANPAZKAPJZG4JWBD7BEKI",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerModelGovernanceUseAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This AWS managed policy grants permissions needed to use all Amazon SageMaker Governance features. The policy also provides select access to related services (e.g., S3, KMS).",
      "CreateDate": "2022-11-30T08:58:19.000Z",
      "UpdateDate": "2023-07-17T22:31:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:ListMonitoringAlerts",
          "sagemaker:ListMonitoringExecutions",
          "sagemaker:UpdateMonitoringAlert",
          "sagemaker:StartMonitoringSchedule",
          "sagemaker:StopMonitoringSchedule",
          "sagemaker:ListMonitoringAlertHistory",
          "sagemaker:DescribeModelPackage",
          "sagemaker:DescribeModelPackageGroup",
          "sagemaker:CreateModelCard",
          "sagemaker:DescribeModelCard",
          "sagemaker:UpdateModelCard",
          "sagemaker:DeleteModelCard",
          "sagemaker:ListModelCards",
          "sagemaker:ListModelCardVersions",
          "sagemaker:CreateModelCardExportJob",
          "sagemaker:DescribeModelCardExportJob",
          "sagemaker:ListModelCardExportJobs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:ListTrainingJobs",
          "sagemaker:DescribeTrainingJob",
          "sagemaker:ListModels",
          "sagemaker:DescribeModel",
          "sagemaker:Search",
          "sagemaker:AddTags",
          "sagemaker:DeleteTags",
          "sagemaker:ListTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:CreateBucket",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerGeospatialFullAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerGeospatialFullAccess",
      "PolicyId": "ANPAZKAPJZG4FGW7AH57X",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerGeospatialFullAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions that allow full access to Amazon SageMaker Geospatial through the AWS Management Console and SDK.",
      "CreateDate": "2022-11-30T10:06:48.000Z",
      "UpdateDate": "2022-11-30T10:06:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker-geospatial:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AmazonSageMakerGeospatialExecutionRole": {
    "policy": {
      "PolicyName": "AmazonSageMakerGeospatialExecutionRole",
      "PolicyId": "ANPAZKAPJZG4LWAVZTEDO",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerGeospatialExecutionRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provide access to services that are commonly needed to use SageMaker geospatial.",
      "CreateDate": "2022-11-30T10:08:36.000Z",
      "UpdateDate": "2023-05-10T20:28:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:PutObject",
          "s3:GetObject",
          "s3:ListBucketMultipartUploads"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker-geospatial:GetEarthObservationJob"
        ],
        "Resource": [
          "arn:aws:sagemaker-geospatial:*:*:earth-observation-job/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker-geospatial:GetRasterDataCollection"
        ],
        "Resource": [
          "arn:aws:sagemaker-geospatial:*:*:raster-data-collection/*"
        ]
      }
    ]
  },
  "AmazonDocDB-ElasticServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonDocDB-ElasticServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JOUKVZGRW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonDocDB-ElasticServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon DocumentDB-Elastic to manage AWS resources on your behalf.",
      "CreateDate": "2022-11-30T14:17:05.000Z",
      "UpdateDate": "2022-11-30T14:17:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSVpcLatticeServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSVpcLatticeServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BIL6C5XYT",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSVpcLatticeServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows VPC Lattice to access AWS resources on your behalf.",
      "CreateDate": "2022-11-30T20:47:10.000Z",
      "UpdateDate": "2022-11-30T20:47:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEventBridgePipesFullAccess": {
    "policy": {
      "PolicyName": "AmazonEventBridgePipesFullAccess",
      "PolicyId": "ANPAZKAPJZG4FC7K5SX45",
      "Arn": "arn:aws:iam::aws:policy/AmazonEventBridgePipesFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon EventBridge Pipes.",
      "CreateDate": "2022-12-01T17:03:20.000Z",
      "UpdateDate": "2022-12-01T17:03:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EventBridgePipesActions",
        "Effect": "Allow",
        "Action": [
          "pipes:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMPassRoleAccessForPipes",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AmazonEventBridgePipesReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonEventBridgePipesReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4ANOWTW54G",
      "Arn": "arn:aws:iam::aws:policy/AmazonEventBridgePipesReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon EventBridge Pipes.",
      "CreateDate": "2022-12-01T17:04:03.000Z",
      "UpdateDate": "2022-12-01T17:04:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "pipes:DescribePipe",
          "pipes:ListPipes",
          "pipes:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEventBridgePipesOperatorAccess": {
    "policy": {
      "PolicyName": "AmazonEventBridgePipesOperatorAccess",
      "PolicyId": "ANPAZKAPJZG4FYDFHBWYU",
      "Arn": "arn:aws:iam::aws:policy/AmazonEventBridgePipesOperatorAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only and operator (ability to Stop and Start running Pipes) access to Amazon EventBridge Pipes.",
      "CreateDate": "2022-12-01T17:04:32.000Z",
      "UpdateDate": "2022-12-01T17:04:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "pipes:DescribePipe",
          "pipes:ListPipes",
          "pipes:ListTagsForResource",
          "pipes:StartPipe",
          "pipes:StopPipe"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRoleForGroundStationDataflowEndpointGroupPolicy": {
    "policy": {
      "PolicyName": "AWSServiceRoleForGroundStationDataflowEndpointGroupPolicy",
      "PolicyId": "ANPAZKAPJZG4F2SFHGJBF",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForGroundStationDataflowEndpointGroupPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS GroundStation uses this service-linked role to invoke EC2 to find public IPv4 addresses",
      "CreateDate": "2022-12-13T23:52:45.000Z",
      "UpdateDate": "2022-12-13T23:52:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAddresses",
          "ec2:DescribeNetworkInterfaces"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSBackupGatewayServiceRolePolicyForVirtualMachineMetadataSync": {
    "policy": {
      "PolicyName": "AWSBackupGatewayServiceRolePolicyForVirtualMachineMetadataSync",
      "PolicyId": "ANPAZKAPJZG4IWILMJXSE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSBackupGatewayServiceRolePolicyForVirtualMachineMetadataSync",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS BackupGateway permission to sync the metadata of Virtual Machines on your behalf",
      "CreateDate": "2022-12-15T19:43:11.000Z",
      "UpdateDate": "2022-12-15T19:43:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ListVmTags",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:vm/*"
        ]
      },
      {
        "Sid": "VMTagPermissions",
        "Effect": "Allow",
        "Action": [
          "backup-gateway:TagResource",
          "backup-gateway:UntagResource"
        ],
        "Resource": [
          "arn:aws:backup-gateway:*:*:vm/*"
        ]
      }
    ]
  },
  "AWSManagedServices_DetectiveControlsConfig_ServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSManagedServices_DetectiveControlsConfig_ServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NFMIIYFDV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSManagedServices_DetectiveControlsConfig_ServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS Managed Services - policy to manage detective controls infrastructure",
      "CreateDate": "2022-12-19T23:11:17.000Z",
      "UpdateDate": "2022-12-19T23:11:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:UpdateTermination*",
          "cloudformation:CreateStack",
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStackResources",
          "cloudformation:CreateChangeSet",
          "cloudformation:DescribeChangeSet",
          "cloudformation:ExecuteChangeSet",
          "cloudformation:GetTemplateSummary",
          "cloudformation:DescribeStacks"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/ams-detective-controls-config-recorder",
          "arn:aws:cloudformation:*:*:stack/ams-detective-controls-config-rules-cdk",
          "arn:aws:cloudformation:*:*:stack/ams-detective-controls-infrastructure-cdk"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "config:DescribeAggregationAuthorizations",
          "config:PutAggregationAuthorization",
          "config:TagResource",
          "config:PutConfigRule"
        ],
        "Resource": [
          "arn:aws:config:*:*:aggregation-authorization/540708452589/*",
          "arn:aws:config:*:*::config-rule/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketPolicy",
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:DeleteBucketPolicy",
          "s3:DeleteObject",
          "s3:ListBucket",
          "s3:ListBucketVersions",
          "s3:GetBucketAcl",
          "s3:PutObject",
          "s3:PutBucketAcl",
          "s3:PutBucketLogging",
          "s3:PutBucketObjectLockConfiguration",
          "s3:PutBucketPolicy",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketTagging",
          "s3:PutBucketVersioning",
          "s3:PutEncryptionConfiguration"
        ],
        "Resource": [
          "arn:aws:s3:::ams-config-record-bucket-*"
        ]
      }
    ]
  },
  "AWSLicenseManagerLinuxSubscriptionsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSLicenseManagerLinuxSubscriptionsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4KZ4W4E4X2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSLicenseManagerLinuxSubscriptionsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS License Manager Linux Subscriptions Service to manage resources on your behalf.",
      "CreateDate": "2022-12-20T18:54:54.000Z",
      "UpdateDate": "2022-12-20T18:54:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EC2Permissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeRegions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OrganizationPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:DescribeAccount",
          "organizations:ListChildren",
          "organizations:ListParents",
          "organizations:ListAccountsForParent",
          "organizations:ListRoots",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSOutpostsAuthorizeServerPolicy": {
    "policy": {
      "PolicyName": "AWSOutpostsAuthorizeServerPolicy",
      "PolicyId": "ANPAZKAPJZG4O5PV3BNGP",
      "Arn": "arn:aws:iam::aws:policy/AWSOutpostsAuthorizeServerPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions that allow you to install an Outpost server on your on-premises network.",
      "CreateDate": "2023-01-04T19:23:22.000Z",
      "UpdateDate": "2023-01-04T19:23:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "outposts:StartConnection",
          "outposts:GetConnection"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryStagingAccountPolicy_v2": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryStagingAccountPolicy_v2",
      "PolicyId": "ANPAZKAPJZG4BNQEQ6SEE",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryStagingAccountPolicy_v2",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is used by AWS Elastic Disaster Recovery (DRS) to recover source servers into a separate target account and to allow failing back. We do not recommend that you attach this policy to your IAM users or roles.",
      "CreateDate": "2023-01-05T12:11:44.000Z",
      "UpdateDate": "2023-11-27T13:32:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSStagingAccountPolicyv21",
        "Effect": "Allow",
        "Action": [
          "drs:DescribeSourceServers",
          "drs:DescribeRecoverySnapshots",
          "drs:CreateConvertedSnapshotForDrs",
          "drs:GetReplicationConfiguration",
          "drs:DescribeJobs",
          "drs:DescribeJobLogItems"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DRSStagingAccountPolicyv22",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifySnapshotAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "DRSStagingAccountPolicyv23",
        "Effect": "Allow",
        "Action": [
          "drs:IssueAgentCertificateForDrs"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      }
    ]
  },
  "ResourceGroupsServiceRolePolicy": {
    "policy": {
      "PolicyName": "ResourceGroupsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4CED7JM5AD",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/ResourceGroupsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Resource Groups to query the AWS services that own your resources to keep the group up-to-date",
      "CreateDate": "2023-01-05T16:57:08.000Z",
      "UpdateDate": "2023-01-05T16:57:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources",
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCleanRoomsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCleanRoomsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4FRFM45XQJ",
      "Arn": "arn:aws:iam::aws:policy/AWSCleanRoomsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows read-only access to AWS Clean Rooms resources and read-only access to related AWS Glue and Amazon CloudWatch Logs resources.",
      "CreateDate": "2023-01-12T16:10:48.000Z",
      "UpdateDate": "2023-01-12T16:10:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CleanRoomsRead",
        "Effect": "Allow",
        "Action": [
          "cleanrooms:BatchGet*",
          "cleanrooms:Get*",
          "cleanrooms:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleDisplayTables",
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:GetSchema",
          "glue:GetSchemaVersion",
          "glue:BatchGetPartition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleLogSummaryQueryLogs",
        "Effect": "Allow",
        "Action": [
          "logs:StartQuery"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
        ]
      },
      {
        "Sid": "ConsoleLogSummaryObtainLogs",
        "Effect": "Allow",
        "Action": [
          "logs:GetQueryResults"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCleanRoomsFullAccess": {
    "policy": {
      "PolicyName": "AWSCleanRoomsFullAccess",
      "PolicyId": "ANPAZKAPJZG4I3UG4QE7Y",
      "Arn": "arn:aws:iam::aws:policy/AWSCleanRoomsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows full access to AWS Clean Rooms resources and access to related AWS Services.",
      "CreateDate": "2023-01-12T16:10:54.000Z",
      "UpdateDate": "2024-03-21T15:35:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CleanRoomsAccess",
        "Effect": "Allow",
        "Action": [
          "cleanrooms:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PassServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/*cleanrooms*"
        ]
      },
      {
        "Sid": "ListRolesToPickServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetRoleAndListRolePoliciesToInspectServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:ListRolePolicies",
          "iam:ListAttachedRolePolicies"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/*cleanrooms*"
        ]
      },
      {
        "Sid": "ListPoliciesToInspectServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "iam:ListPolicies"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetPolicyToInspectServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "iam:GetPolicy",
          "iam:GetPolicyVersion"
        ],
        "Resource": [
          "arn:aws:iam::*:policy/*cleanrooms*"
        ]
      },
      {
        "Sid": "ConsoleDisplayTables",
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:GetSchema",
          "glue:GetSchemaVersion",
          "glue:BatchGetPartition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsolePickQueryResultsBucketListAll",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SetQueryResultsBucket",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListBucketVersions"
        ],
        "Resource": [
          "arn:aws:s3:::cleanrooms-queryresults*"
        ]
      },
      {
        "Sid": "WriteQueryResults",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::cleanrooms-queryresults*"
        ]
      },
      {
        "Sid": "ConsoleDisplayQueryResults",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::cleanrooms-queryresults*"
        ]
      },
      {
        "Sid": "EstablishLogDeliveries",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:GetLogDelivery",
          "logs:UpdateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:ListLogDeliveries"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SetupLogGroupsDescribe",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SetupLogGroupsCreate",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
        ]
      },
      {
        "Sid": "SetupLogGroupsResourcePolicy",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeResourcePolicies",
          "logs:PutResourcePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleLogSummaryQueryLogs",
        "Effect": "Allow",
        "Action": [
          "logs:StartQuery"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
        ]
      },
      {
        "Sid": "ConsoleLogSummaryObtainLogs",
        "Effect": "Allow",
        "Action": [
          "logs:GetQueryResults"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCleanRoomsFullAccessNoQuerying": {
    "policy": {
      "PolicyName": "AWSCleanRoomsFullAccessNoQuerying",
      "PolicyId": "ANPAZKAPJZG4J64DFI2ZH",
      "Arn": "arn:aws:iam::aws:policy/AWSCleanRoomsFullAccessNoQuerying",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows full access to AWS Clean Rooms resources except for querying in a collaboration and access to related AWS Services.",
      "CreateDate": "2023-01-12T16:12:31.000Z",
      "UpdateDate": "2023-07-31T20:03:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CleanRoomsAccess",
        "Effect": "Allow",
        "Action": [
          "cleanrooms:BatchGetCollaborationAnalysisTemplate",
          "cleanrooms:BatchGetSchema",
          "cleanrooms:CreateAnalysisTemplate",
          "cleanrooms:CreateCollaboration",
          "cleanrooms:CreateConfiguredTable",
          "cleanrooms:CreateConfiguredTableAnalysisRule",
          "cleanrooms:CreateConfiguredTableAssociation",
          "cleanrooms:CreateMembership",
          "cleanrooms:DeleteAnalysisTemplate",
          "cleanrooms:DeleteCollaboration",
          "cleanrooms:DeleteConfiguredTable",
          "cleanrooms:DeleteConfiguredTableAnalysisRule",
          "cleanrooms:DeleteConfiguredTableAssociation",
          "cleanrooms:DeleteMember",
          "cleanrooms:DeleteMembership",
          "cleanrooms:GetAnalysisTemplate",
          "cleanrooms:GetCollaborationAnalysisTemplate",
          "cleanrooms:GetCollaboration",
          "cleanrooms:GetConfiguredTable",
          "cleanrooms:GetConfiguredTableAnalysisRule",
          "cleanrooms:GetConfiguredTableAssociation",
          "cleanrooms:GetMembership",
          "cleanrooms:GetProtectedQuery",
          "cleanrooms:GetSchema",
          "cleanrooms:GetSchemaAnalysisRule",
          "cleanrooms:ListAnalysisTemplates",
          "cleanrooms:ListCollaborationAnalysisTemplates",
          "cleanrooms:ListCollaborations",
          "cleanrooms:ListConfiguredTableAssociations",
          "cleanrooms:ListConfiguredTables",
          "cleanrooms:ListMembers",
          "cleanrooms:ListMemberships",
          "cleanrooms:ListProtectedQueries",
          "cleanrooms:ListSchemas",
          "cleanrooms:UpdateAnalysisTemplate",
          "cleanrooms:UpdateCollaboration",
          "cleanrooms:UpdateConfiguredTable",
          "cleanrooms:UpdateConfiguredTableAnalysisRule",
          "cleanrooms:UpdateConfiguredTableAssociation",
          "cleanrooms:UpdateMembership",
          "cleanrooms:ListTagsForResource",
          "cleanrooms:UntagResource",
          "cleanrooms:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CleanRoomsNoQuerying",
        "Effect": "Deny",
        "Action": [
          "cleanrooms:StartProtectedQuery",
          "cleanrooms:UpdateProtectedQuery"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PassServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/*cleanrooms*"
        ]
      },
      {
        "Sid": "ListRolesToPickServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetRoleAndListRolePoliciesToInspectServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:ListRolePolicies",
          "iam:ListAttachedRolePolicies"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/*cleanrooms*"
        ]
      },
      {
        "Sid": "ListPoliciesToInspectServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "iam:ListPolicies"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetPolicyToInspectServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "iam:GetPolicy",
          "iam:GetPolicyVersion"
        ],
        "Resource": [
          "arn:aws:iam::*:policy/*cleanrooms*"
        ]
      },
      {
        "Sid": "ConsoleDisplayTables",
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:GetSchema",
          "glue:GetSchemaVersion",
          "glue:BatchGetPartition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EstablishLogDeliveries",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:GetLogDelivery",
          "logs:UpdateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:ListLogDeliveries"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SetupLogGroupsDescribe",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SetupLogGroupsCreate",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
        ]
      },
      {
        "Sid": "SetupLogGroupsResourcePolicy",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeResourcePolicies",
          "logs:PutResourcePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleLogSummaryQueryLogs",
        "Effect": "Allow",
        "Action": [
          "logs:StartQuery"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
        ]
      },
      {
        "Sid": "ConsoleLogSummaryObtainLogs",
        "Effect": "Allow",
        "Action": [
          "logs:GetQueryResults"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSHealth_EventProcessorServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSHealth_EventProcessorServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BVDKRWPHJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSHealth_EventProcessorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Health to enable the Health event processor feature.",
      "CreateDate": "2023-01-13T19:24:56.000Z",
      "UpdateDate": "2023-01-13T19:24:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:PutTargets",
          "events:PutRule",
          "events:RemoveTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDetectiveMemberAccess": {
    "policy": {
      "PolicyName": "AmazonDetectiveMemberAccess",
      "PolicyId": "ANPAZKAPJZG4AAJ3GGWV2",
      "Arn": "arn:aws:iam::aws:policy/AmazonDetectiveMemberAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides member access to Amazon Detective service and scoped access to the console UI dependencies.",
      "CreateDate": "2023-01-17T15:16:14.000Z",
      "UpdateDate": "2023-01-17T15:16:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "detective:AcceptInvitation",
          "detective:BatchGetMembershipDatasources",
          "detective:DisassociateMembership",
          "detective:GetFreeTrialEligibility",
          "detective:GetPricingInformation",
          "detective:GetUsageInformation",
          "detective:ListInvitations",
          "detective:RejectInvitation"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDetectiveInvestigatorAccess": {
    "policy": {
      "PolicyName": "AmazonDetectiveInvestigatorAccess",
      "PolicyId": "ANPAZKAPJZG4KOT67VSLJ",
      "Arn": "arn:aws:iam::aws:policy/AmazonDetectiveInvestigatorAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides investigator access to Amazon Detective service and scoped access to the console UI dependencies. This policy grants permission to dive into Detective for investigation purposes and limited write access to Guardduty.",
      "CreateDate": "2023-01-17T15:24:26.000Z",
      "UpdateDate": "2023-11-27T03:13:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DetectivePermissions",
        "Effect": "Allow",
        "Action": [
          "detective:BatchGetGraphMemberDatasources",
          "detective:BatchGetMembershipDatasources",
          "detective:DescribeOrganizationConfiguration",
          "detective:GetFreeTrialEligibility",
          "detective:GetGraphIngestState",
          "detective:GetMembers",
          "detective:GetPricingInformation",
          "detective:GetUsageInformation",
          "detective:ListDatasourcePackages",
          "detective:ListGraphs",
          "detective:ListHighDegreeEntities",
          "detective:ListInvitations",
          "detective:ListMembers",
          "detective:ListOrganizationAdminAccount",
          "detective:ListTagsForResource",
          "detective:SearchGraph",
          "detective:StartInvestigation",
          "detective:GetInvestigation",
          "detective:ListInvestigations",
          "detective:UpdateInvestigationState",
          "detective:ListIndicators",
          "detective:InvokeAssistant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OrganizationsPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:ListAccounts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GuardDutyPermissions",
        "Effect": "Allow",
        "Action": [
          "guardduty:ArchiveFindings",
          "guardduty:GetFindings",
          "guardduty:ListDetectors"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecurityHubPermissions",
        "Effect": "Allow",
        "Action": [
          "securityhub:GetFindings"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "Ec2InstanceConnectEndpoint": {
    "policy": {
      "PolicyName": "Ec2InstanceConnectEndpoint",
      "PolicyId": "ANPAZKAPJZG4PP6VJFZS6",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/Ec2InstanceConnectEndpoint",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "EC2 Instance Connect endpoint policy to manage EC2 Instance Connect endpoints created by the customer",
      "CreateDate": "2023-01-24T20:19:21.000Z",
      "UpdateDate": "2023-01-24T20:19:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeAvailabilityZones"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCognitoUnauthenticatedIdentities": {
    "policy": {
      "PolicyName": "AmazonCognitoUnauthenticatedIdentities",
      "PolicyId": "ANPAZKAPJZG4PHSI6T74N",
      "Arn": "arn:aws:iam::aws:policy/AmazonCognitoUnauthenticatedIdentities",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy defines the set of permissions allowed for unauthenticated identities for Cognito Identity Pools. This does not need to be attached to your unauth role, as Cognito Identity Service will automatically include it as a scoped down policy when creating credentials. The privileges to temporarily access other AWS resources through the enhanced flow will now be defined by the intersection of the role associated with the identity of the unauthenticated user provided by a service, and the privileges given in this managed policy that is owned by Cognito.",
      "CreateDate": "2023-02-01T22:36:27.000Z",
      "UpdateDate": "2023-02-01T22:36:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rum:PutRumEvents"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSManagedServices_EventsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSManagedServices_EventsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GFF34B234",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSManagedServices_EventsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWS Managed Services policy to enable AMS event processor feature.",
      "CreateDate": "2023-02-07T18:41:22.000Z",
      "UpdateDate": "2023-02-07T18:41:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:PutTargets",
          "events:PutRule",
          "events:RemoveTargets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPrivateCAUser": {
    "policy": {
      "PolicyName": "AWSPrivateCAUser",
      "PolicyId": "ANPAZKAPJZG4GKEATZA7L",
      "Arn": "arn:aws:iam::aws:policy/AWSPrivateCAUser",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides certificate user access to AWS Private Certificate Authority",
      "CreateDate": "2023-02-14T18:16:08.000Z",
      "UpdateDate": "2023-02-14T18:16:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:IssueCertificate"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "acm-pca:IssueCertificate"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:RevokeCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:ListPermissions"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:ListCertificateAuthorities"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPrivateCAFullAccess": {
    "policy": {
      "PolicyName": "AWSPrivateCAFullAccess",
      "PolicyId": "ANPAZKAPJZG4BT7UMLQZE",
      "Arn": "arn:aws:iam::aws:policy/AWSPrivateCAFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Private Certificate Authority",
      "CreateDate": "2023-02-14T18:20:59.000Z",
      "UpdateDate": "2023-02-14T18:20:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPrivateCAPrivilegedUser": {
    "policy": {
      "PolicyName": "AWSPrivateCAPrivilegedUser",
      "PolicyId": "ANPAZKAPJZG4GABX62RMW",
      "Arn": "arn:aws:iam::aws:policy/AWSPrivateCAPrivilegedUser",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides privileged certificate user access to AWS Private Certificate Authority",
      "CreateDate": "2023-02-14T18:26:02.000Z",
      "UpdateDate": "2023-02-14T18:26:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:IssueCertificate"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Deny",
        "Action": [
          "acm-pca:IssueCertificate"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:RevokeCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:ListPermissions"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:ListCertificateAuthorities"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPrivateCAReadOnly": {
    "policy": {
      "PolicyName": "AWSPrivateCAReadOnly",
      "PolicyId": "ANPAZKAPJZG4PF3O4E3NU",
      "Arn": "arn:aws:iam::aws:policy/AWSPrivateCAReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Private Certificate Authority",
      "CreateDate": "2023-02-14T18:30:50.000Z",
      "UpdateDate": "2023-02-14T18:30:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:DescribeCertificateAuthorityAuditReport",
          "acm-pca:ListCertificateAuthorities",
          "acm-pca:GetCertificateAuthorityCsr",
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:GetPolicy",
          "acm-pca:ListPermissions",
          "acm-pca:ListTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSPrivateCAAuditor": {
    "policy": {
      "PolicyName": "AWSPrivateCAAuditor",
      "PolicyId": "ANPAZKAPJZG4O6EOPUK2L",
      "Arn": "arn:aws:iam::aws:policy/AWSPrivateCAAuditor",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides auditor access to AWS Private Certificate Authority",
      "CreateDate": "2023-02-14T18:33:44.000Z",
      "UpdateDate": "2023-02-14T18:33:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:CreateCertificateAuthorityAuditReport",
          "acm-pca:DescribeCertificateAuthority",
          "acm-pca:DescribeCertificateAuthorityAuditReport",
          "acm-pca:GetCertificateAuthorityCsr",
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:GetCertificate",
          "acm-pca:GetPolicy",
          "acm-pca:ListPermissions",
          "acm-pca:ListTags"
        ],
        "Resource": [
          "arn:aws:acm-pca:*:*:certificate-authority/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "acm-pca:ListCertificateAuthorities"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonOmicsFullAccess": {
    "policy": {
      "PolicyName": "AmazonOmicsFullAccess",
      "PolicyId": "ANPAZKAPJZG4AXA7BQJYZ",
      "Arn": "arn:aws:iam::aws:policy/AmazonOmicsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Omics and other required AWS Services. This policy allows the user to view and accept RAM share invitations to access resources outside of the user's AWS account.",
      "CreateDate": "2023-02-24T00:59:33.000Z",
      "UpdateDate": "2023-02-24T00:59:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "omics:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ram:AcceptResourceShareInvitation",
          "ram:GetResourceShareInvitations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSSupplyChainFederationAdminAccess": {
    "policy": {
      "PolicyName": "AWSSupplyChainFederationAdminAccess",
      "PolicyId": "ANPAZKAPJZG4ILSYMTZA7",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSSupplyChainFederationAdminAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "AWSSupplyChainFederationAdminAccess provides AWS Supply Chain federated users access to the AWS Supply Chain application, including the required permissions to perform actions within the AWS Supply Chain application. The policy provides administrative permissions over IAM Identity Center users and groups and is attached to a role created by AWS Supply Chain on your behalf. You shouldn't attach AWSSupplyChainFederationAdminAccess policy to any other IAM entities.",
      "CreateDate": "2023-03-01T18:54:25.000Z",
      "UpdateDate": "2023-11-01T18:50:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSSupplyChain",
        "Effect": "Allow",
        "Action": [
          "scn:*"
        ],
        "Resource": [
          "arn:aws:scn:*:*:instance/*"
        ]
      },
      {
        "Sid": "ChimeAppInstance",
        "Effect": "Allow",
        "Action": [
          "chime:BatchCreateChannelMembership",
          "chime:CreateAppInstanceUser",
          "chime:CreateChannel",
          "chime:CreateChannelMembership",
          "chime:CreateChannelModerator",
          "chime:Connect",
          "chime:DeleteChannelMembership",
          "chime:DeleteChannelModerator",
          "chime:DescribeChannelMembershipForAppInstanceUser",
          "chime:GetChannelMembershipPreferences",
          "chime:ListChannelMemberships",
          "chime:ListChannelMembershipsForAppInstanceUser",
          "chime:ListChannelMessages",
          "chime:ListChannelModerators",
          "chime:TagResource",
          "chime:PutChannelMembershipPreferences",
          "chime:SendChannelMessage",
          "chime:UpdateChannelReadMarker",
          "chime:UpdateAppInstanceUser"
        ],
        "Resource": [
          "arn:aws:chime:*:*:app-instance/*"
        ]
      },
      {
        "Sid": "ChimeChannel",
        "Effect": "Allow",
        "Action": [
          "chime:DescribeChannel"
        ],
        "Resource": [
          "arn:aws:chime:*:*:app-instance/*"
        ]
      },
      {
        "Sid": "ChimeMessaging",
        "Effect": "Allow",
        "Action": [
          "chime:GetMessagingSessionEndpoint"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMIdentityCenter",
        "Effect": "Allow",
        "Action": [
          "sso:GetManagedApplicationInstance",
          "sso:ListDirectoryAssociations",
          "sso:AssociateProfile",
          "sso:DisassociateProfile",
          "sso:ListProfiles",
          "sso:GetProfile",
          "sso:ListProfileAssociations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AppflowConnectorProfile",
        "Effect": "Allow",
        "Action": [
          "appflow:CreateConnectorProfile",
          "appflow:UseConnectorProfile",
          "appflow:DeleteConnectorProfile",
          "appflow:UpdateConnectorProfile"
        ],
        "Resource": [
          "arn:aws:appflow:*:*:connectorprofile/scn-*"
        ]
      },
      {
        "Sid": "AppflowFlow",
        "Effect": "Allow",
        "Action": [
          "appflow:CreateFlow",
          "appflow:DeleteFlow",
          "appflow:DescribeFlow",
          "appflow:DescribeFlowExecutionRecords",
          "appflow:ListFlows",
          "appflow:StartFlow",
          "appflow:StopFlow",
          "appflow:UpdateFlow",
          "appflow:TagResource",
          "appflow:UntagResource"
        ],
        "Resource": [
          "arn:aws:appflow:*:*:flow/scn-*"
        ]
      },
      {
        "Sid": "S3ListAllBuckets",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3ListSupplyChainBucket",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:GetBucketPolicy",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::aws-supply-chain-data-*"
        ]
      },
      {
        "Sid": "S3ReadWriteObject",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-supply-chain-data-*"
        ]
      },
      {
        "Sid": "SecretsManagerCreateSecret",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:*"
        ]
      },
      {
        "Sid": "SecretsManagerPutResourcePolicy",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:PutResourcePolicy"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:*"
        ]
      },
      {
        "Sid": "KMSListKeys",
        "Effect": "Allow",
        "Action": [
          "kms:ListKeys",
          "kms:ListAliases"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "KMSListGrants",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListGrants"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "KMSCreateGrant",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      }
    ]
  },
  "AmazonDetectiveOrganizationsAccess": {
    "policy": {
      "PolicyName": "AmazonDetectiveOrganizationsAccess",
      "PolicyId": "ANPAZKAPJZG4PCZWC5CNA",
      "Arn": "arn:aws:iam::aws:policy/AmazonDetectiveOrganizationsAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides Organizations access to manage Delegated administrator for Amazon Detective and scoped access to the console UI dependencies. This also grants permission to create a service-linked role for Detective.",
      "CreateDate": "2023-03-02T15:20:50.000Z",
      "UpdateDate": "2023-03-02T15:20:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "detective:DisableOrganizationAdminAccount",
          "detective:EnableOrganizationAdminAccount",
          "detective:ListOrganizationAdminAccount"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess",
          "organizations:RegisterDelegatedAdministrator",
          "organizations:DeregisterDelegatedAdministrator"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListDelegatedAdministrators"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonChimeSDKMessagingServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonChimeSDKMessagingServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4MOY7J5YOW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonChimeSDKMessagingServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Chime SDK Messaging to access AWS resources and enable messaging functionality",
      "CreateDate": "2023-03-03T01:43:49.000Z",
      "UpdateDate": "2023-03-03T01:43:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kinesis:PutRecord",
          "kinesis:PutRecords",
          "kinesis:DescribeStream"
        ],
        "Resource": [
          "arn:aws:kinesis:*:*:stream/chime-messaging-*"
        ]
      }
    ]
  },
  "AWSDMSFleetAdvisorServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSDMSFleetAdvisorServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4O7FM552GO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSDMSFleetAdvisorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows DMS Fleet Advisor to manage CloudWatch metrics on your behalf.",
      "CreateDate": "2023-03-06T09:10:42.000Z",
      "UpdateDate": "2023-03-06T09:10:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CustomerProfilesServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "CustomerProfilesServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GN7CNQPYF",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CustomerProfilesServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Connect Customer Profiles to access AWS services and resources on your behalf.",
      "CreateDate": "2023-03-07T22:56:52.000Z",
      "UpdateDate": "2023-03-07T22:56:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/profile.amazonaws.com/AWSServiceRoleForProfile_*"
        ]
      }
    ]
  },
  "AWSDataSyncDiscoveryServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSDataSyncDiscoveryServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JEPXXLDSV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSDataSyncDiscoveryServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows DataSync Discovery to integrate with other AWS services on your behalf.",
      "CreateDate": "2023-03-20T22:19:51.000Z",
      "UpdateDate": "2023-03-20T22:19:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:*:secretsmanager:*:*:secret:datasync!*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream"
        ],
        "Resource": [
          "arn:*:logs:*:*:log-group:/aws/datasync*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:*:logs:*:*:log-group:/aws/datasync:log-stream:*"
        ]
      }
    ]
  },
  "MediaConnectGatewayInstanceRolePolicy": {
    "policy": {
      "PolicyName": "MediaConnectGatewayInstanceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4HUF2QANLS",
      "Arn": "arn:aws:iam::aws:policy/MediaConnectGatewayInstanceRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permission to register MediaConnect Gateway Instances to a MediaConnect Gateway.",
      "CreateDate": "2023-03-22T20:43:25.000Z",
      "UpdateDate": "2023-03-22T20:43:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "MediaConnectGateway",
        "Effect": "Allow",
        "Action": [
          "mediaconnect:DiscoverGatewayPollEndpoint",
          "mediaconnect:PollGateway",
          "mediaconnect:SubmitGatewayStateChange"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSManagedServices_ContactsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSManagedServices_ContactsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4OWIC4KQFJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSManagedServices_ContactsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Managed Services to read the values of the tags on AWS resources",
      "CreateDate": "2023-03-23T17:07:46.000Z",
      "UpdateDate": "2023-03-23T17:07:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:ListRoleTags",
          "iam:ListUserTags",
          "tag:GetResources",
          "ec2:DescribeTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketTagging"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerCanvasAIServicesAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerCanvasAIServicesAccess",
      "PolicyId": "ANPAZKAPJZG4IA6MZINCJ",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerCanvasAIServicesAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions for Amazon SageMaker Canvas to use AI services to support ready to use AI solutions. This policy will add more mutating permissions for services as Amazon SageMaker Canvas adds support.",
      "CreateDate": "2023-03-23T22:36:43.000Z",
      "UpdateDate": "2023-11-29T14:47:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "Textract",
        "Effect": "Allow",
        "Action": [
          "textract:AnalyzeDocument",
          "textract:AnalyzeExpense",
          "textract:AnalyzeID",
          "textract:StartDocumentAnalysis",
          "textract:StartExpenseAnalysis",
          "textract:GetDocumentAnalysis",
          "textract:GetExpenseAnalysis"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Rekognition",
        "Effect": "Allow",
        "Action": [
          "rekognition:DetectLabels",
          "rekognition:DetectText"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Comprehend",
        "Effect": "Allow",
        "Action": [
          "comprehend:BatchDetectDominantLanguage",
          "comprehend:BatchDetectEntities",
          "comprehend:BatchDetectSentiment",
          "comprehend:DetectPiiEntities",
          "comprehend:DetectEntities",
          "comprehend:DetectSentiment",
          "comprehend:DetectDominantLanguage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Bedrock",
        "Effect": "Allow",
        "Action": [
          "bedrock:InvokeModel",
          "bedrock:ListFoundationModels",
          "bedrock:InvokeModelWithResponseStream"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateBedrockResourcesPermission",
        "Effect": "Allow",
        "Action": [
          "bedrock:CreateModelCustomizationJob",
          "bedrock:CreateProvisionedModelThroughput",
          "bedrock:TagResource"
        ],
        "Resource": [
          "arn:aws:bedrock:*:*:model-customization-job/*",
          "arn:aws:bedrock:*:*:custom-model/*",
          "arn:aws:bedrock:*:*:provisioned-model/*"
        ]
      },
      {
        "Sid": "GetStopAndDeleteBedrockResourcesPermission",
        "Effect": "Allow",
        "Action": [
          "bedrock:GetModelCustomizationJob",
          "bedrock:GetCustomModel",
          "bedrock:GetProvisionedModelThroughput",
          "bedrock:StopModelCustomizationJob",
          "bedrock:DeleteProvisionedModelThroughput"
        ],
        "Resource": [
          "arn:aws:bedrock:*:*:model-customization-job/*",
          "arn:aws:bedrock:*:*:custom-model/*",
          "arn:aws:bedrock:*:*:provisioned-model/*"
        ]
      },
      {
        "Sid": "FoundationModelPermission",
        "Effect": "Allow",
        "Action": [
          "bedrock:CreateModelCustomizationJob"
        ],
        "Resource": [
          "arn:aws:bedrock:*::foundation-model/*"
        ]
      },
      {
        "Sid": "BedrockFineTuningPassRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AWSServiceRoleForCodeWhispererPolicy": {
    "policy": {
      "PolicyName": "AWSServiceRoleForCodeWhispererPolicy",
      "PolicyId": "ANPAZKAPJZG4MTPH2EDJ3",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForCodeWhispererPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This role grants permissions to CodeWhisperer to access data in your account to calculate billing, provides access to create and access security reports in Amazon CodeGuru, and emit data to CloudWatch.",
      "CreateDate": "2023-03-24T19:39:12.000Z",
      "UpdateDate": "2024-03-29T22:13:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "sid1",
        "Effect": "Allow",
        "Action": [
          "sso-directory:ListMembersInGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "sid2",
        "Effect": "Allow",
        "Action": [
          "sso:ListProfileAssociations",
          "sso:ListProfiles",
          "sso:ListDirectoryAssociations",
          "sso:DescribeRegisteredRegions",
          "sso:GetProfile",
          "sso:GetManagedApplicationInstance",
          "sso:ListApplicationAssignments",
          "sso:DescribeInstance",
          "sso:DescribeApplication"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "sid3",
        "Effect": "Allow",
        "Action": [
          "codeguru-security:CreateUploadUrl"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "sid4",
        "Effect": "Allow",
        "Action": [
          "codeguru-security:CreateScan",
          "codeguru-security:GetScan",
          "codeguru-security:ListFindings",
          "codeguru-security:GetFindings"
        ],
        "Resource": [
          "arn:aws:codeguru-security:*:*:scans/CodeWhisperer-*"
        ]
      },
      {
        "Sid": "sid5",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonGrafanaCloudWatchAccess": {
    "policy": {
      "PolicyName": "AmazonGrafanaCloudWatchAccess",
      "PolicyId": "ANPAZKAPJZG4NIUWOK5KU",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonGrafanaCloudWatchAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants access to Amazon CloudWatch and the dependencies needed to use CloudWatch as a datasource within Amazon Managed Grafana.",
      "CreateDate": "2023-03-24T22:41:53.000Z",
      "UpdateDate": "2023-03-24T22:41:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarmsForMetric",
          "cloudwatch:DescribeAlarmHistory",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetInsightRuleReport"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups",
          "logs:GetLogGroupFields",
          "logs:StartQuery",
          "logs:StopQuery",
          "logs:GetQueryResults",
          "logs:GetLogEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeTags",
          "ec2:DescribeInstances",
          "ec2:DescribeRegions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "oam:ListSinks",
          "oam:ListAttachedLinks"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGroundStationAgentInstancePolicy": {
    "policy": {
      "PolicyName": "AWSGroundStationAgentInstancePolicy",
      "PolicyId": "ANPAZKAPJZG4GN6CBCPGK",
      "Arn": "arn:aws:iam::aws:policy/AWSGroundStationAgentInstancePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the Dataflow Endpoint Instance permissions to use the AWS Ground Station Agent",
      "CreateDate": "2023-03-29T15:23:12.000Z",
      "UpdateDate": "2023-03-29T15:23:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "groundstation:RegisterAgent",
          "groundstation:UpdateAgentStatus",
          "groundstation:GetAgentConfiguration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "VPCLatticeServicesInvokeAccess": {
    "policy": {
      "PolicyName": "VPCLatticeServicesInvokeAccess",
      "PolicyId": "ANPAZKAPJZG4DDCUC4YGR",
      "Arn": "arn:aws:iam::aws:policy/VPCLatticeServicesInvokeAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to invoking Amazon VPC Lattice services.",
      "CreateDate": "2023-03-30T02:45:07.000Z",
      "UpdateDate": "2023-03-30T02:45:07.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "vpc-lattice-svcs:Invoke"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "VPCLatticeReadOnlyAccess": {
    "policy": {
      "PolicyName": "VPCLatticeReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4OJ76SXTUK",
      "Arn": "arn:aws:iam::aws:policy/VPCLatticeReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon VPC Lattice via the AWS Management Console, and limited access to dependency services.",
      "CreateDate": "2023-03-30T02:47:25.000Z",
      "UpdateDate": "2023-03-30T02:47:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "vpc-lattice:Get*",
          "vpc-lattice:List*",
          "acm:DescribeCertificate",
          "acm:ListCertificates",
          "cloudwatch:GetMetricData",
          "ec2:DescribeInstances",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "elasticloadbalancing:DescribeLoadBalancers",
          "firehose:DescribeDeliveryStream",
          "firehose:ListDeliveryStreams",
          "lambda:ListAliases",
          "lambda:ListFunctions",
          "lambda:ListVersionsByFunction",
          "logs:DescribeLogGroups",
          "logs:GetLogDelivery",
          "logs:ListLogDeliveries",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "VPCLatticeFullAccess": {
    "policy": {
      "PolicyName": "VPCLatticeFullAccess",
      "PolicyId": "ANPAZKAPJZG4MMVKZLVVN",
      "Arn": "arn:aws:iam::aws:policy/VPCLatticeFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon VPC Lattice and access to dependency services.",
      "CreateDate": "2023-03-30T02:49:02.000Z",
      "UpdateDate": "2023-03-30T02:49:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "vpc-lattice:*",
          "acm:DescribeCertificate",
          "acm:ListCertificates",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "ec2:DescribeInstances",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "elasticloadbalancing:DescribeLoadBalancers",
          "firehose:DescribeDeliveryStream",
          "firehose:ListDeliveryStreams",
          "logs:DescribeLogGroups",
          "s3:ListAllMyBuckets",
          "lambda:ListAliases",
          "lambda:ListFunctions",
          "lambda:ListVersionsByFunction"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:GetLogDelivery",
          "logs:ListLogDeliveries",
          "logs:UpdateLogDelivery",
          "logs:DescribeResourcePolicies"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/vpc-lattice.amazonaws.com/AWSServiceRoleForVpcLattice"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/delivery.logs.amazonaws.com/AWSServiceRoleForLogDelivery"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:DeleteServiceLinkedRole",
          "iam:GetServiceLinkedRoleDeletionStatus"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/vpc-lattice.amazonaws.com/AWSServiceRoleForVpcLattice"
        ]
      }
    ]
  },
  "AWSMigrationHubRefactorSpaces-EnvironmentsWithoutBridgesFullAccess": {
    "policy": {
      "PolicyName": "AWSMigrationHubRefactorSpaces-EnvironmentsWithoutBridgesFullAccess",
      "PolicyId": "ANPAZKAPJZG4G56CGGW2F",
      "Arn": "arn:aws:iam::aws:policy/AWSMigrationHubRefactorSpaces-EnvironmentsWithoutBridgesFullAccess",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants full access to AWS Migration Hub Refactor Spaces and other AWS related services except AWS Transit Gateway and EC2 security groups not required when using environments without a network bridge. This policy also excludes permissions required for AWS Lambda and AWS Resource Access Manager as they can be scoped down based on tags.",
      "CreateDate": "2023-04-03T20:09:48.000Z",
      "UpdateDate": "2024-04-11T18:16:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "RefactorSpaces",
        "Effect": "Allow",
        "Action": [
          "refactor-spaces:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2Describe",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeVpcs",
          "ec2:DescribeTags",
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeInternetGateways"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VpcEndpointServiceConfigurationCreate",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpointServiceConfiguration"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2TagsDelete",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VpcEndpointServiceConfigurationDelete",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVpcEndpointServiceConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ELBLoadBalancerCreate",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateLoadBalancer"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Sid": "ELBDescribe",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeListeners"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ELBModify",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:CreateLoadBalancerListeners",
          "elasticloadbalancing:CreateListener",
          "elasticloadbalancing:DeleteListener",
          "elasticloadbalancing:DeleteTargetGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ELBLoadBalancerDelete",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteLoadBalancer"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Sid": "ELBListenerCreate",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateListener"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
          "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Sid": "ELBListenerDelete",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteListener"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
        ]
      },
      {
        "Sid": "ELBTargetGroupModify",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteTargetGroup",
          "elasticloadbalancing:RegisterTargets"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        ]
      },
      {
        "Sid": "ELBTargetGroupCreate",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateTargetGroup"
        ],
        "Resource": [
          "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
        ]
      },
      {
        "Sid": "APIGatewayModify",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET",
          "apigateway:DELETE",
          "apigateway:PATCH",
          "apigateway:POST",
          "apigateway:PUT",
          "apigateway:UpdateRestApiPolicy"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/restapis/*",
          "arn:aws:apigateway:*::/vpclinks",
          "arn:aws:apigateway:*::/vpclinks/*",
          "arn:aws:apigateway:*::/tags",
          "arn:aws:apigateway:*::/tags/*"
        ]
      },
      {
        "Sid": "APIGatewayVpcLinksGet",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/vpclinks",
          "arn:aws:apigateway:*::/vpclinks/*"
        ]
      },
      {
        "Sid": "OrganizationDescribe",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudformationStackCreate",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudformationStackTag",
        "Effect": "Allow",
        "Action": [
          "cloudformation:TagResource"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/*"
        ]
      },
      {
        "Sid": "CreateRefactorSpacesSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateELBSLR",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMediaConnectServicePolicy": {
    "policy": {
      "PolicyName": "AWSMediaConnectServicePolicy",
      "PolicyId": "ANPAZKAPJZG4HLQANTOAO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSMediaConnectServicePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The default policy that enables access to AWS Services and Resources used or managed by MediaConnect.",
      "CreateDate": "2023-04-03T22:11:40.000Z",
      "UpdateDate": "2023-04-03T22:11:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ecs:UpdateService",
          "ecs:DeleteService",
          "ecs:CreateService",
          "ecs:DescribeServices",
          "ecs:PutAttributes",
          "ecs:DeleteAttributes",
          "ecs:RunTask",
          "ecs:ListTasks",
          "ecs:StartTask",
          "ecs:StopTask",
          "ecs:DescribeTasks",
          "ecs:DescribeContainerInstances",
          "ecs:UpdateContainerInstancesState"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecs:CreateCluster",
          "ecs:RegisterTaskDefinition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecs:UpdateCluster",
          "ecs:UpdateClusterSettings",
          "ecs:ListAttributes",
          "ecs:DescribeClusters",
          "ecs:DeregisterContainerInstance",
          "ecs:ListContainerInstances"
        ],
        "Resource": [
          "arn:aws:ecs:*:*:cluster/MediaConnectGateway"
        ]
      }
    ]
  },
  "AWSProtonServiceGitSyncServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSProtonServiceGitSyncServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IW3HEEQND",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSProtonServiceGitSyncServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy which allows AWS Proton to sync your service, environment and component definitions from your git repository to AWS Proton.",
      "CreateDate": "2023-04-04T15:55:48.000Z",
      "UpdateDate": "2023-04-04T15:55:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ProtonServiceSync",
        "Effect": "Allow",
        "Action": [
          "proton:GetService",
          "proton:UpdateService",
          "proton:UpdateServicePipeline",
          "proton:GetServiceInstance",
          "proton:CreateServiceInstance",
          "proton:UpdateServiceInstance",
          "proton:ListServiceInstances",
          "proton:GetComponent",
          "proton:CreateComponent",
          "proton:ListComponents",
          "proton:UpdateComponent",
          "proton:GetEnvironment",
          "proton:CreateEnvironment",
          "proton:ListEnvironments",
          "proton:UpdateEnvironment"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceCatalogOrgsDataSyncServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSServiceCatalogOrgsDataSyncServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4DUDGJ66JJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceCatalogOrgsDataSyncServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "A Service Linked Role Policy for AWS ServiceCatalog to sync with AWS Organizations organization structure",
      "CreateDate": "2023-04-10T20:48:28.000Z",
      "UpdateDate": "2023-04-10T20:48:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "OrganizationsDataSyncToServiceCatalog",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListChildren",
          "organizations:ListParents",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerModelRegistryFullAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerModelRegistryFullAccess",
      "PolicyId": "ANPAZKAPJZG4AQTREA5Z7",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerModelRegistryFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This is a new managed policy for Model Registry in Sagemaker. This policy is a standalone policy that can be attached to the user role to access Model Registry related functionalities in Sagemaker.",
      "CreateDate": "2023-04-13T05:20:48.000Z",
      "UpdateDate": "2023-04-13T05:20:48.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:DescribeAction",
          "sagemaker:DescribeInferenceRecommendationsJob",
          "sagemaker:DescribeModelPackage",
          "sagemaker:DescribeModelPackageGroup",
          "sagemaker:DescribePipeline",
          "sagemaker:DescribePipelineExecution",
          "sagemaker:ListAssociations",
          "sagemaker:ListArtifacts",
          "sagemaker:ListModelMetadata",
          "sagemaker:ListModelPackages",
          "sagemaker:Search",
          "sagemaker:GetSearchSuggestions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:AddTags",
          "sagemaker:CreateModel",
          "sagemaker:CreateModelPackage",
          "sagemaker:CreateModelPackageGroup",
          "sagemaker:CreateEndpoint",
          "sagemaker:CreateEndpointConfig",
          "sagemaker:CreateInferenceRecommendationsJob",
          "sagemaker:DeleteModelPackage",
          "sagemaker:DeleteModelPackageGroup",
          "sagemaker:DeleteTags",
          "sagemaker:UpdateModelPackage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ecr:BatchGetImage",
          "ecr:DescribeImages"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:GetGroupQuery"
        ],
        "Resource": [
          "arn:aws:resource-groups:*:*:group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:ListGroupResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:CreateGroup",
          "resource-groups:Tag"
        ],
        "Resource": [
          "arn:aws:resource-groups:*:*:group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:DeleteGroup"
        ],
        "Resource": [
          "arn:aws:resource-groups:*:*:group/*"
        ]
      }
    ]
  },
  "AWSUserNotificationsServiceLinkedRolePolicy": {
    "policy": {
      "PolicyName": "AWSUserNotificationsServiceLinkedRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JMXN6GOLB",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSUserNotificationsServiceLinkedRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS User Notifications to call AWS services on your behalf.",
      "CreateDate": "2023-04-19T13:28:34.000Z",
      "UpdateDate": "2023-04-19T13:28:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:PutRule",
          "events:PutTargets",
          "events:DeleteRule",
          "events:ListTargetsByRule",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AWSUserNotificationsManagedRule-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCodeCatalystReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonCodeCatalystReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4KXREPGB5Y",
      "Arn": "arn:aws:iam::aws:policy/AmazonCodeCatalystReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon CodeCatalyst",
      "CreateDate": "2023-04-20T16:49:12.000Z",
      "UpdateDate": "2023-04-20T16:49:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "codecatalyst:Get*",
          "codecatalyst:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCodeCatalystFullAccess": {
    "policy": {
      "PolicyName": "AmazonCodeCatalystFullAccess",
      "PolicyId": "ANPAZKAPJZG4FI55KUTZE",
      "Arn": "arn:aws:iam::aws:policy/AmazonCodeCatalystFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon CodeCatalyst",
      "CreateDate": "2023-04-20T16:50:16.000Z",
      "UpdateDate": "2023-04-20T16:50:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CodeCatalystResourceAccess",
        "Effect": "Allow",
        "Action": [
          "codecatalyst:*",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CodeCatalystAssociateIAMRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCodeCatalystSupportAccess": {
    "policy": {
      "PolicyName": "AmazonCodeCatalystSupportAccess",
      "PolicyId": "ANPAZKAPJZG4FY6YDFNEJ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonCodeCatalystSupportAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon CodeCatalyst to create, update, and resolve AWS Support cases on your behalf.",
      "CreateDate": "2023-04-20T12:34:44.000Z",
      "UpdateDate": "2023-04-20T12:34:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "support:DescribeAttachment",
          "support:DescribeCaseAttributes",
          "support:DescribeCases",
          "support:DescribeCommunications",
          "support:DescribeIssueTypes",
          "support:DescribeServices",
          "support:DescribeSeverityLevels",
          "support:DescribeSupportLevel",
          "support:SearchForCases",
          "support:AddAttachmentsToSet",
          "support:AddCommunicationToCase",
          "support:CreateCase",
          "support:InitiateCallForCase",
          "support:InitiateChatForCase",
          "support:PutCaseAttributes",
          "support:RateCaseCommunication",
          "support:ResolveCase"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ROSACloudNetworkConfigOperatorPolicy": {
    "policy": {
      "PolicyName": "ROSACloudNetworkConfigOperatorPolicy",
      "PolicyId": "ANPAZKAPJZG4ME3FE6Z2B",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSACloudNetworkConfigOperatorPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the OpenShift Cloud Network Config Controller Operator to provision and manage networking resources for use by the Red Hat OpenShift Service on AWS (ROSA) cluster networking overlay. The OpenShift Cloud Network Operator interfaces with AWS APIs on behalf of the network plugins via CustomResourceDefinitions. The operator uses these policy permissions to manage private IP addresses for Amazon EC2 instances as part of the ROSA cluster.",
      "CreateDate": "2023-04-20T22:34:36.000Z",
      "UpdateDate": "2023-04-20T22:34:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DescribeNetworkResources",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeSubnets",
          "ec2:DescribeNetworkInterfaces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ModifyEIPs",
        "Effect": "Allow",
        "Action": [
          "ec2:UnassignPrivateIpAddresses",
          "ec2:AssignPrivateIpAddresses",
          "ec2:UnassignIpv6Addresses",
          "ec2:AssignIpv6Addresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      }
    ]
  },
  "ROSAWorkerInstancePolicy": {
    "policy": {
      "PolicyName": "ROSAWorkerInstancePolicy",
      "PolicyId": "ANPAZKAPJZG4KL5MKQW7V",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSAWorkerInstancePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Red Hat OpenShift Service on AWS (ROSA) worker nodes in your account read-only access to Amazon EC2 instances and AWS Regions for compute node lifecycle management.",
      "CreateDate": "2023-04-20T22:35:32.000Z",
      "UpdateDate": "2023-04-20T22:35:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "Ec2ReadOnly",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeRegions"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ROSAAmazonEBSCSIDriverOperatorPolicy": {
    "policy": {
      "PolicyName": "ROSAAmazonEBSCSIDriverOperatorPolicy",
      "PolicyId": "ANPAZKAPJZG4F2443B4WJ",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSAAmazonEBSCSIDriverOperatorPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the OpenShift Amazon EBS Container Storage Interface (CSI) Driver Operator to install and maintain the Amazon EBS CSI driver on a Red Hat OpenShift Service on AWS (ROSA) cluster. The Amazon EBS CSI driver allows ROSA clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.",
      "CreateDate": "2023-04-20T22:36:00.000Z",
      "UpdateDate": "2023-04-20T22:36:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeSnapshots",
          "ec2:DescribeTags",
          "ec2:DescribeVolumes",
          "ec2:DescribeVolumesModifications"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AttachVolume",
          "ec2:DetachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume",
          "ec2:ModifyVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "CreateSnapshotResourceTag",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "CreateSnapshotRequestTag",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      }
    ]
  },
  "ROSAIngressOperatorPolicy": {
    "policy": {
      "PolicyName": "ROSAIngressOperatorPolicy",
      "PolicyId": "ANPAZKAPJZG4DPFRRLYGW",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSAIngressOperatorPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the OpenShift Ingress Operator to provision and manage load balancers and domain name system (DNS) configurations for Red Hat OpenShift Service on AWS (ROSA) clusters. The policy allows read access to tag values, which the operator filters for Route 53 resources to discover hosted zones.",
      "CreateDate": "2023-04-20T22:37:08.000Z",
      "UpdateDate": "2023-04-20T22:37:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers",
          "route53:ListHostedZones",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53:ChangeResourceRecordSets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ROSAControlPlaneOperatorPolicy": {
    "policy": {
      "PolicyName": "ROSAControlPlaneOperatorPolicy",
      "PolicyId": "ANPAZKAPJZG4KA4P7YA2C",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSAControlPlaneOperatorPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Red Hat OpenShift Service on AWS (ROSA) control plane to manage ROSA cluster Amazon EC2 and Amazon Route 53 resources.",
      "CreateDate": "2023-04-24T23:02:49.000Z",
      "UpdateDate": "2023-06-30T21:12:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ReadPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcs",
          "ec2:DescribeSecurityGroups",
          "route53:ListHostedZones"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateSecurityGroups",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group*/*"
        ]
      },
      {
        "Sid": "DeleteSecurityGroup",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group*/*"
        ]
      },
      {
        "Sid": "SecurityGroupIngressEgress",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group*/*"
        ]
      },
      {
        "Sid": "CreateSecurityGroupsVPCNoCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "ListResourceRecordSets",
        "Effect": "Allow",
        "Action": [
          "route53:ListResourceRecordSets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ChangeResourceRecordSetsRestrictedRecordNames",
        "Effect": "Allow",
        "Action": [
          "route53:ChangeResourceRecordSets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VPCEndpointWithCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "VPCEndpointResourceTagCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group*/*"
        ]
      },
      {
        "Sid": "VPCEndpointNoCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:route-table/*"
        ]
      },
      {
        "Sid": "ManageVPCEndpointWithCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint",
          "ec2:DeleteVpcEndpoints"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*"
        ]
      },
      {
        "Sid": "ModifyVPCEndpoingNoCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyVpcEndpoint"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*"
        ]
      },
      {
        "Sid": "CreateTagsRestrictedActions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc-endpoint/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      }
    ]
  },
  "AmazonOpenSearchIngestionReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonOpenSearchIngestionReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4G7EWDJ7DQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonOpenSearchIngestionReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to the Amazon OpenSearch Ingestion Service",
      "CreateDate": "2023-04-26T18:09:52.000Z",
      "UpdateDate": "2023-04-26T18:09:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "osis:GetPipeline",
          "osis:GetPipelineChangeProgress",
          "osis:GetPipelineBlueprint",
          "osis:ListPipelineBlueprints",
          "osis:ListPipelines",
          "osis:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonOpenSearchIngestionFullAccess": {
    "policy": {
      "PolicyName": "AmazonOpenSearchIngestionFullAccess",
      "PolicyId": "ANPAZKAPJZG4FXTCSS4ZA",
      "Arn": "arn:aws:iam::aws:policy/AmazonOpenSearchIngestionFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon OpenSearch Ingestion to access other AWS services on your behalf.",
      "CreateDate": "2023-04-26T18:11:38.000Z",
      "UpdateDate": "2023-04-26T18:11:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "osis:CreatePipeline",
          "osis:UpdatePipeline",
          "osis:DeletePipeline",
          "osis:StartPipeline",
          "osis:StopPipeline",
          "osis:ListPipelines",
          "osis:GetPipeline",
          "osis:GetPipelineChangeProgress",
          "osis:ValidatePipeline",
          "osis:GetPipelineBlueprint",
          "osis:ListPipelineBlueprints",
          "osis:TagResource",
          "osis:UntagResource",
          "osis:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/osis.amazonaws.com/AWSServiceRoleForAmazonOpenSearchIngestionService"
        ]
      }
    ]
  },
  "AWSWellArchitectedDiscoveryServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSWellArchitectedDiscoveryServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4DNPNFEZU2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSWellArchitectedDiscoveryServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows WellArchitected to access AWS services and resources that relate to WellArchitected resources on behalf of customers.",
      "CreateDate": "2023-04-26T18:36:40.000Z",
      "UpdateDate": "2023-04-26T18:36:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "trustedadvisor:DescribeChecks",
          "trustedadvisor:DescribeCheckItems"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources",
          "resource-groups:ListGroupResources",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicecatalog:ListAssociatedResources",
          "servicecatalog:GetApplication",
          "servicecatalog:CreateAttributeGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicecatalog:AssociateAttributeGroup",
          "servicecatalog:DisassociateAttributeGroup"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:/applications/*",
          "arn:*:servicecatalog:*:*:/attribute-groups/AWS_WellArchitected-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "servicecatalog:UpdateAttributeGroup",
          "servicecatalog:DeleteAttributeGroup"
        ],
        "Resource": [
          "arn:*:servicecatalog:*:*:/attribute-groups/AWS_WellArchitected-*"
        ]
      }
    ]
  },
  "ROSAKubeControllerPolicy": {
    "policy": {
      "PolicyName": "ROSAKubeControllerPolicy",
      "PolicyId": "ANPAZKAPJZG4JWF64Q542",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSAKubeControllerPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the ROSA Kubernetes controller to manage Amazon EC2, Elastic Load Balancing (ELB), and AWS Key Management Service (KMS) resources for a ROSA cluster.",
      "CreateDate": "2023-04-27T20:09:29.000Z",
      "UpdateDate": "2023-10-16T18:17:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ReadPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInstances",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "elasticloadbalancing:DescribeLoadBalancerPolicies"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSDescribeKey",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LoadBalanacerManagement",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:ConfigureHealthCheck",
          "elasticloadbalancing:CreateLoadBalancerPolicy",
          "elasticloadbalancing:DeleteLoadBalancer",
          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
          "elasticloadbalancing:ModifyLoadBalancerAttributes",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
          "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateTargetGroup",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:CreateTargetGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LoadBalanacerManagementResourceTag",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DeleteListener",
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:ModifyTargetGroup",
          "elasticloadbalancing:DeleteTargetGroup",
          "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
          "elasticloadbalancing:CreateLoadBalancerListeners",
          "elasticloadbalancing:DeleteLoadBalancerListeners",
          "elasticloadbalancing:AttachLoadBalancerToSubnets",
          "elasticloadbalancing:DetachLoadBalancerFromSubnets",
          "elasticloadbalancing:ModifyListener",
          "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateListeners",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:CreateListener"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateSecurityGroup",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "CreateSecurityGroupVpc",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "CreateLoadBalancer",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:CreateLoadBalancer"
        ],
        "Resource": [
          "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
        ]
      },
      {
        "Sid": "ModifySecurityGroup",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "CreateTagsSecurityGroups",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      }
    ]
  },
  "ROSAKMSProviderPolicy": {
    "policy": {
      "PolicyName": "ROSAKMSProviderPolicy",
      "PolicyId": "ANPAZKAPJZG4PLOZJX4SX",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSAKMSProviderPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the built-in ROSA AWS Encryption Provider to manage AWS Key Management Service (KMS) keys to support etcd data encryption using a customer provided AWS KMS key. The policy allows encryption and decryption of data using KMS keys.",
      "CreateDate": "2023-04-27T20:10:20.000Z",
      "UpdateDate": "2023-04-27T20:10:20.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "VolumeEncryption",
        "Effect": "Allow",
        "Action": [
          "kms:Encrypt",
          "kms:Decrypt",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ROSAImageRegistryOperatorPolicy": {
    "policy": {
      "PolicyName": "ROSAImageRegistryOperatorPolicy",
      "PolicyId": "ANPAZKAPJZG4LHLXXTQCY",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSAImageRegistryOperatorPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the OpenShift Image Registry Operator to provision and manage Amazon S3 buckets and objects for use by the Red Hat OpenShift Service on AWS (ROSA) in-cluster image registry to satisfy ROSA storage requirements. The OpenShift Image Registry Operator installs and maintains the internal registry of a Red Hat OpenShift cluster.",
      "CreateDate": "2023-04-27T20:13:18.000Z",
      "UpdateDate": "2023-12-12T19:53:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ListBuckets",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowSpecificBucketActions",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:GetBucketTagging",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetEncryptionConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:GetBucketLocation",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketTagging",
          "s3:PutEncryptionConfiguration",
          "s3:PutLifecycleConfiguration"
        ],
        "Resource": [
          "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}-*",
          "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}"
        ]
      },
      {
        "Sid": "AllowSpecificObjectActions",
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:DeleteObject",
          "s3:GetObject",
          "s3:ListMultipartUploadParts",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}-*/*",
          "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}/*"
        ]
      }
    ]
  },
  "AmazonVPCReachabilityAnalyzerPathComponentReadPolicy": {
    "policy": {
      "PolicyName": "AmazonVPCReachabilityAnalyzerPathComponentReadPolicy",
      "PolicyId": "ANPAZKAPJZG4O34P3U6ZI",
      "Arn": "arn:aws:iam::aws:policy/AmazonVPCReachabilityAnalyzerPathComponentReadPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is attached to the role IAMRoleForReachabilityAnalyzerCrossAccountResourceAccess. This role is deployed to the member accounts in an organization when the management account enables trusted access for Reachability Analyzer. It provides permissions to view resources from across your organization using the Reachability Analyzer console.",
      "CreateDate": "2023-05-01T20:38:22.000Z",
      "UpdateDate": "2023-05-01T20:38:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "NetworkFirewallPermissions",
        "Effect": "Allow",
        "Action": [
          "network-firewall:Describe*",
          "network-firewall:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "KeyspacesReplicationServiceRolePolicy": {
    "policy": {
      "PolicyName": "KeyspacesReplicationServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4C2B6EEBHZ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/KeyspacesReplicationServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Permissions required by Keyspaces for cross-region data replication",
      "CreateDate": "2023-05-02T16:15:49.000Z",
      "UpdateDate": "2023-05-02T16:15:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cassandra:Select",
          "cassandra:SelectMultiRegionResource",
          "cassandra:Modify",
          "cassandra:ModifyMultiRegionResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCodeGuruSecurityScanAccess": {
    "policy": {
      "PolicyName": "AmazonCodeGuruSecurityScanAccess",
      "PolicyId": "ANPAZKAPJZG4G2E4D2F5H",
      "Arn": "arn:aws:iam::aws:policy/AmazonCodeGuruSecurityScanAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access required for working with Amazon CodeGuru Security scans.",
      "CreateDate": "2023-05-09T20:54:32.000Z",
      "UpdateDate": "2023-05-09T20:54:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonCodeGuruSecurityScanAccess",
        "Effect": "Allow",
        "Action": [
          "codeguru-security:CreateScan",
          "codeguru-security:CreateUploadUrl",
          "codeguru-security:GetScan",
          "codeguru-security:GetFindings"
        ],
        "Resource": [
          "arn:aws:codeguru-security:*:*:scans/*"
        ]
      }
    ]
  },
  "AmazonCodeGuruSecurityFullAccess": {
    "policy": {
      "PolicyName": "AmazonCodeGuruSecurityFullAccess",
      "PolicyId": "ANPAZKAPJZG4JMRCCPHY3",
      "Arn": "arn:aws:iam::aws:policy/AmazonCodeGuruSecurityFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon CodeGuru Security.",
      "CreateDate": "2023-05-09T21:03:38.000Z",
      "UpdateDate": "2023-05-09T21:03:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonCodeGuruSecurityFullAccess",
        "Effect": "Allow",
        "Action": [
          "codeguru-security:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSFinSpaceServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSFinSpaceServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IR7HT6LL4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSFinSpaceServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy to enable access to AWS Service and Resources used or managed by Amazon FinSpace",
      "CreateDate": "2023-05-12T16:42:03.000Z",
      "UpdateDate": "2023-12-01T21:05:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSFinSpaceServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryCrossAccountReplicationPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryCrossAccountReplicationPolicy",
      "PolicyId": "ANPAZKAPJZG4JUELD5VO3",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryCrossAccountReplicationPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows AWS Elastic Disaster Recovery (DRS) to support cross-account replication and cross-account failback.",
      "CreateDate": "2023-05-14T07:16:47.000Z",
      "UpdateDate": "2024-01-17T13:19:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CrossAccountPolicy1",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVolumes",
          "ec2:DescribeVolumeAttribute",
          "ec2:DescribeInstances",
          "drs:DescribeSourceServers",
          "drs:DescribeReplicationConfigurationTemplates",
          "drs:CreateSourceServerForDrs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CrossAccountPolicy2",
        "Effect": "Allow",
        "Action": [
          "drs:TagResource"
        ],
        "Resource": [
          "arn:aws:drs:*:*:source-server/*"
        ]
      }
    ]
  },
  "AWSDMSServerlessServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSDMSServerlessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4AIKMNBTIJ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSDMSServerlessServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants AWS DMS Serverless permissions to create and manage DMS resources in your account on your behalf",
      "CreateDate": "2023-05-18T20:28:05.000Z",
      "UpdateDate": "2023-05-18T20:28:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "id0",
        "Effect": "Allow",
        "Action": [
          "dms:CreateReplicationInstance",
          "dms:CreateReplicationTask"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "id1",
        "Effect": "Allow",
        "Action": [
          "dms:DescribeReplicationInstances",
          "dms:DescribeReplicationTasks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "id2",
        "Effect": "Allow",
        "Action": [
          "dms:StartReplicationTask",
          "dms:StopReplicationTask",
          "dms:DeleteReplicationTask",
          "dms:DeleteReplicationInstance"
        ],
        "Resource": [
          "arn:aws:dms:*:*:rep:*",
          "arn:aws:dms:*:*:task:*"
        ]
      },
      {
        "Sid": "id3",
        "Effect": "Allow",
        "Action": [
          "dms:TestConnection",
          "dms:DeleteConnection"
        ],
        "Resource": [
          "arn:aws:dms:*:*:rep:*",
          "arn:aws:dms:*:*:endpoint:*"
        ]
      }
    ]
  },
  "AmazonSecurityLakeAdministrator": {
    "policy": {
      "PolicyName": "AmazonSecurityLakeAdministrator",
      "PolicyId": "ANPAZKAPJZG4CVEHEFUO4",
      "Arn": "arn:aws:iam::aws:policy/AmazonSecurityLakeAdministrator",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Security Lake and related services needed to administer Security Lake.",
      "CreateDate": "2023-05-30T22:04:10.000Z",
      "UpdateDate": "2024-02-23T16:01:57.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowActionsWithAnyResource",
        "Effect": "Allow",
        "Action": [
          "securitylake:*",
          "organizations:DescribeOrganization",
          "organizations:ListDelegatedServicesForAccount",
          "organizations:ListAccounts",
          "iam:ListRoles",
          "ram:GetResourceShareAssociations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowActionsWithAnyResourceViaSecurityLake",
        "Effect": "Allow",
        "Action": [
          "glue:CreateCrawler",
          "glue:StopCrawlerSchedule",
          "lambda:CreateEventSourceMapping",
          "lakeformation:GrantPermissions",
          "lakeformation:ListPermissions",
          "lakeformation:RegisterResource",
          "lakeformation:RevokePermissions",
          "lakeformation:GetDatalakeSettings",
          "events:ListConnections",
          "events:ListApiDestinations",
          "iam:GetRole",
          "iam:ListAttachedRolePolicies",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowManagingSecurityLakeS3Buckets",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:PutBucketPolicy",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketNotification",
          "s3:PutBucketTagging",
          "s3:PutEncryptionConfiguration",
          "s3:PutBucketVersioning",
          "s3:PutReplicationConfiguration",
          "s3:PutLifecycleConfiguration",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:GetBucketNotification"
        ],
        "Resource": [
          "arn:aws:s3:::aws-security-data-lake*"
        ]
      },
      {
        "Sid": "AllowLambdaCreateFunction",
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:SecurityLake_Glue_Partition_Updater_Lambda*",
          "arn:aws:lambda:*:*:function:AmazonSecurityLake*"
        ]
      },
      {
        "Sid": "AllowLambdaAddPermission",
        "Effect": "Allow",
        "Action": [
          "lambda:AddPermission"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:SecurityLake_Glue_Partition_Updater_Lambda*",
          "arn:aws:lambda:*:*:function:AmazonSecurityLake*"
        ]
      },
      {
        "Sid": "AllowGlueActions",
        "Effect": "Allow",
        "Action": [
          "glue:CreateDatabase",
          "glue:GetDatabase",
          "glue:CreateTable",
          "glue:GetTable"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/amazon_security_lake_glue_db*",
          "arn:aws:glue:*:*:table/amazon_security_lake_glue_db*/*"
        ]
      },
      {
        "Sid": "AllowEventBridgeActions",
        "Effect": "Allow",
        "Action": [
          "events:PutTargets",
          "events:PutRule",
          "events:DescribeRule",
          "events:CreateApiDestination",
          "events:CreateConnection",
          "events:UpdateConnection",
          "events:UpdateApiDestination",
          "events:DeleteConnection",
          "events:DeleteApiDestination",
          "events:ListTargetsByRule",
          "events:RemoveTargets",
          "events:DeleteRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/AmazonSecurityLake*",
          "arn:aws:events:*:*:rule/SecurityLake*",
          "arn:aws:events:*:*:api-destination/AmazonSecurityLake*",
          "arn:aws:events:*:*:connection/AmazonSecurityLake*"
        ]
      },
      {
        "Sid": "AllowSQSActions",
        "Effect": "Allow",
        "Action": [
          "sqs:CreateQueue",
          "sqs:SetQueueAttributes",
          "sqs:GetQueueURL",
          "sqs:AddPermission",
          "sqs:GetQueueAttributes",
          "sqs:DeleteQueue"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:SecurityLake*",
          "arn:aws:sqs:*:*:AmazonSecurityLake*"
        ]
      },
      {
        "Sid": "AllowKmsCmkGrantForSecurityLake",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "AllowEnablingQueryBasedSubscribers",
        "Effect": "Allow",
        "Action": [
          "ram:CreateResourceShare",
          "ram:AssociateResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowConfiguringQueryBasedSubscribers",
        "Effect": "Allow",
        "Action": [
          "ram:UpdateResourceShare",
          "ram:GetResourceShares",
          "ram:DisassociateResourceShare",
          "ram:DeleteResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowConfiguringCredentialsForSubscriberNotification",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:PutSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:events!connection/AmazonSecurityLake-*"
        ]
      },
      {
        "Sid": "AllowPassRoleForUpdatingGluePartitionsSecLakeArn",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManager",
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManagerV2"
        ]
      },
      {
        "Sid": "AllowPassRoleForUpdatingGluePartitionsLambdaArn",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManager",
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManagerV2"
        ]
      },
      {
        "Sid": "AllowPassRoleForCrossRegionReplicationSecLakeArn",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeS3ReplicationRole"
        ]
      },
      {
        "Sid": "AllowPassRoleForCrossRegionReplicationS3Arn",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeS3ReplicationRole"
        ]
      },
      {
        "Sid": "AllowPassRoleForCustomSourceCrawlerSecLakeArn",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeCustomDataGlueCrawler*"
        ]
      },
      {
        "Sid": "AllowPassRoleForCustomSourceCrawlerGlueArn",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeCustomDataGlueCrawler*"
        ]
      },
      {
        "Sid": "AllowPassRoleForSubscriberNotificationSecLakeArn",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeSubscriberEventBridge"
        ]
      },
      {
        "Sid": "AllowPassRoleForSubscriberNotificationEventsArn",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSecurityLakeSubscriberEventBridge"
        ]
      },
      {
        "Sid": "AllowOnboardingToSecurityLakeDependencies",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/securitylake.amazonaws.com/AWSServiceRoleForSecurityLake",
          "arn:aws:iam::*:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess",
          "arn:aws:iam::*:role/aws-service-role/apidestinations.events.amazonaws.com/AWSServiceRoleForAmazonEventBridgeApiDestinations"
        ]
      },
      {
        "Sid": "AllowRolePolicyActionsforSubscibersandSources",
        "Effect": "Allow",
        "Action": [
          "iam:CreateRole",
          "iam:PutRolePolicy",
          "iam:DeleteRolePolicy"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AmazonSecurityLake*"
        ]
      },
      {
        "Sid": "AllowRegisterS3LocationInLakeFormation",
        "Effect": "Allow",
        "Action": [
          "iam:PutRolePolicy",
          "iam:GetRolePolicy"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess"
        ]
      },
      {
        "Sid": "AllowIAMActionsByResource",
        "Effect": "Allow",
        "Action": [
          "iam:ListRolePolicies",
          "iam:DeleteRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AmazonSecurityLake*"
        ]
      },
      {
        "Sid": "S3ReadAccessToSecurityLakes",
        "Effect": "Allow",
        "Action": [
          "s3:Get*",
          "s3:List*"
        ],
        "Resource": [
          "arn:aws:s3:::aws-security-data-lake-*"
        ]
      },
      {
        "Sid": "S3ReadAccessToSecurityLakeMetastoreObject",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource": [
          "arn:aws:s3:::security-lake-meta-store-manager-*"
        ]
      },
      {
        "Sid": "S3ResourcelessReadOnly",
        "Effect": "Allow",
        "Action": [
          "s3:GetAccountPublicAccessBlock",
          "s3:ListAccessPoints",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ROSASRESupportPolicy": {
    "policy": {
      "PolicyName": "ROSASRESupportPolicy",
      "PolicyId": "ANPAZKAPJZG4J4WC2J4K2",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSASRESupportPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides ROSA site reliability engineering (SRE) the permissions needed to initially observe, diagnose, and support AWS resources associated with Red Hat OpenShift Service on AWS (ROSA) clusters, including the ability to change ROSA cluster node state.",
      "CreateDate": "2023-06-01T14:36:06.000Z",
      "UpdateDate": "2024-04-10T20:51:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ReadPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeRegions",
          "sts:DecodeAuthorizationMessage"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Route53",
        "Effect": "Allow",
        "Action": [
          "route53:GetHostedZone",
          "route53:GetHostedZoneCount",
          "route53:ListHostedZones",
          "route53:ListHostedZonesByName",
          "route53:ListResourceRecordSets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DecribeIAMRoles",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EC2DescribeInstance",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeIamInstanceProfileAssociations",
          "ec2:DescribeReservedInstances",
          "ec2:DescribeScheduledInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "VPCNetwork",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSubnets",
          "ec2:DescribeRouteTables"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Cloudtrail",
        "Effect": "Allow",
        "Action": [
          "cloudtrail:DescribeTrails",
          "cloudtrail:LookupEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Cloudwatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeVolumes",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVolumes",
          "ec2:DescribeVolumesModifications",
          "ec2:DescribeVolumeStatus"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeLoadBalancers",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeAccountLimits",
          "elasticloadbalancing:DescribeInstanceHealth",
          "elasticloadbalancing:DescribeListenerCertificates",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancerPolicies",
          "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeSSLPolicies",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetGroupAttributes",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeVPC",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcEndpointConnections",
          "ec2:DescribeVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeSecurityGroups",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSecurityGroupReferences",
          "ec2:DescribeSecurityGroupRules",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeStaleSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeAddressesAttribute",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAddressesAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:elastic-ip/*"
        ]
      },
      {
        "Sid": "DescribeInstance",
        "Effect": "Allow",
        "Action": [
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/*"
        ]
      },
      {
        "Sid": "DescribeSpotFleetInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSpotFleetInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:spot-fleet-request/*"
        ]
      },
      {
        "Sid": "DescribeVolumeAttribute",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVolumeAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ManageInstanceLifecycle",
        "Effect": "Allow",
        "Action": [
          "ec2:RebootInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AmazonDocDBElasticFullAccess": {
    "policy": {
      "PolicyName": "AmazonDocDBElasticFullAccess",
      "PolicyId": "ANPAZKAPJZG4PPVFACKZC",
      "Arn": "arn:aws:iam::aws:policy/AmazonDocDBElasticFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon DocumentDB Elastic Clusters and other required permissions for its dependencies including EC2, KMS, SecretsManager, CloudWatch and IAM.",
      "CreateDate": "2023-06-05T13:51:04.000Z",
      "UpdateDate": "2023-06-21T18:05:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "docdb-elastic:CreateCluster",
          "docdb-elastic:UpdateCluster",
          "docdb-elastic:GetCluster",
          "docdb-elastic:DeleteCluster",
          "docdb-elastic:ListClusters",
          "docdb-elastic:CreateClusterSnapshot",
          "docdb-elastic:GetClusterSnapshot",
          "docdb-elastic:DeleteClusterSnapshot",
          "docdb-elastic:ListClusterSnapshots",
          "docdb-elastic:RestoreClusterFromSnapshot",
          "docdb-elastic:TagResource",
          "docdb-elastic:UntagResource",
          "docdb-elastic:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVpcEndpoint",
          "ec2:DescribeVpcEndpoints",
          "ec2:DeleteVpcEndpoints",
          "ec2:ModifyVpcEndpoint",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeAvailabilityZones",
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt",
          "kms:DescribeKey",
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:ListSecretVersionIds",
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:GetResourcePolicy"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricStatistics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/docdb-elastic.amazonaws.com/AWSServiceRoleForDocDB-Elastic"
        ]
      }
    ]
  },
  "AWSControlTowerAccountServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSControlTowerAccountServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4ITRUSWZXG",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSControlTowerAccountServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Control Tower to call AWS services that provide automated account configuration and centralized governance on your behalf.",
      "CreateDate": "2023-06-05T22:04:50.000Z",
      "UpdateDate": "2023-06-05T22:04:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowPutRuleOnSpecificSourcesAndDetailTypes",
        "Effect": "Allow",
        "Action": [
          "events:PutRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/*ControlTower*"
        ]
      },
      {
        "Sid": "AllowOtherOperationsOnRulesManagedByControlTower",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:EnableRule",
          "events:DisableRule",
          "events:PutTargets",
          "events:RemoveTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/*ControlTower*"
        ]
      },
      {
        "Sid": "AllowDescribeOperationsOnRulesManagedByControlTower",
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:ListTargetsByRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/*ControlTower*"
        ]
      },
      {
        "Sid": "AllowControlTowerToPublishSecurityNotifications",
        "Effect": "Allow",
        "Action": [
          "sns:publish"
        ],
        "Resource": [
          "arn:aws:sns:*:*:aws-controltower-AggregateSecurityNotifications"
        ]
      },
      {
        "Sid": "AllowActionsForSecurityHubIntegration",
        "Effect": "Allow",
        "Action": [
          "securityhub:DescribeStandardsControls",
          "securityhub:GetEnabledStandards"
        ],
        "Resource": [
          "arn:aws:securityhub:*:*:hub/default"
        ]
      }
    ]
  },
  "ROSAInstallerPolicy": {
    "policy": {
      "PolicyName": "ROSAInstallerPolicy",
      "PolicyId": "ANPAZKAPJZG4GYZ6SLEWE",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSAInstallerPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows the Red Hat OpenShift Service on AWS (ROSA) installer to manage AWS resources that support ROSA cluster installation. This includes managing instance profiles for ROSA worker nodes.",
      "CreateDate": "2023-06-06T21:00:31.000Z",
      "UpdateDate": "2024-04-10T20:52:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ReadPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeRegions",
          "ec2:DescribeReservedInstancesOfferings",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSecurityGroupRules",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeVpcs",
          "ec2:DescribeInstanceTypeOfferings",
          "elasticloadbalancing:DescribeAccountLimits",
          "elasticloadbalancing:DescribeLoadBalancers",
          "iam:GetOpenIDConnectProvider",
          "iam:GetRole",
          "route53:GetHostedZone",
          "route53:ListHostedZones",
          "route53:ListHostedZonesByName",
          "route53:ListResourceRecordSets",
          "route53:GetAccountLimit",
          "servicequotas:GetServiceQuota"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PassRoleToEC2",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:*:iam::*:role/*-ROSA-Worker-Role"
        ]
      },
      {
        "Sid": "ManageInstanceProfiles",
        "Effect": "Allow",
        "Action": [
          "iam:AddRoleToInstanceProfile",
          "iam:RemoveRoleFromInstanceProfile",
          "iam:DeleteInstanceProfile",
          "iam:GetInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/rosa-service-managed-*"
        ]
      },
      {
        "Sid": "CreateInstanceProfiles",
        "Effect": "Allow",
        "Action": [
          "iam:CreateInstanceProfile",
          "iam:TagInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:instance-profile/rosa-service-managed-*"
        ]
      },
      {
        "Sid": "GetSecretValue",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Route53ManageRecords",
        "Effect": "Allow",
        "Action": [
          "route53:ChangeResourceRecordSets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Route53Manage",
        "Effect": "Allow",
        "Action": [
          "route53:ChangeTagsForResource",
          "route53:CreateHostedZone",
          "route53:DeleteHostedZone"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "RunInstancesNoCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "RunInstancesRestrictedRequestTag",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "RunInstancesRedHatOwnedAMIs",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:image/*"
        ]
      },
      {
        "Sid": "ManageInstancesRestrictedResourceTag",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances",
          "ec2:GetConsoleOutput"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "CreateGrantRestrictedResourceTag",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagedKMSRestrictedResourceTag",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:GenerateDataKeyWithoutPlaintext"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateSecurityGroups",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group*/*"
        ]
      },
      {
        "Sid": "DeleteSecurityGroup",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group*/*"
        ]
      },
      {
        "Sid": "SecurityGroupIngressEgress",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group*/*"
        ]
      },
      {
        "Sid": "CreateSecurityGroupsVPCNoCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "CreateTagsRestrictedActions",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "ListPoliciesAttachedToRoles",
        "Effect": "Allow",
        "Action": [
          "iam:ListAttachedRolePolicies",
          "iam:ListRolePolicies"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      }
    ]
  },
  "AmazonDocDBElasticReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonDocDBElasticReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4BFOPZUFVK",
      "Arn": "arn:aws:iam::aws:policy/AmazonDocDBElasticReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to Amazon DocDB-Elastic and CloudWatch metrics.",
      "CreateDate": "2023-06-08T14:37:37.000Z",
      "UpdateDate": "2023-06-21T16:57:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "docdb-elastic:ListClusters",
          "docdb-elastic:GetCluster",
          "docdb-elastic:ListClusterSnapshots",
          "docdb-elastic:GetClusterSnapshot",
          "docdb-elastic:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "ROSANodePoolManagementPolicy": {
    "policy": {
      "PolicyName": "ROSANodePoolManagementPolicy",
      "PolicyId": "ANPAZKAPJZG4AXLMC5W7P",
      "Arn": "arn:aws:iam::aws:policy/service-role/ROSANodePoolManagementPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Red Hat OpenShift Service on AWS (ROSA) to manage cluster EC2 instances as worker nodes, including permission to configure security groups and tag instances and volumes. This policy also allows for the use of EC2 instances with disk encryption provided by AWS Key Management Service (KMS) keys.",
      "CreateDate": "2023-06-08T20:48:08.000Z",
      "UpdateDate": "2023-06-08T20:48:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ReadPermissions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:*:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing"
        ]
      },
      {
        "Sid": "PassWorkerRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:*:iam::*:role/*-ROSA-Worker-Role"
        ]
      },
      {
        "Sid": "AuthorizeSecurityGroupIngressRestrictedResourceTag",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupIngress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:security-group-rule/*"
        ]
      },
      {
        "Sid": "NetworkInterfaces",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "NetworkInterfacesNoCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "TerminateInstances",
        "Effect": "Allow",
        "Action": [
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "CreateTags",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "CreateTagsCAPAControllerReconcileInstance",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "CreateTagsCAPAControllerReconcileVolume",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "RunInstancesRequest",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "RunInstancesNoCondition",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "RunInstancesRedHatAMI",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:image/*"
        ]
      },
      {
        "Sid": "ManagedKMSRestrictedResourceTag",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:GenerateDataKeyWithoutPlaintext"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateGrantRestricted",
        "Effect": "Allow",
        "Action": [
          "kms:CreateGrant"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryNetworkReplicationPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryNetworkReplicationPolicy",
      "PolicyId": "ANPAZKAPJZG4OACCBBQLR",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSElasticDisasterRecoveryNetworkReplicationPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows AWS Elastic Disaster Recovery (DRS) to support network replication.",
      "CreateDate": "2023-06-11T12:36:48.000Z",
      "UpdateDate": "2024-01-02T13:25:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DRSNetworkReplicationPolicy1",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeRouteTables",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeInstances",
          "ec2:DescribeManagedPrefixLists",
          "ec2:GetManagedPrefixListEntries",
          "ec2:GetManagedPrefixListAssociations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonVPCReachabilityAnalyzerFullAccessPolicy": {
    "policy": {
      "PolicyName": "AmazonVPCReachabilityAnalyzerFullAccessPolicy",
      "PolicyId": "ANPAZKAPJZG4LYY3MKOH7",
      "Arn": "arn:aws:iam::aws:policy/AmazonVPCReachabilityAnalyzerFullAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions to describe AWS resources, run Reachability Analyzer, and create or delete tags on Network Insights Path and Network Insights Analysis.",
      "CreateDate": "2023-06-14T20:12:17.000Z",
      "UpdateDate": "2023-11-03T19:37:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "directconnect:DescribeConnections",
          "directconnect:DescribeDirectConnectGatewayAssociations",
          "directconnect:DescribeDirectConnectGatewayAttachments",
          "directconnect:DescribeDirectConnectGateways",
          "directconnect:DescribeVirtualGateways",
          "directconnect:DescribeVirtualInterfaces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInsightsPath",
          "ec2:DeleteNetworkInsightsAnalysis",
          "ec2:DeleteNetworkInsightsPath",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeManagedPrefixLists",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInsightsAnalyses",
          "ec2:DescribeNetworkInsightsPaths",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRegions",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeTransitGatewayAttachments",
          "ec2:DescribeTransitGatewayConnects",
          "ec2:DescribeTransitGatewayPeeringAttachments",
          "ec2:DescribeTransitGatewayRouteTables",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:GetManagedPrefixListEntries",
          "ec2:GetTransitGatewayRouteTablePropagations",
          "ec2:SearchTransitGatewayRoutes",
          "ec2:StartNetworkInsightsAnalysis"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:*:ec2:*:*:network-insights-path/*",
          "arn:*:ec2:*:*:network-insights-analysis/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "globalaccelerator:ListAccelerators",
          "globalaccelerator:ListCustomRoutingAccelerators",
          "globalaccelerator:ListCustomRoutingEndpointGroups",
          "globalaccelerator:ListCustomRoutingListeners",
          "globalaccelerator:ListCustomRoutingPortMappings",
          "globalaccelerator:ListEndpointGroups",
          "globalaccelerator:ListListeners"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "network-firewall:DescribeFirewall",
          "network-firewall:DescribeFirewallPolicy",
          "network-firewall:DescribeResourcePolicy",
          "network-firewall:DescribeRuleGroup",
          "network-firewall:ListFirewallPolicies",
          "network-firewall:ListFirewalls",
          "network-firewall:ListRuleGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tiros:CreateQuery",
          "tiros:ExtendQuery",
          "tiros:GetQueryAnswer",
          "tiros:GetQueryExplanation",
          "tiros:GetQueryExtensionAccounts"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonMacieReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonMacieReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4LFS3EG5MP",
      "Arn": "arn:aws:iam::aws:policy/AmazonMacieReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides readonly access to Amazon Macie.",
      "CreateDate": "2023-06-15T21:50:06.000Z",
      "UpdateDate": "2023-06-15T21:50:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "macie2:Describe*",
          "macie2:Get*",
          "macie2:List*",
          "macie2:BatchGetCustomDataIdentifiers",
          "macie2:SearchResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonVPCNetworkAccessAnalyzerFullAccessPolicy": {
    "policy": {
      "PolicyName": "AmazonVPCNetworkAccessAnalyzerFullAccessPolicy",
      "PolicyId": "ANPAZKAPJZG4GPQSVZ56B",
      "Arn": "arn:aws:iam::aws:policy/AmazonVPCNetworkAccessAnalyzerFullAccessPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions to describe AWS resources, run Network Access Analyzer, and create or delete tags on Network Insights Access Scope and Network Insights Access Scope Analysis.",
      "CreateDate": "2023-06-15T22:56:58.000Z",
      "UpdateDate": "2023-11-03T19:31:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "directconnect:DescribeConnections",
          "directconnect:DescribeDirectConnectGatewayAssociations",
          "directconnect:DescribeDirectConnectGatewayAttachments",
          "directconnect:DescribeDirectConnectGateways",
          "directconnect:DescribeVirtualGateways",
          "directconnect:DescribeVirtualInterfaces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInsightsAccessScope",
          "ec2:DeleteNetworkInsightsAccessScope",
          "ec2:DeleteNetworkInsightsAccessScopeAnalysis",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeCustomerGateways",
          "ec2:DescribeInstances",
          "ec2:DescribeInternetGateways",
          "ec2:DescribeManagedPrefixLists",
          "ec2:DescribeNatGateways",
          "ec2:DescribeNetworkAcls",
          "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
          "ec2:DescribeNetworkInsightsAccessScopes",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribePrefixLists",
          "ec2:DescribeRegions",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeTransitGatewayAttachments",
          "ec2:DescribeTransitGatewayConnects",
          "ec2:DescribeTransitGatewayPeeringAttachments",
          "ec2:DescribeTransitGatewayRouteTables",
          "ec2:DescribeTransitGateways",
          "ec2:DescribeTransitGatewayVpcAttachments",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcEndpointServiceConfigurations",
          "ec2:DescribeVpcPeeringConnections",
          "ec2:DescribeVpcs",
          "ec2:DescribeVpnConnections",
          "ec2:DescribeVpnGateways",
          "ec2:GetManagedPrefixListEntries",
          "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
          "ec2:GetNetworkInsightsAccessScopeContent",
          "ec2:GetTransitGatewayRouteTablePropagations",
          "ec2:SearchTransitGatewayRoutes",
          "ec2:StartNetworkInsightsAccessScopeAnalysis"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:*:ec2:*:*:network-insights-access-scope/*",
          "arn:*:ec2:*:*:network-insights-access-scope-analysis/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTags",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "globalaccelerator:ListAccelerators",
          "globalaccelerator:ListCustomRoutingAccelerators",
          "globalaccelerator:ListCustomRoutingEndpointGroups",
          "globalaccelerator:ListCustomRoutingListeners",
          "globalaccelerator:ListCustomRoutingPortMappings",
          "globalaccelerator:ListEndpointGroups",
          "globalaccelerator:ListListeners"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "network-firewall:DescribeFirewall",
          "network-firewall:DescribeFirewallPolicy",
          "network-firewall:DescribeResourcePolicy",
          "network-firewall:DescribeRuleGroup",
          "network-firewall:ListFirewallPolicies",
          "network-firewall:ListFirewalls",
          "network-firewall:ListRuleGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "resource-groups:ListGroupResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "tiros:CreateQuery",
          "tiros:GetQueryAnswer"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "EMRDescribeClusterPolicyForEMRWAL": {
    "policy": {
      "PolicyName": "EMRDescribeClusterPolicyForEMRWAL",
      "PolicyId": "ANPAZKAPJZG4DZHFVARMW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/EMRDescribeClusterPolicyForEMRWAL",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants read-only permissions that allow the WAL service for Amazon EMR to find and return the status of a cluster",
      "CreateDate": "2023-06-15T23:30:22.000Z",
      "UpdateDate": "2023-06-15T23:30:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticmapreduce:DescribeCluster"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSResilienceHubAsssessmentExecutionPolicy": {
    "policy": {
      "PolicyName": "AWSResilienceHubAsssessmentExecutionPolicy",
      "PolicyId": "ANPAZKAPJZG4AAR6UQTAK",
      "Arn": "arn:aws:iam::aws:policy/AWSResilienceHubAsssessmentExecutionPolicy",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for AWS Resilience Hub service role which allows access to other AWS services in order to execute assessment.",
      "CreateDate": "2023-06-27T12:32:15.000Z",
      "UpdateDate": "2024-03-24T18:05:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSResilienceHubFullResourceStatement",
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DescribeScalableTargets",
          "autoscaling:DescribeAutoScalingGroups",
          "backup:DescribeBackupVault",
          "backup:GetBackupPlan",
          "backup:GetBackupSelection",
          "backup:ListBackupPlans",
          "backup:ListBackupSelections",
          "cloudformation:DescribeStacks",
          "cloudformation:ListStackResources",
          "cloudformation:ValidateTemplate",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "datasync:DescribeTask",
          "datasync:ListLocations",
          "datasync:ListTasks",
          "devops-guru:ListMonitoredResources",
          "dlm:GetLifecyclePolicies",
          "dlm:GetLifecyclePolicy",
          "drs:DescribeJobs",
          "drs:DescribeSourceServers",
          "drs:GetReplicationConfiguration",
          "ds:DescribeDirectories",
          "dynamodb:DescribeContinuousBackups",
          "dynamodb:DescribeGlobalTable",
          "dynamodb:DescribeLimits",
          "dynamodb:DescribeTable",
          "dynamodb:ListGlobalTables",
          "dynamodb:ListTagsOfResource",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeFastSnapshotRestores",
          "ec2:DescribeFleets",
          "ec2:DescribeHosts",
          "ec2:DescribeInstances",
          "ec2:DescribeNatGateways",
          "ec2:DescribePlacementGroups",
          "ec2:DescribeRegions",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVolumes",
          "ec2:DescribeVpcEndpoints",
          "ecr:DescribeRegistry",
          "ecs:DescribeCapacityProviders",
          "ecs:DescribeClusters",
          "ecs:DescribeContainerInstances",
          "ecs:DescribeServices",
          "ecs:DescribeTaskDefinition",
          "ecs:ListContainerInstances",
          "ecs:ListServices",
          "eks:DescribeCluster",
          "eks:DescribeFargateProfile",
          "eks:DescribeNodegroup",
          "eks:ListFargateProfiles",
          "eks:ListNodegroups",
          "elasticache:DescribeCacheClusters",
          "elasticache:DescribeGlobalReplicationGroups",
          "elasticache:DescribeReplicationGroups",
          "elasticache:DescribeSnapshots",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeLifecycleConfiguration",
          "elasticfilesystem:DescribeMountTargets",
          "elasticfilesystem:DescribeReplicationConfigurations",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeTargetGroups",
          "elasticloadbalancing:DescribeTargetHealth",
          "fis:GetExperimentTemplate",
          "fis:ListExperimentTemplates",
          "fis:ListExperiments",
          "fsx:DescribeFileSystems",
          "lambda:GetFunctionConcurrency",
          "lambda:GetFunctionConfiguration",
          "lambda:ListAliases",
          "lambda:ListVersionsByFunction",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBClusters",
          "rds:DescribeDBInstanceAutomatedBackups",
          "rds:DescribeDBInstances",
          "rds:DescribeDBProxies",
          "rds:DescribeDBProxyTargets",
          "rds:DescribeDBSnapshots",
          "rds:DescribeGlobalClusters",
          "resource-groups:GetGroup",
          "resource-groups:ListGroupResources",
          "route53-recovery-control-config:ListClusters",
          "route53-recovery-control-config:ListControlPanels",
          "route53-recovery-control-config:ListRoutingControls",
          "route53-recovery-readiness:GetReadinessCheckStatus",
          "route53-recovery-readiness:GetResourceSet",
          "route53-recovery-readiness:ListReadinessChecks",
          "route53:GetHealthCheck",
          "route53:ListHealthChecks",
          "route53:ListHostedZones",
          "route53:ListResourceRecordSets",
          "route53resolver:ListResolverEndpoints",
          "route53resolver:ListResolverEndpointIpAddresses",
          "s3:GetBucketLocation",
          "s3:GetBucketLogging",
          "s3:GetBucketObjectLockConfiguration",
          "s3:GetBucketPolicyStatus",
          "s3:GetBucketTagging",
          "s3:GetBucketVersioning",
          "s3:GetMultiRegionAccessPointRoutes",
          "s3:GetReplicationConfiguration",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:ListMultiRegionAccessPoints",
          "servicecatalog:GetApplication",
          "servicecatalog:ListAssociatedResources",
          "sns:GetSubscriptionAttributes",
          "sns:GetTopicAttributes",
          "sns:ListSubscriptionsByTopic",
          "sqs:GetQueueAttributes",
          "sqs:GetQueueUrl",
          "ssm:DescribeAutomationExecutions",
          "states:DescribeStateMachine",
          "states:ListStateMachineVersions",
          "states:ListStateMachineAliases",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSResilienceHubApiGatewayStatement",
        "Effect": "Allow",
        "Action": [
          "apigateway:GET"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/apis/*",
          "arn:aws:apigateway:*::/restapis/*",
          "arn:aws:apigateway:*::/usageplans"
        ]
      },
      {
        "Sid": "AWSResilienceHubS3Statement",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:PutObject",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-resilience-hub-artifacts-*"
        ]
      },
      {
        "Sid": "AWSResilienceHubCloudWatchStatement",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AWSResilienceHubSSMStatement",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParametersByPath"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/ResilienceHub/*"
        ]
      }
    ]
  },
  "AWSAppFabricServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSAppFabricServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4CYFYQT65N",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSAppFabricServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AppFabric access to AWS resources on your behalf",
      "CreateDate": "2023-06-26T21:07:45.000Z",
      "UpdateDate": "2023-06-26T21:07:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudWatchEmitMetric",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3PutObject",
        "Effect": "Allow",
        "Action": [
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::*/AWSAppFabric/*"
        ]
      },
      {
        "Sid": "FirehosePutRecord",
        "Effect": "Allow",
        "Action": [
          "firehose:PutRecordBatch"
        ],
        "Resource": [
          "arn:aws:firehose:*:*:deliverystream/*"
        ]
      }
    ]
  },
  "AWSAppFabricFullAccess": {
    "policy": {
      "PolicyName": "AWSAppFabricFullAccess",
      "PolicyId": "ANPAZKAPJZG4FYVGDITHM",
      "Arn": "arn:aws:iam::aws:policy/AWSAppFabricFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to the AWS AppFabric service and read only access to dependent services such as S3, Kinesis, KMS.",
      "CreateDate": "2023-06-27T19:51:17.000Z",
      "UpdateDate": "2023-06-27T19:51:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appfabric:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSListAccess",
        "Effect": "Allow",
        "Action": [
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3ReadAccess",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FirehoseReadAccess",
        "Effect": "Allow",
        "Action": [
          "firehose:DescribeDeliveryStream",
          "firehose:ListDeliveryStreams"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowUseOfServiceLinkedRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/appfabric.amazonaws.com/AWSServiceRoleForAppFabric"
        ]
      }
    ]
  },
  "AWSAppFabricReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSAppFabricReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4IJ77M5WNE",
      "Arn": "arn:aws:iam::aws:policy/AWSAppFabricReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to the AWS AppFabric",
      "CreateDate": "2023-06-27T19:52:02.000Z",
      "UpdateDate": "2023-06-27T19:52:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "appfabric:GetAppAuthorization",
          "appfabric:GetAppBundle",
          "appfabric:GetIngestion",
          "appfabric:GetIngestionDestination",
          "appfabric:ListAppAuthorizations",
          "appfabric:ListAppBundles",
          "appfabric:ListIngestionDestinations",
          "appfabric:ListIngestions",
          "appfabric:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonCognitoUnAuthedIdentitiesSessionPolicy": {
    "policy": {
      "PolicyName": "AmazonCognitoUnAuthedIdentitiesSessionPolicy",
      "PolicyId": "ANPAZKAPJZG4MQ5TUJ5ET",
      "Arn": "arn:aws:iam::aws:policy/AmazonCognitoUnAuthedIdentitiesSessionPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy defines the set of permissions allowed for unauthenticated identities for Cognito Identity Pools. This policy is not intended to be used as a stand alone permission policy. It is used as a guardrail against overly permissive policies attached for roles in an identity pool. Do not attach this policy to any roles, as Cognito Identity Service will automatically include it as a scoped down policy when creating credentials. The privileges to temporarily access other AWS resources through the enhanced flow will now be defined by the intersection of the role associated with the identity of the unauthenticated user provided by a service, and the privileges given in this managed policy that is owned by Cognito.",
      "CreateDate": "2023-07-19T23:04:05.000Z",
      "UpdateDate": "2023-07-19T23:04:05.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "rum:PutRumEvents",
          "sagemaker:InvokeEndpoint",
          "polly:*",
          "comprehend:*",
          "translate:*",
          "transcribe:*",
          "rekognition:*",
          "mobiletargeting:*",
          "firehose:*",
          "personalize:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonEFSCSIDriverPolicy": {
    "policy": {
      "PolicyName": "AmazonEFSCSIDriverPolicy",
      "PolicyId": "ANPAZKAPJZG4A6XN3COYF",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonEFSCSIDriverPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides management access to EFS resources and read access to EC2",
      "CreateDate": "2023-07-25T20:10:04.000Z",
      "UpdateDate": "2023-07-25T20:10:04.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowDescribe",
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeMountTargets",
          "ec2:DescribeAvailabilityZones"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowCreateAccessPoint",
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:CreateAccessPoint"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowTagNewAccessPoints",
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowDeleteAccessPoint",
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:DeleteAccessPoint"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaPackageV2FullAccess": {
    "policy": {
      "PolicyName": "AWSElementalMediaPackageV2FullAccess",
      "PolicyId": "ANPAZKAPJZG4MRACBPVR3",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaPackageV2FullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Elemental MediaPackageV2 resources.",
      "CreateDate": "2023-07-25T20:29:37.000Z",
      "UpdateDate": "2023-07-25T20:29:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mediapackagev2:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElementalMediaPackageV2ReadOnly": {
    "policy": {
      "PolicyName": "AWSElementalMediaPackageV2ReadOnly",
      "PolicyId": "ANPAZKAPJZG4IRWAFAKBF",
      "Arn": "arn:aws:iam::aws:policy/AWSElementalMediaPackageV2ReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to AWS Elemental MediaPackageV2 resources.",
      "CreateDate": "2023-07-25T20:31:25.000Z",
      "UpdateDate": "2023-07-25T20:31:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "mediapackagev2:List*",
          "mediapackagev2:Get*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSHealthImagingFullAccess": {
    "policy": {
      "PolicyName": "AWSHealthImagingFullAccess",
      "PolicyId": "ANPAZKAPJZG4EOBD7JPDT",
      "Arn": "arn:aws:iam::aws:policy/AWSHealthImagingFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to AWS Health Imaging service.",
      "CreateDate": "2023-07-25T23:39:40.000Z",
      "UpdateDate": "2023-07-25T23:39:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "medical-imaging:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSHealthImagingReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSHealthImagingReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4FVIFGT2GZ",
      "Arn": "arn:aws:iam::aws:policy/AWSHealthImagingReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to AWS Health Imaging service.",
      "CreateDate": "2023-07-25T23:40:40.000Z",
      "UpdateDate": "2023-08-01T15:18:49.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "medical-imaging:GetDICOMImportJob",
          "medical-imaging:GetDatastore",
          "medical-imaging:GetImageFrame",
          "medical-imaging:GetImageSet",
          "medical-imaging:GetImageSetMetadata",
          "medical-imaging:ListDICOMImportJobs",
          "medical-imaging:ListDatastores",
          "medical-imaging:ListImageSetVersions",
          "medical-imaging:ListTagsForResource",
          "medical-imaging:SearchImageSets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchFullAccessV2": {
    "policy": {
      "PolicyName": "CloudWatchFullAccessV2",
      "PolicyId": "ANPAZKAPJZG4K5ELCXZSW",
      "Arn": "arn:aws:iam::aws:policy/CloudWatchFullAccessV2",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to CloudWatch.",
      "CreateDate": "2023-08-01T11:32:57.000Z",
      "UpdateDate": "2023-12-05T19:36:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudWatchFullAccessPermissions",
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DescribeScalingPolicies",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribePolicies",
          "cloudwatch:*",
          "logs:*",
          "sns:CreateTopic",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics",
          "sns:Subscribe",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRole",
          "oam:ListSinks",
          "rum:*",
          "synthetics:*",
          "xray:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchApplicationSignalsServiceLinkedRolePermissions",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/application-signals.cloudwatch.amazonaws.com/AWSServiceRoleForCloudWatchApplicationSignals"
        ]
      },
      {
        "Sid": "EventsServicePermissions",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*"
        ]
      },
      {
        "Sid": "OAMReadPermissions",
        "Effect": "Allow",
        "Action": [
          "oam:ListAttachedLinks"
        ],
        "Resource": [
          "arn:aws:oam:*:*:sink/*"
        ]
      }
    ]
  },
  "AmazonSageMakerPartnerServiceCatalogProductsLambdaServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerPartnerServiceCatalogProductsLambdaServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4C4IBKGBZL",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerPartnerServiceCatalogProductsLambdaServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS Lambda within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a set of related services including Secrets Manager and others.",
      "CreateDate": "2023-08-01T15:05:51.000Z",
      "UpdateDate": "2023-08-01T15:05:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:*"
        ]
      }
    ]
  },
  "AmazonSageMakerPartnerServiceCatalogProductsApiGatewayServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerPartnerServiceCatalogProductsApiGatewayServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4AFYFTZOZX",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerPartnerServiceCatalogProductsApiGatewayServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS APIGateway within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a set of related services including Lambda and others.",
      "CreateDate": "2023-08-01T15:06:24.000Z",
      "UpdateDate": "2023-08-01T15:06:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "sagemaker:InvokeEndpoint"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:endpoint/*"
        ]
      }
    ]
  },
  "AmazonSageMakerPartnerServiceCatalogProductsCloudFormationServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerPartnerServiceCatalogProductsCloudFormationServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4OHAJQZF2E",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerPartnerServiceCatalogProductsCloudFormationServiceRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Service role policy used by the AWS CloudFormation within the AWS ServiceCatalog provisioned products from Amazon SageMaker portfolio of products. Grants permissions to a subset of related services including Lambda, APIGateway and others.",
      "CreateDate": "2023-08-01T15:06:46.000Z",
      "UpdateDate": "2023-08-01T15:06:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsLambdaRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsApiGatewayRole"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:DeleteFunction",
          "lambda:UpdateFunctionCode",
          "lambda:ListTags",
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:CreateFunction",
          "lambda:TagResource"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "lambda:PublishLayerVersion",
          "lambda:GetLayerVersion",
          "lambda:DeleteLayerVersion",
          "lambda:GetFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:layer:sagemaker-*",
          "arn:aws:lambda:*:*:function:sagemaker-*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:GET",
          "apigateway:DELETE",
          "apigateway:PATCH",
          "apigateway:POST",
          "apigateway:PUT"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/restapis/*",
          "arn:aws:apigateway:*::/restapis"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "apigateway:POST",
          "apigateway:PUT"
        ],
        "Resource": [
          "arn:aws:apigateway:*::/restapis",
          "arn:aws:apigateway:*::/tags/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker-*/lambda-auth-code/layer.zip"
        ]
      }
    ]
  },
  "AWSMigrationHubRefactorSpaces-SSMAutomationPolicy": {
    "policy": {
      "PolicyName": "AWSMigrationHubRefactorSpaces-SSMAutomationPolicy",
      "PolicyId": "ANPAZKAPJZG4OMS6PFTEQ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSMigrationHubRefactorSpaces-SSMAutomationPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Use in the IAM service role passed to the SSM Automation document AWSRefactorSpaces-CreateResources to grant permissions required to run the automation. The policy grants read/write access to EC2 tags in order to track automation progress. When the Refactor Spaces environment's network bridge is enabled, the automation also adds the environment's security group to the EC2 instance to permit traffic from other Refactor Spaces services in the environment. The policy also grants access to the Application Migration Service's post launch actions SSM parameters.",
      "CreateDate": "2023-08-10T15:08:14.000Z",
      "UpdateDate": "2023-08-10T15:08:14.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyInstanceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyInstanceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameters"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/ManagedByAWSApplicationMigrationService-*"
        ]
      }
    ]
  },
  "AmazonRDSPerformanceInsightsFullAccess": {
    "policy": {
      "PolicyName": "AmazonRDSPerformanceInsightsFullAccess",
      "PolicyId": "ANPAZKAPJZG4AOEG27H7E",
      "Arn": "arn:aws:iam::aws:policy/AmazonRDSPerformanceInsightsFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to RDS Performance Insights via the AWS Management Console",
      "CreateDate": "2023-08-15T23:41:34.000Z",
      "UpdateDate": "2023-10-23T21:14:27.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonRDSPerformanceInsightsReadAccess",
        "Effect": "Allow",
        "Action": [
          "pi:DescribeDimensionKeys",
          "pi:GetDimensionKeyDetails",
          "pi:GetResourceMetadata",
          "pi:GetResourceMetrics",
          "pi:ListAvailableResourceDimensions",
          "pi:ListAvailableResourceMetrics"
        ],
        "Resource": [
          "arn:aws:pi:*:*:metrics/rds/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsAnalisysReportFullAccess",
        "Effect": "Allow",
        "Action": [
          "pi:CreatePerformanceAnalysisReport",
          "pi:GetPerformanceAnalysisReport",
          "pi:ListPerformanceAnalysisReports",
          "pi:DeletePerformanceAnalysisReport"
        ],
        "Resource": [
          "arn:aws:pi:*:*:perf-reports/rds/*/*"
        ]
      },
      {
        "Sid": "AmazonRDSPerformanceInsightsTaggingFullAccess",
        "Effect": "Allow",
        "Action": [
          "pi:TagResource",
          "pi:UntagResource",
          "pi:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:pi:*:*:*/rds/*"
        ]
      },
      {
        "Sid": "AmazonRDSDescribeInstanceAccess",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances",
          "rds:DescribeDBClusters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonCloudWatchReadAccess",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSEntityResolutionConsoleFullAccess": {
    "policy": {
      "PolicyName": "AWSEntityResolutionConsoleFullAccess",
      "PolicyId": "ANPAZKAPJZG4HPFJ6XDUE",
      "Arn": "arn:aws:iam::aws:policy/AWSEntityResolutionConsoleFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides console full access to AWS Entity Resolution and related services.",
      "CreateDate": "2023-08-17T17:54:14.000Z",
      "UpdateDate": "2023-10-16T18:46:10.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EntityResolutionAccess",
        "Effect": "Allow",
        "Action": [
          "entityresolution:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GlueSourcesConsoleDisplay",
        "Effect": "Allow",
        "Action": [
          "glue:GetSchema",
          "glue:SearchTables",
          "glue:GetSchemaByDefinition",
          "glue:GetSchemaVersion",
          "glue:GetSchemaVersionsDiff",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetTableVersion",
          "glue:GetTableVersions"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3BucketsConsoleDisplay",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3SourcesConsoleDisplay",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetBucketLocation",
          "s3:ListBucketVersions",
          "s3:GetBucketVersioning"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TaggingConsoleDisplay",
        "Effect": "Allow",
        "Action": [
          "tag:GetTagKeys",
          "tag:GetTagValues"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSConsoleDisplay",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListRolesToPickRoleForPassing",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PassRoleToEntityResolutionService",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*entityresolution*"
        ]
      },
      {
        "Sid": "ManageEventBridgeRules",
        "Effect": "Allow",
        "Action": [
          "events:DeleteRule",
          "events:PutTargets",
          "events:PutRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/entity-resolution-automatic*"
        ]
      },
      {
        "Sid": "ADXReadAccess",
        "Effect": "Allow",
        "Action": [
          "dataexchange:GetDataSet"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSEntityResolutionConsoleReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSEntityResolutionConsoleReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4BXQAMZBAZ",
      "Arn": "arn:aws:iam::aws:policy/AWSEntityResolutionConsoleReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to AWS Entity Resolution via the AWS Management Console.",
      "CreateDate": "2023-08-17T18:18:36.000Z",
      "UpdateDate": "2023-08-17T18:18:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "EntityResolutionRead",
        "Effect": "Allow",
        "Action": [
          "entityresolution:Get*",
          "entityresolution:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSArtifactServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSArtifactServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4JDUWQCCQA",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSArtifactServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Artifact to gather information about an organization via AWS Organizations service.",
      "CreateDate": "2023-08-21T20:27:31.000Z",
      "UpdateDate": "2023-08-21T20:27:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "organizations:ListAccounts",
          "organizations:DescribeOrganization",
          "organizations:DescribeAccount",
          "organizations:ListAWSServiceAccessForOrganization"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSApplicationMigrationServiceEc2InstancePolicy": {
    "policy": {
      "PolicyName": "AWSApplicationMigrationServiceEc2InstancePolicy",
      "PolicyId": "ANPAZKAPJZG4KHJUZKGVZ",
      "Arn": "arn:aws:iam::aws:policy/AWSApplicationMigrationServiceEc2InstancePolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows installing and using the AWS Replication Agent, which is used by AWS Application Migration Service (AWS MGN) to migrate source servers that run on EC2 (cross-Region or cross-AZ). An IAM role with this policy should be attached (as an EC2 Instance Profile) to the EC2 Instances.",
      "CreateDate": "2023-08-22T13:19:02.000Z",
      "UpdateDate": "2024-01-03T14:19:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "MgnAgentInstallation",
        "Effect": "Allow",
        "Action": [
          "mgn:SendClientLogsForMgn",
          "mgn:RegisterAgentForMgn",
          "mgn:GetAgentInstallationAssetsForMgn"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "MgnAgentReplication",
        "Effect": "Allow",
        "Action": [
          "mgn:SendAgentMetricsForMgn",
          "mgn:SendAgentLogsForMgn",
          "mgn:UpdateAgentSourcePropertiesForMgn",
          "mgn:UpdateAgentReplicationInfoForMgn",
          "mgn:UpdateAgentConversionInfoForMgn",
          "mgn:GetAgentCommandForMgn",
          "mgn:GetAgentConfirmedResumeInfoForMgn",
          "mgn:GetAgentRuntimeConfigurationForMgn",
          "mgn:UpdateAgentBacklogForMgn",
          "mgn:GetAgentReplicationInfoForMgn"
        ],
        "Resource": [
          "arn:aws:mgn:*:*:source-server/*"
        ]
      },
      {
        "Sid": "MgnSourceServerTagResource",
        "Effect": "Allow",
        "Action": [
          "mgn:TagResource"
        ],
        "Resource": [
          "arn:aws:mgn:*:*:source-server/*"
        ]
      }
    ]
  },
  "AmazonLaunchWizardFullAccessV2": {
    "policy": {
      "PolicyName": "AmazonLaunchWizardFullAccessV2",
      "PolicyId": "ANPAZKAPJZG4BVNZXUELJ",
      "Arn": "arn:aws:iam::aws:policy/AmazonLaunchWizardFullAccessV2",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Full access to AWS Launch wizard and other required services.",
      "CreateDate": "2023-09-01T17:14:56.000Z",
      "UpdateDate": "2023-09-01T17:14:56.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AppInsightsActions0",
        "Effect": "Allow",
        "Action": [
          "applicationinsights:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ResourceGroupActions0",
        "Effect": "Allow",
        "Action": [
          "resource-groups:List*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Route53Actions0",
        "Effect": "Allow",
        "Action": [
          "route53:ChangeResourceRecordSets",
          "route53:GetChange",
          "route53:ListResourceRecordSets",
          "route53:ListHostedZones",
          "route53:ListHostedZonesByName"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3Actions0",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KmsActions0",
        "Effect": "Allow",
        "Action": [
          "kms:ListKeys",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudWatchActions0",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:List*",
          "cloudwatch:Get*",
          "cloudwatch:Describe*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2Actions0",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateInternetGateway",
          "ec2:CreateNatGateway",
          "ec2:CreateVpc",
          "ec2:CreateKeyPair",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateSubnet"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "Ec2Actions1",
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress",
          "ec2:AllocateHosts",
          "ec2:AssignPrivateIpAddresses",
          "ec2:AssociateAddress",
          "ec2:CreateDhcpOptions",
          "ec2:CreateEgressOnlyInternetGateway",
          "ec2:CreateNetworkInterface",
          "ec2:CreateVolume",
          "ec2:CreateVpcEndpoint",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:RunInstances",
          "ec2:StartInstances",
          "ec2:ModifyInstanceAttribute",
          "ec2:ModifySubnetAttribute",
          "ec2:ModifyVolumeAttribute",
          "ec2:ModifyVpcAttribute",
          "ec2:AssociateDhcpOptions",
          "ec2:AssociateSubnetCidrBlock",
          "ec2:AttachInternetGateway",
          "ec2:AttachNetworkInterface",
          "ec2:AttachVolume",
          "ec2:DeleteDhcpOptions",
          "ec2:DeleteInternetGateway",
          "ec2:DeleteKeyPair",
          "ec2:DeleteNatGateway",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteVolume",
          "ec2:DeleteVpc",
          "ec2:DetachInternetGateway",
          "ec2:DetachVolume",
          "ec2:DeleteSnapshot",
          "ec2:AssociateRouteTable",
          "ec2:AssociateVpcCidrBlock",
          "ec2:DeleteNetworkAcl",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DeleteRoute",
          "ec2:DeleteRouteTable",
          "ec2:DeleteSubnet",
          "ec2:DetachNetworkInterface",
          "ec2:DisassociateAddress",
          "ec2:DisassociateVpcCidrBlock",
          "ec2:GetLaunchTemplateData",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:ModifyVolume",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:GetConsoleOutput",
          "ec2:GetPasswordData",
          "ec2:ReleaseAddress",
          "ec2:ReplaceRoute",
          "ec2:ReplaceRouteTableAssociation",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:DisassociateIamInstanceProfile",
          "ec2:DisassociateRouteTable",
          "ec2:DisassociateSubnetCidrBlock",
          "ec2:ModifyInstancePlacement",
          "ec2:DeletePlacementGroup",
          "ec2:CreatePlacementGroup",
          "elasticfilesystem:DeleteFileSystem",
          "elasticfilesystem:DeleteMountTarget",
          "ds:AddIpRoutes",
          "ds:CreateComputer",
          "ds:CreateMicrosoftAD",
          "ds:DeleteDirectory",
          "servicecatalog:AssociateProductWithPortfolio",
          "cloudformation:GetTemplateSummary",
          "sts:GetCallerIdentity"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CloudFormationActions0",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStack*",
          "cloudformation:Get*",
          "cloudformation:ListStacks",
          "cloudformation:SignalResource",
          "cloudformation:DeleteStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/LaunchWizard*/*",
          "arn:aws:cloudformation:*:*:stack/ApplicationInsights*/*"
        ]
      },
      {
        "Sid": "Ec2Actions2",
        "Effect": "Allow",
        "Action": [
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "IamActions0",
        "Effect": "Allow",
        "Action": [
          "iam:CreateInstanceProfile",
          "iam:DeleteInstanceProfile",
          "iam:RemoveRoleFromInstanceProfile",
          "iam:AddRoleToInstanceProfile"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonEC2RoleForLaunchWizard*",
          "arn:aws:iam::*:instance-profile/LaunchWizard*"
        ]
      },
      {
        "Sid": "IamActions1",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AmazonEC2RoleForLaunchWizard",
          "arn:aws:iam::*:role/service-role/AmazonLambdaRoleForLaunchWizard",
          "arn:aws:iam::*:instance-profile/LaunchWizard*"
        ]
      },
      {
        "Sid": "AutoScalingActions0",
        "Effect": "Allow",
        "Action": [
          "autoscaling:AttachInstances",
          "autoscaling:CreateAutoScalingGroup",
          "autoscaling:CreateLaunchConfiguration",
          "autoscaling:DeleteAutoScalingGroup",
          "autoscaling:DeleteLaunchConfiguration",
          "autoscaling:UpdateAutoScalingGroup",
          "autoscaling:CreateOrUpdateTags",
          "resource-groups:CreateGroup",
          "resource-groups:DeleteGroup",
          "sns:ListSubscriptionsByTopic",
          "sns:Publish",
          "ssm:DeleteDocument",
          "ssm:DeleteParameter*",
          "ssm:DescribeDocument*",
          "ssm:GetDocument",
          "ssm:PutParameter"
        ],
        "Resource": [
          "arn:aws:resource-groups:*:*:group/LaunchWizard*",
          "arn:aws:sns:*:*:*",
          "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/LaunchWizard*",
          "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/LaunchWizard*",
          "arn:aws:ssm:*:*:parameter/LaunchWizard*",
          "arn:aws:ssm:*:*:document/LaunchWizard*"
        ]
      },
      {
        "Sid": "SsmActions0",
        "Effect": "Allow",
        "Action": [
          "ssm:GetDocument",
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ssm:*::document/AWS-RunShellScript"
        ]
      },
      {
        "Sid": "SsmActions1",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "SsmActions2",
        "Effect": "Allow",
        "Action": [
          "ssm:AddTagsToResource",
          "ssm:DescribeDocument",
          "ssm:GetDocument",
          "ssm:ListTagsForResource",
          "ssm:RemoveTagsFromResource"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/LaunchWizard*",
          "arn:aws:ssm:*:*:document/LaunchWizard*"
        ]
      },
      {
        "Sid": "SsmActions3",
        "Effect": "Allow",
        "Action": [
          "autoscaling:Describe*",
          "cloudformation:DescribeAccountLimits",
          "cloudformation:DescribeStackDriftDetectionStatus",
          "cloudformation:List*",
          "cloudformation:ValidateTemplate",
          "ds:Describe*",
          "ds:ListAuthorizedApplications",
          "ec2:Describe*",
          "ec2:Get*",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:GetUser",
          "iam:GetPolicyVersion",
          "iam:GetPolicy",
          "iam:List*",
          "resource-groups:Get*",
          "resource-groups:List*",
          "servicequotas:GetServiceQuota",
          "servicequotas:ListServiceQuotas",
          "sns:ListSubscriptions",
          "sns:ListTopics",
          "ssm:CreateDocument",
          "ssm:DescribeAutomation*",
          "ssm:DescribeInstanceInformation",
          "ssm:DescribeParameters",
          "ssm:GetAutomationExecution",
          "ssm:GetCommandInvocation",
          "ssm:GetParameter*",
          "ssm:GetConnectionStatus",
          "ssm:ListCommand*",
          "ssm:ListDocument*",
          "ssm:ListInstanceAssociations",
          "ssm:SendAutomationSignal",
          "tag:Get*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SsmActions4",
        "Effect": "Allow",
        "Action": [
          "ssm:StartAutomationExecution",
          "ssm:StopAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-definition/LaunchWizard-*:*"
        ]
      },
      {
        "Sid": "CloudFormationActions1",
        "Effect": "Allow",
        "Action": [
          "cloudformation:List*",
          "cloudformation:Describe*"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/LaunchWizard*/"
        ]
      },
      {
        "Sid": "IamActions2",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LaunchWizardActions0",
        "Effect": "Allow",
        "Action": [
          "launchwizard:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SqsActions0",
        "Effect": "Allow",
        "Action": [
          "sqs:TagQueue",
          "sqs:GetQueueUrl",
          "sqs:AddPermission",
          "sqs:ListQueues",
          "sqs:DeleteQueue",
          "sqs:GetQueueAttributes",
          "sqs:ListQueueTags",
          "sqs:CreateQueue",
          "sqs:SetQueueAttributes"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:LaunchWizard*"
        ]
      },
      {
        "Sid": "CloudWatchActions1",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricAlarm",
          "iam:GetInstanceProfile",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms"
        ],
        "Resource": [
          "arn:aws:cloudwatch:*:*:alarm:LaunchWizard*",
          "arn:aws:iam::*:instance-profile/LaunchWizard*"
        ]
      },
      {
        "Sid": "EfsActions0",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "route53:ListHostedZones",
          "ec2:CreateSecurityGroup",
          "ec2:AuthorizeSecurityGroupIngress",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:CreateFileSystem",
          "elasticfilesystem:CreateMountTarget",
          "elasticfilesystem:DescribeMountTargets",
          "elasticfilesystem:DescribeMountTargetSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "S3Actions1",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::launchwizard*",
          "arn:aws:s3:::launchwizard*/*",
          "arn:aws:s3:::aws-sap-data-provider/config.properties"
        ]
      },
      {
        "Sid": "CloudFormationActions2",
        "Effect": "Allow",
        "Action": [
          "cloudformation:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LambdaActions0",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket",
          "s3:PutBucketVersioning",
          "s3:DeleteBucket",
          "lambda:CreateFunction",
          "lambda:DeleteFunction",
          "lambda:GetFunction",
          "lambda:GetFunctionConfiguration",
          "lambda:InvokeFunction"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:LaunchWizard*",
          "arn:aws:s3:::launchwizard*"
        ]
      },
      {
        "Sid": "DynamodbActions0",
        "Effect": "Allow",
        "Action": [
          "dynamodb:CreateTable",
          "dynamodb:DescribeTable",
          "dynamodb:DeleteTable"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/LaunchWizard*"
        ]
      },
      {
        "Sid": "SecretsManagerActions0",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:TagResource",
          "secretsmanager:UntagResource",
          "secretsmanager:PutResourcePolicy",
          "secretsmanager:DeleteResourcePolicy",
          "secretsmanager:ListSecretVersionIds",
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:LaunchWizard*"
        ]
      },
      {
        "Sid": "SecretsManagerActions1",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetRandomPassword",
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SsmActions5",
        "Effect": "Allow",
        "Action": [
          "ssm:CreateOpsMetadata"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SsmActions6",
        "Effect": "Allow",
        "Action": [
          "ssm:DeleteOpsMetadata"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:opsmetadata/aws/ssm/LaunchWizard*"
        ]
      },
      {
        "Sid": "SnsActions0",
        "Effect": "Allow",
        "Action": [
          "sns:CreateTopic",
          "sns:DeleteTopic",
          "sns:Subscribe",
          "sns:Unsubscribe"
        ],
        "Resource": [
          "arn:aws:sns:*:*:LaunchWizard*"
        ]
      },
      {
        "Sid": "FsxActions0",
        "Effect": "Allow",
        "Action": [
          "fsx:UntagResource",
          "fsx:TagResource",
          "fsx:DeleteFileSystem",
          "fsx:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FsxActions1",
        "Effect": "Allow",
        "Action": [
          "fsx:CreateFileSystem"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FsxActions2",
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeFileSystems"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ServiceCatalogActions0",
        "Effect": "Allow",
        "Action": [
          "servicecatalog:CreatePortfolio",
          "servicecatalog:DescribePortfolio",
          "servicecatalog:CreateConstraint",
          "servicecatalog:CreateProduct",
          "servicecatalog:AssociatePrincipalWithPortfolio",
          "servicecatalog:CreateProvisioningArtifact",
          "servicecatalog:TagResource",
          "servicecatalog:UntagResource"
        ],
        "Resource": [
          "arn:aws:servicecatalog:*:*:*/*",
          "arn:aws:catalog:*:*:*/*"
        ]
      },
      {
        "Sid": "SsmActions7",
        "Effect": "Allow",
        "Action": [
          "ssm:CreateAssociation",
          "ssm:DeleteAssociation"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
          "arn:aws:ssm:*:*:association/*"
        ]
      },
      {
        "Sid": "EfsActions1",
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:UntagResource",
          "elasticfilesystem:TagResource"
        ],
        "Resource": [
          "arn:aws:elasticfilesystem:*:*:file-system/*"
        ]
      },
      {
        "Sid": "LogsActions0",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:DeleteLogGroup",
          "logs:DescribeLogStreams",
          "logs:UntagResource",
          "logs:TagResource",
          "logs:CreateLogGroup",
          "logs:DeleteLogStream",
          "logs:PutLogEvents",
          "logs:GetLogEvents",
          "logs:GetLogDelivery",
          "logs:GetLogGroupFields",
          "logs:GetLogRecord",
          "logs:ListLogDeliveries"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:LaunchWizard*",
          "arn:aws:logs:*:*:log-group:LaunchWizard*:log-stream:*"
        ]
      },
      {
        "Sid": "LogsActions1",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FsxActions3",
        "Effect": "Allow",
        "Action": [
          "fsx:CreateStorageVirtualMachine",
          "fsx:CreateVolume"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FsxActions4",
        "Effect": "Allow",
        "Action": [
          "fsx:DescribeStorageVirtualMachines",
          "fsx:DescribeVolumes"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "FsxActions5",
        "Effect": "Allow",
        "Action": [
          "fsx:DeleteStorageVirtualMachine",
          "fsx:DeleteVolume"
        ],
        "Resource": [
          "arn:aws:fsx:*:*:storage-virtual-machine/*/*",
          "arn:aws:fsx:*:*:backup/*",
          "arn:aws:fsx:*:*:volume/*/*"
        ]
      }
    ]
  },
  "AWSServiceRoleForCloudWatchMetrics_DbPerfInsightsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSServiceRoleForCloudWatchMetrics_DbPerfInsightsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LUOS75ESV",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForCloudWatchMetrics_DbPerfInsightsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows CloudWatch to access RDS Performance Insights metrics on your behalf",
      "CreateDate": "2023-09-07T09:32:32.000Z",
      "UpdateDate": "2023-09-07T09:32:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "pi:GetResourceMetrics"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDataZoneEnvironmentRolePermissionsBoundary": {
    "policy": {
      "PolicyName": "AmazonDataZoneEnvironmentRolePermissionsBoundary",
      "PolicyId": "ANPAZKAPJZG4C3KB6Q3VE",
      "Arn": "arn:aws:iam::aws:policy/AmazonDataZoneEnvironmentRolePermissionsBoundary",
      "Path": "/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Amazon DataZone creates IAM roles for Environments to perform data analytics actions, and uses this policy when creating these roles to define the boundary of their permissions.",
      "CreateDate": "2023-09-11T23:38:22.000Z",
      "UpdateDate": "2023-11-17T23:29:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CreateGlueConnection",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "GlueOperations",
        "Effect": "Allow",
        "Action": [
          "glue:*DataQuality*",
          "glue:BatchCreatePartition",
          "glue:BatchDeleteConnection",
          "glue:BatchDeletePartition",
          "glue:BatchDeleteTable",
          "glue:BatchDeleteTableVersion",
          "glue:BatchGetJobs",
          "glue:BatchGetWorkflows",
          "glue:BatchStopJobRun",
          "glue:BatchUpdatePartition",
          "glue:CreateBlueprint",
          "glue:CreateConnection",
          "glue:CreateCrawler",
          "glue:CreateDatabase",
          "glue:CreateJob",
          "glue:CreatePartition",
          "glue:CreatePartitionIndex",
          "glue:CreateTable",
          "glue:CreateWorkflow",
          "glue:DeleteBlueprint",
          "glue:DeleteColumnStatisticsForPartition",
          "glue:DeleteColumnStatisticsForTable",
          "glue:DeleteConnection",
          "glue:DeleteCrawler",
          "glue:DeleteJob",
          "glue:DeletePartition",
          "glue:DeletePartitionIndex",
          "glue:DeleteTable",
          "glue:DeleteTableVersion",
          "glue:DeleteWorkflow",
          "glue:GetColumnStatisticsForPartition",
          "glue:GetColumnStatisticsForTable",
          "glue:GetConnection",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:ListSchemas",
          "glue:ListJobs",
          "glue:NotifyEvent",
          "glue:PutWorkflowRunProperties",
          "glue:ResetJobBookmark",
          "glue:ResumeWorkflowRun",
          "glue:SearchTables",
          "glue:StartBlueprintRun",
          "glue:StartCrawler",
          "glue:StartCrawlerSchedule",
          "glue:StartJobRun",
          "glue:StartWorkflowRun",
          "glue:StopCrawler",
          "glue:StopCrawlerSchedule",
          "glue:StopWorkflowRun",
          "glue:UpdateBlueprint",
          "glue:UpdateColumnStatisticsForPartition",
          "glue:UpdateColumnStatisticsForTable",
          "glue:UpdateConnection",
          "glue:UpdateCrawler",
          "glue:UpdateCrawlerSchedule",
          "glue:UpdateDatabase",
          "glue:UpdateJob",
          "glue:UpdatePartition",
          "glue:UpdateTable",
          "glue:UpdateWorkflow"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PassRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/datazone*"
        ]
      },
      {
        "Sid": "SameAccountKmsOperations",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:Decrypt",
          "kms:ListKeys"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KmsOperationsWithResourceTag",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:Decrypt",
          "kms:ListKeys",
          "kms:Encrypt",
          "kms:GenerateDataKey",
          "kms:Verify",
          "kms:Sign"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AnalyticsOperations",
        "Effect": "Allow",
        "Action": [
          "datazone:*",
          "sqlworkbench:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "QueryOperations",
        "Effect": "Allow",
        "Action": [
          "athena:BatchGetNamedQuery",
          "athena:BatchGetPreparedStatement",
          "athena:BatchGetQueryExecution",
          "athena:CreateNamedQuery",
          "athena:CreateNotebook",
          "athena:CreatePreparedStatement",
          "athena:CreatePresignedNotebookUrl",
          "athena:DeleteNamedQuery",
          "athena:DeleteNotebook",
          "athena:DeletePreparedStatement",
          "athena:ExportNotebook",
          "athena:GetDatabase",
          "athena:GetDataCatalog",
          "athena:GetNamedQuery",
          "athena:GetPreparedStatement",
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:GetQueryRuntimeStatistics",
          "athena:GetTableMetadata",
          "athena:GetWorkGroup",
          "athena:ImportNotebook",
          "athena:ListDatabases",
          "athena:ListDataCatalogs",
          "athena:ListEngineVersions",
          "athena:ListNamedQueries",
          "athena:ListPreparedStatements",
          "athena:ListQueryExecutions",
          "athena:ListTableMetadata",
          "athena:ListTagsForResource",
          "athena:ListWorkGroups",
          "athena:StartCalculationExecution",
          "athena:StartQueryExecution",
          "athena:StartSession",
          "athena:StopCalculationExecution",
          "athena:StopQueryExecution",
          "athena:TerminateSession",
          "athena:UpdateNamedQuery",
          "athena:UpdateNotebook",
          "athena:UpdateNotebookMetadata",
          "athena:UpdatePreparedStatement",
          "ec2:CreateNetworkInterface",
          "ec2:DeleteNetworkInterface",
          "ec2:Describe*",
          "glue:BatchCreatePartition",
          "glue:BatchDeletePartition",
          "glue:BatchDeleteTable",
          "glue:BatchDeleteTableVersion",
          "glue:BatchGetJobs",
          "glue:BatchGetPartition",
          "glue:BatchGetWorkflows",
          "glue:BatchUpdatePartition",
          "glue:CreateBlueprint",
          "glue:CreateConnection",
          "glue:CreateCrawler",
          "glue:CreateDatabase",
          "glue:CreateJob",
          "glue:CreatePartition",
          "glue:CreatePartitionIndex",
          "glue:CreateTable",
          "glue:CreateWorkflow",
          "glue:DeleteColumnStatisticsForPartition",
          "glue:DeleteColumnStatisticsForTable",
          "glue:DeletePartition",
          "glue:DeletePartitionIndex",
          "glue:DeleteTable",
          "glue:DeleteTableVersion",
          "glue:GetColumnStatisticsForPartition",
          "glue:GetColumnStatisticsForTable",
          "glue:GetConnection",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:ListSchemas",
          "glue:ListJobs",
          "glue:NotifyEvent",
          "glue:SearchTables",
          "glue:UpdateColumnStatisticsForPartition",
          "glue:UpdateColumnStatisticsForTable",
          "glue:UpdateDatabase",
          "glue:UpdatePartition",
          "glue:UpdateTable",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:ListGroups",
          "iam:ListRolePolicies",
          "iam:ListRoles",
          "iam:ListUsers",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:DescribeMetricFilters",
          "logs:DescribeQueries",
          "logs:DescribeQueryDefinitions",
          "logs:DescribeMetricFilters",
          "logs:StartQuery",
          "logs:StopQuery",
          "logs:GetLogEvents",
          "logs:GetLogGroupFields",
          "logs:GetQueryResults",
          "logs:GetLogRecord",
          "logs:PutLogEvents",
          "logs:CreateLogStream",
          "logs:FilterLogEvents",
          "lakeformation:GetDataAccess",
          "lakeformation:GetDataLakeSettings",
          "lakeformation:GetResourceLFTags",
          "lakeformation:ListPermissions",
          "redshift-data:ListTables",
          "redshift-data:DescribeTable",
          "redshift-data:ListSchemas",
          "redshift-data:ListDatabases",
          "redshift-data:ExecuteStatement",
          "redshift-data:GetStatementResult",
          "redshift-data:DescribeStatement",
          "redshift:CreateClusterUser",
          "redshift:DescribeClusters",
          "redshift:DescribeDataShares",
          "redshift:GetClusterCredentials",
          "redshift:GetClusterCredentialsWithIAM",
          "redshift:JoinGroup",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListWorkgroups",
          "redshift-serverless:GetNamespace",
          "redshift-serverless:GetWorkgroup",
          "redshift-serverless:GetCredentials",
          "secretsmanager:ListSecrets",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "QueryOperationsWithResourceTag",
        "Effect": "Allow",
        "Action": [
          "athena:GetQueryResultsStream"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SecretsManagerOperationsWithTagKeys",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*"
        ]
      },
      {
        "Sid": "DataZoneS3Buckets",
        "Effect": "Allow",
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:DeleteObject",
          "s3:DeleteObjectVersion",
          "s3:GetObject",
          "s3:PutObject",
          "s3:PutObjectRetention",
          "s3:ReplicateObject",
          "s3:RestoreObject"
        ],
        "Resource": [
          "arn:aws:s3:::*/datazone/*"
        ]
      },
      {
        "Sid": "DataZoneS3BucketLocation",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListDataZoneS3Bucket",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "NotDeniedOperations",
        "Effect": "Deny",
        "NotAction": [
          "datazone:*",
          "sqlworkbench:*",
          "athena:BatchGetNamedQuery",
          "athena:BatchGetPreparedStatement",
          "athena:BatchGetQueryExecution",
          "athena:CreateNamedQuery",
          "athena:CreateNotebook",
          "athena:CreatePreparedStatement",
          "athena:CreatePresignedNotebookUrl",
          "athena:DeleteNamedQuery",
          "athena:DeleteNotebook",
          "athena:DeletePreparedStatement",
          "athena:ExportNotebook",
          "athena:GetDatabase",
          "athena:GetDataCatalog",
          "athena:GetNamedQuery",
          "athena:GetPreparedStatement",
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:GetQueryResultsStream",
          "athena:GetQueryRuntimeStatistics",
          "athena:GetTableMetadata",
          "athena:GetWorkGroup",
          "athena:ImportNotebook",
          "athena:ListDatabases",
          "athena:ListDataCatalogs",
          "athena:ListEngineVersions",
          "athena:ListNamedQueries",
          "athena:ListPreparedStatements",
          "athena:ListQueryExecutions",
          "athena:ListTableMetadata",
          "athena:ListTagsForResource",
          "athena:ListWorkGroups",
          "athena:StartCalculationExecution",
          "athena:StartQueryExecution",
          "athena:StartSession",
          "athena:StopCalculationExecution",
          "athena:StopQueryExecution",
          "athena:TerminateSession",
          "athena:UpdateNamedQuery",
          "athena:UpdateNotebook",
          "athena:UpdateNotebookMetadata",
          "athena:UpdatePreparedStatement",
          "ec2:CreateNetworkInterface",
          "ec2:CreateTags",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteTags",
          "ec2:Describe*",
          "glue:*DataQuality*",
          "glue:BatchCreatePartition",
          "glue:BatchDeleteConnection",
          "glue:BatchDeletePartition",
          "glue:BatchDeleteTable",
          "glue:BatchDeleteTableVersion",
          "glue:BatchGetJobs",
          "glue:BatchGetPartition",
          "glue:BatchGetWorkflows",
          "glue:BatchStopJobRun",
          "glue:BatchUpdatePartition",
          "glue:CreateBlueprint",
          "glue:CreateConnection",
          "glue:CreateCrawler",
          "glue:CreateDatabase",
          "glue:CreateJob",
          "glue:CreatePartition",
          "glue:CreatePartitionIndex",
          "glue:CreateTable",
          "glue:CreateWorkflow",
          "glue:DeleteBlueprint",
          "glue:DeleteColumnStatisticsForPartition",
          "glue:DeleteColumnStatisticsForTable",
          "glue:DeleteConnection",
          "glue:DeleteCrawler",
          "glue:DeleteJob",
          "glue:DeletePartition",
          "glue:DeletePartitionIndex",
          "glue:DeleteTable",
          "glue:DeleteTableVersion",
          "glue:DeleteWorkflow",
          "glue:GetColumnStatisticsForPartition",
          "glue:GetColumnStatisticsForTable",
          "glue:GetConnection",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:ListSchemas",
          "glue:ListJobs",
          "glue:NotifyEvent",
          "glue:PutWorkflowRunProperties",
          "glue:ResetJobBookmark",
          "glue:ResumeWorkflowRun",
          "glue:SearchTables",
          "glue:StartBlueprintRun",
          "glue:StartCrawler",
          "glue:StartCrawlerSchedule",
          "glue:StartJobRun",
          "glue:StartWorkflowRun",
          "glue:StopCrawler",
          "glue:StopCrawlerSchedule",
          "glue:StopWorkflowRun",
          "glue:UpdateBlueprint",
          "glue:UpdateColumnStatisticsForPartition",
          "glue:UpdateColumnStatisticsForTable",
          "glue:UpdateConnection",
          "glue:UpdateCrawler",
          "glue:UpdateCrawlerSchedule",
          "glue:UpdateDatabase",
          "glue:UpdateJob",
          "glue:UpdatePartition",
          "glue:UpdateTable",
          "glue:UpdateWorkflow",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:List*",
          "iam:PassRole",
          "kms:DescribeKey",
          "kms:Decrypt",
          "kms:Encrypt",
          "kms:GenerateDataKey",
          "kms:ListKeys",
          "kms:Verify",
          "kms:Sign",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:DescribeMetricFilters",
          "logs:DescribeQueries",
          "logs:DescribeQueryDefinitions",
          "logs:StartQuery",
          "logs:StopQuery",
          "logs:GetLogEvents",
          "logs:GetLogGroupFields",
          "logs:GetQueryResults",
          "logs:GetLogRecord",
          "logs:PutLogEvents",
          "logs:CreateLogStream",
          "logs:FilterLogEvents",
          "lakeformation:GetDataAccess",
          "lakeformation:GetDataLakeSettings",
          "lakeformation:GetResourceLFTags",
          "lakeformation:ListPermissions",
          "redshift-data:ListTables",
          "redshift-data:DescribeTable",
          "redshift-data:ListSchemas",
          "redshift-data:ListDatabases",
          "redshift-data:ExecuteStatement",
          "redshift-data:GetStatementResult",
          "redshift-data:DescribeStatement",
          "redshift:CreateClusterUser",
          "redshift:DescribeClusters",
          "redshift:DescribeDataShares",
          "redshift:GetClusterCredentials",
          "redshift:GetClusterCredentialsWithIAM",
          "redshift:JoinGroup",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListWorkgroups",
          "redshift-serverless:GetNamespace",
          "redshift-serverless:GetWorkgroup",
          "redshift-serverless:GetCredentials",
          "s3:AbortMultipartUpload",
          "s3:DeleteObject",
          "s3:DeleteObjectVersion",
          "s3:GetObject",
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:PutObject",
          "s3:PutObjectRetention",
          "s3:ReplicateObject",
          "s3:RestoreObject",
          "secretsmanager:CreateSecret",
          "secretsmanager:ListSecrets",
          "secretsmanager:TagResource",
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonKeyspacesReadOnlyAccess_v2": {
    "policy": {
      "PolicyName": "AmazonKeyspacesReadOnlyAccess_v2",
      "PolicyId": "ANPAZKAPJZG4N6YWPPLRH",
      "Arn": "arn:aws:iam::aws:policy/AmazonKeyspacesReadOnlyAccess_v2",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provide read only access to Amazon Keyspaces and related AWS services.",
      "CreateDate": "2023-09-12T17:01:45.000Z",
      "UpdateDate": "2023-09-12T17:01:45.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cassandra:Select"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:DescribeScheduledActions",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "kms:DescribeKey",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcEndpoints"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryLaunchActionsPolicy": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryLaunchActionsPolicy",
      "PolicyId": "ANPAZKAPJZG4FYCR5GWGU",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticDisasterRecoveryLaunchActionsPolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows you to use Amazon SSM and additional services required permissions to run post-launch actions in AWS Elastic Disaster Recovery (AWS DRS). Attach this policy to your IAM roles or users.",
      "CreateDate": "2023-09-13T07:38:26.000Z",
      "UpdateDate": "2023-10-16T12:28:44.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "LaunchActionsPolicy1",
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy2",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand",
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*",
          "arn:aws:ssm:*:*:automation-definition/*:*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy3",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand",
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*::document/AWS-*",
          "arn:aws:ssm:*::document/AWSCodeDeployAgent-*",
          "arn:aws:ssm:*::document/AWSConfigRemediation-*",
          "arn:aws:ssm:*::document/AWSConformancePacks-*",
          "arn:aws:ssm:*::document/AWSDisasterRecovery-*",
          "arn:aws:ssm:*::document/AWSDistroOTel-*",
          "arn:aws:ssm:*::document/AWSDocs-*",
          "arn:aws:ssm:*::document/AWSEC2-*",
          "arn:aws:ssm:*::document/AWSEC2Launch-*",
          "arn:aws:ssm:*::document/AWSFIS-*",
          "arn:aws:ssm:*::document/AWSFleetManager-*",
          "arn:aws:ssm:*::document/AWSIncidents-*",
          "arn:aws:ssm:*::document/AWSKinesisTap-*",
          "arn:aws:ssm:*::document/AWSMigration-*",
          "arn:aws:ssm:*::document/AWSNVMe-*",
          "arn:aws:ssm:*::document/AWSNitroEnclavesWindows-*",
          "arn:aws:ssm:*::document/AWSObservabilityExporter-*",
          "arn:aws:ssm:*::document/AWSPVDriver-*",
          "arn:aws:ssm:*::document/AWSQuickSetupType-*",
          "arn:aws:ssm:*::document/AWSQuickStarts-*",
          "arn:aws:ssm:*::document/AWSRefactorSpaces-*",
          "arn:aws:ssm:*::document/AWSResilienceHub-*",
          "arn:aws:ssm:*::document/AWSSAP-*",
          "arn:aws:ssm:*::document/AWSSAPTools-*",
          "arn:aws:ssm:*::document/AWSSQLServer-*",
          "arn:aws:ssm:*::document/AWSSSO-*",
          "arn:aws:ssm:*::document/AWSSupport-*",
          "arn:aws:ssm:*::document/AWSSystemsManagerSAP-*",
          "arn:aws:ssm:*::document/AmazonCloudWatch-*",
          "arn:aws:ssm:*::document/AmazonCloudWatchAgent-*",
          "arn:aws:ssm:*::document/AmazonECS-*",
          "arn:aws:ssm:*::document/AmazonEFSUtils-*",
          "arn:aws:ssm:*::document/AmazonEKS-*",
          "arn:aws:ssm:*::document/AmazonInspector-*",
          "arn:aws:ssm:*::document/AmazonInspector2-*",
          "arn:aws:ssm:*::document/AmazonInternal-*",
          "arn:aws:ssm:*::document/AwsEnaNetworkDriver-*",
          "arn:aws:ssm:*::document/AwsVssComponents-*",
          "arn:aws:ssm:*::automation-definition/AWS-*:*",
          "arn:aws:ssm:*::automation-definition/AWSCodeDeployAgent-*:*",
          "arn:aws:ssm:*::automation-definition/AWSConfigRemediation-*:*",
          "arn:aws:ssm:*::automation-definition/AWSConformancePacks-*:*",
          "arn:aws:ssm:*::automation-definition/AWSDisasterRecovery-*:*",
          "arn:aws:ssm:*::automation-definition/AWSDistroOTel-*:*",
          "arn:aws:ssm:*::automation-definition/AWSDocs-*:*",
          "arn:aws:ssm:*::automation-definition/AWSEC2-*:*",
          "arn:aws:ssm:*::automation-definition/AWSEC2Launch-*:*",
          "arn:aws:ssm:*::automation-definition/AWSFIS-*:*",
          "arn:aws:ssm:*::automation-definition/AWSFleetManager-*:*",
          "arn:aws:ssm:*::automation-definition/AWSIncidents-*:*",
          "arn:aws:ssm:*::automation-definition/AWSKinesisTap-*:*",
          "arn:aws:ssm:*::automation-definition/AWSMigration-*:*",
          "arn:aws:ssm:*::automation-definition/AWSNVMe-*:*",
          "arn:aws:ssm:*::automation-definition/AWSNitroEnclavesWindows-*:*",
          "arn:aws:ssm:*::automation-definition/AWSObservabilityExporter-*:*",
          "arn:aws:ssm:*::automation-definition/AWSPVDriver-*:*",
          "arn:aws:ssm:*::automation-definition/AWSQuickSetupType-*:*",
          "arn:aws:ssm:*::automation-definition/AWSQuickStarts-*:*",
          "arn:aws:ssm:*::automation-definition/AWSRefactorSpaces-*:*",
          "arn:aws:ssm:*::automation-definition/AWSResilienceHub-*:*",
          "arn:aws:ssm:*::automation-definition/AWSSAP-*:*",
          "arn:aws:ssm:*::automation-definition/AWSSAPTools-*:*",
          "arn:aws:ssm:*::automation-definition/AWSSQLServer-*:*",
          "arn:aws:ssm:*::automation-definition/AWSSSO-*:*",
          "arn:aws:ssm:*::automation-definition/AWSSupport-*:*",
          "arn:aws:ssm:*::automation-definition/AWSSystemsManagerSAP-*:*",
          "arn:aws:ssm:*::automation-definition/AmazonCloudWatch-*:*",
          "arn:aws:ssm:*::automation-definition/AmazonCloudWatchAgent-*:*",
          "arn:aws:ssm:*::automation-definition/AmazonECS-*:*",
          "arn:aws:ssm:*::automation-definition/AmazonEFSUtils-*:*",
          "arn:aws:ssm:*::automation-definition/AmazonEKS-*:*",
          "arn:aws:ssm:*::automation-definition/AmazonInspector-*:*",
          "arn:aws:ssm:*::automation-definition/AmazonInspector2-*:*",
          "arn:aws:ssm:*::automation-definition/AmazonInternal-*:*",
          "arn:aws:ssm:*::automation-definition/AwsEnaNetworkDriver-*:*",
          "arn:aws:ssm:*::automation-definition/AwsVssComponents-*:*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy4",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy5",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy6",
        "Effect": "Allow",
        "Action": [
          "ssm:ListDocuments",
          "ssm:ListCommandInvocations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy7",
        "Effect": "Allow",
        "Action": [
          "ssm:ListDocumentVersions",
          "ssm:GetDocument",
          "ssm:DescribeDocument"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy8",
        "Effect": "Allow",
        "Action": [
          "ssm:GetAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-execution/*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy9",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameters"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecoveryService-*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy10",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameter",
          "ssm:PutParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecoveryService-*"
        ]
      },
      {
        "Sid": "LaunchActionsPolicy11",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceWithLaunchActionsRole"
        ]
      }
    ]
  },
  "AmazonDataZoneFullAccess": {
    "policy": {
      "PolicyName": "AmazonDataZoneFullAccess",
      "PolicyId": "ANPAZKAPJZG4M44MZFTQR",
      "Arn": "arn:aws:iam::aws:policy/AmazonDataZoneFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon DataZone via the AWS Management Console as well as limited access to related services that are required by it.",
      "CreateDate": "2023-09-22T20:06:52.000Z",
      "UpdateDate": "2024-03-12T16:34:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonDataZoneStatement",
        "Effect": "Allow",
        "Action": [
          "datazone:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ReadOnlyStatement",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey",
          "kms:ListAliases",
          "iam:ListRoles",
          "sso:DescribeRegisteredRegions",
          "s3:ListAllMyBuckets",
          "redshift:DescribeClusters",
          "redshift-serverless:ListWorkgroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "BucketReadOnlyStatement",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "CreateBucketStatement",
        "Effect": "Allow",
        "Action": [
          "s3:CreateBucket"
        ],
        "Resource": [
          "arn:aws:s3:::amazon-datazone*"
        ]
      },
      {
        "Sid": "RamCreateResourceStatement",
        "Effect": "Allow",
        "Action": [
          "ram:CreateResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RamResourceStatement",
        "Effect": "Allow",
        "Action": [
          "ram:DeleteResourceShare",
          "ram:AssociateResourceShare",
          "ram:DisassociateResourceShare",
          "ram:RejectResourceShareInvitation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RamResourceReadOnlyStatement",
        "Effect": "Allow",
        "Action": [
          "ram:GetResourceShares",
          "ram:GetResourceShareInvitations",
          "ram:GetResourceShareAssociations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMPassRoleStatement",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AmazonDataZone*",
          "arn:aws:iam::*:role/service-role/AmazonDataZone*"
        ]
      },
      {
        "Sid": "DataZoneTagOnCreate",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*"
        ]
      },
      {
        "Sid": "CreateSecretStatement",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*"
        ]
      }
    ]
  },
  "AmazonDataZoneRedshiftManageAccessRolePolicy": {
    "policy": {
      "PolicyName": "AmazonDataZoneRedshiftManageAccessRolePolicy",
      "PolicyId": "ANPAZKAPJZG4K6KUTPP6X",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonDataZoneRedshiftManageAccessRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy gives Amazon DataZone permissions to publish Amazon Redshift data to the catalog. It also gives Amazon DataZone permissions to grant access or revoke access to Amazon Redshift or Amazon Redshift Serverless published assets in the catalog.",
      "CreateDate": "2023-09-22T20:15:14.000Z",
      "UpdateDate": "2023-11-16T22:04:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "redshiftDataScopeDownPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift-data:BatchExecuteStatement",
          "redshift-data:DescribeTable",
          "redshift-data:ExecuteStatement",
          "redshift-data:ListTables",
          "redshift-data:ListSchemas",
          "redshift-data:ListDatabases"
        ],
        "Resource": [
          "arn:aws:redshift-serverless:*:*:workgroup/*",
          "arn:aws:redshift:*:*:cluster:*"
        ]
      },
      {
        "Sid": "listSecretsPermission",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "getWorkgroupPermission",
        "Effect": "Allow",
        "Action": [
          "redshift-serverless:GetWorkgroup"
        ],
        "Resource": [
          "arn:aws:redshift-serverless:*:*:workgroup/*"
        ]
      },
      {
        "Sid": "getNamespacePermission",
        "Effect": "Allow",
        "Action": [
          "redshift-serverless:GetNamespace"
        ],
        "Resource": [
          "arn:aws:redshift-serverless:*:*:namespace/*"
        ]
      },
      {
        "Sid": "redshiftDataPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift-data:DescribeStatement",
          "redshift-data:GetStatementResult",
          "redshift:DescribeClusters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "dataSharesPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift:AuthorizeDataShare",
          "redshift:DescribeDataShares"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:datashare:*/datazone*"
        ]
      },
      {
        "Sid": "associateDataShareConsumerPermission",
        "Effect": "Allow",
        "Action": [
          "redshift:AssociateDataShareConsumer"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:datashare:*/datazone*"
        ]
      }
    ]
  },
  "AmazonDataZoneRedshiftGlueProvisioningPolicy": {
    "policy": {
      "PolicyName": "AmazonDataZoneRedshiftGlueProvisioningPolicy",
      "PolicyId": "ANPAZKAPJZG4FVY5HLLBC",
      "Arn": "arn:aws:iam::aws:policy/AmazonDataZoneRedshiftGlueProvisioningPolicy",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Amazon DataZone is a data management service that enables you to catalog, discover, govern, share, and analyze your data. With Amazon DataZone, you can share and access your data across accounts and supported regions. Amazon DataZone simplifies your experience across AWS services, including, but not limited to, Amazon Redshift, Amazon Athena, AWS Glue, and AWS Lake Formation.",
      "CreateDate": "2023-09-22T20:19:54.000Z",
      "UpdateDate": "2024-03-12T16:44:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonDataZonePermissionsToCreateEnvironmentRole",
        "Effect": "Allow",
        "Action": [
          "iam:CreateRole",
          "iam:DetachRolePolicy",
          "iam:DeleteRolePolicy",
          "iam:AttachRolePolicy",
          "iam:PutRolePolicy"
        ],
        "Resource": [
          "arn:aws:iam::*:role/datazone*"
        ]
      },
      {
        "Sid": "IamPassRolePermissions",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/datazone*"
        ]
      },
      {
        "Sid": "AmazonDataZonePermissionsToManageCreatedEnvironmentRole",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteRole",
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/datazone*"
        ]
      },
      {
        "Sid": "AmazonDataZoneCFStackCreationForEnvironments",
        "Effect": "Allow",
        "Action": [
          "cloudformation:CreateStack",
          "cloudformation:TagResource"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/DataZone*"
        ]
      },
      {
        "Sid": "AmazonDataZoneCFStackManagementForEnvironments",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DeleteStack",
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeStackEvents"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/DataZone*"
        ]
      },
      {
        "Sid": "AmazonDataZoneEnvironmentParameterValidation",
        "Effect": "Allow",
        "Action": [
          "lakeformation:GetDataLakeSettings",
          "lakeformation:PutDataLakeSettings",
          "lakeformation:RevokePermissions",
          "lakeformation:ListPermissions",
          "glue:CreateDatabase",
          "glue:GetDatabase",
          "athena:GetWorkGroup",
          "logs:DescribeLogGroups",
          "redshift-serverless:GetNamespace",
          "redshift-serverless:GetWorkgroup",
          "redshift:DescribeClusters",
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonDataZoneEnvironmentLakeFormationPermissions",
        "Effect": "Allow",
        "Action": [
          "lakeformation:RegisterResource",
          "lakeformation:DeregisterResource",
          "lakeformation:GrantPermissions",
          "lakeformation:ListResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonDataZoneEnvironmentGlueDeletePermissions",
        "Effect": "Allow",
        "Action": [
          "glue:DeleteDatabase"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonDataZoneEnvironmentAthenaDeletePermissions",
        "Effect": "Allow",
        "Action": [
          "athena:DeleteWorkGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonDataZoneEnvironmentAthenaResourceCreation",
        "Effect": "Allow",
        "Action": [
          "athena:CreateWorkGroup",
          "athena:TagResource",
          "iam:TagRole",
          "iam:TagPolicy",
          "logs:TagLogGroup"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmazonDataZoneEnvironmentLogGroupCreation",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:DeleteLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:datazone-*"
        ]
      },
      {
        "Sid": "AmazonDataZoneEnvironmentLogGroupManagement",
        "Action": [
          "logs:PutRetentionPolicy"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:datazone-*"
        ],
        "Effect": "Allow"
      },
      {
        "Sid": "AmazonDataZoneEnvironmentIAMPolicyManagement",
        "Effect": "Allow",
        "Action": [
          "iam:DeletePolicy",
          "iam:CreatePolicy",
          "iam:GetPolicy",
          "iam:ListPolicyVersions"
        ],
        "Resource": [
          "arn:aws:iam::*:policy/datazone*"
        ]
      },
      {
        "Sid": "AmazonDataZoneEnvironmentS3ValidationPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets",
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "AmazonDataZoneEnvironmentKMSDecryptPermissions",
        "Effect": "Allow",
        "Action": [
          "kms:GenerateDataKey",
          "kms:Decrypt"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PermissionsToTagAmazonDataZoneEnvironmentGlueResources",
        "Effect": "Allow",
        "Action": [
          "glue:TagResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PermissionsToGetAmazonDataZoneEnvironmentBlueprintTemplates",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RedshiftDataPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift-data:ListSchemas",
          "redshift-data:ExecuteStatement"
        ],
        "Resource": [
          "arn:aws:redshift-serverless:*:*:workgroup/*",
          "arn:aws:redshift:*:*:cluster:*"
        ]
      },
      {
        "Sid": "DescribeStatementPermissions",
        "Effect": "Allow",
        "Action": [
          "redshift-data:DescribeStatement"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetSecretValuePermissions",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDataZoneGlueManageAccessRolePolicy": {
    "policy": {
      "PolicyName": "AmazonDataZoneGlueManageAccessRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IFGMBEEIW",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonDataZoneGlueManageAccessRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v4",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The policy grants permissions to allow Amazon DataZone to enable publishing and access grants to data.",
      "CreateDate": "2023-09-22T20:21:53.000Z",
      "UpdateDate": "2024-04-01T19:05:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "GlueDataQualityPermissions",
        "Effect": "Allow",
        "Action": [
          "glue:ListDataQualityResults",
          "glue:GetDataQualityResult"
        ],
        "Resource": [
          "arn:aws:glue:*:*:dataQualityRuleset/*"
        ]
      },
      {
        "Sid": "GlueTableDatabasePermissions",
        "Effect": "Allow",
        "Action": [
          "glue:CreateTable",
          "glue:DeleteTable",
          "glue:GetDatabases",
          "glue:GetTables"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/*",
          "arn:aws:glue:*:*:table/*"
        ]
      },
      {
        "Sid": "LakeformationResourceSharingPermissions",
        "Effect": "Allow",
        "Action": [
          "lakeformation:BatchGrantPermissions",
          "lakeformation:BatchRevokePermissions",
          "lakeformation:CreateLakeFormationOptIn",
          "lakeformation:DeleteLakeFormationOptIn",
          "lakeformation:GrantPermissions",
          "lakeformation:GetResourceLFTags",
          "lakeformation:ListLakeFormationOptIns",
          "lakeformation:ListPermissions",
          "lakeformation:RegisterResource",
          "lakeformation:RevokePermissions",
          "glue:GetDatabase",
          "glue:GetTable",
          "organizations:DescribeOrganization",
          "ram:GetResourceShareInvitations",
          "ram:ListResources"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CrossAccountRAMResourceSharingPermissions",
        "Effect": "Allow",
        "Action": [
          "glue:DeleteResourcePolicy",
          "glue:PutResourcePolicy"
        ],
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/*",
          "arn:aws:glue:*:*:table/*"
        ]
      },
      {
        "Sid": "CrossAccountLakeFormationResourceSharingPermissions",
        "Effect": "Allow",
        "Action": [
          "ram:CreateResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CrossAccountRAMResourceShareInvitationPermission",
        "Effect": "Allow",
        "Action": [
          "ram:AcceptResourceShareInvitation"
        ],
        "Resource": [
          "arn:aws:ram:*:*:resource-share-invitation/*"
        ]
      },
      {
        "Sid": "CrossAccountRAMResourceSharingViaLakeFormationPermissions",
        "Effect": "Allow",
        "Action": [
          "ram:AssociateResourceShare",
          "ram:DeleteResourceShare",
          "ram:DisassociateResourceShare",
          "ram:GetResourceShares",
          "ram:ListResourceSharePermissions",
          "ram:UpdateResourceShare"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CrossAccountRAMResourceSharingViaLakeFormationHybrid",
        "Effect": "Allow",
        "Action": [
          "ram:AssociateResourceSharePermission"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSDecryptPermission",
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetRoleForDataZone",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AmazonDataZone*",
          "arn:aws:iam::*:role/service-role/AmazonDataZone*"
        ]
      },
      {
        "Sid": "PassRoleForDataLocationRegistration",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/AmazonDataZone*",
          "arn:aws:iam::*:role/service-role/AmazonDataZone*"
        ]
      }
    ]
  },
  "AmazonDataZoneFullUserAccess": {
    "policy": {
      "PolicyName": "AmazonDataZoneFullUserAccess",
      "PolicyId": "ANPAZKAPJZG4ADLK3YDWW",
      "Arn": "arn:aws:iam::aws:policy/AmazonDataZoneFullUserAccess",
      "Path": "/",
      "DefaultVersionId": "v6",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon DataZone, but does not allow the management of domains, users, or associated accounts.",
      "CreateDate": "2023-09-22T21:06:41.000Z",
      "UpdateDate": "2024-04-01T19:27:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonDataZoneUserOperations",
        "Effect": "Allow",
        "Action": [
          "datazone:PostTimeSeriesDataPoints",
          "datazone:ListTimeSeriesDataPoints",
          "datazone:GetTimeSeriesDataPoint",
          "datazone:DeleteTimeSeriesDataPoints",
          "datazone:GetDomain",
          "datazone:CreateFormType",
          "datazone:GetFormType",
          "datazone:GetIamPortalLoginUrl",
          "datazone:SearchUserProfiles",
          "datazone:SearchGroupProfiles",
          "datazone:GetUserProfile",
          "datazone:GetGroupProfile",
          "datazone:ListGroupsForUser",
          "datazone:DeleteFormType",
          "datazone:CreateAssetType",
          "datazone:GetAssetType",
          "datazone:DeleteAssetType",
          "datazone:CreateGlossary",
          "datazone:GetGlossary",
          "datazone:DeleteGlossary",
          "datazone:UpdateGlossary",
          "datazone:CreateGlossaryTerm",
          "datazone:GetGlossaryTerm",
          "datazone:DeleteGlossaryTerm",
          "datazone:UpdateGlossaryTerm",
          "datazone:CreateAsset",
          "datazone:GetAsset",
          "datazone:DeleteAsset",
          "datazone:CreateAssetRevision",
          "datazone:ListAssetRevisions",
          "datazone:AcceptPredictions",
          "datazone:RejectPredictions",
          "datazone:Search",
          "datazone:SearchTypes",
          "datazone:CreateListingChangeSet",
          "datazone:DeleteListing",
          "datazone:SearchListings",
          "datazone:GetListing",
          "datazone:CreateDataSource",
          "datazone:GetDataSource",
          "datazone:DeleteDataSource",
          "datazone:UpdateDataSource",
          "datazone:ListDataSources",
          "datazone:StartDataSourceRun",
          "datazone:GetDataSourceRun",
          "datazone:ListDataSourceRuns",
          "datazone:ListDataSourceRunActivities",
          "datazone:ListEnvironmentBlueprintConfigurations",
          "datazone:CreateEnvironmentBlueprint",
          "datazone:GetEnvironmentBlueprint",
          "datazone:DeleteEnvironmentBlueprint",
          "datazone:UpdateEnvironmentBlueprint",
          "datazone:ListEnvironmentBlueprints",
          "datazone:CreateProject",
          "datazone:UpdateProject",
          "datazone:GetProject",
          "datazone:DeleteProject",
          "datazone:ListProjects",
          "datazone:CreateProjectMembership",
          "datazone:DeleteProjectMembership",
          "datazone:ListProjectMemberships",
          "datazone:CreateEnvironmentProfile",
          "datazone:GetEnvironmentProfile",
          "datazone:UpdateEnvironmentProfile",
          "datazone:DeleteEnvironmentProfile",
          "datazone:ListEnvironmentProfiles",
          "datazone:CreateEnvironment",
          "datazone:GetEnvironment",
          "datazone:DeleteEnvironment",
          "datazone:UpdateEnvironment",
          "datazone:UpdateEnvironmentDeploymentStatus",
          "datazone:ListEnvironments",
          "datazone:ListAccountEnvironments",
          "datazone:GetEnvironmentActionLink",
          "datazone:GetEnvironmentCredentials",
          "datazone:GetSubscriptionTarget",
          "datazone:DeleteSubscriptionTarget",
          "datazone:ListSubscriptionTargets",
          "datazone:CreateSubscriptionRequest",
          "datazone:AcceptSubscriptionRequest",
          "datazone:UpdateSubscriptionRequest",
          "datazone:ListWarehouseMetadata",
          "datazone:RejectSubscriptionRequest",
          "datazone:GetSubscriptionRequestDetails",
          "datazone:ListSubscriptionRequests",
          "datazone:DeleteSubscriptionRequest",
          "datazone:GetSubscription",
          "datazone:CancelSubscription",
          "datazone:GetSubscriptionEligibility",
          "datazone:ListSubscriptions",
          "datazone:RevokeSubscription",
          "datazone:CreateSubscriptionGrant",
          "datazone:DeleteSubscriptionGrant",
          "datazone:GetSubscriptionGrant",
          "datazone:ListSubscriptionGrants",
          "datazone:UpdateSubscriptionGrantStatus",
          "datazone:ListNotifications",
          "datazone:StartMetadataGenerationRun",
          "datazone:GetMetadataGenerationRun",
          "datazone:CancelMetadataGenerationRun",
          "datazone:ListMetadataGenerationRuns"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RAMResourceShareOperations",
        "Effect": "Allow",
        "Action": [
          "ram:GetResourceShareAssociations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonDataZoneDomainExecutionRolePolicy": {
    "policy": {
      "PolicyName": "AmazonDataZoneDomainExecutionRolePolicy",
      "PolicyId": "ANPAZKAPJZG4F33DOLA5S",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonDataZoneDomainExecutionRolePolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Default policy for the Amazon DataZone's DomainExecutionRole service role. This role is used by Amazon DataZone to catalog, discover, govern, share, and analyze data in the Amazon DataZone domain.",
      "CreateDate": "2023-09-27T21:55:08.000Z",
      "UpdateDate": "2024-04-01T19:25:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DomainExecutionRoleStatement",
        "Effect": "Allow",
        "Action": [
          "datazone:ListTimeSeriesDataPoints",
          "datazone:GetTimeSeriesDataPoint",
          "datazone:DeleteTimeSeriesDataPoints",
          "datazone:AcceptPredictions",
          "datazone:AcceptSubscriptionRequest",
          "datazone:CancelSubscription",
          "datazone:CreateAsset",
          "datazone:CreateAssetRevision",
          "datazone:CreateAssetType",
          "datazone:CreateDataSource",
          "datazone:CreateEnvironment",
          "datazone:CreateEnvironmentBlueprint",
          "datazone:CreateEnvironmentProfile",
          "datazone:CreateFormType",
          "datazone:CreateGlossary",
          "datazone:CreateGlossaryTerm",
          "datazone:CreateListingChangeSet",
          "datazone:CreateProject",
          "datazone:CreateProjectMembership",
          "datazone:CreateSubscriptionGrant",
          "datazone:CreateSubscriptionRequest",
          "datazone:DeleteAsset",
          "datazone:DeleteAssetType",
          "datazone:DeleteDataSource",
          "datazone:DeleteEnvironment",
          "datazone:DeleteEnvironmentBlueprint",
          "datazone:DeleteEnvironmentProfile",
          "datazone:DeleteFormType",
          "datazone:DeleteGlossary",
          "datazone:DeleteGlossaryTerm",
          "datazone:DeleteListing",
          "datazone:DeleteProject",
          "datazone:DeleteProjectMembership",
          "datazone:DeleteSubscriptionGrant",
          "datazone:DeleteSubscriptionRequest",
          "datazone:DeleteSubscriptionTarget",
          "datazone:GetAsset",
          "datazone:GetAssetType",
          "datazone:GetDataSource",
          "datazone:GetDataSourceRun",
          "datazone:GetDomain",
          "datazone:GetEnvironment",
          "datazone:GetEnvironmentActionLink",
          "datazone:GetEnvironmentBlueprint",
          "datazone:GetEnvironmentCredentials",
          "datazone:GetEnvironmentProfile",
          "datazone:GetFormType",
          "datazone:GetGlossary",
          "datazone:GetGlossaryTerm",
          "datazone:GetGroupProfile",
          "datazone:GetListing",
          "datazone:GetProject",
          "datazone:GetSubscription",
          "datazone:GetSubscriptionEligibility",
          "datazone:GetSubscriptionGrant",
          "datazone:GetSubscriptionRequestDetails",
          "datazone:GetSubscriptionTarget",
          "datazone:GetUserProfile",
          "datazone:ListAccountEnvironments",
          "datazone:ListAssetRevisions",
          "datazone:ListDataSourceRunActivities",
          "datazone:ListDataSourceRuns",
          "datazone:ListDataSources",
          "datazone:ListEnvironmentBlueprintConfigurations",
          "datazone:ListEnvironmentBlueprintConfigurationSummaries",
          "datazone:ListEnvironmentBlueprints",
          "datazone:ListEnvironmentProfiles",
          "datazone:ListEnvironments",
          "datazone:ListGroupsForUser",
          "datazone:ListNotifications",
          "datazone:ListProjectMemberships",
          "datazone:ListProjects",
          "datazone:ListSubscriptionGrants",
          "datazone:ListSubscriptionRequests",
          "datazone:ListSubscriptionTargets",
          "datazone:ListSubscriptions",
          "datazone:ListWarehouseMetadata",
          "datazone:RejectPredictions",
          "datazone:RejectSubscriptionRequest",
          "datazone:RevokeSubscription",
          "datazone:Search",
          "datazone:SearchGroupProfiles",
          "datazone:SearchListings",
          "datazone:SearchTypes",
          "datazone:SearchUserProfiles",
          "datazone:StartDataSourceRun",
          "datazone:UpdateDataSource",
          "datazone:UpdateEnvironment",
          "datazone:UpdateEnvironmentBlueprint",
          "datazone:UpdateEnvironmentDeploymentStatus",
          "datazone:UpdateEnvironmentProfile",
          "datazone:UpdateGlossary",
          "datazone:UpdateGlossaryTerm",
          "datazone:UpdateProject",
          "datazone:UpdateSubscriptionGrantStatus",
          "datazone:UpdateSubscriptionRequest",
          "datazone:StartMetadataGenerationRun",
          "datazone:GetMetadataGenerationRun",
          "datazone:CancelMetadataGenerationRun",
          "datazone:ListMetadataGenerationRuns"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RAMResourceShareStatement",
        "Effect": "Allow",
        "Action": [
          "ram:GetResourceShareAssociations"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSS3OnOutpostsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSS3OnOutpostsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4PIWKEWQEU",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSS3OnOutpostsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allow Amazon S3 on Outposts service to manage EC2 network resources on your behalf.",
      "CreateDate": "2023-10-03T20:32:36.000Z",
      "UpdateDate": "2023-10-03T20:32:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeVpcs",
          "ec2:DescribeCoipPools",
          "ec2:GetCoipPoolUsage",
          "ec2:DescribeAddresses",
          "ec2:DescribeLocalGatewayRouteTableVpcAssociations"
        ],
        "Resource": [
          "*"
        ],
        "Sid": "DescribeVpcResources"
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ],
        "Sid": "CreateNetworkInterface"
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ],
        "Sid": "CreateTagsForCreateNetworkInterface"
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:ipv4pool-ec2/*"
        ],
        "Sid": "AllocateIpAddress"
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:AllocateAddress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:elastic-ip/*"
        ],
        "Sid": "CreateTagsForAllocateIpAddress"
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DisassociateAddress",
          "ec2:ReleaseAddress",
          "ec2:AssociateAddress"
        ],
        "Resource": [
          "*"
        ],
        "Sid": "ReleaseVpcResources"
      },
      {
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ],
        "Sid": "CreateTags"
      }
    ]
  },
  "AmazonSageMakerCanvasDirectDeployAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerCanvasDirectDeployAccess",
      "PolicyId": "ANPAZKAPJZG4BZOXJBTOQ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSageMakerCanvasDirectDeployAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon SageMaker Canvas to create, manage and view endpoint details for endpoints created through Canvas. Allows Amazon SageMaker Canvas to retrieve endpoint invocation metrics from CloudWatch.",
      "CreateDate": "2023-10-06T18:11:53.000Z",
      "UpdateDate": "2023-10-06T18:11:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SageMakerEndpointPerms",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateEndpoint",
          "sagemaker:CreateEndpointConfig",
          "sagemaker:DeleteEndpoint",
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:InvokeEndpoint",
          "sagemaker:UpdateEndpoint"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:Canvas*",
          "arn:aws:sagemaker:*:*:canvas*"
        ]
      },
      {
        "Sid": "ReadCWInvocationMetrics",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmplifyBackendDeployFullAccess": {
    "policy": {
      "PolicyName": "AmplifyBackendDeployFullAccess",
      "PolicyId": "ANPAZKAPJZG4H6M6P2QGM",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmplifyBackendDeployFullAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v5",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides Amplify full access permissions to deploy Amplify backend resources (AWS AppSync, Amazon Cognito, Amazon S3 and other related services) via the AWS Cloud Development Kit (AWS CDK)",
      "CreateDate": "2023-10-06T21:32:59.000Z",
      "UpdateDate": "2024-04-05T18:24:13.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CDKPreDeploy",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:DescribeStackEvents",
          "cloudformation:GetTemplate",
          "cloudformation:ListStackResources",
          "cloudformation:GetTemplateSummary",
          "cloudformation:DeleteStack"
        ],
        "Resource": [
          "arn:aws:cloudformation:*:*:stack/amplify-*",
          "arn:aws:cloudformation:*:*:stack/CDKToolkit/*"
        ]
      },
      {
        "Sid": "AmplifyMetadata",
        "Effect": "Allow",
        "Action": [
          "amplify:ListApps",
          "cloudformation:ListStacks",
          "ssm:DescribeParameters",
          "appsync:GetIntrospectionSchema",
          "amplify:GetBackendEnvironment"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmplifyHotSwappableResources",
        "Effect": "Allow",
        "Action": [
          "appsync:GetSchemaCreationStatus",
          "appsync:StartSchemaCreation",
          "appsync:UpdateResolver",
          "appsync:ListFunctions",
          "appsync:UpdateFunction",
          "appsync:UpdateApiKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AmplifyHotSwappableFunctionResource",
        "Effect": "Allow",
        "Action": [
          "lambda:InvokeFunction",
          "lambda:UpdateFunctionCode",
          "lambda:GetFunction",
          "lambda:UpdateFunctionConfiguration"
        ],
        "Resource": [
          "arn:aws:lambda:*:*:function:amplify-*"
        ]
      },
      {
        "Sid": "AmplifySchema",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*amplify*",
          "arn:aws:s3:::cdk-*-assets-*-*"
        ]
      },
      {
        "Sid": "CDKDeploy",
        "Effect": "Allow",
        "Action": [
          "sts:AssumeRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/cdk-*-deploy-role-*-*",
          "arn:aws:iam::*:role/cdk-*-file-publishing-role-*-*",
          "arn:aws:iam::*:role/cdk-*-image-publishing-role-*-*",
          "arn:aws:iam::*:role/cdk-*-lookup-role-*-*"
        ]
      },
      {
        "Sid": "AmplifySSM",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParametersByPath",
          "ssm:GetParameters",
          "ssm:GetParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/amplify/*"
        ]
      },
      {
        "Sid": "AmplifyModifySSMParam",
        "Effect": "Allow",
        "Action": [
          "ssm:PutParameter",
          "ssm:DeleteParameter",
          "ssm:DeleteParameters"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/amplify/*"
        ]
      }
    ]
  },
  "AmazonConnectSynchronizationServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonConnectSynchronizationServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4J2PE2WH3Y",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonConnectSynchronizationServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Connect to synchronize AWS resources across regions on your behalf.",
      "CreateDate": "2023-10-27T22:38:25.000Z",
      "UpdateDate": "2023-10-27T22:38:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowConnectActions",
        "Effect": "Allow",
        "Action": [
          "connect:CreateUser*",
          "connect:UpdateUser*",
          "connect:DeleteUser*",
          "connect:DescribeUser*",
          "connect:ListUser*",
          "connect:CreateRoutingProfile",
          "connect:UpdateRoutingProfile*",
          "connect:DeleteRoutingProfile",
          "connect:DescribeRoutingProfile",
          "connect:ListRoutingProfile*",
          "connect:CreateAgentStatus",
          "connect:UpdateAgentStatus",
          "connect:DescribeAgentStatus",
          "connect:ListAgentStatuses",
          "connect:CreateQuickConnect",
          "connect:UpdateQuickConnect*",
          "connect:DeleteQuickConnect",
          "connect:DescribeQuickConnect",
          "connect:ListQuickConnects",
          "connect:CreateHoursOfOperation",
          "connect:UpdateHoursOfOperation",
          "connect:DeleteHoursOfOperation",
          "connect:DescribeHoursOfOperation",
          "connect:ListHoursOfOperations",
          "connect:CreateQueue",
          "connect:UpdateQueue*",
          "connect:DeleteQueue",
          "connect:DescribeQueue",
          "connect:ListQueue*",
          "connect:CreatePrompt",
          "connect:UpdatePrompt",
          "connect:DeletePrompt",
          "connect:DescribePrompt",
          "connect:ListPrompts",
          "connect:GetPromptFile",
          "connect:CreateSecurityProfile",
          "connect:UpdateSecurityProfile",
          "connect:DeleteSecurityProfile",
          "connect:DescribeSecurityProfile",
          "connect:ListSecurityProfile*",
          "connect:CreateContactFlow*",
          "connect:UpdateContactFlow*",
          "connect:DeleteContactFlow*",
          "connect:DescribeContactFlow*",
          "connect:ListContactFlow*",
          "connect:BatchGetFlowAssociation",
          "connect:CreatePredefinedAttribute",
          "connect:UpdatePredefinedAttribute",
          "connect:DeletePredefinedAttribute",
          "connect:DescribePredefinedAttribute",
          "connect:ListPredefinedAttributes",
          "connect:ListTagsForResource",
          "connect:TagResource",
          "connect:UntagResource",
          "connect:ListTrafficDistributionGroups",
          "connect:ListPhoneNumbersV2",
          "connect:UpdatePhoneNumber",
          "connect:DescribePhoneNumber",
          "connect:Associate*",
          "connect:Disassociate*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowPutMetricsForConnectNamespace",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerCanvasDataPrepFullAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerCanvasDataPrepFullAccess",
      "PolicyId": "ANPAZKAPJZG4CKHJVSVSQ",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerCanvasDataPrepFullAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon SageMaker resources and operations for data preparation in Canvas. The policy also provides select access to related services (e.g., S3, IAM, KMS, RDS, CloudWatch Logs, Redshift, Athena, Glue, EventBridge, Secrets Manager). This policy should be attached to the Amazon SageMaker Domain/User Profile execution role.",
      "CreateDate": "2023-10-27T22:56:13.000Z",
      "UpdateDate": "2023-12-08T02:53:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SageMakerListFeatureGroupOperation",
        "Effect": "Allow",
        "Action": [
          "sagemaker:ListFeatureGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SageMakerFeatureGroupOperations",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateFeatureGroup",
          "sagemaker:DescribeFeatureGroup"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:feature-group/*"
        ]
      },
      {
        "Sid": "SageMakerProcessingJobOperations",
        "Effect": "Allow",
        "Action": [
          "sagemaker:CreateProcessingJob",
          "sagemaker:DescribeProcessingJob",
          "sagemaker:AddTags"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:processing-job/*canvas-data-prep*"
        ]
      },
      {
        "Sid": "SageMakerProcessingJobListOperation",
        "Effect": "Allow",
        "Action": [
          "sagemaker:ListProcessingJobs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "SageMakerPipelineOperations",
        "Effect": "Allow",
        "Action": [
          "sagemaker:DescribePipeline",
          "sagemaker:CreatePipeline",
          "sagemaker:UpdatePipeline",
          "sagemaker:DeletePipeline",
          "sagemaker:StartPipelineExecution",
          "sagemaker:ListPipelineExecutionSteps",
          "sagemaker:DescribePipelineExecution"
        ],
        "Resource": [
          "arn:aws:sagemaker:*:*:pipeline/*canvas-data-prep*"
        ]
      },
      {
        "Sid": "KMSListOperations",
        "Effect": "Allow",
        "Action": [
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "KMSOperations",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "S3Operations",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:GetBucketCors",
          "s3:GetBucketLocation",
          "s3:AbortMultipartUpload"
        ],
        "Resource": [
          "arn:aws:s3:::*SageMaker*",
          "arn:aws:s3:::*Sagemaker*",
          "arn:aws:s3:::*sagemaker*"
        ]
      },
      {
        "Sid": "S3GetObjectOperation",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      },
      {
        "Sid": "S3ListOperations",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMListOperations",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IAMGetOperations",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "IAMPassOperation",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*"
        ]
      },
      {
        "Sid": "EventBridgePutOperation",
        "Effect": "Allow",
        "Action": [
          "events:PutRule"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/*"
        ]
      },
      {
        "Sid": "EventBridgeOperations",
        "Effect": "Allow",
        "Action": [
          "events:DescribeRule",
          "events:PutTargets"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/*"
        ]
      },
      {
        "Sid": "EventBridgeTagBasedOperations",
        "Effect": "Allow",
        "Action": [
          "events:TagResource"
        ],
        "Resource": [
          "arn:aws:events:*:*:rule/*"
        ]
      },
      {
        "Sid": "EventBridgeListTagOperation",
        "Effect": "Allow",
        "Action": [
          "events:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GlueOperations",
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:SearchTables"
        ],
        "Resource": [
          "arn:aws:glue:*:*:table/*",
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/*"
        ]
      },
      {
        "Sid": "EMROperations",
        "Effect": "Allow",
        "Action": [
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:ListInstanceGroups"
        ],
        "Resource": [
          "arn:aws:elasticmapreduce:*:*:cluster/*"
        ]
      },
      {
        "Sid": "EMRListOperation",
        "Effect": "Allow",
        "Action": [
          "elasticmapreduce:ListClusters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AthenaListDataCatalogOperation",
        "Effect": "Allow",
        "Action": [
          "athena:ListDataCatalogs"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AthenaQueryExecutionOperations",
        "Effect": "Allow",
        "Action": [
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:StartQueryExecution",
          "athena:StopQueryExecution"
        ],
        "Resource": [
          "arn:aws:athena:*:*:workgroup/*"
        ]
      },
      {
        "Sid": "AthenaDataCatalogOperations",
        "Effect": "Allow",
        "Action": [
          "athena:ListDatabases",
          "athena:ListTableMetadata"
        ],
        "Resource": [
          "arn:aws:athena:*:*:datacatalog/*"
        ]
      },
      {
        "Sid": "RedshiftOperations",
        "Effect": "Allow",
        "Action": [
          "redshift-data:DescribeStatement",
          "redshift-data:CancelStatement",
          "redshift-data:GetStatementResult"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "RedshiftArnBasedOperations",
        "Effect": "Allow",
        "Action": [
          "redshift-data:ExecuteStatement",
          "redshift-data:ListSchemas",
          "redshift-data:ListTables"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:cluster:*"
        ]
      },
      {
        "Sid": "RedshiftGetCredentialsOperation",
        "Effect": "Allow",
        "Action": [
          "redshift:GetClusterCredentials"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
          "arn:aws:redshift:*:*:dbname:*"
        ]
      },
      {
        "Sid": "SecretsManagerARNBasedOperation",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
        ]
      },
      {
        "Sid": "SecretManagerTagBasedOperation",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetSecretValue"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
        ]
      },
      {
        "Sid": "RDSOperation",
        "Effect": "Allow",
        "Action": [
          "rds:DescribeDBInstances"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "LoggingOperation",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/sagemaker/studio:*"
        ]
      }
    ]
  },
  "AWSDataLifecycleManagerSSMFullAccess": {
    "policy": {
      "PolicyName": "AWSDataLifecycleManagerSSMFullAccess",
      "PolicyId": "ANPAZKAPJZG4LAVPWOUGF",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSDataLifecycleManagerSSMFullAccess",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides Amazon Data Lifecycle Manager permission to perform the Systems Manager actions required to run pre and post scripts on all Amazon EC2 instances.",
      "CreateDate": "2023-10-31T20:29:44.000Z",
      "UpdateDate": "2023-11-16T22:31:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowSSMReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "ssm:GetCommandInvocation",
          "ssm:ListCommands",
          "ssm:DescribeInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowTaggedSSMDocumentsOnly",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand",
          "ssm:DescribeDocument",
          "ssm:GetDocument"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      },
      {
        "Sid": "AllowSpecificAWSOwnedSSMDocuments",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand",
          "ssm:DescribeDocument",
          "ssm:GetDocument"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
          "arn:aws:ssm:*:*:document/AWSSystemsManagerSAP-CreateDLMSnapshotForSAPHANA"
        ]
      },
      {
        "Sid": "AllowAllEC2Instances",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      }
    ]
  },
  "AWSIAMIdentityCenterAllowListForIdentityContext": {
    "policy": {
      "PolicyName": "AWSIAMIdentityCenterAllowListForIdentityContext",
      "PolicyId": "ANPAZKAPJZG4KDXNUOLXM",
      "Arn": "arn:aws:iam::aws:policy/AWSIAMIdentityCenterAllowListForIdentityContext",
      "Path": "/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the list of actions that are allowed for roles assumed with the IAM Identity Center identity context. AWS Security Token Service (AWS STS) automatically attaches this policy to assumed roles. The identity context is passed as ProvidedContext.",
      "CreateDate": "2023-11-08T15:21:33.000Z",
      "UpdateDate": "2024-04-11T18:33:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "TrustedIdentityPropagation",
        "Effect": "Deny",
        "NotAction": [
          "athena:BatchGetNamedQuery",
          "athena:BatchGetPreparedStatement",
          "athena:BatchGetQueryExecution",
          "athena:CreateNamedQuery",
          "athena:CreatePreparedStatement",
          "athena:DeleteNamedQuery",
          "athena:DeletePreparedStatement",
          "athena:GetNamedQuery",
          "athena:GetPreparedStatement",
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:GetQueryResultsStream",
          "athena:GetQueryRuntimeStatistics",
          "athena:GetWorkGroup",
          "athena:ListNamedQueries",
          "athena:ListPreparedStatements",
          "athena:ListQueryExecutions",
          "athena:StartQueryExecution",
          "athena:StopQueryExecution",
          "athena:UpdateNamedQuery",
          "athena:UpdatePreparedStatement",
          "athena:GetDatabase",
          "athena:GetDataCatalog",
          "athena:GetTableMetadata",
          "athena:ListDatabases",
          "athena:ListDataCatalogs",
          "athena:ListTableMetadata",
          "athena:ListWorkGroups",
          "elasticmapreduce:GetClusterSessionCredentials",
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetTableVersions",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:BatchGetPartition",
          "glue:GetColumnStatisticsForPartition",
          "glue:GetColumnStatisticsForTable",
          "glue:SearchTables",
          "glue:CreateDatabase",
          "glue:UpdateDatabase",
          "glue:DeleteDatabase",
          "glue:CreateTable",
          "glue:DeleteTable",
          "glue:BatchDeleteTable",
          "glue:UpdateTable",
          "glue:BatchCreatePartition",
          "glue:CreatePartition",
          "glue:DeletePartition",
          "glue:BatchDeletePartition",
          "glue:UpdatePartition",
          "glue:BatchUpdatePartition",
          "glue:DeleteColumnStatisticsForPartition",
          "glue:DeleteColumnStatisticsForTable",
          "glue:UpdateColumnStatisticsForPartition",
          "glue:UpdateColumnStatisticsForTable",
          "lakeformation:GetDataAccess",
          "s3:GetAccessGrantsInstanceForPrefix",
          "s3:GetDataAccess",
          "qbusiness:Chat",
          "qbusiness:ChatSync",
          "qbusiness:ListConversations",
          "qbusiness:ListMessages",
          "qbusiness:DeleteConversation"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchApplicationSignalsServiceRolePolicy": {
    "policy": {
      "PolicyName": "CloudWatchApplicationSignalsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4LAFFLXUGT",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudWatchApplicationSignalsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v3",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy grants permission to CloudWatch Application Signals to collect monitoring and tagging data from other relevant AWS services.",
      "CreateDate": "2023-11-09T18:09:57.000Z",
      "UpdateDate": "2024-04-08T16:03:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "XRayPermission",
        "Effect": "Allow",
        "Action": [
          "xray:GetServiceGraph"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CWLogsPermission",
        "Effect": "Allow",
        "Action": [
          "logs:StartQuery",
          "logs:GetQueryResults"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/appsignals/*:*"
        ]
      },
      {
        "Sid": "CWListMetricsPermission",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:ListMetrics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CWGetMetricDataPermission",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TagsPermission",
        "Effect": "Allow",
        "Action": [
          "tag:GetResources"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "PartnerCentralAccountManagementUserRoleAssociation": {
    "policy": {
      "PolicyName": "PartnerCentralAccountManagementUserRoleAssociation",
      "PolicyId": "ANPAZKAPJZG4MONSUE2UX",
      "Arn": "arn:aws:iam::aws:policy/PartnerCentralAccountManagementUserRoleAssociation",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to associate and dissociate partner central users with IAM roles",
      "CreateDate": "2023-11-10T02:03:40.000Z",
      "UpdateDate": "2023-11-10T02:03:40.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PassPartnerCentralRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/PartnerCentralRoleFor*"
        ]
      },
      {
        "Sid": "PartnerUserRoleAssociation",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles",
          "partnercentral-account-management:AssociatePartnerUser",
          "partnercentral-account-management:DisassociatePartnerUser"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRolePolicyForBackupRestoreTesting": {
    "policy": {
      "PolicyName": "AWSServiceRolePolicyForBackupRestoreTesting",
      "PolicyId": "ANPAZKAPJZG4A6QQZKWX4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRolePolicyForBackupRestoreTesting",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy contains permissions for testing restores and for cleaning up resources created during tests.",
      "CreateDate": "2023-11-10T23:37:45.000Z",
      "UpdateDate": "2024-02-14T22:42:37.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "BackupActions",
        "Effect": "Allow",
        "Action": [
          "backup:DescribeRecoveryPoint",
          "backup:DescribeRestoreJob",
          "backup:DescribeProtectedResource",
          "backup:GetRecoveryPointRestoreMetadata",
          "backup:ListBackupVaults",
          "backup:ListProtectedResources",
          "backup:ListProtectedResourcesByBackupVault",
          "backup:ListRecoveryPointsByBackupVault",
          "backup:ListRecoveryPointsByResource",
          "backup:ListTags",
          "backup:StartRestoreJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "IamPassRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeActions",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeSnapshotTierStatus",
          "ec2:DescribeTags",
          "ec2:DescribeVolumes",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeMountTargets",
          "fsx:DescribeFileSystems",
          "fsx:DescribeVolumes",
          "fsx:ListTagsForResource",
          "rds:DescribeDBInstances",
          "rds:DescribeDBClusters",
          "rds:DescribeDBInstanceAutomatedBackups",
          "rds:DescribeDBClusterAutomatedBackups",
          "rds:ListTagsForResource",
          "redshift:DescribeClusters"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeleteActions",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume",
          "ec2:TerminateInstances",
          "elasticfilesystem:DeleteFilesystem",
          "elasticfilesystem:DeleteMountTarget",
          "rds:DeleteDBCluster",
          "rds:DeleteDBInstance",
          "fsx:DeleteFileSystem",
          "fsx:DeleteVolume"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DdbDeleteActions",
        "Effect": "Allow",
        "Action": [
          "dynamodb:DeleteTable",
          "dynamodb:DescribeTable"
        ],
        "Resource": [
          "arn:aws:dynamodb:*:*:table/awsbackup-restore-test-*"
        ]
      },
      {
        "Sid": "RedshiftDeleteActions",
        "Effect": "Allow",
        "Action": [
          "redshift:DeleteCluster"
        ],
        "Resource": [
          "arn:aws:redshift:*:*:cluster:awsbackup-restore-test-*"
        ]
      },
      {
        "Sid": "S3DeleteActions",
        "Effect": "Allow",
        "Action": [
          "s3:DeleteBucket",
          "s3:GetLifecycleConfiguration",
          "s3:PutLifecycleConfiguration"
        ],
        "Resource": [
          "arn:aws:s3:::awsbackup-restore-test-*"
        ]
      },
      {
        "Sid": "TimestreamDeleteActions",
        "Effect": "Allow",
        "Action": [
          "timestream:DeleteTable"
        ],
        "Resource": [
          "arn:aws:timestream:*:*:database/*/table/awsbackup-restore-test-*"
        ]
      }
    ]
  },
  "AWSIncidentManagerIncidentAccessServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSIncidentManagerIncidentAccessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4PRZVSLEUN",
      "Arn": "arn:aws:iam::aws:policy/AWSIncidentManagerIncidentAccessServiceRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants Incident Manager permissions to call other AWS services as a part of managing an incident.",
      "CreateDate": "2023-11-13T00:01:23.000Z",
      "UpdateDate": "2024-02-20T23:02:11.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "IncidentAccessPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStackEvents",
          "cloudformation:DescribeStackResources",
          "codedeploy:BatchGetDeployments",
          "codedeploy:ListDeployments",
          "codedeploy:ListDeploymentTargets",
          "autoscaling:DescribeAutoScalingInstances"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSIoTTwinMakerServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSIoTTwinMakerServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4IXKMJJBGW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSIoTTwinMakerServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS IoT TwinMaker to call other AWS services and to sync their resources on your behalf.",
      "CreateDate": "2023-11-13T18:59:42.000Z",
      "UpdateDate": "2023-11-13T18:59:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "SiteWiseAssetReadAccess",
        "Effect": "Allow",
        "Action": [
          "iotsitewise:DescribeAsset"
        ],
        "Resource": [
          "arn:aws:iotsitewise:*:*:asset/*"
        ]
      },
      {
        "Sid": "SiteWiseAssetModelReadAccess",
        "Effect": "Allow",
        "Action": [
          "iotsitewise:DescribeAssetModel"
        ],
        "Resource": [
          "arn:aws:iotsitewise:*:*:asset-model/*"
        ]
      },
      {
        "Sid": "SiteWiseAssetModelAndAssetListAccess",
        "Effect": "Allow",
        "Action": [
          "iotsitewise:ListAssets",
          "iotsitewise:ListAssetModels"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TwinMakerAccess",
        "Effect": "Allow",
        "Action": [
          "iottwinmaker:GetEntity",
          "iottwinmaker:CreateEntity",
          "iottwinmaker:UpdateEntity",
          "iottwinmaker:DeleteEntity",
          "iottwinmaker:ListEntities",
          "iottwinmaker:GetComponentType",
          "iottwinmaker:CreateComponentType",
          "iottwinmaker:UpdateComponentType",
          "iottwinmaker:DeleteComponentType",
          "iottwinmaker:ListComponentTypes"
        ],
        "Resource": [
          "arn:aws:iottwinmaker:*:*:workspace/*"
        ]
      }
    ]
  },
  "AWSResourceExplorerOrganizationsAccess": {
    "policy": {
      "PolicyName": "AWSResourceExplorerOrganizationsAccess",
      "PolicyId": "ANPAZKAPJZG4KIZIE4IPE",
      "Arn": "arn:aws:iam::aws:policy/AWSResourceExplorerOrganizationsAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants administrative permissions to Resource Explorer and grants read-only permissions to other AWS services to support this access. The AWS Organizations administrator needs these permissions to setup and manage multi-account search in the console.",
      "CreateDate": "2023-11-14T17:01:12.000Z",
      "UpdateDate": "2023-11-14T17:01:12.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "resource-explorer-2:*",
          "ec2:DescribeRegions",
          "ram:ListResources",
          "ram:GetResourceShares",
          "organizations:ListAccounts",
          "organizations:ListRoots",
          "organizations:ListOrganizationalUnitsForParent",
          "organizations:ListAccountsForParent",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:DescribeOrganization"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ResourceExplorerGetSLRAccess",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/resource-explorer-2.amazonaws.com/AWSServiceRoleForResourceExplorer"
        ]
      },
      {
        "Sid": "ResourceExplorerCreateSLRAccess",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OrganizationsAdministratorAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess",
          "organizations:DisableAWSServiceAccess",
          "organizations:RegisterDelegatedAdministrator",
          "organizations:DeregisterDelegatedAdministrator"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSrePostPrivateCloudWatchAccess": {
    "policy": {
      "PolicyName": "AWSrePostPrivateCloudWatchAccess",
      "PolicyId": "ANPAZKAPJZG4DFJKUWJMM",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSrePostPrivateCloudWatchAccess",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides re:Post Private access to publish CloudWatch metrics data",
      "CreateDate": "2023-11-15T16:37:33.000Z",
      "UpdateDate": "2023-11-15T16:37:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudWatchPublishMetrics",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceDeploymentServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSMarketplaceDeploymentServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4PK56YGZZ2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSMarketplaceDeploymentServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows AWS Marketplace to create and manage seller deployment parameters for the products that you subscribe to on AWS Marketplace.",
      "CreateDate": "2023-11-15T23:34:33.000Z",
      "UpdateDate": "2023-11-15T23:34:33.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ManageMarketplaceDeploymentSecrets",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:PutSecretValue",
          "secretsmanager:DescribeSecret",
          "secretsmanager:DeleteSecret",
          "secretsmanager:RemoveRegionsFromReplication"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:marketplace-deployment*!*"
        ]
      },
      {
        "Sid": "ListSecrets",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:ListSecrets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TagMarketplaceDeploymentSecrets",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:marketplace-deployment!*"
        ]
      }
    ]
  },
  "AWSGitSyncServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSGitSyncServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4OZHR7ARYP",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSGitSyncServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy which allows AWS Code Connections to sync content from your git repository",
      "CreateDate": "2023-11-16T17:05:42.000Z",
      "UpdateDate": "2023-11-16T17:05:42.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AccessGitRepos",
        "Effect": "Allow",
        "Action": [
          "codestar-connections:UseConnection"
        ],
        "Resource": [
          "arn:aws:codestar-connections:*:*:connection/*"
        ]
      }
    ]
  },
  "EC2ImageBuilderLifecycleExecutionPolicy": {
    "policy": {
      "PolicyName": "EC2ImageBuilderLifecycleExecutionPolicy",
      "PolicyId": "ANPAZKAPJZG4MAHJZQTQZ",
      "Arn": "arn:aws:iam::aws:policy/service-role/EC2ImageBuilderLifecycleExecutionPolicy",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "The EC2ImageBuilderLifecycleExecutionPolicy policy grants permissions for Image Builder to perform actions such as deprecate or delete Image Builder image resources and their underlying resources (AMIs, snapshots) to support automated rules for image lifecycle management tasks.",
      "CreateDate": "2023-11-16T23:23:09.000Z",
      "UpdateDate": "2023-11-16T23:23:09.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "Ec2ImagePermission",
        "Effect": "Allow",
        "Action": [
          "ec2:EnableImage",
          "ec2:DeregisterImage",
          "ec2:EnableImageDeprecation",
          "ec2:DescribeImageAttribute",
          "ec2:DisableImage",
          "ec2:DisableImageDeprecation"
        ],
        "Resource": [
          "arn:aws:ec2:*::image/*"
        ]
      },
      {
        "Sid": "EC2DeleteSnapshotPermission",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "EC2TagsPermission",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteTags",
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*",
          "arn:aws:ec2:*::image/*"
        ]
      },
      {
        "Sid": "ECRImagePermission",
        "Effect": "Allow",
        "Action": [
          "ecr:BatchGetImage",
          "ecr:BatchDeleteImage"
        ],
        "Resource": [
          "arn:aws:ecr:*:*:repository/*"
        ]
      },
      {
        "Sid": "ImageBuilderEC2TagServicePermission",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "tag:GetResources",
          "imagebuilder:DeleteImage"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonInspector2AgentlessServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonInspector2AgentlessServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4FZY7O6M3P",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonInspector2AgentlessServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants Amazon Inspector access to AWS Services needed to perform agent-less security assessments",
      "CreateDate": "2023-11-20T15:18:32.000Z",
      "UpdateDate": "2023-11-20T15:18:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "InstanceIdentification",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeVolumes",
          "ec2:DescribeSnapshots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetSnapshotData",
        "Effect": "Allow",
        "Action": [
          "ebs:ListSnapshotBlocks",
          "ebs:GetSnapshotBlock"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "CreateSnapshotsAnyInstanceOrVolume",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*",
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "DenyCreateSnapshotsOnExcludedInstances",
        "Effect": "Deny",
        "Action": [
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "CreateSnapshotsOnAnySnapshotOnlyWithTag",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "CreateOnlyInspectorScanTagOnlyUsingCreateSnapshots",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "DeleteOnlySnapshotsTaggedForScanning",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "DenyKmsDecryptForExcludedKeys",
        "Effect": "Deny",
        "Action": [
          "kms:Decrypt"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "DecryptSnapshotBlocksVolContext",
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "DecryptSnapshotBlocksSnapContext",
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "DescribeKeysForEbsOperations",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      },
      {
        "Sid": "ListKeyResourceTags",
        "Effect": "Allow",
        "Action": [
          "kms:ListResourceTags"
        ],
        "Resource": [
          "arn:aws:kms:*:*:key/*"
        ]
      }
    ]
  },
  "CostOptimizationHubServiceRolePolicy": {
    "policy": {
      "PolicyName": "CostOptimizationHubServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4GRVZQTOT7",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CostOptimizationHubServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Cost Optimization Hub to retrieve organization information and collect optimization-related data and metadata.",
      "CreateDate": "2023-11-26T08:03:59.000Z",
      "UpdateDate": "2023-11-26T08:03:59.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AwsOrgsAccess",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeOrganization",
          "organizations:ListAccounts",
          "organizations:ListAWSServiceAccessForOrganization",
          "organizations:ListParents",
          "organizations:DescribeOrganizationalUnit"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CostExplorerAccess",
        "Effect": "Allow",
        "Action": [
          "ce:ListCostAllocationTags"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonPrometheusScraperServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonPrometheusScraperServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4MXDZTGPJI",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonPrometheusScraperServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to AWS Resources managed or used by Amazon Managed Service for Prometheus Collector",
      "CreateDate": "2023-11-26T14:19:52.000Z",
      "UpdateDate": "2023-11-26T14:19:52.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DeleteSLR",
        "Effect": "Allow",
        "Action": [
          "iam:DeleteRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/scraper.aps.amazonaws.com/AWSServiceRoleForAmazonPrometheusScraper*"
        ]
      },
      {
        "Sid": "NetworkDiscovery",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ENIManagement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TagManagement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:*:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "ENIUpdating",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "EKSAccess",
        "Effect": "Allow",
        "Action": [
          "eks:DescribeCluster"
        ],
        "Resource": [
          "arn:*:eks:*:*:cluster/*"
        ]
      },
      {
        "Sid": "APSWriting",
        "Effect": "Allow",
        "Action": [
          "aps:RemoteWrite"
        ],
        "Resource": [
          "arn:*:aps:*:*:workspace/*"
        ]
      }
    ]
  },
  "AWSRepostSpaceSupportOperationsPolicy": {
    "policy": {
      "PolicyName": "AWSRepostSpaceSupportOperationsPolicy",
      "PolicyId": "ANPAZKAPJZG4NIYF2PYNO",
      "Arn": "arn:aws:iam::aws:policy/AWSRepostSpaceSupportOperationsPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy allows the re:Post Space service to create, manage, and resolve Support cases that are created through the Space application.",
      "CreateDate": "2023-11-26T21:52:15.000Z",
      "UpdateDate": "2023-11-26T21:52:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "RepostSpaceSupportOperations",
        "Effect": "Allow",
        "Action": [
          "support:AddAttachmentsToSet",
          "support:AddCommunicationToCase",
          "support:CreateCase",
          "support:DescribeCases",
          "support:DescribeCommunications",
          "support:ResolveCase"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSElasticDisasterRecoveryConsoleFullAccess_v2": {
    "policy": {
      "PolicyName": "AWSElasticDisasterRecoveryConsoleFullAccess_v2",
      "PolicyId": "ANPAZKAPJZG4GNEJEKJLM",
      "Arn": "arn:aws:iam::aws:policy/AWSElasticDisasterRecoveryConsoleFullAccess_v2",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy provides full access to all public APIs of AWS Elastic Disaster Recovery (AWS DRS), as well as all public APIs in other AWS services used by AWS DRS Console. Attach this policy to your users or roles.",
      "CreateDate": "2023-11-27T13:35:19.000Z",
      "UpdateDate": "2023-11-27T13:35:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ConsoleFullAccess1",
        "Effect": "Allow",
        "Action": [
          "drs:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess2",
        "Effect": "Allow",
        "Action": [
          "kms:ListAliases",
          "kms:DescribeKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess3",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeAccountAttributes",
          "ec2:DescribeAvailabilityZones",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceTypes",
          "ec2:DescribeInstanceAttribute",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeInstanceTypeOfferings",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeVolumes",
          "ec2:GetEbsEncryptionByDefault",
          "ec2:GetEbsDefaultKmsKeyId",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeCapacityReservations",
          "ec2:DescribeHosts"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess4",
        "Effect": "Allow",
        "Action": [
          "license-manager:ListLicenseConfigurations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess5",
        "Effect": "Allow",
        "Action": [
          "resource-groups:ListGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess6",
        "Effect": "Allow",
        "Action": [
          "elasticloadbalancing:DescribeLoadBalancers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess7",
        "Effect": "Allow",
        "Action": [
          "iam:ListInstanceProfiles",
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess8",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryConversionServerRole",
          "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceRole",
          "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceWithLaunchActionsRole"
        ]
      },
      {
        "Sid": "ConsoleFullAccess9",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess10",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplateVersion",
          "ec2:ModifyLaunchTemplate",
          "ec2:DeleteLaunchTemplateVersions",
          "ec2:CreateTags",
          "ec2:DeleteTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess11",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateLaunchTemplate"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess12",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess13",
        "Effect": "Allow",
        "Action": [
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:ModifyInstanceAttribute",
          "ec2:GetConsoleOutput",
          "ec2:GetConsoleScreenshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess14",
        "Effect": "Allow",
        "Action": [
          "ec2:RevokeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess15",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess16",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:vpc/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess17",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess18",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess19",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess20",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume",
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess21",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume",
          "ec2:AttachVolume",
          "ec2:StartInstances",
          "ec2:GetConsoleOutput",
          "ec2:GetConsoleScreenshot"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess22",
        "Effect": "Allow",
        "Action": [
          "ec2:AttachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess23",
        "Effect": "Allow",
        "Action": [
          "ec2:DetachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess24",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess25",
        "Effect": "Allow",
        "Action": [
          "ec2:RunInstances"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:image/*",
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess26",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:security-group/*",
          "arn:aws:ec2:*:*:volume/*",
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess27",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:launch-template/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess28",
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeStacks",
          "cloudformation:ListStacks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess29",
        "Effect": "Allow",
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess30",
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeInstanceInformation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess31",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand",
          "ssm:StartAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-definition/AWS-CreateImage:$DEFAULT",
          "arn:aws:ssm:*:*:document/AWSMigration-ValidateNetworkConnectivity",
          "arn:aws:ssm:*:*:document/AWSMigration-VerifyMountedVolumes",
          "arn:aws:ssm:*:*:document/AWSMigration-ValidateHttpResponse",
          "arn:aws:ssm:*:*:document/AWSMigration-ValidateDiskSpace",
          "arn:aws:ssm:*:*:document/AWSMigration-VerifyProcessIsRunning",
          "arn:aws:ssm:*:*:document/AWSMigration-LinuxTimeSyncSetting",
          "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure"
        ]
      },
      {
        "Sid": "ConsoleFullAccess32",
        "Effect": "Allow",
        "Action": [
          "ssm:SendCommand"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess33",
        "Effect": "Allow",
        "Action": [
          "ssm:ListDocuments",
          "ssm:ListCommandInvocations"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess34",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameter",
          "ssm:PutParameter"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecoveryService-*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess35",
        "Effect": "Allow",
        "Action": [
          "ssm:DescribeDocument",
          "ssm:GetDocument"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess36",
        "Effect": "Allow",
        "Action": [
          "ssm:GetParameters"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecovery-*"
        ]
      },
      {
        "Sid": "ConsoleFullAccess37",
        "Effect": "Allow",
        "Action": [
          "ssm:GetAutomationExecution"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:automation-execution/*"
        ]
      }
    ]
  },
  "AmazonOneEnterpriseFullAccess": {
    "policy": {
      "PolicyName": "AmazonOneEnterpriseFullAccess",
      "PolicyId": "ANPAZKAPJZG4IA6VH2PMR",
      "Arn": "arn:aws:iam::aws:policy/AmazonOneEnterpriseFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants administrative permissions that allow access to all Amazon One Enterprise resources and operations.",
      "CreateDate": "2023-11-28T04:58:21.000Z",
      "UpdateDate": "2023-11-28T04:58:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "FullAccessStatementID",
        "Effect": "Allow",
        "Action": [
          "one:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonOneEnterpriseReadOnlyAccess": {
    "policy": {
      "PolicyName": "AmazonOneEnterpriseReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4C2R2FFFVM",
      "Arn": "arn:aws:iam::aws:policy/AmazonOneEnterpriseReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants read only permissions to all Amazon One Enterprise resources and operations.",
      "CreateDate": "2023-11-28T04:59:23.000Z",
      "UpdateDate": "2023-11-28T04:59:23.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ReadOnlyAccessStatementID",
        "Effect": "Allow",
        "Action": [
          "one:Get*",
          "one:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonOneEnterpriseInstallerAccess": {
    "policy": {
      "PolicyName": "AmazonOneEnterpriseInstallerAccess",
      "PolicyId": "ANPAZKAPJZG4BMDOY2M4B",
      "Arn": "arn:aws:iam::aws:policy/AmazonOneEnterpriseInstallerAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants limited read and write permissions that allow device installation and activation.",
      "CreateDate": "2023-11-28T05:00:39.000Z",
      "UpdateDate": "2023-11-28T05:00:39.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "InstallerAccessStatementID",
        "Effect": "Allow",
        "Action": [
          "one:CreateDeviceActivationQrCode",
          "one:GetDeviceInstance",
          "one:GetSite",
          "one:GetSiteAddress",
          "one:ListDeviceInstances",
          "one:ListSites"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonQFullAccess": {
    "policy": {
      "PolicyName": "AmazonQFullAccess",
      "PolicyId": "ANPAZKAPJZG4JQANMNF6S",
      "Arn": "arn:aws:iam::aws:policy/AmazonQFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to enable interactions with Amazon Q",
      "CreateDate": "2023-11-28T16:00:24.000Z",
      "UpdateDate": "2023-11-28T16:00:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowAmazonQFullAccess",
        "Effect": "Allow",
        "Action": [
          "q:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSServiceRoleForNeptuneGraphPolicy": {
    "policy": {
      "PolicyName": "AWSServiceRoleForNeptuneGraphPolicy",
      "PolicyId": "ANPAZKAPJZG4K7GMP4OBO",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForNeptuneGraphPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides Cloudwatch access to publish operational and usage metrics and logs for Amazon Neptune",
      "CreateDate": "2023-11-29T14:03:36.000Z",
      "UpdateDate": "2023-11-29T14:03:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "GraphMetrics",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GraphLogGroup",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/neptune/*"
        ]
      },
      {
        "Sid": "GraphLogEvents",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
        ]
      }
    ]
  },
  "AmazonSageMakerClusterInstanceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonSageMakerClusterInstanceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4BOMTPPOSS",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerClusterInstanceRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions commonly needed to use Amazon SageMaker Cluster.",
      "CreateDate": "2023-11-29T15:11:26.000Z",
      "UpdateDate": "2023-11-29T15:11:26.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CloudwatchLogStreamPublishPermissions",
        "Effect": "Allow",
        "Action": [
          "logs:PutLogEvents",
          "logs:CreateLogStream",
          "logs:DescribeLogStreams"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/sagemaker/Clusters/*:log-stream:*"
        ]
      },
      {
        "Sid": "CloudwatchLogGroupCreationPermissions",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/sagemaker/Clusters/*"
        ]
      },
      {
        "Sid": "CloudwatchPutMetricDataAccess",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DataRetrievalFromS3BucketPermissions",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker-*"
        ]
      },
      {
        "Sid": "SSMConnectivityPermissions",
        "Effect": "Allow",
        "Action": [
          "ssmmessages:CreateControlChannel",
          "ssmmessages:CreateDataChannel",
          "ssmmessages:OpenControlChannel",
          "ssmmessages:OpenDataChannel"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSZonalAutoshiftPracticeRunSLRPolicy": {
    "policy": {
      "PolicyName": "AWSZonalAutoshiftPracticeRunSLRPolicy",
      "PolicyId": "ANPAZKAPJZG4KEQN62N5M",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSZonalAutoshiftPracticeRunSLRPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrative access for ARC zonal shift practice runs, and access to CloudWatch alarm statuses to monitor practice runs.",
      "CreateDate": "2023-11-29T17:34:54.000Z",
      "UpdateDate": "2023-11-29T17:34:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "MonitoringPermissions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:DescribeAlarms",
          "health:DescribeEvents"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ZonalShiftManagementPermissions",
        "Effect": "Allow",
        "Action": [
          "arc-zonal-shift:CancelZonalShift",
          "arc-zonal-shift:GetManagedResource",
          "arc-zonal-shift:StartZonalShift",
          "arc-zonal-shift:UpdateZonalShift"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCleanRoomsMLReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSCleanRoomsMLReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4PQFZRTNP7",
      "Arn": "arn:aws:iam::aws:policy/AWSCleanRoomsMLReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows read-only access to AWS Clean Rooms ML resources and read-only access to related AWS Clean Rooms resources",
      "CreateDate": "2023-11-29T20:55:31.000Z",
      "UpdateDate": "2023-11-29T20:55:31.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CleanRoomsConsoleNavigation",
        "Effect": "Allow",
        "Action": [
          "cleanrooms:GetCollaboration",
          "cleanrooms:GetConfiguredAudienceModelAssociation",
          "cleanrooms:GetMembership",
          "cleanrooms:ListAnalysisTemplates",
          "cleanrooms:ListCollaborationAnalysisTemplates",
          "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
          "cleanrooms:ListCollaborations",
          "cleanrooms:ListConfiguredTableAssociations",
          "cleanrooms:ListConfiguredTables",
          "cleanrooms:ListMembers",
          "cleanrooms:ListMemberships",
          "cleanrooms:ListProtectedQueries",
          "cleanrooms:ListSchemas",
          "cleanrooms:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CleanRoomsMLRead",
        "Effect": "Allow",
        "Action": [
          "cleanrooms-ml:Get*",
          "cleanrooms-ml:List*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSCleanRoomsMLFullAccess": {
    "policy": {
      "PolicyName": "AWSCleanRoomsMLFullAccess",
      "PolicyId": "ANPAZKAPJZG4EZEI4KN75",
      "Arn": "arn:aws:iam::aws:policy/AWSCleanRoomsMLFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows full access to AWS Clean Rooms ML resources and access to related AWS Services.",
      "CreateDate": "2023-11-29T21:02:06.000Z",
      "UpdateDate": "2023-11-29T21:02:06.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CleanRoomsMLFullAccess",
        "Effect": "Allow",
        "Action": [
          "cleanrooms-ml:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PassServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/cleanrooms-ml*"
        ]
      },
      {
        "Sid": "CleanRoomsConsoleNavigation",
        "Effect": "Allow",
        "Action": [
          "cleanrooms:GetCollaboration",
          "cleanrooms:GetConfiguredAudienceModelAssociation",
          "cleanrooms:GetMembership",
          "cleanrooms:ListAnalysisTemplates",
          "cleanrooms:ListCollaborationAnalysisTemplates",
          "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
          "cleanrooms:ListCollaborations",
          "cleanrooms:ListConfiguredTableAssociations",
          "cleanrooms:ListConfiguredTables",
          "cleanrooms:ListMembers",
          "cleanrooms:ListMemberships",
          "cleanrooms:ListProtectedQueries",
          "cleanrooms:ListSchemas",
          "cleanrooms:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CollaborationMembershipCheck",
        "Effect": "Allow",
        "Action": [
          "cleanrooms:ListMembers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AssociateModels",
        "Effect": "Allow",
        "Action": [
          "cleanrooms:CreateConfiguredAudienceModelAssociation"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "TagAssociations",
        "Effect": "Allow",
        "Action": [
          "cleanrooms:TagResource"
        ],
        "Resource": [
          "arn:aws:cleanrooms:*:*:membership/*/configuredaudiencemodelassociation/*"
        ]
      },
      {
        "Sid": "ListRolesToPickServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetRoleAndListRolePoliciesToInspectServiceRole",
        "Effect": "Allow",
        "Action": [
          "iam:GetRole",
          "iam:ListRolePolicies",
          "iam:ListAttachedRolePolicies"
        ],
        "Resource": [
          "arn:aws:iam::*:role/service-role/cleanrooms-ml*",
          "arn:aws:iam::*:role/role/cleanrooms-ml*"
        ]
      },
      {
        "Sid": "ListPoliciesToInspectServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "iam:ListPolicies"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "GetPolicyToInspectServiceRolePolicy",
        "Effect": "Allow",
        "Action": [
          "iam:GetPolicy",
          "iam:GetPolicyVersion"
        ],
        "Resource": [
          "arn:aws:iam::*:policy/*cleanroomsml*"
        ]
      },
      {
        "Sid": "ConsoleDisplayTables",
        "Effect": "Allow",
        "Action": [
          "glue:GetDatabase",
          "glue:GetDatabases",
          "glue:GetTable",
          "glue:GetTables",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:GetSchema",
          "glue:GetSchemaVersion",
          "glue:BatchGetPartition"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsolePickOutputBucket",
        "Effect": "Allow",
        "Action": [
          "s3:ListAllMyBuckets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ConsolePickS3Location",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetBucketLocation"
        ],
        "Resource": [
          "arn:aws:s3:::*cleanrooms-ml*"
        ]
      }
    ]
  },
  "NeptuneGraphReadOnlyAccess": {
    "policy": {
      "PolicyName": "NeptuneGraphReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4J6TLMD54B",
      "Arn": "arn:aws:iam::aws:policy/NeptuneGraphReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to all Amazon Neptune Analytics resources along with read only permissions for dependent services.",
      "CreateDate": "2023-11-30T07:32:17.000Z",
      "UpdateDate": "2023-11-30T07:32:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowReadOnlyPermissionsForNeptuneGraph",
        "Effect": "Allow",
        "Action": [
          "neptune-graph:Get*",
          "neptune-graph:List*",
          "neptune-graph:Read*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowReadOnlyPermissionsForEC2",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcAttribute",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeAvailabilityZones"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowReadOnlyPermissionsForKMS",
        "Effect": "Allow",
        "Action": [
          "kms:ListKeys",
          "kms:ListAliases"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowReadOnlyPermissionsForCloudwatch",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:GetMetricData",
          "cloudwatch:ListMetrics",
          "cloudwatch:GetMetricStatistics"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowReadOnlyPermissionsForLogs",
        "Effect": "Allow",
        "Action": [
          "logs:DescribeLogStreams",
          "logs:GetLogEvents"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
        ]
      }
    ]
  },
  "IVSReadOnlyAccess": {
    "policy": {
      "PolicyName": "IVSReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4KSFZMGQOA",
      "Arn": "arn:aws:iam::aws:policy/IVSReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to IVS Low-Latency and Real-Time streaming APIs",
      "CreateDate": "2023-12-05T18:00:37.000Z",
      "UpdateDate": "2024-02-16T18:03:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "IVSReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "ivs:BatchGetChannel",
          "ivs:GetChannel",
          "ivs:GetComposition",
          "ivs:GetEncoderConfiguration",
          "ivs:GetParticipant",
          "ivs:GetPlaybackKeyPair",
          "ivs:GetPlaybackRestrictionPolicy",
          "ivs:GetRecordingConfiguration",
          "ivs:GetStage",
          "ivs:GetStageSession",
          "ivs:GetStorageConfiguration",
          "ivs:GetStream",
          "ivs:GetStreamSession",
          "ivs:ListChannels",
          "ivs:ListCompositions",
          "ivs:ListEncoderConfigurations",
          "ivs:ListParticipants",
          "ivs:ListParticipantEvents",
          "ivs:ListPlaybackKeyPairs",
          "ivs:ListPlaybackRestrictionPolicies",
          "ivs:ListRecordingConfigurations",
          "ivs:ListStages",
          "ivs:ListStageSessions",
          "ivs:ListStorageConfigurations",
          "ivs:ListStreamKeys",
          "ivs:ListStreams",
          "ivs:ListStreamSessions",
          "ivs:ListTagsForResource"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMSKReplicatorExecutionRole": {
    "policy": {
      "PolicyName": "AWSMSKReplicatorExecutionRole",
      "PolicyId": "ANPAZKAPJZG4DZT4HSKAC",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSMSKReplicatorExecutionRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Grants permissions to Amazon MSK Replicator to replicate data between MSK Clusters.",
      "CreateDate": "2023-12-06T00:07:52.000Z",
      "UpdateDate": "2024-03-25T21:36:08.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ClusterPermissions",
        "Effect": "Allow",
        "Action": [
          "kafka-cluster:Connect",
          "kafka-cluster:DescribeCluster",
          "kafka-cluster:AlterCluster",
          "kafka-cluster:DescribeTopic",
          "kafka-cluster:CreateTopic",
          "kafka-cluster:AlterTopic",
          "kafka-cluster:WriteData",
          "kafka-cluster:ReadData",
          "kafka-cluster:AlterGroup",
          "kafka-cluster:DescribeGroup",
          "kafka-cluster:DescribeTopicDynamicConfiguration",
          "kafka-cluster:AlterTopicDynamicConfiguration",
          "kafka-cluster:WriteDataIdempotently"
        ],
        "Resource": [
          "arn:aws:kafka:*:*:cluster/*"
        ]
      },
      {
        "Sid": "TopicPermissions",
        "Effect": "Allow",
        "Action": [
          "kafka-cluster:DescribeTopic",
          "kafka-cluster:CreateTopic",
          "kafka-cluster:AlterTopic",
          "kafka-cluster:WriteData",
          "kafka-cluster:ReadData",
          "kafka-cluster:DescribeTopicDynamicConfiguration",
          "kafka-cluster:AlterTopicDynamicConfiguration",
          "kafka-cluster:AlterCluster"
        ],
        "Resource": [
          "arn:aws:kafka:*:*:topic/*/*"
        ]
      },
      {
        "Sid": "GroupPermissions",
        "Effect": "Allow",
        "Action": [
          "kafka-cluster:AlterGroup",
          "kafka-cluster:DescribeGroup"
        ],
        "Resource": [
          "arn:aws:kafka:*:*:group/*/*"
        ]
      }
    ]
  },
  "AmazonBedrockFullAccess": {
    "policy": {
      "PolicyName": "AmazonBedrockFullAccess",
      "PolicyId": "ANPAZKAPJZG4IZPIPC3GC",
      "Arn": "arn:aws:iam::aws:policy/AmazonBedrockFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Amazon Bedrock as well as limited access to related services that are required by it",
      "CreateDate": "2023-12-06T15:47:17.000Z",
      "UpdateDate": "2023-12-06T15:47:17.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "BedrockAll",
        "Effect": "Allow",
        "Action": [
          "bedrock:*"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeKey",
        "Effect": "Allow",
        "Action": [
          "kms:DescribeKey"
        ],
        "Resource": [
          "arn:*:kms:*:::*"
        ]
      },
      {
        "Sid": "APIsWithAllResourceAccess",
        "Effect": "Allow",
        "Action": [
          "iam:ListRoles",
          "ec2:DescribeVpcs",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PassRoleToBedrock",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/*AmazonBedrock*"
        ]
      }
    ]
  },
  "AmazonBedrockReadOnly": {
    "policy": {
      "PolicyName": "AmazonBedrockReadOnly",
      "PolicyId": "ANPAZKAPJZG4LQSTUJ5QY",
      "Arn": "arn:aws:iam::aws:policy/AmazonBedrockReadOnly",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read only access to Amazon Bedrock",
      "CreateDate": "2023-12-06T15:48:19.000Z",
      "UpdateDate": "2023-12-06T15:48:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonBedrockReadOnly",
        "Effect": "Allow",
        "Action": [
          "bedrock:GetFoundationModel",
          "bedrock:ListFoundationModels",
          "bedrock:GetModelInvocationLoggingConfiguration",
          "bedrock:GetProvisionedModelThroughput",
          "bedrock:ListProvisionedModelThroughputs",
          "bedrock:GetModelCustomizationJob",
          "bedrock:ListModelCustomizationJobs",
          "bedrock:ListCustomModels",
          "bedrock:GetCustomModel",
          "bedrock:ListTagsForResource",
          "bedrock:GetFoundationModelAvailability"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CostOptimizationHubReadOnlyAccess": {
    "policy": {
      "PolicyName": "CostOptimizationHubReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4FMI5P7RB7",
      "Arn": "arn:aws:iam::aws:policy/CostOptimizationHubReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This managed policy provides read-only access to Cost Optimization Hub.",
      "CreateDate": "2023-12-13T18:04:15.000Z",
      "UpdateDate": "2023-12-13T18:04:15.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CostOptimizationHubReadOnlyAccess",
        "Effect": "Allow",
        "Action": [
          "cost-optimization-hub:ListEnrollmentStatuses",
          "cost-optimization-hub:GetPreferences",
          "cost-optimization-hub:GetRecommendation",
          "cost-optimization-hub:ListRecommendations",
          "cost-optimization-hub:ListRecommendationSummaries"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CostOptimizationHubAdminAccess": {
    "policy": {
      "PolicyName": "CostOptimizationHubAdminAccess",
      "PolicyId": "ANPAZKAPJZG4CARV65TYL",
      "Arn": "arn:aws:iam::aws:policy/CostOptimizationHubAdminAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This managed policy provides admin access to Cost Optimization Hub.",
      "CreateDate": "2023-12-19T00:03:51.000Z",
      "UpdateDate": "2023-12-19T00:03:51.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CostOptimizationHubAdminAccess",
        "Effect": "Allow",
        "Action": [
          "cost-optimization-hub:ListEnrollmentStatuses",
          "cost-optimization-hub:UpdateEnrollmentStatus",
          "cost-optimization-hub:GetPreferences",
          "cost-optimization-hub:UpdatePreferences",
          "cost-optimization-hub:GetRecommendation",
          "cost-optimization-hub:ListRecommendations",
          "cost-optimization-hub:ListRecommendationSummaries"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllowCreationOfServiceLinkedRoleForCostOptimizationHub",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/cost-optimization-hub.bcm.amazonaws.com/AWSServiceRoleForCostOptimizationHub"
        ]
      },
      {
        "Sid": "AllowAWSServiceAccessForCostOptimizationHub",
        "Effect": "Allow",
        "Action": [
          "organizations:EnableAWSServiceAccess"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "CloudWatchNetworkMonitorServiceRolePolicy": {
    "policy": {
      "PolicyName": "CloudWatchNetworkMonitorServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4N6T4VFSYW",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/CloudWatchNetworkMonitorServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows CloudWatch Network Monitor to access and manage EC2 and VPC resources, publish data to CloudWatch and access other required services on your behalf.",
      "CreateDate": "2023-12-21T18:53:19.000Z",
      "UpdateDate": "2023-12-21T18:53:19.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PublishCw",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DescribeAny",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeVpcs",
          "ec2:DescribeNetworkInterfacePermissions",
          "ec2:DescribeSubnets",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "DeleteModifyEc2Resources",
        "Effect": "Allow",
        "Action": [
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteSecurityGroup"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      }
    ]
  },
  "IVSFullAccess": {
    "policy": {
      "PolicyName": "IVSFullAccess",
      "PolicyId": "ANPAZKAPJZG4JJZPORYJK",
      "Arn": "arn:aws:iam::aws:policy/IVSFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full access to Interactive Video Service (IVS), Also included permissions for dependent services, needed for full access to the ivs console.",
      "CreateDate": "2023-12-13T21:20:21.000Z",
      "UpdateDate": "2023-12-13T21:20:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "IVSFullAccess",
        "Effect": "Allow",
        "Action": [
          "ivs:*",
          "ivschat:*"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonOpenSearchDashboardsServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonOpenSearchDashboardsServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4PWBJHO5YT",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonOpenSearchDashboardsServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to Amazon OpenSearch Dashboards Service to access other AWS services such as CloudWatch on your behalf",
      "CreateDate": "2023-12-22T19:38:16.000Z",
      "UpdateDate": "2023-12-22T19:38:16.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AmazonOpenSearchDashboardsServiceRoleAllowedActions",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSArtifactReportsReadOnlyAccess": {
    "policy": {
      "PolicyName": "AWSArtifactReportsReadOnlyAccess",
      "PolicyId": "ANPAZKAPJZG4CK7D57O2Z",
      "Arn": "arn:aws:iam::aws:policy/AWSArtifactReportsReadOnlyAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides read-only access to the AWS Artifact service reports.",
      "CreateDate": "2024-01-02T22:42:58.000Z",
      "UpdateDate": "2024-01-02T22:42:58.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ArtifactReportActions",
        "Effect": "Allow",
        "Action": [
          "artifact:Get",
          "artifact:GetReport",
          "artifact:GetReportMetadata",
          "artifact:GetTermForReport",
          "artifact:ListReports"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSGrafanaWorkspacePermissionManagementV2": {
    "policy": {
      "PolicyName": "AWSGrafanaWorkspacePermissionManagementV2",
      "PolicyId": "ANPAZKAPJZG4IL25U4BDL",
      "Arn": "arn:aws:iam::aws:policy/AWSGrafanaWorkspacePermissionManagementV2",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides ability to update IAM Identity Center (IdC) user and group permissions for Amazon Managed Grafana workspaces.",
      "CreateDate": "2024-01-05T18:39:46.000Z",
      "UpdateDate": "2024-01-05T18:39:46.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AWSGrafanaPermissions",
        "Effect": "Allow",
        "Action": [
          "grafana:DescribeWorkspace",
          "grafana:DescribeWorkspaceAuthentication",
          "grafana:UpdatePermissions",
          "grafana:ListPermissions",
          "grafana:ListWorkspaces"
        ],
        "Resource": [
          "arn:aws:grafana:*:*:/workspaces*"
        ]
      },
      {
        "Sid": "IAMIdentityCenterPermissions",
        "Effect": "Allow",
        "Action": [
          "sso:DescribeRegisteredRegions",
          "sso:GetSharedSsoConfiguration",
          "sso:ListDirectoryAssociations",
          "sso:GetManagedApplicationInstance",
          "sso:ListProfiles",
          "sso:GetProfile",
          "sso:ListProfileAssociations",
          "sso-directory:DescribeUser",
          "sso-directory:DescribeGroup"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonECSInfrastructureRolePolicyForVolumes": {
    "policy": {
      "PolicyName": "AmazonECSInfrastructureRolePolicyForVolumes",
      "PolicyId": "ANPAZKAPJZG4JRAUMLGMS",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonECSInfrastructureRolePolicyForVolumes",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access to other AWS service resources required to manage volumes associated with ECS workloads on your behalf.",
      "CreateDate": "2024-01-10T22:56:41.000Z",
      "UpdateDate": "2024-01-10T22:56:41.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CreateEBSManagedVolume",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "TagOnCreateVolume",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "DescribeVolumesForLifecycle",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeVolumes",
          "ec2:DescribeAvailabilityZones"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManageEBSVolumeLifecycle",
        "Effect": "Allow",
        "Action": [
          "ec2:AttachVolume",
          "ec2:DetachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "ManageVolumeAttachmentsForEC2",
        "Effect": "Allow",
        "Action": [
          "ec2:AttachVolume",
          "ec2:DetachVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "DeleteEBSManagedVolume",
        "Effect": "Allow",
        "Action": [
          "ec2:DeleteVolume"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      }
    ]
  },
  "AmazonECSInfrastructureRolePolicyForServiceConnectTransportLayerSecurity": {
    "policy": {
      "PolicyName": "AmazonECSInfrastructureRolePolicyForServiceConnectTransportLayerSecurity",
      "PolicyId": "ANPAZKAPJZG4OIQQFRIAH",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonECSInfrastructureRolePolicyForServiceConnectTransportLayerSecurity",
      "Path": "/service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides administrative access to Private Certificate Authority, AWS Secrets Manager and other AWS Services required to manage ECS Service Connect TLS features on your behalf.",
      "CreateDate": "2024-01-19T20:08:36.000Z",
      "UpdateDate": "2024-01-19T20:08:36.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "CreateSecret",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:ecs-sc!*"
        ]
      },
      {
        "Sid": "TagOnCreateSecret",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:ecs-sc!*"
        ]
      },
      {
        "Sid": "RotateTLSCertificateSecret",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:DescribeSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:PutSecretValue",
          "secretsmanager:DeleteSecret",
          "secretsmanager:RotateSecret",
          "secretsmanager:UpdateSecretVersionStage"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:ecs-sc!*"
        ]
      },
      {
        "Sid": "ManagePrivateCertificateAuthority",
        "Effect": "Allow",
        "Action": [
          "acm-pca:GetCertificate",
          "acm-pca:GetCertificateAuthorityCertificate",
          "acm-pca:DescribeCertificateAuthority"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagePrivateCertificateAuthorityForIssuingEndEntityCertificate",
        "Effect": "Allow",
        "Action": [
          "acm-pca:IssueCertificate"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSecurityLakeMetastoreManager": {
    "policy": {
      "PolicyName": "AmazonSecurityLakeMetastoreManager",
      "PolicyId": "ANPAZKAPJZG4H76LFAUPQ",
      "Arn": "arn:aws:iam::aws:policy/service-role/AmazonSecurityLakeMetastoreManager",
      "Path": "/service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Policy for Amazon SecurityLake meta store manager lambda which allows the access to cloudwatch, S3, Glue and SQS.",
      "CreateDate": "2024-01-23T15:26:57.000Z",
      "UpdateDate": "2024-04-01T20:04:24.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowWriteLambdaLogs",
        "Effect": "Allow",
        "Action": [
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:/aws/lambda/AmazonSecurityLake*",
          "arn:aws:logs:*:*:/aws/lambda/AmazonSecurityLake*"
        ]
      },
      {
        "Sid": "AllowGlueManage",
        "Effect": "Allow",
        "Action": [
          "glue:CreatePartition",
          "glue:BatchCreatePartition",
          "glue:GetTable",
          "glue:UpdateTable"
        ],
        "Resource": [
          "arn:aws:glue:*:*:table/amazon_security_lake_glue_db*/*",
          "arn:aws:glue:*:*:database/amazon_security_lake_glue_db*",
          "arn:aws:glue:*:*:catalog"
        ]
      },
      {
        "Sid": "AllowToReadFromSqs",
        "Effect": "Allow",
        "Action": [
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage",
          "sqs:GetQueueAttributes"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:AmazonSecurityLake*"
        ]
      },
      {
        "Sid": "AllowMetaDataReadWrite",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:PutObject",
          "s3:GetObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-security-data-lake*"
        ]
      },
      {
        "Sid": "AllowMetaDataCleanup",
        "Effect": "Allow",
        "Action": [
          "s3:DeleteObject"
        ],
        "Resource": [
          "arn:aws:s3:::aws-security-data-lake*/metadata/*.avro",
          "arn:aws:s3:::aws-security-data-lake*/metadata/*.metadata.json"
        ]
      }
    ]
  },
  "AmazonInspector2ManagedCisPolicy": {
    "policy": {
      "PolicyName": "AmazonInspector2ManagedCisPolicy",
      "PolicyId": "ANPAZKAPJZG4DMU4YEMSZ",
      "Arn": "arn:aws:iam::aws:policy/AmazonInspector2ManagedCisPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This is a managed policy that customer should attach to their roles to communicate with inspector service for CIS scans",
      "CreateDate": "2024-01-24T16:31:43.000Z",
      "UpdateDate": "2024-01-24T16:31:43.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PermissionsForCISScans",
        "Effect": "Allow",
        "Action": [
          "inspector2:StartCisSession",
          "inspector2:StopCisSession",
          "inspector2:SendCisSessionTelemetry",
          "inspector2:SendCisSessionHealth"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLexReplicationPolicy": {
    "policy": {
      "PolicyName": "AmazonLexReplicationPolicy",
      "PolicyId": "ANPAZKAPJZG4PXKSNIWD4",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexReplicationPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon Lex to replicate Lex resources across regions on your behalf.",
      "CreateDate": "2024-01-31T23:29:42.000Z",
      "UpdateDate": "2024-03-08T17:11:32.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ReplicationServicePolicyStatement1",
        "Effect": "Allow",
        "Action": [
          "lex:BuildBotLocale",
          "lex:ListBotLocales",
          "lex:CreateBotAlias",
          "lex:UpdateBotAlias",
          "lex:DeleteBotAlias",
          "lex:DescribeBotAlias",
          "lex:CreateBotVersion",
          "lex:DeleteBotVersion",
          "lex:DescribeBotVersion",
          "lex:CreateExport",
          "lex:DescribeBot",
          "lex:UpdateExport",
          "lex:DescribeExport",
          "lex:DescribeBotLocale",
          "lex:DescribeIntent",
          "lex:ListIntents",
          "lex:DescribeSlotType",
          "lex:ListSlotTypes",
          "lex:DescribeSlot",
          "lex:ListSlots",
          "lex:DescribeCustomVocabulary",
          "lex:StartImport",
          "lex:DescribeImport",
          "lex:CreateBot",
          "lex:UpdateBot",
          "lex:DeleteBot",
          "lex:CreateBotLocale",
          "lex:UpdateBotLocale",
          "lex:DeleteBotLocale",
          "lex:CreateIntent",
          "lex:UpdateIntent",
          "lex:DeleteIntent",
          "lex:CreateSlotType",
          "lex:UpdateSlotType",
          "lex:DeleteSlotType",
          "lex:CreateSlot",
          "lex:UpdateSlot",
          "lex:DeleteSlot",
          "lex:CreateCustomVocabulary",
          "lex:UpdateCustomVocabulary",
          "lex:DeleteCustomVocabulary",
          "lex:DeleteBotChannel",
          "lex:DeleteResourcePolicy"
        ],
        "Resource": [
          "arn:aws:lex:*:*:bot/*",
          "arn:aws:lex:*:*:bot-alias/*"
        ]
      },
      {
        "Sid": "ReplicationServicePolicyStatement2",
        "Effect": "Allow",
        "Action": [
          "lex:CreateUploadUrl",
          "lex:ListBots"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ReplicationServicePolicyStatement3",
        "Effect": "Allow",
        "Action": [
          "iam:PassRole"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonSageMakerCanvasBedrockAccess": {
    "policy": {
      "PolicyName": "AmazonSageMakerCanvasBedrockAccess",
      "PolicyId": "ANPAZKAPJZG4BVRVHW7NT",
      "Arn": "arn:aws:iam::aws:policy/AmazonSageMakerCanvasBedrockAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy grants permissions to use Amazon Bedrock in SageMaker Canvas by providing access to downstream services such as S3.",
      "CreateDate": "2024-02-02T18:37:25.000Z",
      "UpdateDate": "2024-02-02T18:37:25.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "S3CanvasAccess",
        "Effect": "Allow",
        "Action": [
          "s3:GetObject",
          "s3:PutObject"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker-*/Canvas",
          "arn:aws:s3:::sagemaker-*/Canvas/*"
        ]
      },
      {
        "Sid": "S3BucketAccess",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
          "arn:aws:s3:::sagemaker-*"
        ]
      }
    ]
  },
  "AWSServiceRoleForPrivateMarketplaceAdminPolicy": {
    "policy": {
      "PolicyName": "AWSServiceRoleForPrivateMarketplaceAdminPolicy",
      "PolicyId": "ANPAZKAPJZG4BGFM6V4D2",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSServiceRoleForPrivateMarketplaceAdminPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides permissions to describe and update Private Marketplace resources and describe AWS Organizations",
      "CreateDate": "2024-02-14T22:28:01.000Z",
      "UpdateDate": "2024-02-14T22:28:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "PrivateMarketplaceCatalogDescribePermissions",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:DescribeEntity"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/Experience/*",
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/Audience/*",
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/ProcurementPolicy/*",
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/BrandingSettings/*"
        ]
      },
      {
        "Sid": "PrivateMarketplaceCatalogDescribeChangeSetPermissions",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:DescribeChangeSet"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PrivateMarketplaceCatalogListPermissions",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:ListEntities",
          "aws-marketplace:ListChangeSets"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "PrivateMarketplaceStartChangeSetPermissions",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:StartChangeSet"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/Experience/*",
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/ChangeSet/*"
        ]
      },
      {
        "Sid": "PrivateMarketplaceOrganizationPermissions",
        "Effect": "Allow",
        "Action": [
          "organizations:DescribeAccount",
          "organizations:DescribeOrganizationalUnit",
          "organizations:ListDelegatedAdministrators",
          "organizations:ListChildren"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonRDSCustomInstanceProfileRolePolicy": {
    "policy": {
      "PolicyName": "AmazonRDSCustomInstanceProfileRolePolicy",
      "PolicyId": "ANPAZKAPJZG4DJJDFEO4V",
      "Arn": "arn:aws:iam::aws:policy/AmazonRDSCustomInstanceProfileRolePolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Allows Amazon RDS Custom to perform various automation actions and database management tasks through an EC2 instance profile.",
      "CreateDate": "2024-02-27T17:42:02.000Z",
      "UpdateDate": "2024-02-27T17:42:02.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "ssmAgentPermission1",
        "Effect": "Allow",
        "Action": [
          "ssm:UpdateInstanceInformation"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "ssmAgentPermission2",
        "Effect": "Allow",
        "Action": [
          "ssm:GetManifest",
          "ssm:PutConfigurePackageResult"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ssmAgentPermission3",
        "Effect": "Allow",
        "Action": [
          "ssm:GetDocument",
          "ssm:DescribeDocument"
        ],
        "Resource": [
          "arn:aws:ssm:*:*:document/*"
        ]
      },
      {
        "Sid": "ssmAgentPermission4",
        "Effect": "Allow",
        "Action": [
          "ssmmessages:CreateControlChannel",
          "ssmmessages:OpenControlChannel"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ssmAgentPermission5",
        "Effect": "Allow",
        "Action": [
          "ec2messages:AcknowledgeMessage",
          "ec2messages:DeleteMessage",
          "ec2messages:FailMessage",
          "ec2messages:GetEndpoint",
          "ec2messages:GetMessages",
          "ec2messages:SendReply"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "createEc2SnapshotPermission1",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot",
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "createEc2SnapshotPermission2",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshot",
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*::snapshot/*"
        ]
      },
      {
        "Sid": "createEc2SnapshotPermission3",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "createTagForEc2SnapshotPermission",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "rdsCustomS3ObjectPermission",
        "Effect": "Allow",
        "Action": [
          "s3:putObject",
          "s3:getObject",
          "s3:getObjectVersion",
          "s3:AbortMultipartUpload",
          "s3:ListMultipartUploadParts"
        ],
        "Resource": [
          "arn:aws:s3:::do-not-delete-rds-custom-*/*"
        ]
      },
      {
        "Sid": "rdsCustomS3BucketPermission",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucketVersions",
          "s3:ListBucketMultipartUploads"
        ],
        "Resource": [
          "arn:aws:s3:::do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "readSecretsFromCpPermission",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "createSecretsOnDpPermission",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:TagResource"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "publishCwMetricsPermission",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "putEventsToEventBusPermission",
        "Effect": "Allow",
        "Action": [
          "events:PutEvents"
        ],
        "Resource": [
          "arn:aws:events:*:*:event-bus/default"
        ]
      },
      {
        "Sid": "cwlUploadPermission",
        "Effect": "Allow",
        "Action": [
          "logs:PutRetentionPolicy",
          "logs:PutLogEvents",
          "logs:DescribeLogStreams",
          "logs:CreateLogStream",
          "logs:CreateLogGroup"
        ],
        "Resource": [
          "arn:aws:logs:*:*:log-group:rds-custom-instance-*"
        ]
      },
      {
        "Sid": "sendMessageToSqsQueuePermission",
        "Effect": "Allow",
        "Action": [
          "sqs:SendMessage",
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage",
          "sqs:GetQueueUrl"
        ],
        "Resource": [
          "arn:aws:sqs:*:*:do-not-delete-rds-custom-*"
        ]
      },
      {
        "Sid": "managePrivateIpOnEniPermission",
        "Effect": "Allow",
        "Action": [
          "ec2:AssignPrivateIpAddresses",
          "ec2:UnassignPrivateIpAddresses"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "kmsPermissionWithSecret",
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "kmsPermissionWithS3",
        "Effect": "Allow",
        "Action": [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSMarketplaceResaleAuthorizationServiceRolePolicy": {
    "policy": {
      "PolicyName": "AWSMarketplaceResaleAuthorizationServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4NB3NLEV34",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AWSMarketplaceResaleAuthorizationServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Enables access to AWS Services and Resources used or managed by AWS Marketplace for Resale Authorization.",
      "CreateDate": "2024-03-05T18:47:54.000Z",
      "UpdateDate": "2024-03-05T18:47:54.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AllowResaleAuthorizationShareActionsRAMCreate",
        "Effect": "Allow",
        "Action": [
          "ram:CreateResourceShare"
        ],
        "Resource": [
          "arn:aws:ram:*:*:*"
        ]
      },
      {
        "Sid": "AllowResaleAuthorizationShareActionsRAMAssociate",
        "Effect": "Allow",
        "Action": [
          "ram:AssociateResourceShare"
        ],
        "Resource": [
          "arn:aws:ram:*:*:*"
        ]
      },
      {
        "Sid": "AllowResaleAuthorizationShareActionsRAMAccept",
        "Effect": "Allow",
        "Action": [
          "ram:AcceptResourceShareInvitation"
        ],
        "Resource": [
          "arn:aws:ram:*:*:*"
        ]
      },
      {
        "Sid": "AllowResaleAuthorizationShareActionsRAMGet",
        "Effect": "Allow",
        "Action": [
          "ram:GetResourceShareInvitations",
          "ram:GetResourceShareAssociations"
        ],
        "Resource": [
          "arn:aws:ram:*:*:*"
        ]
      },
      {
        "Sid": "AllowResaleAuthorizationShareActionsMarketplace",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:PutResourcePolicy",
          "aws-marketplace:GetResourcePolicy"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"
        ]
      },
      {
        "Sid": "AllowResaleAuthorizationShareActionsMarketplaceDescribe",
        "Effect": "Allow",
        "Action": [
          "aws-marketplace:DescribeEntity"
        ],
        "Resource": [
          "arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"
        ]
      }
    ]
  },
  "AmazonTimestreamInfluxDBServiceRolePolicy": {
    "policy": {
      "PolicyName": "AmazonTimestreamInfluxDBServiceRolePolicy",
      "PolicyId": "ANPAZKAPJZG4B2SEIHEWQ",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonTimestreamInfluxDBServiceRolePolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full administrative access to create, update, delete and list Amazon Timestream InfluxDB instances and create and list parameter groups. Please refer to documentation for additional permissions needed.",
      "CreateDate": "2024-03-14T18:53:21.000Z",
      "UpdateDate": "2024-03-14T18:53:21.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DescribeNetworkStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeNetworkInterfaces"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateEniInSubnetStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "CreateEniStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "CreateTagWithEniStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "ManageEniStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*"
        ]
      },
      {
        "Sid": "PutCloudWatchMetricsStatement",
        "Effect": "Allow",
        "Action": [
          "cloudwatch:PutMetricData"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManageSecretStatement",
        "Effect": "Allow",
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:DeleteSecret"
        ],
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:READONLY-InfluxDB-auth-parameters-*"
        ]
      }
    ]
  },
  "AmazonTimestreamInfluxDBFullAccess": {
    "policy": {
      "PolicyName": "AmazonTimestreamInfluxDBFullAccess",
      "PolicyId": "ANPAZKAPJZG4JY77WLMFL",
      "Arn": "arn:aws:iam::aws:policy/AmazonTimestreamInfluxDBFullAccess",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides full administrative access to create, update, delete and list Amazon Timestream InfluxDB instances and create and list parameter groups. Please refer to documentation for additional permissions needed.",
      "CreateDate": "2024-03-14T22:53:22.000Z",
      "UpdateDate": "2024-03-14T22:53:22.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "TimestreamInfluxDBStatement",
        "Effect": "Allow",
        "Action": [
          "timestream-influxdb:CreateDbParameterGroup",
          "timestream-influxdb:GetDbParameterGroup",
          "timestream-influxdb:ListDbParameterGroups",
          "timestream-influxdb:CreateDbInstance",
          "timestream-influxdb:DeleteDbInstance",
          "timestream-influxdb:GetDbInstance",
          "timestream-influxdb:ListDbInstances",
          "timestream-influxdb:TagResource",
          "timestream-influxdb:UntagResource",
          "timestream-influxdb:ListTagsForResource",
          "timestream-influxdb:UpdateDbInstance"
        ],
        "Resource": [
          "arn:aws:timestream-influxdb:*:*:*"
        ]
      },
      {
        "Sid": "ServiceLinkedRoleStatement",
        "Effect": "Allow",
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Resource": [
          "arn:aws:iam::*:role/aws-service-role/timestream-influxdb.amazonaws.com/AWSServiceRoleForTimestreamInfluxDB"
        ]
      },
      {
        "Sid": "NetworkValidationStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "ec2:DescribeSecurityGroups"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "CreateEniInSubnetStatement",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateNetworkInterface"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:network-interface/*",
          "arn:aws:ec2:*:*:subnet/*",
          "arn:aws:ec2:*:*:security-group/*"
        ]
      },
      {
        "Sid": "BucketValidationStatement",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket",
          "s3:GetBucketPolicy"
        ],
        "Resource": [
          "arn:aws:s3:::*"
        ]
      }
    ]
  },
  "AWSEC2VssSnapshotPolicy": {
    "policy": {
      "PolicyName": "AWSEC2VssSnapshotPolicy",
      "PolicyId": "ANPAZKAPJZG4KEG6SNTSF",
      "Arn": "arn:aws:iam::aws:policy/AWSEC2VssSnapshotPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "This policy is attached to the IAM role that's attached to your Amazon EC2 Windows Instances to enable the Amazon EC2 VSS solution to create and add tags to Amazon Machine Images (AMI) and EBS Snapshots.",
      "CreateDate": "2024-03-27T16:32:53.000Z",
      "UpdateDate": "2024-03-27T16:32:53.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "DescribeInstanceInfo",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeInstanceAttribute"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "CreateSnapshotsWithTag",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*"
        ]
      },
      {
        "Sid": "CreateSnapshotsAccessInstance",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "CreateSnapshotsAccessVolume",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateSnapshots"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:volume/*"
        ]
      },
      {
        "Sid": "CreateImageWithTag",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateImage"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:image/*"
        ]
      },
      {
        "Sid": "CreateImageAccessInstance",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateImage"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:instance/*"
        ]
      },
      {
        "Sid": "CreateTagsOnResourceCreation",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:image/*"
        ]
      },
      {
        "Sid": "CreateTagsAfterResourceCreation",
        "Effect": "Allow",
        "Action": [
          "ec2:CreateTags"
        ],
        "Resource": [
          "arn:aws:ec2:*:*:snapshot/*",
          "arn:aws:ec2:*:*:image/*"
        ]
      },
      {
        "Sid": "DescribeImagesAndSnapshots",
        "Effect": "Allow",
        "Action": [
          "ec2:DescribeImages",
          "ec2:DescribeSnapshots"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSQuickSightAssetBundleExportPolicy": {
    "policy": {
      "PolicyName": "AWSQuickSightAssetBundleExportPolicy",
      "PolicyId": "ANPAZKAPJZG4OURRPQOL5",
      "Arn": "arn:aws:iam::aws:policy/AWSQuickSightAssetBundleExportPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the set of permissions required to perform QuickSight Asset Bundle Export Operations",
      "CreateDate": "2024-03-27T21:31:03.000Z",
      "UpdateDate": "2024-03-27T21:31:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "TagReadAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:ListTagsForResource"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:*/*"
        ]
      },
      {
        "Sid": "DashboardReadAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:DescribeDashboard",
          "quicksight:DescribeDashboardPermissions"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:dashboard/*"
        ]
      },
      {
        "Sid": "AnalysisReadAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:DescribeAnalysis",
          "quicksight:DescribeAnalysisPermissions"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:analysis/*"
        ]
      },
      {
        "Sid": "DataSetReadAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:DescribeDataSet",
          "quicksight:DescribeDataSetRefreshProperties",
          "quicksight:ListRefreshSchedules",
          "quicksight:DescribeDataSetPermissions"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:dataset/*"
        ]
      },
      {
        "Sid": "DataSourceReadAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:DescribeDataSource",
          "quicksight:DescribeDataSourcePermissions"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:datasource/*"
        ]
      },
      {
        "Sid": "ThemeReadAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:DescribeTheme",
          "quicksight:DescribeThemePermissions"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:theme/*"
        ]
      },
      {
        "Sid": "VPCConnectionReadAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:DescribeVPCConnection",
          "quicksight:ListVPCConnections"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:vpcConnection/*"
        ]
      },
      {
        "Sid": "RefreshScheduleReadAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:DescribeRefreshSchedule"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:dataset/*/refresh-schedule/*"
        ]
      },
      {
        "Sid": "AssetBundleExportOperations",
        "Effect": "Allow",
        "Action": [
          "quicksight:DescribeAssetBundleExportJob",
          "quicksight:ListAssetBundleExportJobs",
          "quicksight:StartAssetBundleExportJob"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:asset-bundle-export-job/*"
        ]
      }
    ]
  },
  "AWSQuickSightAssetBundleImportPolicy": {
    "policy": {
      "PolicyName": "AWSQuickSightAssetBundleImportPolicy",
      "PolicyId": "ANPAZKAPJZG4HAZV3TE36",
      "Arn": "arn:aws:iam::aws:policy/AWSQuickSightAssetBundleImportPolicy",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides the set of permissions required to perform QuickSight Asset Bundle Import Operations",
      "CreateDate": "2024-03-27T21:40:34.000Z",
      "UpdateDate": "2024-03-27T21:40:34.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "TagWriteAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:ListTagsForResource",
          "quicksight:TagResource",
          "quicksight:UntagResource"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:*/*"
        ]
      },
      {
        "Sid": "DashboardWriteAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:CreateDashboard",
          "quicksight:DeleteDashboard",
          "quicksight:DescribeDashboard",
          "quicksight:UpdateDashboard",
          "quicksight:UpdateDashboardPublishedVersion",
          "quicksight:DescribeDashboardPermissions",
          "quicksight:UpdateDashboardPermissions",
          "quicksight:UpdateDashboardLinks"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:dashboard/*"
        ]
      },
      {
        "Sid": "AnalysisWriteAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:CreateAnalysis",
          "quicksight:DeleteAnalysis",
          "quicksight:DescribeAnalysis",
          "quicksight:UpdateAnalysis",
          "quicksight:DescribeAnalysisPermissions",
          "quicksight:UpdateAnalysisPermissions"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:analysis/*"
        ]
      },
      {
        "Sid": "DataSetWriteAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:CreateDataSet",
          "quicksight:DeleteDataSet",
          "quicksight:DescribeDataSet",
          "quicksight:PassDataSet",
          "quicksight:UpdateDataSet",
          "quicksight:DeleteDataSetRefreshProperties",
          "quicksight:DescribeDataSetRefreshProperties",
          "quicksight:PutDataSetRefreshProperties",
          "quicksight:UpdateDataSetPermissions",
          "quicksight:DescribeDataSetPermissions",
          "quicksight:ListRefreshSchedules"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:dataset/*"
        ]
      },
      {
        "Sid": "DataSourceWriteAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:CreateDataSource",
          "quicksight:DescribeDataSource",
          "quicksight:DeleteDataSource",
          "quicksight:PassDataSource",
          "quicksight:UpdateDataSource",
          "quicksight:UpdateDataSourcePermissions",
          "quicksight:DescribeDataSourcePermissions"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:datasource/*"
        ]
      },
      {
        "Sid": "ThemeWriteAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:CreateTheme",
          "quicksight:DeleteTheme",
          "quicksight:DescribeTheme",
          "quicksight:UpdateTheme",
          "quicksight:DescribeThemePermissions",
          "quicksight:UpdateThemePermissions"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:theme/*"
        ]
      },
      {
        "Sid": "RefreshScheduleWriteAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:CreateRefreshSchedule",
          "quicksight:DescribeRefreshSchedule",
          "quicksight:DeleteRefreshSchedule",
          "quicksight:UpdateRefreshSchedule"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:dataset/*/refresh-schedule/*"
        ]
      },
      {
        "Sid": "VPCConnectionWriteAccess",
        "Effect": "Allow",
        "Action": [
          "quicksight:ListVPCConnections",
          "quicksight:CreateVPCConnection",
          "quicksight:DescribeVPCConnection",
          "quicksight:DeleteVPCConnection",
          "quicksight:UpdateVPCConnection"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:vpcConnection/*"
        ]
      },
      {
        "Sid": "AssetBundleImportOperations",
        "Effect": "Allow",
        "Action": [
          "quicksight:DescribeAssetBundleImportJob",
          "quicksight:ListAssetBundleImportJobs",
          "quicksight:StartAssetBundleImportJob"
        ],
        "Resource": [
          "arn:aws:quicksight:*:*:asset-bundle-import-job/*"
        ]
      }
    ]
  },
  "AWSDeadlineCloud-UserAccessFarms": {
    "policy": {
      "PolicyName": "AWSDeadlineCloud-UserAccessFarms",
      "PolicyId": "ANPAZKAPJZG4A7BV6IHOE",
      "Arn": "arn:aws:iam::aws:policy/AWSDeadlineCloud-UserAccessFarms",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides user workstation access to AWS Deadline Cloud farms with limited Read-Only permissions to call other necessary services. Attach this policy to the user role associated with your studio.",
      "CreateDate": "2024-04-01T16:54:00.000Z",
      "UpdateDate": "2024-04-01T16:54:00.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AdditionalPermissions",
        "Effect": "Allow",
        "Action": [
          "identitystore:DescribeGroup",
          "identitystore:DescribeUser",
          "identitystore:ListGroupMembershipsForMember",
          "deadline:GetApplicationVersion",
          "ec2:DescribeInstanceTypes",
          "identitystore:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerLevelPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssociateMemberToFarm",
          "deadline:AssociateMemberToFleet",
          "deadline:AssociateMemberToJob",
          "deadline:AssociateMemberToQueue",
          "deadline:CreateBudget",
          "deadline:DeleteBudget",
          "deadline:DisassociateMemberFromFarm",
          "deadline:DisassociateMemberFromFleet",
          "deadline:DisassociateMemberFromJob",
          "deadline:DisassociateMemberFromQueue",
          "deadline:GetBudget",
          "deadline:GetSessionsStatisticsAggregation",
          "deadline:ListBudgets",
          "deadline:StartSessionsStatisticsAggregation",
          "deadline:UpdateBudget"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagerLevelMemberAssociation",
        "Effect": "Allow",
        "Action": [
          "deadline:AssociateMemberToFarm",
          "deadline:AssociateMemberToFleet",
          "deadline:AssociateMemberToJob",
          "deadline:AssociateMemberToQueue"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagerLevelMemberDisassociation",
        "Effect": "Allow",
        "Action": [
          "deadline:DisassociateMemberFromFarm",
          "deadline:DisassociateMemberFromFleet",
          "deadline:DisassociateMemberFromJob",
          "deadline:DisassociateMemberFromQueue"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:ListFarmMembers",
          "deadline:ListFleetMembers",
          "deadline:ListJobMembers",
          "deadline:ListQueueMembers",
          "deadline:UpdateJob",
          "deadline:UpdateSession",
          "deadline:UpdateStep",
          "deadline:UpdateTask"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerManagerContributorPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssumeQueueRoleForUser",
          "deadline:CreateJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllLevelsPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssumeFleetRoleForRead",
          "deadline:AssumeQueueRoleForRead",
          "deadline:GetFarm",
          "deadline:GetFleet",
          "deadline:GetJob",
          "deadline:GetQueue",
          "deadline:GetQueueEnvironment",
          "deadline:GetQueueFleetAssociation",
          "deadline:GetSession",
          "deadline:GetSessionAction",
          "deadline:GetStep",
          "deadline:GetStorageProfile",
          "deadline:GetStorageProfileForQueue",
          "deadline:GetTask",
          "deadline:GetWorker",
          "deadline:ListQueueEnvironments",
          "deadline:ListQueueFleetAssociations",
          "deadline:ListSessionActions",
          "deadline:ListSessions",
          "deadline:ListSessionsForWorker",
          "deadline:ListStepConsumers",
          "deadline:ListStepDependencies",
          "deadline:ListSteps",
          "deadline:ListStorageProfiles",
          "deadline:ListStorageProfilesForQueue",
          "deadline:ListTasks",
          "deadline:ListWorkers",
          "deadline:SearchJobs",
          "deadline:SearchSteps",
          "deadline:SearchTasks",
          "deadline:SearchWorkers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListBasedOnMembership",
        "Effect": "Allow",
        "Action": [
          "deadline:ListFarms",
          "deadline:ListFleets",
          "deadline:ListJobs",
          "deadline:ListQueues"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeadlineCloud-UserAccessFleets": {
    "policy": {
      "PolicyName": "AWSDeadlineCloud-UserAccessFleets",
      "PolicyId": "ANPAZKAPJZG4EGC4P2WVA",
      "Arn": "arn:aws:iam::aws:policy/AWSDeadlineCloud-UserAccessFleets",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides user workstation access to AWS Deadline Cloud fleets with limited Read-Only permissions to call other necessary services. Attach this policy to the user role associated with your studio.",
      "CreateDate": "2024-04-01T17:01:50.000Z",
      "UpdateDate": "2024-04-01T17:01:50.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AdditionalPermissions",
        "Effect": "Allow",
        "Action": [
          "identitystore:DescribeGroup",
          "identitystore:DescribeUser",
          "identitystore:ListGroupMembershipsForMember",
          "deadline:GetApplicationVersion",
          "ec2:DescribeInstanceTypes",
          "identitystore:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerLevelPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssociateMemberToFleet",
          "deadline:DisassociateMemberFromFleet"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagerLevelMemberAssociation",
        "Effect": "Allow",
        "Action": [
          "deadline:AssociateMemberToFleet"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagerLevelMemberDisassociation",
        "Effect": "Allow",
        "Action": [
          "deadline:DisassociateMemberFromFleet"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:ListFleetMembers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllLevelsPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssumeFleetRoleForRead",
          "deadline:GetFleet",
          "deadline:GetQueueFleetAssociation",
          "deadline:GetWorker",
          "deadline:ListQueueFleetAssociations",
          "deadline:ListSessionsForWorker",
          "deadline:ListWorkers",
          "deadline:SearchWorkers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListBasedOnMembership",
        "Effect": "Allow",
        "Action": [
          "deadline:ListFleets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeadlineCloud-UserAccessJobs": {
    "policy": {
      "PolicyName": "AWSDeadlineCloud-UserAccessJobs",
      "PolicyId": "ANPAZKAPJZG4EX3W2YLFT",
      "Arn": "arn:aws:iam::aws:policy/AWSDeadlineCloud-UserAccessJobs",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides user workstation access to AWS Deadline Cloud jobs with limited Read-Only permissions to call other necessary services. Attach this policy to the user role associated with your studio.",
      "CreateDate": "2024-04-01T17:05:38.000Z",
      "UpdateDate": "2024-04-01T17:05:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AdditionalPermissions",
        "Effect": "Allow",
        "Action": [
          "identitystore:DescribeGroup",
          "identitystore:DescribeUser",
          "identitystore:ListGroupMembershipsForMember",
          "deadline:GetApplicationVersion",
          "ec2:DescribeInstanceTypes",
          "identitystore:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerLevelPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssociateMemberToJob",
          "deadline:DisassociateMemberFromJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagerLevelMemberAssociation",
        "Effect": "Allow",
        "Action": [
          "deadline:AssociateMemberToJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagerLevelMemberDisassociation",
        "Effect": "Allow",
        "Action": [
          "deadline:DisassociateMemberFromJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:ListJobMembers",
          "deadline:UpdateJob",
          "deadline:UpdateSession",
          "deadline:UpdateStep",
          "deadline:UpdateTask"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllLevelsPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:GetJob",
          "deadline:GetSession",
          "deadline:GetSessionAction",
          "deadline:GetStep",
          "deadline:GetTask",
          "deadline:ListSessionActions",
          "deadline:ListSessions",
          "deadline:ListStepConsumers",
          "deadline:ListStepDependencies",
          "deadline:ListSteps",
          "deadline:ListTasks",
          "deadline:SearchSteps",
          "deadline:SearchTasks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListBasedOnMembership",
        "Effect": "Allow",
        "Action": [
          "deadline:ListJobs"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeadlineCloud-UserAccessQueues": {
    "policy": {
      "PolicyName": "AWSDeadlineCloud-UserAccessQueues",
      "PolicyId": "ANPAZKAPJZG4BWFZHEQCZ",
      "Arn": "arn:aws:iam::aws:policy/AWSDeadlineCloud-UserAccessQueues",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides user workstation access to AWS Deadline Cloud queues with limited Read-Only permissions to call other necessary services. Attach this policy to the user role associated with your studio.",
      "CreateDate": "2024-04-01T17:10:03.000Z",
      "UpdateDate": "2024-04-01T17:10:03.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "AdditionalPermissions",
        "Effect": "Allow",
        "Action": [
          "identitystore:DescribeGroup",
          "identitystore:DescribeUser",
          "identitystore:ListGroupMembershipsForMember",
          "deadline:GetApplicationVersion",
          "ec2:DescribeInstanceTypes",
          "identitystore:ListUsers"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerLevelPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssociateMemberToJob",
          "deadline:AssociateMemberToQueue",
          "deadline:DisassociateMemberFromJob",
          "deadline:DisassociateMemberFromQueue"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagerLevelMemberAssociation",
        "Effect": "Allow",
        "Action": [
          "deadline:AssociateMemberToJob",
          "deadline:AssociateMemberToQueue"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ManagerLevelMemberDisassociation",
        "Effect": "Allow",
        "Action": [
          "deadline:DisassociateMemberFromJob",
          "deadline:DisassociateMemberFromQueue"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerManagerPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:ListJobMembers",
          "deadline:ListQueueMembers",
          "deadline:UpdateJob",
          "deadline:UpdateSession",
          "deadline:UpdateStep",
          "deadline:UpdateTask"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "OwnerManagerContributorPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssumeQueueRoleForUser",
          "deadline:CreateJob"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "AllLevelsPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssumeQueueRoleForRead",
          "deadline:GetJob",
          "deadline:GetQueue",
          "deadline:GetQueueEnvironment",
          "deadline:GetQueueFleetAssociation",
          "deadline:GetSession",
          "deadline:GetSessionAction",
          "deadline:GetStep",
          "deadline:GetStorageProfileForQueue",
          "deadline:GetTask",
          "deadline:ListQueueEnvironments",
          "deadline:ListQueueFleetAssociations",
          "deadline:ListSessionActions",
          "deadline:ListSessions",
          "deadline:ListStepConsumers",
          "deadline:ListStepDependencies",
          "deadline:ListSteps",
          "deadline:ListStorageProfilesForQueue",
          "deadline:ListTasks",
          "deadline:SearchJobs",
          "deadline:SearchSteps",
          "deadline:SearchTasks"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Sid": "ListBasedOnMembership",
        "Effect": "Allow",
        "Action": [
          "deadline:ListJobs",
          "deadline:ListQueues"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeadlineCloud-FleetWorker": {
    "policy": {
      "PolicyName": "AWSDeadlineCloud-FleetWorker",
      "PolicyId": "ANPAZKAPJZG4K7NNB6ZGT",
      "Arn": "arn:aws:iam::aws:policy/AWSDeadlineCloud-FleetWorker",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides AWS Deadline Cloud workers with access to run tasks on a farm.",
      "CreateDate": "2024-04-01T17:21:47.000Z",
      "UpdateDate": "2024-04-01T17:21:47.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "RunTasksPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:AssumeFleetRoleForWorker",
          "deadline:UpdateWorker",
          "deadline:UpdateWorkerSchedule",
          "deadline:BatchGetJobEntity",
          "deadline:AssumeQueueRoleForWorker"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSDeadlineCloud-WorkerHost": {
    "policy": {
      "PolicyName": "AWSDeadlineCloud-WorkerHost",
      "PolicyId": "ANPAZKAPJZG4KWFH5LFDO",
      "Arn": "arn:aws:iam::aws:policy/AWSDeadlineCloud-WorkerHost",
      "Path": "/",
      "DefaultVersionId": "v1",
      "AttachmentCount": 0,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": true,
      "Description": "Provides access for AWS Deadline Cloud worker hosts to join a fleet in a farm.",
      "CreateDate": "2024-04-01T17:28:28.000Z",
      "UpdateDate": "2024-04-01T17:28:28.000Z",
      "Tags": []
    },
    "document": [
      {
        "Sid": "JoinFleetPermissions",
        "Effect": "Allow",
        "Action": [
          "deadline:CreateWorker",
          "deadline:AssumeFleetRoleForWorker"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSLambdaFullAccess": {
    "policy": {
      "PolicyName": "AWSLambdaFullAccess",
      "PolicyId": "ANPAI6E2CYYMI4XI7AA5K",
      "Arn": "arn:aws:iam::aws:policy/AWSLambdaFullAccess",
      "Path": "/",
      "DefaultVersionId": "v8",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": false,
      "Description": "This policy is on a deprecation path. See documentation for guidance: https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html. Provides full access to Lambda, S3, DynamoDB, CloudWatch Metrics and Logs.",
      "CreateDate": "2015-02-06T18:40:45.000Z",
      "UpdateDate": "2017-11-27T23:22:38.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "cloudformation:DescribeChangeSet",
          "cloudformation:DescribeStackResources",
          "cloudformation:DescribeStacks",
          "cloudformation:GetTemplate",
          "cloudformation:ListStackResources",
          "cloudwatch:*",
          "cognito-identity:ListIdentityPools",
          "cognito-sync:GetCognitoEvents",
          "cognito-sync:SetCognitoEvents",
          "dynamodb:*",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs",
          "events:*",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:ListAttachedRolePolicies",
          "iam:ListRolePolicies",
          "iam:ListRoles",
          "iam:PassRole",
          "iot:AttachPrincipalPolicy",
          "iot:AttachThingPrincipal",
          "iot:CreateKeysAndCertificate",
          "iot:CreatePolicy",
          "iot:CreateThing",
          "iot:CreateTopicRule",
          "iot:DescribeEndpoint",
          "iot:GetTopicRule",
          "iot:ListPolicies",
          "iot:ListThings",
          "iot:ListTopicRules",
          "iot:ReplaceTopicRule",
          "kinesis:DescribeStream",
          "kinesis:ListStreams",
          "kinesis:PutRecord",
          "kms:ListAliases",
          "lambda:*",
          "logs:*",
          "s3:*",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTopics",
          "sns:Publish",
          "sns:Subscribe",
          "sns:Unsubscribe",
          "sqs:ListQueues",
          "sqs:SendMessage",
          "tag:GetResources",
          "xray:PutTelemetryRecords",
          "xray:PutTraceSegments"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AmazonLexBotPolicy": {
    "policy": {
      "PolicyName": "AmazonLexBotPolicy",
      "PolicyId": "ANPAI6JDATUYJVRFRJYWS",
      "Arn": "arn:aws:iam::aws:policy/aws-service-role/AmazonLexBotPolicy",
      "Path": "/aws-service-role/",
      "DefaultVersionId": "v2",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": false,
      "Description": "Policy for AWS Lex Bot use case",
      "CreateDate": "2017-04-12T02:57:22.000Z",
      "UpdateDate": "2019-11-13T20:10:01.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "polly:SynthesizeSpeech"
        ],
        "Resource": [
          "*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "comprehend:DetectSentiment"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  },
  "AWSConfigRole": {
    "policy": {
      "PolicyName": "AWSConfigRole",
      "PolicyId": "ANPAIQRXRDRGJUA33ELIO",
      "Arn": "arn:aws:iam::aws:policy/service-role/AWSConfigRole",
      "Path": "/service-role/",
      "DefaultVersionId": "v42",
      "AttachmentCount": 1,
      "PermissionsBoundaryUsageCount": 0,
      "IsAttachable": false,
      "Description": "Default policy for AWS Config service role.",
      "CreateDate": "2015-04-02T17:36:23.000Z",
      "UpdateDate": "2022-02-10T18:33:55.000Z",
      "Tags": []
    },
    "document": [
      {
        "Effect": "Allow",
        "Action": [
          "access-analyzer:GetAnalyzer",
          "access-analyzer:GetArchiveRule",
          "access-analyzer:ListAnalyzers",
          "access-analyzer:ListArchiveRules",
          "access-analyzer:ListTagsForResource",
          "account:GetAlternateContact",
          "acm:DescribeCertificate",
          "acm:ListCertificates",
          "acm:ListTagsForCertificate",
          "apigateway:GET",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingPolicies",
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:DescribeLifecycleHooks",
          "autoscaling:DescribePolicies",
          "autoscaling:DescribeScheduledActions",
          "autoscaling:DescribeTags",
          "backup:DescribeBackupVault",
          "backup:DescribeRecoveryPoint",
          "backup:GetBackupPlan",
          "backup:GetBackupSelection",
          "backup:GetBackupVaultAccessPolicy",
          "backup:GetBackupVaultNotifications",
          "backup:ListBackupPlans",
          "backup:ListBackupSelections",
          "backup:ListBackupVaults",
          "backup:ListRecoveryPointsByBackupVault",
          "backup:ListTags",
          "cloudformation:DescribeType",
          "cloudformation:ListTypes",
          "cloudfront:ListDistributions",
          "cloudfront:ListTagsForResource",
          "cloudtrail:DescribeTrails",
          "cloudtrail:GetEventSelectors",
          "cloudtrail:GetTrailStatus",
          "cloudtrail:ListTags",
          "cloudwatch:DescribeAlarms",
          "codedeploy:GetDeploymentConfig",
          "codepipeline:GetPipeline",
          "codepipeline:GetPipelineState",
          "codepipeline:ListPipelines",
          "config:BatchGet*",
          "config:Describe*",
          "config:Get*",
          "config:List*",
          "config:Put*",
          "config:Select*",
          "dax:DescribeClusters",
          "dms:DescribeEventSubscriptions",
          "dms:DescribeReplicationInstances",
          "dms:DescribeReplicationSubnetGroups",
          "dms:ListTagsForResource",
          "dynamodb:DescribeContinuousBackups",
          "dynamodb:DescribeLimits",
          "dynamodb:DescribeTable",
          "dynamodb:ListTables",
          "dynamodb:ListTagsOfResource",
          "ec2:Describe*",
          "ec2:GetEbsEncryptionByDefault",
          "ecr-public:DescribeRepositories",
          "ecr-public:GetRepositoryCatalogData",
          "ecr-public:GetRepositoryPolicy",
          "ecr-public:ListTagsForResource",
          "ecr:DescribeRepositories",
          "ecr:GetLifecyclePolicy",
          "ecr:GetRepositoryPolicy",
          "ecr:ListTagsForResource",
          "ecs:DescribeClusters",
          "ecs:DescribeServices",
          "ecs:DescribeTaskDefinition",
          "ecs:DescribeTaskSets",
          "ecs:ListClusters",
          "ecs:ListServices",
          "ecs:ListTagsForResource",
          "ecs:ListTaskDefinitionFamilies",
          "ecs:ListTaskDefinitions",
          "eks:DescribeCluster",
          "eks:DescribeNodegroup",
          "eks:ListClusters",
          "eks:ListNodegroups",
          "elasticache:DescribeCacheClusters",
          "elasticache:DescribeCacheParameterGroups",
          "elasticache:DescribeCacheSubnetGroups",
          "elasticache:DescribeReplicationGroups",
          "elasticache:DescribeSnapshots",
          "elasticache:ListTagsForResource",
          "elasticbeanstalk:DescribeConfigurationSettings",
          "elasticbeanstalk:DescribeEnvironments",
          "elasticfilesystem:DescribeAccessPoints",
          "elasticfilesystem:DescribeBackupPolicy",
          "elasticfilesystem:DescribeFileSystemPolicy",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeLifecycleConfiguration",
          "elasticfilesystem:DescribeMountTargets",
          "elasticfilesystem:DescribeMountTargetSecurityGroups",
          "elasticloadbalancing:DescribeListeners",
          "elasticloadbalancing:DescribeLoadBalancerAttributes",
          "elasticloadbalancing:DescribeLoadBalancerPolicies",
          "elasticloadbalancing:DescribeLoadBalancers",
          "elasticloadbalancing:DescribeRules",
          "elasticloadbalancing:DescribeTags",
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:DescribeSecurityConfiguration",
          "elasticmapreduce:DescribeStep",
          "elasticmapreduce:GetBlockPublicAccessConfiguration",
          "elasticmapreduce:GetManagedScalingPolicy",
          "elasticmapreduce:ListClusters",
          "elasticmapreduce:ListInstanceFleets",
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ListInstances",
          "elasticmapreduce:ListSecurityConfigurations",
          "elasticmapreduce:ListSteps",
          "es:DescribeDomain",
          "es:DescribeDomains",
          "es:DescribeElasticsearchDomain",
          "es:DescribeElasticsearchDomains",
          "es:GetCompatibleElasticsearchVersions",
          "es:GetCompatibleVersions",
          "es:ListDomainNames",
          "es:ListTags",
          "firehose:DescribeDeliveryStream",
          "firehose:ListDeliveryStreams",
          "firehose:ListTagsForDeliveryStream",
          "fsx:DescribeFileSystems",
          "globalaccelerator:DescribeAccelerator",
          "globalaccelerator:DescribeEndpointGroup",
          "globalaccelerator:DescribeListener",
          "globalaccelerator:ListAccelerators",
          "globalaccelerator:ListEndpointGroups",
          "globalaccelerator:ListListeners",
          "globalaccelerator:ListTagsForResource",
          "guardduty:GetDetector",
          "guardduty:GetFindings",
          "guardduty:GetMasterAccount",
          "guardduty:ListDetectors",
          "guardduty:ListFindings",
          "iam:GenerateCredentialReport",
          "iam:GetAccountAuthorizationDetails",
          "iam:GetAccountPasswordPolicy",
          "iam:GetAccountSummary",
          "iam:GetCredentialReport",
          "iam:GetGroup",
          "iam:GetGroupPolicy",
          "iam:GetPolicy",
          "iam:GetPolicyVersion",
          "iam:GetRole",
          "iam:GetRolePolicy",
          "iam:GetUser",
          "iam:GetUserPolicy",
          "iam:ListAttachedGroupPolicies",
          "iam:ListAttachedRolePolicies",
          "iam:ListAttachedUserPolicies",
          "iam:ListEntitiesForPolicy",
          "iam:ListGroupPolicies",
          "iam:ListGroupsForUser",
          "iam:ListInstanceProfilesForRole",
          "iam:ListPolicyVersions",
          "iam:ListRolePolicies",
          "iam:ListUserPolicies",
          "iam:ListVirtualMFADevices",
          "kafka:DescribeCluster",
          "kafka:ListClusters",
          "kinesis:DescribeStreamConsumer",
          "kinesis:DescribeStreamSummary",
          "kinesis:ListStreamConsumers",
          "kinesis:ListStreams",
          "kinesis:ListTagsForStream",
          "kms:DescribeKey",
          "kms:GetKeyPolicy",
          "kms:GetKeyRotationStatus",
          "kms:ListKeys",
          "kms:ListResourceTags",
          "lambda:GetAlias",
          "lambda:GetFunction",
          "lambda:GetFunctionCodeSigningConfig",
          "lambda:GetPolicy",
          "lambda:ListAliases",
          "lambda:ListFunctions",
          "lambda:ListVersionsByFunction",
          "logs:DescribeLogGroups",
          "logs:ListTagsLogGroup",
          "network-firewall:DescribeLoggingConfiguration",
          "network-firewall:ListFirewalls",
          "organizations:DescribeOrganization",
          "organizations:DescribePolicy",
          "organizations:ListParents",
          "organizations:ListPoliciesForTarget",
          "rds:DescribeDBClusters",
          "rds:DescribeDBClusterSnapshotAttributes",
          "rds:DescribeDBClusterSnapshots",
          "rds:DescribeDBEngineVersions",
          "rds:DescribeDBInstances",
          "rds:DescribeDBParameterGroups",
          "rds:DescribeDBParameters",
          "rds:DescribeDBSecurityGroups",
          "rds:DescribeDBSnapshotAttributes",
          "rds:DescribeDBSnapshots",
          "rds:DescribeDBSubnetGroups",
          "rds:DescribeEventSubscriptions",
          "rds:DescribeOptionGroups",
          "rds:ListTagsForResource",
          "redshift:DescribeClusterParameterGroups",
          "redshift:DescribeClusterParameters",
          "redshift:DescribeClusters",
          "redshift:DescribeClusterSecurityGroups",
          "redshift:DescribeClusterSnapshots",
          "redshift:DescribeClusterSubnetGroups",
          "redshift:DescribeEventSubscriptions",
          "redshift:DescribeLoggingStatus",
          "route53:GetHealthCheck",
          "route53:GetHostedZone",
          "route53:ListHealthChecks",
          "route53:ListHostedZones",
          "route53:ListHostedZonesByName",
          "route53:ListQueryLoggingConfigs",
          "route53:ListResourceRecordSets",
          "route53:ListTagsForResource",
          "route53resolver:GetResolverEndpoint",
          "route53resolver:GetResolverRule",
          "route53resolver:GetResolverRuleAssociation",
          "route53resolver:ListResolverEndpointIpAddresses",
          "route53resolver:ListResolverEndpoints",
          "route53resolver:ListResolverRuleAssociations",
          "route53resolver:ListResolverRules",
          "route53resolver:ListTagsForResource",
          "s3:GetAccelerateConfiguration",
          "s3:GetAccessPoint",
          "s3:GetAccessPointPolicy",
          "s3:GetAccessPointPolicyStatus",
          "s3:GetAccountPublicAccessBlock",
          "s3:GetBucketAcl",
          "s3:GetBucketCORS",
          "s3:GetBucketLocation",
          "s3:GetBucketLogging",
          "s3:GetBucketNotification",
          "s3:GetBucketObjectLockConfiguration",
          "s3:GetBucketPolicy",
          "s3:GetBucketPublicAccessBlock",
          "s3:GetBucketRequestPayment",
          "s3:GetBucketTagging",
          "s3:GetBucketVersioning",
          "s3:GetBucketWebsite",
          "s3:GetEncryptionConfiguration",
          "s3:GetLifecycleConfiguration",
          "s3:GetObject",
          "s3:GetReplicationConfiguration",
          "s3:ListAccessPoints",
          "s3:ListAllMyBuckets",
          "s3:ListBucket",
          "sagemaker:DescribeCodeRepository",
          "sagemaker:DescribeEndpoint",
          "sagemaker:DescribeEndpointConfig",
          "sagemaker:DescribeModel",
          "sagemaker:DescribeMonitoringSchedule",
          "sagemaker:DescribeNotebookInstance",
          "sagemaker:DescribeNotebookInstanceLifecycleConfig",
          "sagemaker:DescribeWorkteam",
          "sagemaker:ListCodeRepositories",
          "sagemaker:ListEndpointConfigs",
          "sagemaker:ListEndpoints",
          "sagemaker:ListModels",
          "sagemaker:ListMonitoringSchedules",
          "sagemaker:ListNotebookInstanceLifecycleConfigs",
          "sagemaker:ListNotebookInstances",
          "sagemaker:ListTags",
          "sagemaker:ListWorkteams",
          "secretsmanager:ListSecrets",
          "secretsmanager:ListSecretVersionIds",
          "securityhub:DescribeHub",
          "shield:DescribeDRTAccess",
          "shield:DescribeProtection",
          "shield:DescribeSubscription",
          "sns:GetSubscriptionAttributes",
          "sns:GetTopicAttributes",
          "sns:ListSubscriptions",
          "sns:ListSubscriptionsByTopic",
          "sns:ListTagsForResource",
          "sns:ListTopics",
          "sqs:GetQueueAttributes",
          "sqs:ListQueues",
          "sqs:ListQueueTags",
          "ssm:DescribeAutomationExecutions",
          "ssm:DescribeDocument",
          "ssm:DescribeDocumentPermission",
          "ssm:GetAutomationExecution",
          "ssm:GetDocument",
          "ssm:ListDocuments",
          "states:DescribeStateMachine",
          "states:ListStateMachines",
          "states:ListTagsForResource",
          "storagegateway:ListGateways",
          "storagegateway:ListTagsForResource",
          "storagegateway:ListVolumes",
          "support:DescribeCases",
          "tag:GetResources",
          "waf-regional:GetLoggingConfiguration",
          "waf-regional:GetWebACL",
          "waf-regional:GetWebACLForResource",
          "waf:GetLoggingConfiguration",
          "waf:GetWebACL",
          "wafv2:GetLoggingConfiguration"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  }
}